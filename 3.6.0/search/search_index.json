{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Woke","text":"<p>Woke is a Python-based development and testing framework for Solidity.</p>"},{"location":"#features","title":"Features","text":"<ul> <li>testing framework</li> <li>property-based fuzzer</li> <li>vulnerability detectors</li> <li>LSP server</li> </ul>"},{"location":"#installation","title":"Installation","text":"<p>Woke requires Python 3.7 or higher.</p> <p>Warning</p> <p>Python 3.11 is experimentally supported.</p>"},{"location":"#using-pip","title":"Using pip","text":"<pre><code>pip3 install woke\n</code></pre>"},{"location":"#shell-completions","title":"Shell completions","text":"<p>It is possible to enable shell completions for the <code>woke</code> command (does not apply to <code>woke-svm</code>). The instructions depend on the shell you are using.</p> BashZshFish <p>Add the following to your <code>~/.bashrc</code> file:</p> <pre><code>eval \"$(_WOKE_COMPLETE=bash_source woke)\"\n</code></pre> <p>Add the following to your <code>~/.zshrc</code> file:</p> <pre><code>eval \"$(_WOKE_COMPLETE=zsh_source woke)\"\n</code></pre> <p>Add the following to your <code>~/.config/fish/completions/woke.fish</code> file:</p> <pre><code>eval (env _WOKE_COMPLETE=fish_source woke)\n</code></pre>"},{"location":"compilation/","title":"Compilation","text":"<p>Woke comes with default compilation settings that should work for many projects. However, in some cases, it may be necessary to customize the compilation settings.</p> <p>To run the compiler, use: <pre><code>woke compile\n</code></pre></p> <p>The <code>--help</code> flag can be used to display additional options.</p>"},{"location":"compilation/#include-paths","title":"Include paths","text":"<p>Include paths define locations where to search for Solidity files imported using direct (non-relative) import strings. An example of a direct import string is: <pre><code>import \"openzeppelin/contracts/token/ERC20/ERC20.sol\";\n</code></pre></p> <p>The default settings for include paths are: woke.toml<pre><code>[compiler.solc]\ninclude_paths = [\"node_modules\"]\n</code></pre></p> <p>Info</p> <p>Include paths should only be used if path segments (directories in the import string) reflect directories in the file system.</p> <p>For example, if the import string is <code>import \"openzeppelin/contracts/token/ERC20/ERC20.sol\";</code>, but the file is located at <code>node_modules/openzeppelin/src/contracts/token/ERC20/ERC20.sol</code>, then include paths cannot be used because of the <code>src</code> directory in the path.</p>"},{"location":"compilation/#remappings","title":"Remappings","text":"<p>Remappings allow performing a substitution in import strings. More information about remappings can be found in the Solidity documentation.</p> <p>Note</p> <p>It is highly recommended to use include paths instead of remappings whenever possible.</p>"},{"location":"compilation/#foundry-projects","title":"Foundry projects","text":"<p>Include paths typically cannot be used in Foundry projects. The <code>forge remappings</code> command can generate remappings that can be copied into the <code>woke.toml</code> file: <pre><code>$ forge remappings\n@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\n@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\nds-test/=lib/forge-std/lib/ds-test/src/\nforge-std/=lib/forge-std/src/\n</code></pre></p> woke.toml<pre><code>[compiler.solc]\nremappings = [\n\"@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/\",\n\"@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/\",\n\"ds-test/=lib/forge-std/lib/ds-test/src/\",\n\"forge-std/=lib/forge-std/src/\"\n]\n</code></pre>"},{"location":"compilation/#ignore-paths","title":"Ignore paths","text":"<p>Ignore paths define locations where to ignore Solidity files when searching for contracts to compile. Solidity files in these locations will not be compiled unless imported from another non-ignored file.</p> <p>The default settings for ignore paths are: woke.toml<pre><code>[compiler.solc]\nignore_paths = [\"node_modules\", \".woke-build\", \"venv\", \"lib\"]\n</code></pre></p>"},{"location":"compilation/#via-ir","title":"Via IR","text":"<p>The compiler can can generate bytecode by converting the sources to Yul first (<code>Solidity -&gt; Yul -&gt; EVM bytecode</code>) instead of the traditional <code>Solidity -&gt; EVM bytecode</code> approach. See the Solidity documentation for more information.</p> <p>By default, the <code>via_IR</code> config option is left unset, which leaves the decision to the compiler. It can be enabled by setting the option to <code>true</code>: woke.toml<pre><code>[compiler.solc]\nvia_IR = true\n</code></pre></p> <p><code>Stack too deep</code> errors</p> <p>One way to avoid <code>Stack too deep</code> errors is to enable <code>via_IR</code> and the optimizer.</p>"},{"location":"compilation/#optimizer","title":"Optimizer","text":"<p>The compiler can optimize the bytecode generated by the compiler. Woke allows enabling/disabling the optimizer and setting the <code>runs</code> parameter. <code>runs</code> specifies roughly how often each opcode of the deployed code will be executed across the lifetime of the contract. This allows managing a tradeoff between code size and code execution cost.</p> <p>By default, Woke leaves the <code>enabled</code> option unset, which leaves the decision to the compiler. It can be enabled by setting the option to <code>true</code>: woke.toml<pre><code>[compiler.solc.optimizer]\nenabled = true\nruns = 200\n</code></pre></p>"},{"location":"configuration/","title":"Configuration","text":"<p>Woke can be configured using optional configuration files. The global configuration file is loaded from <code>$XDG_CONFIG_HOME/woke/config.toml</code>. If <code>$XDG_CONFIG_HOME</code> is not set, the global configuration file is loaded from:</p> <ul> <li><code>$HOME/.config/woke/config.toml</code> on Linux/MacOS,</li> <li><code>%LOCALAPPDATA%\\woke\\config.toml</code> on Windows.</li> </ul> <p>Additionally, the configuration file for each project can be located in <code>{PROJECT_PATH}/woke.toml</code>.</p> <p>Attention</p> <p>Configuration options loaded from TOML files affect only the behavior of the Woke command-line tool. LSP configuration options are loaded from LSP clients using the standard interface.</p>"},{"location":"configuration/#subconfigs","title":"Subconfigs","text":"<p>Any configuration file can include additional configuration files (subconfigs). These subconfigs are loaded after the original configuration file in the specified order. Subconfig configuration values override the values of the parent configuration file.</p> <p>Example woke.toml</p> <pre><code>subconfigs = [\"loaded_next.toml\", \"../relative.toml\", \"/tmp/absolute.toml\", \"loaded_last.toml\"]\n</code></pre>"},{"location":"configuration/#configuration-options","title":"Configuration options","text":"<p>The resolution order for each configuration option is:</p> <ul> <li>default value,</li> <li>value in the global configuration file,</li> <li>value in the project configuration file.</li> </ul> <p>The latter overrides the former.</p> Default woke.toml <p>Configuration options related to the LSP server are not shown here. <pre><code>subconfigs = []\n[api_keys]\n# etherscan = \"\" (unset - no Etherscan API key)\n# \"goerli.etherscan\" = \"\" (unset - no Goerli Etherscan API key)\n# bscscan = \"\" (unset - no BscScan API key)\n# ...\n[compiler.solc]\nallow_paths = []\n# evm_version = \"\" (unset - let the compiler decide)\nignore_paths = [\"node_modules\", \".woke-build\", \"venv\", \"lib\"]\ninclude_paths = [\"node_modules\"]\nremappings = []\n# target_version = \"\" (unset - use the latest version\n# via_IR = \"\" (unset - let the compiler decide)\n[compiler.solc.optimizer]\n# enabled = \"\" (unset - let the compiler decide)\nruns = 200\n[detectors]\nexclude = []\nignore_paths = [\"node_modules\", \".woke-build\", \"venv\", \"lib\"]\n# only = [] (unset - all detectors are enabled)\n[general]\ncall_trace_options = [\n\"contract_name\", \"function_name\", \"arguments\", \"status\",\n\"call_type\", \"value\", \"return_value\", \"error\"\n]\n[testing]\ncmd = \"anvil\"\ntimeout = 5\n[testing.anvil]\ncmd_args = \"--prune-history 100 --transaction-block-keeper 10 --steps-tracing --silent\"\n[testing.ganache]\ncmd_args = \"-g 0 -k istanbul -q\"\n[testing.hardhat]\ncmd_args = \"\"\n</code></pre></p>"},{"location":"configuration/#api_keys-namespace","title":"<code>api_keys</code> namespace","text":"Option Description <code>etherscan</code> Etherscan API key <code>\"goerli.etherscan\"</code> Goerli Etherscan API key <code>bscscan</code> BscScan API key <code>\"testnet.bscscan\"</code> Testnet BscScan API key <code>polygonscan</code> PolygonScan API key <code>\"mumbai.polygonscan\"</code> Mumbai PolygonScan API key <code>snowtrace</code> Snowtrace API key <code>\"testnet.snowtrace\"</code> Testnet Snowtrace API key <code>\"optimistic.etherscan\"</code> Optimistic Etherscan API key <code>\"goerli-optimism.etherscan\"</code> Goerli Optimism Etherscan API key <code>gnosisscan</code> GnosisScan API key <code>arbiscan</code> Arbiscan API key <code>\"testnet.arbiscan\"</code> Testnet Arbiscan API key <code>\"goerli.basescan\"</code> Goerli BaseScan API key <code>\"sepolia.etherscan\"</code> Sepolia Etherscan API key <code>\"zkevm.polygonscan\"</code> zkEVM PolygonScan API key <code>\"testnet-zkevm.polygonscan\"</code> Testnet zkEVM PolygonScan API key <code>celoscan</code> CeloScan API key <code>\"alfajores.celoscan\"</code> Alfajores CeloScan API key <code>moonscan</code> MoonScan API key <code>\"moonbase.moonscan\"</code> Moonbase MoonScan API key <code>ftmscan</code> FtmScan API key <code>\"testnet.ftmscan\"</code> Testnet FtmScan API key <p>Warning</p> <p>Keep your API keys secret. Store them in the global configuration file or in a separate file included as a subconfig and add this file to <code>.gitignore</code>.</p>"},{"location":"configuration/#compilersolc-namespace","title":"<code>compiler.solc</code> namespace","text":"Option Description <code>allow_paths</code> Allow paths passed to the <code>solc</code> executable <code>evm_version</code> EVM version as specified by the Solidity docs <code>ignore_paths</code> Files in these paths are not compiled unless imported from other non-ignored files <code>include_paths</code> Paths (along with the current working directory) where files from non-relative imports are searched <code>remappings</code> Compiler remappings as specified by the Solidity docs <code>target_version</code> Target <code>solc</code> version used to compile the project <code>via_IR</code> Compile the code via the Yul intermediate language (see the Solidity docs) <p>Info</p> <p>The <code>include_paths</code> option is the preferred way to handle imports of libraries. Remappings should be used only when <code>include_paths</code> cannot be used (e.g. when the import path differs from the system path of the imported file).</p>"},{"location":"configuration/#compilersolcoptimizer-namespace","title":"<code>compiler.solc.optimizer</code> namespace","text":"Option Description <code>enabled</code> Compile the project with solc optimizations enabled. Leaving this unset disables most of the available optimizations. Setting this to <code>false</code> disables all optimizations for Solidity &lt;0.8.6 and has the same behavior as leaving this unset for Solidity &gt;=0.8.6. <code>runs</code> Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage."},{"location":"configuration/#detectors-namespace","title":"<code>detectors</code> namespace","text":"Option Description <code>exclude</code> List of detector IDs (string or number) that should not be enabled. <code>only</code> List of detector IDs (string or number) that should only be enabled. <code>ignore_paths</code> Detections with subdetections in these paths are ignored."},{"location":"configuration/#general-namespace","title":"<code>general</code> namespace","text":"Option Description <code>call_trace_options</code> What information to display in call traces. Possible options: <code>contract_name</code>, <code>address</code>, <code>function_name</code>, <code>arguments</code>, <code>status</code>, <code>call_type</code>, <code>value</code>, <code>gas</code>, <code>sender</code>, <code>return_value</code>, <code>error</code>."},{"location":"configuration/#generatorcontrol_flow_graph-namespace","title":"<code>generator.control_flow_graph</code> namespace","text":"<p>Related to the <code>woke.generate.control_flow_graph</code> LSP command.</p> Option Description Default value <code>direction</code> Graph direction <code>TB</code> <code>vscode_urls</code> Attach VS Code URLs to the graph nodes <code>true</code>"},{"location":"configuration/#generatorinheritance_graph-namespace","title":"<code>generator.inheritance_graph</code> namespace","text":"<p>Related to the <code>woke.generate.inheritance_graph</code> LSP command.</p> Option Description Default value <code>direction</code> Graph direction <code>BT</code> <code>vscode_urls</code> Attach VS Code URLs to the graph nodes <code>true</code>"},{"location":"configuration/#generatorinheritance_graph_full-namespace","title":"<code>generator.inheritance_graph_full</code> namespace","text":"<p>Related to the <code>woke.generate.inheritance_graph_full</code> LSP command.</p> Option Description Default value <code>direction</code> Graph direction <code>BT</code> <code>vscode_urls</code> Attach VS Code URLs to the graph nodes <code>true</code>"},{"location":"configuration/#generatorlinearized_inheritance_graph-namespace","title":"<code>generator.linearized_inheritance_graph</code> namespace","text":"<p>Related to the <code>woke.generate.linearized_inheritance_graph</code> LSP command.</p> Option Description Default value <code>direction</code> Graph direction <code>LR</code> <code>vscode_urls</code> Attach VS Code URLs to the graph nodes <code>true</code>"},{"location":"configuration/#lsp-namespace","title":"<code>lsp</code> namespace","text":"Option Description Default value <code>compilation_delay</code> Delay in seconds before the project is compiled after a keystroke. <code>0</code>"},{"location":"configuration/#lspcode_lens-namespace","title":"<code>lsp.code_lens</code> namespace","text":"Option Description Default value <code>enable</code> Enable LSP code lens language feature. <code>true</code>"},{"location":"configuration/#lspdetectors-namespace","title":"<code>lsp.detectors</code> namespace","text":"Option Description Default value <code>enable</code> Enable vulnerability detectors in the LSP server. <code>true</code>"},{"location":"configuration/#lspfind_references-namespace","title":"<code>lsp.find_references</code> namespace","text":"<p>Configuration options specific to the LSP <code>Find references</code> request.</p> Option Description Default value <code>include_declarations</code> Also include declarations in <code>Find references</code> request results. <code>false</code>"},{"location":"configuration/#testing-namespace","title":"<code>testing</code> namespace","text":"Option Description <code>cmd</code> Development chain implementation to use. May be <code>anvil</code>, <code>hardhat</code> or <code>ganache</code>. <code>timeout</code> Timeout in seconds applied when communicating with the development chain."},{"location":"configuration/#testinganvil-namespace","title":"<code>testing.anvil</code> namespace","text":"Option Description <code>cmd_args</code> Command line arguments passed to the <code>anvil</code> executable when launching it."},{"location":"configuration/#testingganache-namespace","title":"<code>testing.ganache</code> namespace","text":"Option Description <code>cmd_args</code> Command line arguments passed to the <code>ganache</code> executable when launching it."},{"location":"configuration/#testinghardhat-namespace","title":"<code>testing.hardhat</code> namespace","text":"Option Description <code>cmd_args</code> Command line arguments passed to the <code>npx hardhat node</code> command when launching it."},{"location":"contributing/","title":"Contributing","text":""},{"location":"contributing/#creating-a-virtual-environment","title":"Creating a virtual environment","text":""},{"location":"contributing/#using-virtualenvwrapper","title":"Using virtualenvwrapper","text":"<pre><code>mkvirtualenv woke\n</code></pre>"},{"location":"contributing/#using-venv","title":"Using venv","text":"<pre><code>python3 -m venv env\nsource env/bin/activate\n</code></pre>"},{"location":"contributing/#installation","title":"Installation","text":"<pre><code>pip install -e \".[tests,dev]\"\n</code></pre> <p>Pyright, our static type checker, is distributed through npm:</p> <pre><code>npm i -g pyright\n</code></pre>"},{"location":"contributing/#git-hooks","title":"Git hooks","text":"<p>For Unix-like platforms, we provide up git hooks to help with development.</p> <p>After cloning, execute.</p> <pre><code>chmod +x ./setup-githooks.sh\n./setup-githooks.sh\n</code></pre> <p>Git hooks automatically run these commands when you commit:</p> <ul> <li><code>pytest tests -m \"not slow\"</code> when the <code>WOKE_HOOKS_RUN_ALL_TESTS</code> environment variable is not set (<code>pytest tests</code> is run otherwise)</li> <li><code>pyright</code> on Python files being committed</li> <li><code>black</code> on Python files being committed</li> <li><code>isort</code> on Python files being committed</li> <li><code>mkdocs build --strict</code> to make sure the documentation does not contain errors</li> </ul> <p>Any unstaged changes and untracked files are stashed before running the git pre-commit hook. After the commit is made, the stashed changes are popped from the stash. If this leads to a merge conflict, the stashed changes are left at the top of the stash.</p>"},{"location":"detectors/","title":"Vulnerability detectors","text":"<p>Detectors can be run using: <pre><code>woke detect\n</code></pre></p> <p>Or with specified files and directories: <pre><code>woke detect contracts/MyContract.sol tests\n</code></pre></p> Example <code>woke detect</code> output"},{"location":"language-server/","title":"Solidity LSP server","text":"<p>Woke implements an LSP server for Solidity. The only currently supported communication channel is TCP.</p> <p>Woke LSP server can be run using: <pre><code>woke lsp\n</code></pre></p> <p>Or with an optional <code>--port</code> argument (default 65432): <pre><code>woke lsp --port 1234\n</code></pre></p> <p>Info</p> <p>Multi-root workspaces are not currently supported.</p>"},{"location":"language-server/#projects-using-woke-lsp-server","title":"Projects using Woke LSP server","text":"<ul> <li>VS Code Extension</li> </ul>"},{"location":"language-server/#configuration-options","title":"Configuration options","text":"<p>Server configuration options are loaded using the standard interface from LSP clients. The process of setting the configuration options is client specific. Configuration changes are handled by the server, and the project is recompiled if the compilation options change.</p> <p>The full list of supported configuration options can be found in the configuration section.</p> <p>Warning</p> <p>Configuration options are not loaded from <code>woke.toml</code> files by the LSP server.</p>"},{"location":"language-server/#supported-commands","title":"Supported commands","text":"<p>Woke LSP server implements the command execution provider as specified by the LSP specification. The following commands are supported:</p> Command Arguments Description <code>woke.lsp.force_recompile</code> Force recompile the opened project/files. Useful after modifying files outside the IDE (e.g. after installing npm packages). <code>woke.lsp.force_rerun_detectors</code> Force rerun detectors on the opened project/files. <code>woke.generate.control_flow_graph</code> <code>0</code>: URI of the document containing the function<code>1</code>: canonical name of the function Generate a control flow graph for the given function or modifier. Returns the source code of the graph in Graphviz (DOT) format. <code>woke.generate.imports_graph</code> Generate an imports graph for the whole project. A workspace must be opened. Returns the source code of the graph in Graphviz (DOT) format. <code>woke.generate.inheritance_graph</code> <code>0</code>: URI of the document containing the contract<code>1</code>: name of the contract Generate an inheritance graph for the given contract. Returns the source code of the graph in Graphviz (DOT) format. <code>woke.generate.inheritance_graph_full</code> Generate an inheritance graph for the whole project. A workspace must be opened. Returns the source code of the graph in Graphviz (DOT) format. <code>woke.generate.linearized_inheritance_graph</code> <code>0</code>: URI of the document containing the contract<code>1</code>: name of the contract Generate a linearized inheritance graph for the given contract. Returns the source code of the graph in Graphviz (DOT) format."},{"location":"language-server/#features","title":"Features","text":""},{"location":"language-server/#go-to-definition","title":"Go to definition","text":""},{"location":"language-server/#go-to-type-definition","title":"Go to type definition","text":""},{"location":"language-server/#go-to-implementation","title":"Go to implementation","text":"<p>Finds implementations of an unimplemented function or modifier.</p> <p></p>"},{"location":"language-server/#find-references","title":"Find references","text":""},{"location":"language-server/#type-hierarchy","title":"Type hierarchy","text":"<p>Also works for virtual functions.</p> <p></p>"},{"location":"language-server/#document-links","title":"Document links","text":""},{"location":"language-server/#hover","title":"Hover","text":"<p>Includes links to documentation for OpenZeppelin contracts.</p> <p></p>"},{"location":"language-server/#code-lens","title":"Code lens","text":"<p>Number of references is shown above each declaration.</p> <p></p>"},{"location":"language-server/#document-symbols","title":"Document symbols","text":""},{"location":"language-server/#diagnostics","title":"Diagnostics","text":"<p>Together with compiler errors, diagnostics also include results from Woke vulnerability detectors.</p> <p></p> <p></p>"},{"location":"language-server/#rename","title":"Rename","text":""},{"location":"language-server/#debugging","title":"Debugging","text":"<p>Woke LSP server can be debugged using: <pre><code>woke --debug lsp\n</code></pre></p>"},{"location":"solc-version-manager/","title":"Solc Version Manager (SVM)","text":"<p>Woke implements Solc Version Manager (SVM) to manage multiple installations of the solc compiler. Compiler versions are located in <code>$XDG_DATA_HOME/woke/compilers</code>. The default value of <code>$XDG_DATA_HOME</code> is:</p> <ul> <li><code>$HOME/.local/share</code> on Linux/MacOS,</li> <li><code>%LOCALAPPDATA%\\woke</code> on Windows.</li> </ul> <p>The chosen version of solc is available under the <code>woke-solc</code> executable which acts as a wrapper for the solc executable.</p> <p>Example</p> <pre><code>$ woke-solc --version\nsolc, the solidity compiler commandline interface\nVersion: 0.8.15+commit.e14f2714.Linux.g++\n</code></pre> <p>Info</p> <p>solc binaries are downloaded from the Solidity repository which limits the minimum version of solc that can be installed.</p>"},{"location":"solc-version-manager/#commands","title":"Commands","text":"<p>All the listed commands are available under the <code>woke svm</code> subcommand (e.g. <code>woke svm list</code>).</p> Command Description Options <code>install</code> Install the target version of solc. A version range may be provided which results into installation of the latest version matching the range (i.e. <code>woke svm install 0.7</code> installs the version <code>0.7.6</code>). <code>--force</code> reinstall the version even if already installed. <code>list</code> List installed versions of solc. <code>--all</code> list all available versions instead. <code>remove</code> Remove the target installed version of solc. <code>--ignore-missing</code> do not raise an exception if the target  version is not installed. <code>switch</code> Change the selected version of solc to the target version. <code>use</code> Change the selected version of solc to the target version and install it if not already installed. A version range may be provided resulting into installation of the latest version matching the range. <code>--force</code> reinstall the version even if already installed."},{"location":"api-reference/ir/abc/","title":"Abc","text":""},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc","title":"<code>woke.ast.ir.abc.IrAbc</code>  <code>class</code>","text":"<p>         Bases: <code>ABC</code></p> <p>Base class for all IR nodes. Defines attributes and methods that are common to all Solidity and Yul IR nodes.</p> <p>IR model is built on top of the AST (Abstract Syntax Tree) output of the solc compiler.</p> <p>Each IR node is associated with a source code location in a source file. This means that each IR node has a corresponding (typically non-empty) Solidity or Yul source code.</p> <p>Info</p> <p>Yul IR nodes can have empty source code. In the case of Solidity IR nodes, this should not happen.</p> Source code in <code>woke/ast/ir/abc.py</code> <pre><code>class IrAbc(ABC):\n\"\"\"\n    Base class for all IR nodes. Defines attributes and methods that are common to all Solidity and Yul IR nodes.\n    IR model is built on top of the AST (Abstract Syntax Tree) output of the [solc compiler](https://docs.soliditylang.org/en/latest/using-the-compiler.html).\n    Each IR node is associated with a [source code location][woke.ast.ir.abc.IrAbc.byte_location] in a [source file][woke.ast.ir.abc.IrAbc.file].\n    This means that each IR node has a corresponding (typically non-empty) Solidity or Yul [source code][woke.ast.ir.abc.IrAbc.source].\n    !!! info\n        Yul IR nodes can have empty source code. In the case of Solidity IR nodes, this should not happen.\n    \"\"\"\n_file: Path\n_source: bytes\n_ast_node: SolcOrYulNode\n_version_ranges: SolidityVersionRanges\n_parent: Optional[IrAbc]\n_depth: int\n_cu_hash: bytes\n_reference_resolver: ReferenceResolver\ndef __init__(\nself, init: IrInitTuple, solc_node: SolcOrYulNode, parent: Optional[IrAbc]\n):\nself._file = init.file\nself._ast_node = solc_node\nself._version_ranges = init.cu.versions\nself._parent = parent\nif self._parent is not None:\nself._depth = self._parent.ast_tree_depth + 1\nelse:\nself._depth = 0\nself._cu_hash = init.cu.hash\nself._reference_resolver = init.reference_resolver\nsource_start = solc_node.src.byte_offset\nsource_end = source_start + solc_node.src.byte_length\nself._source = init.source[source_start:source_end]\nif source_start != source_end:\ninit.interval_tree[source_start:source_end] = self\ndef __iter__(self) -&gt; Iterator[IrAbc]:\n\"\"\"\n        Yields:\n            Self and (recursively) all child IR nodes.\n        \"\"\"\nyield self\n@property\n@abstractmethod\ndef parent(self) -&gt; Optional[IrAbc]:\n\"\"\"\n        The parent node of this node. Can only be `None` for the root ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) node.\n        Returns:\n            Parent node of this node.\n        \"\"\"\n...\n@property\ndef file(self) -&gt; Path:\n\"\"\"\n        The absolute path to the source file that contains this IR node. For a given IR node, all child and parent nodes have the same file path.\n        Returns:\n            Absolute path to the file containing this node.\n        \"\"\"\nreturn self._file\n@property\n@abstractmethod\ndef ast_node(self) -&gt; SolcOrYulNode:\n...\n@property\ndef cu_hash(self) -&gt; bytes:\nreturn self._cu_hash\n@property\ndef version_ranges(self) -&gt; SolidityVersionRanges:\n\"\"\"\n        !!! example\n            ```python\n            if \"0.8.0\" in node.version_ranges:\n                print(\"The given file can be compiled with solc 0.8.0\")\n            ```\n        Returns:\n            Object listing all `solc` versions that can be used to compile the file containing this node.\n        \"\"\"\nreturn self._version_ranges\n@property\ndef ast_tree_depth(self) -&gt; int:\n\"\"\"\n        The depth of this node in the AST tree. The root node ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) of each file has depth 0. Direct child nodes of a `node` have depth `{node}.ast_tree_depth + 1`.\n        !!! tip\n            Woke uses [interval trees](https://github.com/chaimleib/intervaltree) to get a list of all IR nodes at a given byte offset in a given file. This property can be used to sort these nodes by their depth in the AST tree and (for example) to choose the most nested one.\n        Returns:\n            Depth of this node in the AST tree, starting from 0.\n        \"\"\"\nreturn self._depth\n@property\ndef byte_location(self) -&gt; Tuple[int, int]:\n\"\"\"\n        The start and end byte offsets of this node in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset.\n        `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`.\n        The byte location of a child node is typically a subrange of the byte location of its parent node.\n        !!! info\n            This is not true for [Structured documentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation], where documentation strings must be located before a declaration.\n        Returns:\n            Tuple of the start and end byte offsets of this node in the source file.\n        \"\"\"\nreturn (\nself._ast_node.src.byte_offset,\nself._ast_node.src.byte_offset + self._ast_node.src.byte_length,\n)\n@property\ndef source(self) -&gt; str:\n\"\"\"\n        UTF-8 decoded source code from the [source file][woke.ast.ir.abc.IrAbc.file] at the [byte offset][woke.ast.ir.abc.IrAbc.byte_location] of this node.\n        Returns:\n            Solidity or Yul source code corresponding to this node.\n        \"\"\"\nreturn self._source.decode(\"utf-8\")\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.ast_tree_depth","title":"<code>ast_tree_depth: int</code>  <code>property</code>","text":"<p>The depth of this node in the AST tree. The root node (Source unit) of each file has depth 0. Direct child nodes of a <code>node</code> have depth <code>{node}.ast_tree_depth + 1</code>.</p> <p>Tip</p> <p>Woke uses interval trees to get a list of all IR nodes at a given byte offset in a given file. This property can be used to sort these nodes by their depth in the AST tree and (for example) to choose the most nested one.</p> <p>Returns:</p> Type Description <code>int</code> <p>Depth of this node in the AST tree, starting from 0.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.byte_location","title":"<code>byte_location: Tuple[int, int]</code>  <code>property</code>","text":"<p>The start and end byte offsets of this node in the source file. <code>{node}.byte_location[0]</code> is the start byte offset, <code>{node}.byte_location[1]</code> is the end byte offset.</p> <p><code>{node}.byte_location[1]</code> is always greater than or equal to <code>{node}.byte_location[0]</code>.</p> <p>The byte location of a child node is typically a subrange of the byte location of its parent node.</p> <p>Info</p> <p>This is not true for Structured documentation, where documentation strings must be located before a declaration.</p> <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>Tuple of the start and end byte offsets of this node in the source file.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.file","title":"<code>file: Path</code>  <code>property</code>","text":"<p>The absolute path to the source file that contains this IR node. For a given IR node, all child and parent nodes have the same file path.</p> <p>Returns:</p> Type Description <code>Path</code> <p>Absolute path to the file containing this node.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.parent","title":"<code>parent: Optional[IrAbc]</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>The parent node of this node. Can only be <code>None</code> for the root (Source unit) node.</p> <p>Returns:</p> Type Description <code>Optional[IrAbc]</code> <p>Parent node of this node.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.source","title":"<code>source: str</code>  <code>property</code>","text":"<p>UTF-8 decoded source code from the source file at the byte offset of this node.</p> <p>Returns:</p> Type Description <code>str</code> <p>Solidity or Yul source code corresponding to this node.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.version_ranges","title":"<code>version_ranges: SolidityVersionRanges</code>  <code>property</code>","text":"<p>Example</p> <pre><code>if \"0.8.0\" in node.version_ranges:\nprint(\"The given file can be compiled with solc 0.8.0\")\n</code></pre> <p>Returns:</p> Type Description <code>SolidityVersionRanges</code> <p>Object listing all <code>solc</code> versions that can be used to compile the file containing this node.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.__iter__","title":"<code>__iter__()</code>","text":"<p>Yields:</p> Type Description <code>IrAbc</code> <p>Self and (recursively) all child IR nodes.</p> Source code in <code>woke/ast/ir/abc.py</code> <pre><code>def __iter__(self) -&gt; Iterator[IrAbc]:\n\"\"\"\n    Yields:\n        Self and (recursively) all child IR nodes.\n    \"\"\"\nyield self\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.SolidityAbc","title":"<code>woke.ast.ir.abc.SolidityAbc</code>  <code>class</code>","text":"<p>         Bases: <code>IrAbc</code>, <code>ABC</code></p> <p>Abstract base class for all Solidity IR nodes.</p> Source code in <code>woke/ast/ir/abc.py</code> <pre><code>class SolidityAbc(IrAbc, ABC):\n\"\"\"\n    Abstract base class for all Solidity IR nodes.\n    \"\"\"\n_ast_node: SolcNode\ndef __init__(\nself, init: IrInitTuple, solc_node: SolcNode, parent: Optional[SolidityAbc]\n):\nsuper().__init__(init, solc_node, parent)\nself._reference_resolver.register_node(self, solc_node.id, self._cu_hash)\n@property\ndef ast_node(self) -&gt; SolcNode:\nreturn self._ast_node\n@property\ndef ast_node_id(self) -&gt; int:\nreturn self._ast_node.id\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.yul.abc.YulAbc","title":"<code>woke.ast.ir.yul.abc.YulAbc</code>  <code>class</code>","text":"<p>         Bases: <code>IrAbc</code>, <code>ABC</code></p> <p>Abstract base class for all Yul IR nodes.</p> Source code in <code>woke/ast/ir/yul/abc.py</code> <pre><code>class YulAbc(IrAbc, ABC):\n\"\"\"\n    Abstract base class for all Yul IR nodes.\n    \"\"\"\n_ast_node: YulNode\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\n@property\ndef ast_node(self) -&gt; YulNode:\nreturn self._ast_node\n@property\n# @abstractmethod\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn set()  # TODO\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc","title":"<code>woke.ast.ir.declaration.abc.DeclarationAbc</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code>, <code>ABC</code></p> <p>Abstract base class for all Solidity declarations.</p> Source code in <code>woke/ast/ir/declaration/abc.py</code> <pre><code>class DeclarationAbc(SolidityAbc, ABC):\n\"\"\"\n    Abstract base class for all Solidity declarations.\n    \"\"\"\n_name: str\n_name_location: Optional[Tuple[int, int]]\n_references: Set[\nUnion[\nIdentifier,\nIdentifierPathPart,\nMemberAccess,\nExternalReference,\nUnaryOperation,\nBinaryOperation,\n]\n]\ndef __init__(\nself, init: IrInitTuple, solc_node: SolcDeclarationUnion, parent: SolidityAbc\n):\nsuper().__init__(init, solc_node, parent)\nself._name = solc_node.name\nif solc_node.name_location is None or solc_node.name_location.byte_offset &lt; 0:\nself._name_location = None\nelse:\nself._name_location = (\nsolc_node.name_location.byte_offset,\nsolc_node.name_location.byte_offset\n+ solc_node.name_location.byte_length,\n)\nself._references = set()\ndef register_reference(\nself,\nreference: Union[\nIdentifier,\nIdentifierPathPart,\nMemberAccess,\nExternalReference,\nUnaryOperation,\nBinaryOperation,\n],\n):\nself._references.add(reference)\ndef unregister_reference(\nself,\nreference: Union[\nIdentifier,\nIdentifierPathPart,\nMemberAccess,\nExternalReference,\nUnaryOperation,\nBinaryOperation,\n],\n):\nself._references.remove(reference)\ndef get_all_references(\nself, include_declarations: bool\n) -&gt; Iterator[\nUnion[\nDeclarationAbc,\nUnion[\nIdentifier,\nIdentifierPathPart,\nMemberAccess,\nExternalReference,\nUnaryOperation,\nBinaryOperation,\n],\n]\n]:\nif include_declarations:\nyield self\nyield from self.references\n@abstractmethod\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\n...\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        Returns:\n            User-defined name of the declared object.\n        \"\"\"\nreturn self._name\n@property\n@abstractmethod\ndef canonical_name(self) -&gt; str:\n\"\"\"\n        !!! example\n            `ContractName.StructName.FieldName` in the case of the `FieldName` [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declaration in the following example:\n            ```solidity\n            contract ContractName {\n                struct StructName {\n                    uint FieldName;\n                }\n            }\n            ```\n        Returns:\n            Canonical name of the declared object.\n        \"\"\"\n...\n@property\n@abstractmethod\ndef declaration_string(self) -&gt; str:\n\"\"\"\n        Declaration string that can be used for example in LSP hover. Does not include the declaration body, if any.\n        Does not need to match the actual declaration string in the source code (may use a different order of keywords, for example).\n        !!! example\n            `:::solidity function foo(uint a, uint b) public payable virtual onlyOwner returns (uint)` of the [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration in the following example:\n            ```solidity\n            function foo(uint a, uint b) public onlyOwner virtual payable returns( uint ) {\n                return a + b;\n            }\n            ```\n        Returns:\n            String representation of the declaration.\n        \"\"\"\n...\n@property\ndef name_location(self) -&gt; Tuple[int, int]:\n\"\"\"\n        Similar to [byte_location][woke.ast.ir.abc.IrAbc.byte_location], but returns the location of the declaration name in the source code.\n        Returns:\n            Tuple of the start and end byte offsets of the declaration name in the source code.\n        \"\"\"\nif self._name_location is None:\nself._name_location = self._parse_name_location()\nreturn self._name_location\n@property\ndef references(\nself,\n) -&gt; FrozenSet[\nUnion[\nIdentifier,\nIdentifierPathPart,\nMemberAccess,\nExternalReference,\nUnaryOperation,\nBinaryOperation,\n]\n]:\n\"\"\"\n        Returns:\n            Set of all IR nodes referencing to this declaration.\n        \"\"\"\nreturn frozenset(self._references)\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.canonical_name","title":"<code>canonical_name: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Example</p> <p><code>ContractName.StructName.FieldName</code> in the case of the <code>FieldName</code> VariableDeclaration declaration in the following example: <pre><code>contract ContractName {\nstruct StructName {\nuint FieldName;\n}\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>str</code> <p>Canonical name of the declared object.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.declaration_string","title":"<code>declaration_string: str</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Declaration string that can be used for example in LSP hover. Does not include the declaration body, if any. Does not need to match the actual declaration string in the source code (may use a different order of keywords, for example).</p> <p>Example</p> <p><code>function foo(uint a, uint b) public payable virtual onlyOwner returns (uint)</code> of the FunctionDefinition declaration in the following example: <pre><code>function foo(uint a, uint b) public onlyOwner virtual payable returns( uint ) {\nreturn a + b;\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>str</code> <p>String representation of the declaration.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>User-defined name of the declared object.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.name_location","title":"<code>name_location: Tuple[int, int]</code>  <code>property</code>","text":"<p>Similar to byte_location, but returns the location of the declaration name in the source code.</p> <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>Tuple of the start and end byte offsets of the declaration name in the source code.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.references","title":"<code>references: FrozenSet[Union[Identifier, IdentifierPathPart, MemberAccess, ExternalReference, UnaryOperation, BinaryOperation]]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>FrozenSet[Union[Identifier, IdentifierPathPart, MemberAccess, ExternalReference, UnaryOperation, BinaryOperation]]</code> <p>Set of all IR nodes referencing to this declaration.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc","title":"<code>woke.ast.ir.expression.abc.ExpressionAbc</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code>, <code>ABC</code></p> <p>Abstract base class for all IR expression nodes.</p> <p>Something that has a value.</p> Source code in <code>woke/ast/ir/expression/abc.py</code> <pre><code>class ExpressionAbc(SolidityAbc, ABC):\n\"\"\"\n    Abstract base class for all IR expression nodes.\n    &gt; Something that has a value.\n    \"\"\"\n_type_descriptions: TypeDescriptionsModel\ndef __init__(\nself, init: IrInitTuple, expression: SolcExpressionUnion, parent: SolidityAbc\n):\nsuper().__init__(init, expression, parent)\nself._type_descriptions = expression.type_descriptions\n@staticmethod\ndef from_ast(\ninit: IrInitTuple, expression: SolcExpressionUnion, parent: SolidityAbc\n) -&gt; \"ExpressionAbc\":\nfrom .assignment import Assignment\nfrom .binary_operation import BinaryOperation\nfrom .conditional import Conditional\nfrom .elementary_type_name_expression import ElementaryTypeNameExpression\nfrom .function_call import FunctionCall\nfrom .function_call_options import FunctionCallOptions\nfrom .identifier import Identifier\nfrom .index_access import IndexAccess\nfrom .index_range_access import IndexRangeAccess\nfrom .literal import Literal\nfrom .member_access import MemberAccess\nfrom .new_expression import NewExpression\nfrom .tuple_expression import TupleExpression\nfrom .unary_operation import UnaryOperation\nif isinstance(expression, SolcAssignment):\nreturn Assignment(init, expression, parent)\nelif isinstance(expression, SolcBinaryOperation):\nreturn BinaryOperation(init, expression, parent)\nelif isinstance(expression, SolcConditional):\nreturn Conditional(init, expression, parent)\nelif isinstance(expression, SolcElementaryTypeNameExpression):\nreturn ElementaryTypeNameExpression(init, expression, parent)\nelif isinstance(expression, SolcFunctionCall):\nreturn FunctionCall(init, expression, parent)\nelif isinstance(expression, SolcFunctionCallOptions):\nreturn FunctionCallOptions(init, expression, parent)\nelif isinstance(expression, SolcIdentifier):\nreturn Identifier(init, expression, parent)\nelif isinstance(expression, SolcIndexAccess):\nreturn IndexAccess(init, expression, parent)\nelif isinstance(expression, SolcIndexRangeAccess):\nreturn IndexRangeAccess(init, expression, parent)\nelif isinstance(expression, SolcLiteral):\nreturn Literal(init, expression, parent)\nelif isinstance(expression, SolcMemberAccess):\nreturn MemberAccess(init, expression, parent)\nelif isinstance(expression, SolcNewExpression):\nreturn NewExpression(init, expression, parent)\nelif isinstance(expression, SolcTupleExpression):\nreturn TupleExpression(init, expression, parent)\nelif isinstance(expression, SolcUnaryOperation):\nreturn UnaryOperation(init, expression, parent)\n@property\n@lru_cache(maxsize=2048)\ndef type(self) -&gt; Optional[TypeAbc]:\n\"\"\"\n        Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective].\n        !!! example\n            `Ownable` in the following example has no type information:\n            ```solidity\n            import { Ownable } from './Ownable.sol';\n            ```\n        Returns:\n            Type of the expression.\n        \"\"\"\nif self._type_descriptions.type_identifier is None:\nreturn None\ntype_identifier = StringReader(self._type_descriptions.type_identifier)\nret = TypeAbc.from_type_identifier(\ntype_identifier, self._reference_resolver, self.cu_hash\n)\nassert (\nlen(type_identifier) == 0\n), f\"Failed to parse type_identifier: {self._type_descriptions.type_identifier}\"\nreturn ret\n@property\ndef type_identifier(self) -&gt; Optional[str]:\nreturn self._type_descriptions.type_identifier\n@property\ndef type_string(self) -&gt; Optional[str]:\n\"\"\"\n        !!! example\n            `:::solidity function (uint256,uint256) returns (uint256)` in the case of the `foo` [Identifier][woke.ast.ir.expression.identifier.Identifier] in the `:::solidity foo(1, 2)` expression for the following function:\n            ```solidity\n            function foo(uint a, uint b) public onlyOwner payable virtual onlyOwner returns(uint) {\n                return a + b;\n            }\n            ```\n        Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective].\n        !!! example\n            `Ownable` in the following example has no type information:\n            ```solidity\n            import { Ownable } from './Ownable.sol';\n            ```\n        Returns:\n            User-friendly string describing the expression type.\n        \"\"\"\nreturn self._type_descriptions.type_string\n@property\n@abstractmethod\ndef is_ref_to_state_variable(self) -&gt; bool:\n\"\"\"\n        In many cases it may be useful to know if an [Assignment][woke.ast.ir.expression.assignment.Assignment] to an expression modifies a state variable or not.\n        This may not be straightforward to determine, e.g. if the expression is a [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] or [IndexAccess][woke.ast.ir.expression.index_access.IndexAccess] to a state variable.\n        Returns:\n            `True` if the expression (possibly) is a reference to a state variable.\n        \"\"\"\n...\n@property\n@abstractmethod\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\n\"\"\"\n        Returns:\n            Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified.\n        \"\"\"\n...\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc.is_ref_to_state_variable","title":"<code>is_ref_to_state_variable: bool</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>In many cases it may be useful to know if an Assignment to an expression modifies a state variable or not. This may not be straightforward to determine, e.g. if the expression is a MemberAccess or IndexAccess to a state variable.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the expression (possibly) is a reference to a state variable.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc.modifies_state","title":"<code>modifies_state: Set[Tuple[IrAbc, ModifiesStateFlag]]</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>Set[Tuple[IrAbc, ModifiesStateFlag]]</code> <p>Set of child IR nodes (including <code>self</code>) that modify the blockchain state and flags describing how the state is modified.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc.type","title":"<code>type: Optional[TypeAbc]</code>  <code>cached</code> <code>property</code>","text":"<p>Can be <code>None</code> in case of an Identifier in an ImportDirective.</p> <p>Example</p> <p><code>Ownable</code> in the following example has no type information: <pre><code>import { Ownable } from './Ownable.sol';\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[TypeAbc]</code> <p>Type of the expression.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc.type_string","title":"<code>type_string: Optional[str]</code>  <code>property</code>","text":"<p>Example</p> <p><code>function (uint256,uint256) returns (uint256)</code> in the case of the <code>foo</code> Identifier in the <code>foo(1, 2)</code> expression for the following function: <pre><code>function foo(uint a, uint b) public onlyOwner payable virtual onlyOwner returns(uint) {\nreturn a + b;\n}\n</code></pre></p> <p>Can be <code>None</code> in case of an Identifier in an ImportDirective.</p> <p>Example</p> <p><code>Ownable</code> in the following example has no type information: <pre><code>import { Ownable } from './Ownable.sol';\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>User-friendly string describing the expression type.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc","title":"<code>woke.ast.ir.statement.abc.StatementAbc</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code>, <code>ABC</code></p> <p>Abstract base class for all Solidity statements.</p> Source code in <code>woke/ast/ir/statement/abc.py</code> <pre><code>class StatementAbc(SolidityAbc, ABC):\n\"\"\"\n    Abstract base class for all Solidity statements.\n    \"\"\"\n_documentation: Optional[str]\ndef __init__(\nself, init: IrInitTuple, statement: SolcStatementUnion, parent: SolidityAbc\n):\nsuper().__init__(init, statement, parent)\nself._documentation = statement.documentation\n@staticmethod\ndef from_ast(\ninit: IrInitTuple, statement: SolcStatementUnion, parent: SolidityAbc\n) -&gt; \"StatementAbc\":\nfrom .block import Block\nfrom .break_statement import Break\nfrom .continue_statement import Continue\nfrom .do_while_statement import DoWhileStatement\nfrom .emit_statement import EmitStatement\nfrom .expression_statement import ExpressionStatement\nfrom .for_statement import ForStatement\nfrom .if_statement import IfStatement\nfrom .inline_assembly import InlineAssembly\nfrom .placeholder_statement import PlaceholderStatement\nfrom .return_statement import Return\nfrom .revert_statement import RevertStatement\nfrom .try_statement import TryStatement\nfrom .unchecked_block import UncheckedBlock\nfrom .variable_declaration_statement import VariableDeclarationStatement\nfrom .while_statement import WhileStatement\nif isinstance(statement, SolcBlock):\nreturn Block(init, statement, parent)\nelif isinstance(statement, SolcBreak):\nreturn Break(init, statement, parent)\nelif isinstance(statement, SolcContinue):\nreturn Continue(init, statement, parent)\nelif isinstance(statement, SolcDoWhileStatement):\nreturn DoWhileStatement(init, statement, parent)\nelif isinstance(statement, SolcEmitStatement):\nreturn EmitStatement(init, statement, parent)\nelif isinstance(statement, SolcExpressionStatement):\nreturn ExpressionStatement(init, statement, parent)\nelif isinstance(statement, SolcForStatement):\nreturn ForStatement(init, statement, parent)\nelif isinstance(statement, SolcIfStatement):\nreturn IfStatement(init, statement, parent)\nelif isinstance(statement, SolcInlineAssembly):\nreturn InlineAssembly(init, statement, parent)\nelif isinstance(statement, SolcPlaceholderStatement):\nreturn PlaceholderStatement(init, statement, parent)\nelif isinstance(statement, SolcReturn):\nreturn Return(init, statement, parent)\nelif isinstance(statement, SolcRevertStatement):\nreturn RevertStatement(init, statement, parent)\nelif isinstance(statement, SolcTryStatement):\nreturn TryStatement(init, statement, parent)\nelif isinstance(statement, SolcUncheckedBlock):\nreturn UncheckedBlock(init, statement, parent)\nelif isinstance(statement, SolcVariableDeclarationStatement):\nreturn VariableDeclarationStatement(init, statement, parent)\nelif isinstance(statement, SolcWhileStatement):\nreturn WhileStatement(init, statement, parent)\nassert False, f\"Unknown statement type: {type(statement)}\"\n@property\n@abstractmethod\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\nFunctionDefinition,\nModifierDefinition,\nTryCatchClause,\n]:\n\"\"\"\n        Returns:\n            Parent node of the statement.\n        \"\"\"\n...\n@property\n@abstractmethod\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\n\"\"\"\n        Returns:\n            Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified.\n        \"\"\"\n...\ndef statements_iter(self) -&gt; Iterator[StatementAbc]:\n\"\"\"\n        Yields:\n            Child statements of the statement (recursively) including `self`.\n        \"\"\"\nyield self\n@property\ndef documentation(self) -&gt; Optional[str]:\n\"\"\"\n        Statement documentation strings should be placed above the statement.\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any.\n        \"\"\"\nreturn self._documentation\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc.documentation","title":"<code>documentation: Optional[str]</code>  <code>property</code>","text":"<p>Statement documentation strings should be placed above the statement.</p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>NatSpec documentation string, if any.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc.modifies_state","title":"<code>modifies_state: Set[Tuple[IrAbc, ModifiesStateFlag]]</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>Set[Tuple[IrAbc, ModifiesStateFlag]]</code> <p>Set of child IR nodes (including <code>self</code>) that modify the blockchain state and flags describing how the state is modified.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement, FunctionDefinition, ModifierDefinition, TryCatchClause]</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement, FunctionDefinition, ModifierDefinition, TryCatchClause]</code> <p>Parent node of the statement.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc.statements_iter","title":"<code>statements_iter()</code>","text":"<p>Yields:</p> Type Description <code>StatementAbc</code> <p>Child statements of the statement (recursively) including <code>self</code>.</p> Source code in <code>woke/ast/ir/statement/abc.py</code> <pre><code>def statements_iter(self) -&gt; Iterator[StatementAbc]:\n\"\"\"\n    Yields:\n        Child statements of the statement (recursively) including `self`.\n    \"\"\"\nyield self\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.type_name.abc.TypeNameAbc","title":"<code>woke.ast.ir.type_name.abc.TypeNameAbc</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code>, <code>ABC</code></p> <p>Abstract base class for all IR type name nodes.</p> Source code in <code>woke/ast/ir/type_name/abc.py</code> <pre><code>class TypeNameAbc(SolidityAbc, ABC):\n\"\"\"\n    Abstract base class for all IR type name nodes.\n    \"\"\"\n_type_descriptions: TypeDescriptionsModel\ndef __init__(\nself, init: IrInitTuple, type_name: SolcTypeNameUnion, parent: SolidityAbc\n):\nsuper().__init__(init, type_name, parent)\nself._type_descriptions = type_name.type_descriptions\n@staticmethod\ndef from_ast(\ninit: IrInitTuple, type_name: SolcTypeNameUnion, parent: SolidityAbc\n) -&gt; TypeNameAbc:\nfrom .array_type_name import ArrayTypeName\nfrom .elementary_type_name import ElementaryTypeName\nfrom .function_type_name import FunctionTypeName\nfrom .mapping import Mapping\nfrom .user_defined_type_name import UserDefinedTypeName\nif isinstance(type_name, SolcArrayTypeName):\nreturn ArrayTypeName(init, type_name, parent)\nelif isinstance(type_name, SolcElementaryTypeName):\nreturn ElementaryTypeName(init, type_name, parent)\nelif isinstance(type_name, SolcFunctionTypeName):\nreturn FunctionTypeName(init, type_name, parent)\nelif isinstance(type_name, SolcMapping):\nreturn Mapping(init, type_name, parent)\nelif isinstance(type_name, SolcUserDefinedTypeName):\nreturn UserDefinedTypeName(init, type_name, parent)\n@property\n@abstractmethod\ndef parent(\nself,\n) -&gt; Union[\nVariableDeclaration,\nUserDefinedValueTypeDefinition,\nElementaryTypeNameExpression,\nNewExpression,\nUsingForDirective,\nArrayTypeName,\nMapping,\n]:\n\"\"\"\n        Returns:\n            Parent node of the type name.\n        \"\"\"\n...\n@property\n@lru_cache(maxsize=2048)\ndef type(\nself,\n) -&gt; Union[\nArray,\nAddress,\nBool,\nInt,\nUInt,\nFixed,\nUFixed,\nString,\nBytes,\nFixedBytes,\nType,\nFunction,\nMapping,\nStruct,\nEnum,\nContract,\nUserDefinedValueType,\n]:\n\"\"\"\n        Returns:\n            Type of the type name.\n        \"\"\"\nassert self._type_descriptions.type_identifier is not None\ntype_identifier = StringReader(self._type_descriptions.type_identifier)\nret = TypeAbc.from_type_identifier(\ntype_identifier, self._reference_resolver, self.cu_hash\n)\nassert (\nlen(type_identifier) == 0 and ret is not None\n), f\"Failed to parse type identifier: {self._type_descriptions.type_identifier}\"\nassert isinstance(\nret,\n(\nArray,\nAddress,\nBool,\nInt,\nUInt,\nFixed,\nUFixed,\nString,\nBytes,\nFixedBytes,\nType,\nFunction,\nMapping,\nStruct,\nEnum,\nContract,\nUserDefinedValueType,\n),\n)\nreturn ret\n@property\ndef type_identifier(self) -&gt; str:\nassert self._type_descriptions.type_identifier is not None\nreturn self._type_descriptions.type_identifier\n@property\ndef type_string(self) -&gt; str:\n\"\"\"\n        !!! example\n            `:::solidity mapping(uint256 =&gt; int24[])` in the case of the `:::solidity mapping(uint =&gt; int24[])` type name in the following declaration:\n            ```solidity\n            mapping(uint =&gt; int24[]) map;\n            ```\n        Returns:\n            User-friendly string describing the type name type.\n        \"\"\"\nassert self._type_descriptions.type_string is not None\nreturn self._type_descriptions.type_string\n</code></pre>"},{"location":"api-reference/ir/abc/#woke.ast.ir.type_name.abc.TypeNameAbc.parent","title":"<code>parent: Union[VariableDeclaration, UserDefinedValueTypeDefinition, ElementaryTypeNameExpression, NewExpression, UsingForDirective, ArrayTypeName, Mapping]</code>  <code>abstractmethod</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[VariableDeclaration, UserDefinedValueTypeDefinition, ElementaryTypeNameExpression, NewExpression, UsingForDirective, ArrayTypeName, Mapping]</code> <p>Parent node of the type name.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.type_name.abc.TypeNameAbc.type","title":"<code>type: Union[Array, Address, Bool, Int, UInt, Fixed, UFixed, String, Bytes, FixedBytes, Type, Function, Mapping, Struct, Enum, Contract, UserDefinedValueType]</code>  <code>cached</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Array, Address, Bool, Int, UInt, Fixed, UFixed, String, Bytes, FixedBytes, Type, Function, Mapping, Struct, Enum, Contract, UserDefinedValueType]</code> <p>Type of the type name.</p>"},{"location":"api-reference/ir/abc/#woke.ast.ir.type_name.abc.TypeNameAbc.type_string","title":"<code>type_string: str</code>  <code>property</code>","text":"<p>Example</p> <p><code>mapping(uint256 =&gt; int24[])</code> in the case of the <code>mapping(uint =&gt; int24[])</code> type name in the following declaration: <pre><code>mapping(uint =&gt; int24[]) map;\n</code></pre></p> <p>Returns:</p> Type Description <code>str</code> <p>User-friendly string describing the type name type.</p>"},{"location":"api-reference/ir/enums/","title":"Enums","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums","title":"<code>woke.ast.enums</code>  <code>module</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator","title":"<code>AssignmentOperator</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Assignment operator used in an Assignment expression.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class AssignmentOperator(StrEnum):\n\"\"\"\n    Assignment operator used in an [Assignment][woke.ast.ir.expression.assignment.Assignment] expression.\n    \"\"\"\nEQUALS = r\"=\"\nPLUS_EQUALS = r\"+=\"\nMINUS_EQUALS = r\"-=\"\nTIMES_EQUALS = r\"*=\"\nDIVIDE_EQUALS = r\"/=\"\nMODULO_EQUALS = r\"%=\"\nOR_EQUALS = r\"|=\"\nAND_EQUALS = r\"&amp;=\"\nXOR_EQUALS = r\"^=\"\nRIGHT_SHIFT_EQUALS = r\"&gt;&gt;=\"\nLEFT_SHIFT_EQUALS = r\"&lt;&lt;=\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.AND_EQUALS","title":"<code>AND_EQUALS = '&amp;='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.DIVIDE_EQUALS","title":"<code>DIVIDE_EQUALS = '/='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.EQUALS","title":"<code>EQUALS = '='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.LEFT_SHIFT_EQUALS","title":"<code>LEFT_SHIFT_EQUALS = '&lt;&lt;='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.MINUS_EQUALS","title":"<code>MINUS_EQUALS = '-='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.MODULO_EQUALS","title":"<code>MODULO_EQUALS = '%='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.OR_EQUALS","title":"<code>OR_EQUALS = '|='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.PLUS_EQUALS","title":"<code>PLUS_EQUALS = '+='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.RIGHT_SHIFT_EQUALS","title":"<code>RIGHT_SHIFT_EQUALS = '&gt;&gt;='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.TIMES_EQUALS","title":"<code>TIMES_EQUALS = '*='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.XOR_EQUALS","title":"<code>XOR_EQUALS = '^='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator","title":"<code>BinaryOpOperator</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Binary operation operator used in a BinaryOperation expression.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class BinaryOpOperator(StrEnum):\n\"\"\"\n    Binary operation operator used in a [BinaryOperation][woke.ast.ir.expression.binary_operation.BinaryOperation] expression.\n    \"\"\"\nPLUS = r\"+\"\nMINUS = r\"-\"\nTIMES = r\"*\"\nDIVIDE = r\"/\"\nMODULO = r\"%\"\nEXP = r\"**\"\nBOOLEAN_AND = r\"&amp;&amp;\"\nBOOLEAN_OR = r\"||\"\nNEQ = r\"!=\"\nEQ = r\"==\"\nLT = r\"&lt;\"\nLTE = r\"&lt;=\"\nGT = r\"&gt;\"\nGTE = r\"&gt;=\"\nXOR = r\"^\"\nBITWISE_AND = r\"&amp;\"\nBITWISE_OR = r\"|\"\nLEFT_SHIFT = r\"&lt;&lt;\"\nRIGHT_SHIFT = r\"&gt;&gt;\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.BITWISE_AND","title":"<code>BITWISE_AND = '&amp;'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.BITWISE_OR","title":"<code>BITWISE_OR = '|'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.BOOLEAN_AND","title":"<code>BOOLEAN_AND = '&amp;&amp;'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.BOOLEAN_OR","title":"<code>BOOLEAN_OR = '||'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.DIVIDE","title":"<code>DIVIDE = '/'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.EQ","title":"<code>EQ = '=='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.EXP","title":"<code>EXP = '**'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.GT","title":"<code>GT = '&gt;'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.GTE","title":"<code>GTE = '&gt;='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.LEFT_SHIFT","title":"<code>LEFT_SHIFT = '&lt;&lt;'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.LT","title":"<code>LT = '&lt;'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.LTE","title":"<code>LTE = '&lt;='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.MINUS","title":"<code>MINUS = '-'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.MODULO","title":"<code>MODULO = '%'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.NEQ","title":"<code>NEQ = '!='</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.PLUS","title":"<code>PLUS = '+'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.RIGHT_SHIFT","title":"<code>RIGHT_SHIFT = '&gt;&gt;'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.TIMES","title":"<code>TIMES = '*'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.XOR","title":"<code>XOR = '^'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ContractKind","title":"<code>ContractKind</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Kind of a ContractDefinition declaration node.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class ContractKind(StrEnum):\n\"\"\"\n    Kind of a [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] declaration node.\n    \"\"\"\nCONTRACT = \"contract\"\nINTERFACE = \"interface\"\nLIBRARY = \"library\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.ContractKind.CONTRACT","title":"<code>CONTRACT = 'contract'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ContractKind.INTERFACE","title":"<code>INTERFACE = 'interface'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ContractKind.LIBRARY","title":"<code>LIBRARY = 'library'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation","title":"<code>DataLocation</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Data location of a VariableDeclaration node. It also specifies the data location of the following types:</p> <ul> <li>Array,</li> <li>Bytes,</li> <li>String,</li> <li>Struct.</li> </ul> Source code in <code>woke/ast/enums.py</code> <pre><code>class DataLocation(StrEnum):\n\"\"\"\n    Data location of a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] node.\n    It also specifies the data location of the following types:\n    - [Array][woke.ast.types.Array],\n    - [Bytes][woke.ast.types.Bytes],\n    - [String][woke.ast.types.String],\n    - [Struct][woke.ast.types.Struct].\n    \"\"\"\nCALLDATA = \"calldata\"\nDEFAULT = \"default\"\n\"\"\"\n    Set only in [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] nodes when the data location is not specified (and the compiler even does not allow it).\n    \"\"\"\nMEMORY = \"memory\"\nSTORAGE = \"storage\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation.CALLDATA","title":"<code>CALLDATA = 'calldata'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation.DEFAULT","title":"<code>DEFAULT = 'default'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Set only in VariableDeclaration nodes when the data location is not specified (and the compiler even does not allow it).</p>"},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation.MEMORY","title":"<code>MEMORY = 'memory'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation.STORAGE","title":"<code>STORAGE = 'storage'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionCallKind","title":"<code>FunctionCallKind</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Kind of a FunctionCall expression node.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class FunctionCallKind(StrEnum):\n\"\"\"\n    Kind of a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] expression node.\n    \"\"\"\nFUNCTION_CALL = \"functionCall\"\n\"\"\"\n    Represents also an error call, event call and [NewExpression][woke.ast.ir.expression.new_expression.NewExpression] call.\n    \"\"\"\nTYPE_CONVERSION = \"typeConversion\"\nSTRUCT_CONSTRUCTOR_CALL = \"structConstructorCall\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionCallKind.FUNCTION_CALL","title":"<code>FUNCTION_CALL = 'functionCall'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Represents also an error call, event call and NewExpression call.</p>"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionCallKind.STRUCT_CONSTRUCTOR_CALL","title":"<code>STRUCT_CONSTRUCTOR_CALL = 'structConstructorCall'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionCallKind.TYPE_CONVERSION","title":"<code>TYPE_CONVERSION = 'typeConversion'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind","title":"<code>FunctionKind</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Kind of a FunctionDefinition declaration node.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class FunctionKind(StrEnum):\n\"\"\"\n    Kind of a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration node.\n    \"\"\"\nFUNCTION = \"function\"\nRECEIVE = \"receive\"\nCONSTRUCTOR = \"constructor\"\nFALLBACK = \"fallback\"\nFREE_FUNCTION = \"freeFunction\"\n\"\"\"\n    Function defined outside of a contract.\n    \"\"\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.CONSTRUCTOR","title":"<code>CONSTRUCTOR = 'constructor'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.FALLBACK","title":"<code>FALLBACK = 'fallback'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.FREE_FUNCTION","title":"<code>FREE_FUNCTION = 'freeFunction'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":"<p>Function defined outside of a contract.</p>"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.FUNCTION","title":"<code>FUNCTION = 'function'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.RECEIVE","title":"<code>RECEIVE = 'receive'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind","title":"<code>FunctionTypeKind</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Kind of a Function type.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class FunctionTypeKind(StrEnum):\n\"\"\"\n    Kind of a [Function][woke.ast.types.Function] type.\n    \"\"\"\nDECLARATION = \"declaration\"\nINTERNAL = \"internal\"\nEXTERNAL = \"external\"\nDELEGATE_CALL = \"delegatecall\"\nBARE_CALL = \"barecall\"\nBARE_CALL_CODE = \"barecallcode\"\nBARE_DELEGATE_CALL = \"baredelegatecall\"\nBARE_STATIC_CALL = \"barestaticcall\"\nCREATION = \"creation\"\nSEND = \"send\"\nTRANSFER = \"transfer\"\nKECCAK256 = \"keccak256\"\nSELFDESTRUCT = \"selfdestruct\"\nREVERT = \"revert\"\nEC_RECOVER = \"ecrecover\"\nSHA256 = \"sha256\"\nRIPEMD160 = \"ripemd160\"\nLOG0 = \"log0\"\nLOG1 = \"log1\"\nLOG2 = \"log2\"\nLOG3 = \"log3\"\nLOG4 = \"log4\"\nGAS_LEFT = \"gasleft\"\nEVENT = \"event\"\nERROR = \"error\"\nWRAP = \"wrap\"\nUNWRAP = \"unwrap\"\nSET_GAS = \"setgas\"\nSET_VALUE = \"setvalue\"\nBLOCK_HASH = \"blockhash\"\nADD_MOD = \"addmod\"\nMUL_MOD = \"mulmod\"\nARRAY_PUSH = \"arraypush\"\nARRAY_POP = \"arraypop\"\nBYTE_ARRAY_PUSH = \"bytearraypush\"\nBYTES_CONCAT = \"bytesconcat\"\nSTRING_CONCAT = \"stringconcat\"\nOBJECT_CREATION = \"objectcreation\"\nASSERT = \"assert\"\nREQUIRE = \"require\"\nABI_ENCODE = \"abiencode\"\nABI_ENCODE_PACKED = \"abiencodepacked\"\nABI_ENCODE_WITH_SELECTOR = \"abiencodewithselector\"\nABI_ENCODE_CALL = \"abiencodecall\"\nABI_ENCODE_WITH_SIGNATURE = \"abiencodewithsignature\"\nABI_DECODE = \"abidecode\"\nMETA_TYPE = \"metatype\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_DECODE","title":"<code>ABI_DECODE = 'abidecode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE","title":"<code>ABI_ENCODE = 'abiencode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE_CALL","title":"<code>ABI_ENCODE_CALL = 'abiencodecall'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE_PACKED","title":"<code>ABI_ENCODE_PACKED = 'abiencodepacked'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE_WITH_SELECTOR","title":"<code>ABI_ENCODE_WITH_SELECTOR = 'abiencodewithselector'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE_WITH_SIGNATURE","title":"<code>ABI_ENCODE_WITH_SIGNATURE = 'abiencodewithsignature'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ADD_MOD","title":"<code>ADD_MOD = 'addmod'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ARRAY_POP","title":"<code>ARRAY_POP = 'arraypop'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ARRAY_PUSH","title":"<code>ARRAY_PUSH = 'arraypush'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ASSERT","title":"<code>ASSERT = 'assert'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BARE_CALL","title":"<code>BARE_CALL = 'barecall'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BARE_CALL_CODE","title":"<code>BARE_CALL_CODE = 'barecallcode'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BARE_DELEGATE_CALL","title":"<code>BARE_DELEGATE_CALL = 'baredelegatecall'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BARE_STATIC_CALL","title":"<code>BARE_STATIC_CALL = 'barestaticcall'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BLOCK_HASH","title":"<code>BLOCK_HASH = 'blockhash'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BYTES_CONCAT","title":"<code>BYTES_CONCAT = 'bytesconcat'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BYTE_ARRAY_PUSH","title":"<code>BYTE_ARRAY_PUSH = 'bytearraypush'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.CREATION","title":"<code>CREATION = 'creation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.DECLARATION","title":"<code>DECLARATION = 'declaration'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.DELEGATE_CALL","title":"<code>DELEGATE_CALL = 'delegatecall'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.EC_RECOVER","title":"<code>EC_RECOVER = 'ecrecover'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ERROR","title":"<code>ERROR = 'error'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.EVENT","title":"<code>EVENT = 'event'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.EXTERNAL","title":"<code>EXTERNAL = 'external'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.GAS_LEFT","title":"<code>GAS_LEFT = 'gasleft'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.INTERNAL","title":"<code>INTERNAL = 'internal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.KECCAK256","title":"<code>KECCAK256 = 'keccak256'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG0","title":"<code>LOG0 = 'log0'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG1","title":"<code>LOG1 = 'log1'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG2","title":"<code>LOG2 = 'log2'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG3","title":"<code>LOG3 = 'log3'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG4","title":"<code>LOG4 = 'log4'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.META_TYPE","title":"<code>META_TYPE = 'metatype'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.MUL_MOD","title":"<code>MUL_MOD = 'mulmod'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.OBJECT_CREATION","title":"<code>OBJECT_CREATION = 'objectcreation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.REQUIRE","title":"<code>REQUIRE = 'require'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.REVERT","title":"<code>REVERT = 'revert'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.RIPEMD160","title":"<code>RIPEMD160 = 'ripemd160'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SELFDESTRUCT","title":"<code>SELFDESTRUCT = 'selfdestruct'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SEND","title":"<code>SEND = 'send'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SET_GAS","title":"<code>SET_GAS = 'setgas'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SET_VALUE","title":"<code>SET_VALUE = 'setvalue'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SHA256","title":"<code>SHA256 = 'sha256'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.STRING_CONCAT","title":"<code>STRING_CONCAT = 'stringconcat'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.TRANSFER","title":"<code>TRANSFER = 'transfer'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.UNWRAP","title":"<code>UNWRAP = 'unwrap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.WRAP","title":"<code>WRAP = 'wrap'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum","title":"<code>GlobalSymbolsEnum</code>  <code>class</code>","text":"<p>         Bases: <code>IntEnum</code></p> <p>Global symbols of the Solidity language. Symbols with identifiers from <code>-1</code> to <code>-99</code> are codified by the compiler and can only be referenced by Identifier nodes. Other symbols are not officially codified by the compiler, but Woke also defines identifiers for them. These symbols can only be referenced by MemberAccess nodes. See the Solidity docs for (an incomplete) list of global symbols and their descriptions.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class GlobalSymbolsEnum(IntEnum):\n\"\"\"\n    Global symbols of the Solidity language. Symbols with identifiers from `-1` to `-99` are codified by the compiler and can only be referenced by [Identifier][woke.ast.ir.expression.identifier.Identifier] nodes.\n    Other symbols are not officially codified by the compiler, but Woke also defines identifiers for them. These symbols can only be referenced by [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] nodes.\n    See the [Solidity docs](https://docs.soliditylang.org/en/latest/units-and-global-variables.html#special-variables-and-functions) for (an incomplete) list of global symbols and their descriptions.\n    \"\"\"\nABI = -1\nADDMOD = -2\nASSERT = -3\nBLOCK = -4\nBLOCKHASH = -5\nECRECOVER = -6\nGASLEFT = -7\nKECCAK256 = -8\nMSG = -15\nMULMOD = -16\nNOW = -17\nREQUIRE = -18\nREVERT = -19\nRIPEMD160 = -20\nSELFDESTRUCT = -21\nSHA256 = -22\nSHA3 = -23\nSUICIDE = -24\nSUPER = -25\nTX = -26\nTYPE = -27\nTHIS = -28\nBLOCK_BASEFEE = -100\nBLOCK_CHAINID = -101\nBLOCK_COINBASE = -102\nBLOCK_DIFFICULTY = -103\nBLOCK_GASLIMIT = -104\nBLOCK_NUMBER = -105\nBLOCK_TIMESTAMP = -106\nBLOCK_PREVRANDAO = -107\nMSG_DATA = -200\nMSG_SENDER = -201\nMSG_SIG = -202\nMSG_VALUE = -203\nTX_GASPRICE = -300\nTX_ORIGIN = -301\nABI_DECODE = -400\nABI_ENCODE = -401\nABI_ENCODE_PACKED = -402\nABI_ENCODE_WITH_SELECTOR = -403\nABI_ENCODE_WITH_SIGNATURE = -404\nABI_ENCODE_CALL = -405\nBYTES_CONCAT = -500\nBYTES_LENGTH = -501\nBYTES_PUSH = -502\nSTRING_CONCAT = -600\nADDRESS_BALANCE = -700\nADDRESS_CODE = -701\nADDRESS_CODEHASH = -702\nADDRESS_TRANSFER = -703\nADDRESS_SEND = -704\nADDRESS_CALL = -705\nADDRESS_DELEGATECALL = -706\nADDRESS_STATICCALL = -707\n# available for contracts and interfaces\nTYPE_NAME = -800\nTYPE_CREATION_CODE = -801\nTYPE_RUNTIME_CODE = -802\n# available for interfaces only\nTYPE_INTERFACE_ID = -803\n# available for integers\nTYPE_MIN = -804\nTYPE_MAX = -805\nARRAY_LENGTH = -900\nARRAY_PUSH = -901\nARRAY_POP = -902\nFUNCTION_SELECTOR = -1000\nFUNCTION_VALUE = -1001\nFUNCTION_GAS = -1002\nFUNCTION_ADDRESS = -1003\nUSER_DEFINED_VALUE_TYPE_WRAP = -1100\nUSER_DEFINED_VALUE_TYPE_UNWRAP = -1101\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI","title":"<code>ABI = -1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_DECODE","title":"<code>ABI_DECODE = -400</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE","title":"<code>ABI_ENCODE = -401</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE_CALL","title":"<code>ABI_ENCODE_CALL = -405</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE_PACKED","title":"<code>ABI_ENCODE_PACKED = -402</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE_WITH_SELECTOR","title":"<code>ABI_ENCODE_WITH_SELECTOR = -403</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE_WITH_SIGNATURE","title":"<code>ABI_ENCODE_WITH_SIGNATURE = -404</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDMOD","title":"<code>ADDMOD = -2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_BALANCE","title":"<code>ADDRESS_BALANCE = -700</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_CALL","title":"<code>ADDRESS_CALL = -705</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_CODE","title":"<code>ADDRESS_CODE = -701</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_CODEHASH","title":"<code>ADDRESS_CODEHASH = -702</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_DELEGATECALL","title":"<code>ADDRESS_DELEGATECALL = -706</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_SEND","title":"<code>ADDRESS_SEND = -704</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_STATICCALL","title":"<code>ADDRESS_STATICCALL = -707</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_TRANSFER","title":"<code>ADDRESS_TRANSFER = -703</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ARRAY_LENGTH","title":"<code>ARRAY_LENGTH = -900</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ARRAY_POP","title":"<code>ARRAY_POP = -902</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ARRAY_PUSH","title":"<code>ARRAY_PUSH = -901</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ASSERT","title":"<code>ASSERT = -3</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK","title":"<code>BLOCK = -4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCKHASH","title":"<code>BLOCKHASH = -5</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_BASEFEE","title":"<code>BLOCK_BASEFEE = -100</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_CHAINID","title":"<code>BLOCK_CHAINID = -101</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_COINBASE","title":"<code>BLOCK_COINBASE = -102</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_DIFFICULTY","title":"<code>BLOCK_DIFFICULTY = -103</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_GASLIMIT","title":"<code>BLOCK_GASLIMIT = -104</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_NUMBER","title":"<code>BLOCK_NUMBER = -105</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_PREVRANDAO","title":"<code>BLOCK_PREVRANDAO = -107</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_TIMESTAMP","title":"<code>BLOCK_TIMESTAMP = -106</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BYTES_CONCAT","title":"<code>BYTES_CONCAT = -500</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BYTES_LENGTH","title":"<code>BYTES_LENGTH = -501</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BYTES_PUSH","title":"<code>BYTES_PUSH = -502</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ECRECOVER","title":"<code>ECRECOVER = -6</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.FUNCTION_ADDRESS","title":"<code>FUNCTION_ADDRESS = -1003</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.FUNCTION_GAS","title":"<code>FUNCTION_GAS = -1002</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.FUNCTION_SELECTOR","title":"<code>FUNCTION_SELECTOR = -1000</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.FUNCTION_VALUE","title":"<code>FUNCTION_VALUE = -1001</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.GASLEFT","title":"<code>GASLEFT = -7</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.KECCAK256","title":"<code>KECCAK256 = -8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG","title":"<code>MSG = -15</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG_DATA","title":"<code>MSG_DATA = -200</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG_SENDER","title":"<code>MSG_SENDER = -201</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG_SIG","title":"<code>MSG_SIG = -202</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG_VALUE","title":"<code>MSG_VALUE = -203</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MULMOD","title":"<code>MULMOD = -16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.NOW","title":"<code>NOW = -17</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.REQUIRE","title":"<code>REQUIRE = -18</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.REVERT","title":"<code>REVERT = -19</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.RIPEMD160","title":"<code>RIPEMD160 = -20</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SELFDESTRUCT","title":"<code>SELFDESTRUCT = -21</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SHA256","title":"<code>SHA256 = -22</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SHA3","title":"<code>SHA3 = -23</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.STRING_CONCAT","title":"<code>STRING_CONCAT = -600</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SUICIDE","title":"<code>SUICIDE = -24</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SUPER","title":"<code>SUPER = -25</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.THIS","title":"<code>THIS = -28</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TX","title":"<code>TX = -26</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TX_GASPRICE","title":"<code>TX_GASPRICE = -300</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TX_ORIGIN","title":"<code>TX_ORIGIN = -301</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE","title":"<code>TYPE = -27</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_CREATION_CODE","title":"<code>TYPE_CREATION_CODE = -801</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_INTERFACE_ID","title":"<code>TYPE_INTERFACE_ID = -803</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_MAX","title":"<code>TYPE_MAX = -805</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_MIN","title":"<code>TYPE_MIN = -804</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_NAME","title":"<code>TYPE_NAME = -800</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_RUNTIME_CODE","title":"<code>TYPE_RUNTIME_CODE = -802</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.USER_DEFINED_VALUE_TYPE_UNWRAP","title":"<code>USER_DEFINED_VALUE_TYPE_UNWRAP = -1101</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.USER_DEFINED_VALUE_TYPE_WRAP","title":"<code>USER_DEFINED_VALUE_TYPE_WRAP = -1100</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion","title":"<code>InlineAssemblyEvmVersion</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> Source code in <code>woke/ast/enums.py</code> <pre><code>class InlineAssemblyEvmVersion(StrEnum):\nHOMESTEAD = \"homestead\"\nTANGERINE_WHISTLE = \"tangerineWhistle\"\nSPURIOUS_DRAGON = \"spuriousDragon\"\nBYZANTIUM = \"byzantium\"\nCONSTANTINOPLE = \"constantinople\"\nPETERSBURG = \"petersburg\"\nISTANBUL = \"istanbul\"\nBERLIN = \"berlin\"\nLONDON = \"london\"\nPARIS = \"paris\"\nSHANGHAI = \"shanghai\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.BERLIN","title":"<code>BERLIN = 'berlin'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.BYZANTIUM","title":"<code>BYZANTIUM = 'byzantium'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.CONSTANTINOPLE","title":"<code>CONSTANTINOPLE = 'constantinople'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.HOMESTEAD","title":"<code>HOMESTEAD = 'homestead'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.ISTANBUL","title":"<code>ISTANBUL = 'istanbul'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.LONDON","title":"<code>LONDON = 'london'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.PARIS","title":"<code>PARIS = 'paris'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.PETERSBURG","title":"<code>PETERSBURG = 'petersburg'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.SHANGHAI","title":"<code>SHANGHAI = 'shanghai'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.SPURIOUS_DRAGON","title":"<code>SPURIOUS_DRAGON = 'spuriousDragon'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.TANGERINE_WHISTLE","title":"<code>TANGERINE_WHISTLE = 'tangerineWhistle'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyFlag","title":"<code>InlineAssemblyFlag</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> Source code in <code>woke/ast/enums.py</code> <pre><code>class InlineAssemblyFlag(StrEnum):\nMEMORY_SAFE = \"memory-safe\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyFlag.MEMORY_SAFE","title":"<code>MEMORY_SAFE = 'memory-safe'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix","title":"<code>InlineAssemblySuffix</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> Source code in <code>woke/ast/enums.py</code> <pre><code>class InlineAssemblySuffix(StrEnum):\nSLOT = \"slot\"\nOFFSET = \"offset\"\nLENGTH = \"length\"\nADDRESS = \"address\"\nSELECTOR = \"selector\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.ADDRESS","title":"<code>ADDRESS = 'address'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.LENGTH","title":"<code>LENGTH = 'length'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.OFFSET","title":"<code>OFFSET = 'offset'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.SELECTOR","title":"<code>SELECTOR = 'selector'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.SLOT","title":"<code>SLOT = 'slot'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind","title":"<code>LiteralKind</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Kind of a Literal expression node.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class LiteralKind(StrEnum):\n\"\"\"\n    Kind of a [Literal][woke.ast.ir.expression.literal.Literal] expression node.\n    \"\"\"\nBOOL = \"bool\"\nNUMBER = \"number\"\nSTRING = \"string\"\nHEX_STRING = \"hexString\"\nUNICODE_STRING = \"unicodeString\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.BOOL","title":"<code>BOOL = 'bool'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.HEX_STRING","title":"<code>HEX_STRING = 'hexString'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.NUMBER","title":"<code>NUMBER = 'number'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.STRING","title":"<code>STRING = 'string'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.UNICODE_STRING","title":"<code>UNICODE_STRING = 'unicodeString'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind","title":"<code>MagicTypeKind</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Kind of a Magic type.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class MagicTypeKind(StrEnum):\n\"\"\"\n    Kind of a [Magic][woke.ast.types.Magic] type.\n    \"\"\"\nBLOCK = \"block\"\nMESSAGE = \"message\"\nTRANSACTION = \"transaction\"\nABI = \"abi\"\nMETA_TYPE = \"meta_type\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.ABI","title":"<code>ABI = 'abi'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.BLOCK","title":"<code>BLOCK = 'block'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.MESSAGE","title":"<code>MESSAGE = 'message'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.META_TYPE","title":"<code>META_TYPE = 'meta_type'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.TRANSACTION","title":"<code>TRANSACTION = 'transaction'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifierInvocationKind","title":"<code>ModifierInvocationKind</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Kind of a ModifierInvocation meta node.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class ModifierInvocationKind(StrEnum):\n\"\"\"\n    Kind of a [ModifierInvocation][woke.ast.ir.meta.modifier_invocation.ModifierInvocation] meta node.\n    \"\"\"\nMODIFIER_INVOCATION = \"modifierInvocation\"\nBASE_CONSTRUCTOR_SPECIFIER = \"baseConstructorSpecifier\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER","title":"<code>BASE_CONSTRUCTOR_SPECIFIER = 'baseConstructorSpecifier'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION","title":"<code>MODIFIER_INVOCATION = 'modifierInvocation'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag","title":"<code>ModifiesStateFlag</code>  <code>class</code>","text":"<p>         Bases: <code>IntFlag</code></p> <p>Flag enum describing how an expression (ExpressionAbc) or statement (StatementAbc) modifies the blockchain state.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class ModifiesStateFlag(IntFlag):\n\"\"\"\n    Flag enum describing how an expression ([ExpressionAbc][woke.ast.ir.expression.abc.ExpressionAbc]) or statement ([StatementAbc][woke.ast.ir.statement.abc.StatementAbc]) modifies the blockchain state.\n    \"\"\"\nMODIFIES_STATE_VAR = 1\nEMITS = 2\nSENDS_ETHER = 4\nDEPLOYS_CONTRACT = 8\nSELFDESTRUCTS = 16\nPERFORMS_CALL = 32\nPERFORMS_DELEGATECALL = 64\nCALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION = 128\nCALLS_UNIMPLEMENTED_PAYABLE_FUNCTION = 256\ndef __repr__(self):\nif self.value == 0:\nreturn f\"{self.__class__.__name__}(0)\"\nflags = [f for f in self.__class__ if f in self]\nreturn \" | \".join(f.name or \"\" for f in flags)\n__str__ = __repr__\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION","title":"<code>CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION = 128</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION","title":"<code>CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION = 256</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.DEPLOYS_CONTRACT","title":"<code>DEPLOYS_CONTRACT = 8</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.EMITS","title":"<code>EMITS = 2</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.MODIFIES_STATE_VAR","title":"<code>MODIFIES_STATE_VAR = 1</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.PERFORMS_CALL","title":"<code>PERFORMS_CALL = 32</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.PERFORMS_DELEGATECALL","title":"<code>PERFORMS_DELEGATECALL = 64</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.SELFDESTRUCTS","title":"<code>SELFDESTRUCTS = 16</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.SENDS_ETHER","title":"<code>SENDS_ETHER = 4</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.Mutability","title":"<code>Mutability</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Mutability of a VariableDeclaration declaration node.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class Mutability(StrEnum):\n\"\"\"\n    Mutability of a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declaration node.\n    \"\"\"\nMUTABLE = \"mutable\"\nIMMUTABLE = \"immutable\"\nCONSTANT = \"constant\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.Mutability.CONSTANT","title":"<code>CONSTANT = 'constant'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.Mutability.IMMUTABLE","title":"<code>IMMUTABLE = 'immutable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.Mutability.MUTABLE","title":"<code>MUTABLE = 'mutable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability","title":"<code>StateMutability</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>State mutability of:</p> <ul> <li>Function type,</li> <li>FunctionDefinition declaration,</li> <li>ElementaryTypeName and FunctionTypeName type names.</li> </ul> <p>In the case of ElementaryTypeName, the state mutability is specified only for the <code>address</code> type and can be either NONPAYABLE or PAYABLE.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class StateMutability(StrEnum):\n\"\"\"\n    State mutability of:\n    - [Function][woke.ast.types.Function] type,\n    - [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration,\n    - [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName] and [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] type names.\n    In the case of [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName], the state mutability is specified only for the `address` type and can be either [NONPAYABLE][woke.ast.enums.StateMutability.NONPAYABLE] or [PAYABLE][woke.ast.enums.StateMutability.PAYABLE].\n    \"\"\"\nPAYABLE = \"payable\"\nPURE = \"pure\"\nNONPAYABLE = \"nonpayable\"\nVIEW = \"view\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability.NONPAYABLE","title":"<code>NONPAYABLE = 'nonpayable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability.PAYABLE","title":"<code>PAYABLE = 'payable'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability.PURE","title":"<code>PURE = 'pure'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability.VIEW","title":"<code>VIEW = 'view'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator","title":"<code>UnaryOpOperator</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Unary operation operator used in an UnaryOperation expression.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class UnaryOpOperator(StrEnum):\n\"\"\"\n    Unary operation operator used in an [UnaryOperation][woke.ast.ir.expression.unary_operation.UnaryOperation] expression.\n    \"\"\"\nPLUS_PLUS = r\"++\"\nMINUS_MINUS = r\"--\"\nMINUS = r\"-\"\nNOT = r\"!\"\nTILDE = r\"~\"\nDELETE = \"delete\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.DELETE","title":"<code>DELETE = 'delete'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.MINUS","title":"<code>MINUS = '-'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.MINUS_MINUS","title":"<code>MINUS_MINUS = '--'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.NOT","title":"<code>NOT = '!'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.PLUS_PLUS","title":"<code>PLUS_PLUS = '++'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.TILDE","title":"<code>TILDE = '~'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility","title":"<code>Visibility</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Visibility of:</p> <ul> <li>FunctionTypeName type name,</li> <li>FunctionDefinition, ModifierDefinition, StructDefinition and VariableDeclaration declarations.</li> </ul> Source code in <code>woke/ast/enums.py</code> <pre><code>class Visibility(StrEnum):\n\"\"\"\n    Visibility of:\n    - [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] type name,\n    - [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition], [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition], [StructDefinition][woke.ast.ir.declaration.struct_definition.StructDefinition] and [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declarations.\n    \"\"\"\nEXTERNAL = \"external\"\nPUBLIC = \"public\"\nINTERNAL = \"internal\"\nPRIVATE = \"private\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility.EXTERNAL","title":"<code>EXTERNAL = 'external'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility.INTERNAL","title":"<code>INTERNAL = 'internal'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility.PRIVATE","title":"<code>PRIVATE = 'private'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility.PUBLIC","title":"<code>PUBLIC = 'public'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.YulLiteralValueKind","title":"<code>YulLiteralValueKind</code>  <code>class</code>","text":"<p>         Bases: <code>StrEnum</code></p> <p>Kind of a Yul Literal node.</p> Source code in <code>woke/ast/enums.py</code> <pre><code>class YulLiteralValueKind(StrEnum):\n\"\"\"\n    Kind of a Yul [Literal][woke.ast.ir.yul.literal.Literal] node.\n    \"\"\"\nNUMBER = \"number\"\nSTRING = \"string\"\nBOOL = \"bool\"\n</code></pre>"},{"location":"api-reference/ir/enums/#woke.ast.enums.YulLiteralValueKind.BOOL","title":"<code>BOOL = 'bool'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.YulLiteralValueKind.NUMBER","title":"<code>NUMBER = 'number'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/enums/#woke.ast.enums.YulLiteralValueKind.STRING","title":"<code>STRING = 'string'</code>  <code>class-attribute</code> <code>instance-attribute</code>","text":""},{"location":"api-reference/ir/types/","title":"Types","text":"<p>Types represent the type of an expression (ExpressionAbc), type name (TypeNameAbc) and VariableDeclaration.</p>"},{"location":"api-reference/ir/types/#woke.ast.types","title":"<code>woke.ast.types</code>  <code>module</code>","text":""},{"location":"api-reference/ir/types/#woke.ast.types.TypeAbc","title":"<code>TypeAbc</code>  <code>class</code>","text":"<p>         Bases: <code>ABC</code></p> <p>Abstract base class for all types.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class TypeAbc(ABC):\n\"\"\"\n    Abstract base class for all types.\n    \"\"\"\n@classmethod\ndef from_type_identifier(\ncls,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n) -&gt; typ.Optional[\"TypeAbc\"]:\nif type_identifier.startswith(\"t_address\"):\nreturn Address(type_identifier)\nelif type_identifier.startswith(\"t_bool\"):\nreturn Bool(type_identifier)\nelif type_identifier.startswith(\"t_int\"):\nreturn Int(type_identifier)\nelif type_identifier.startswith(\"t_uint\"):\nreturn UInt(type_identifier)\nelif type_identifier.startswith(\"t_stringliteral_\"):\nreturn StringLiteral(type_identifier)\nelif type_identifier.startswith(\"t_string_\"):\nreturn String(type_identifier)\nelif type_identifier.startswith(\"t_bytes_\"):\nreturn Bytes(type_identifier)\n# must go after t_bytes_ !!\nelif type_identifier.startswith(\"t_bytes\"):\nreturn FixedBytes(type_identifier)\nelif type_identifier.startswith(\"t_function\"):\nreturn Function(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_tuple\"):\nreturn Tuple(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_type\"):\nreturn Type(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_rational\"):\nreturn Rational(type_identifier)\nelif type_identifier.startswith(\"t_modifier\"):\nreturn Modifier(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_array\"):\nreturn Array(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_mapping\"):\nreturn Mapping(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_contract\") or type_identifier.startswith(\n\"t_super\"\n):\nreturn Contract(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_struct\"):\nreturn Struct(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_enum\"):\nreturn Enum(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_magic\"):\nreturn Magic(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_userDefinedValueType\"):\nreturn UserDefinedValueType(type_identifier, reference_resolver, cu_hash)\nelif type_identifier.startswith(\"t_module\"):\nreturn Module(type_identifier)\nelif type_identifier.startswith(\"t_fixed\"):\nreturn Fixed(type_identifier)\nelif type_identifier.startswith(\"t_ufixed\"):\nreturn UFixed(type_identifier)\nelse:\nreturn None\n@abstractmethod\ndef abi_type(self) -&gt; str:\n...\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Address","title":"<code>Address</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Address type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Address(TypeAbc):\n\"\"\"\n    Address type.\n    \"\"\"\n__is_payable: bool\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_address\")\nif type_identifier.startswith(\"_payable\"):\ntype_identifier.read(\"_payable\")\nself.__is_payable = True\nelse:\nself.__is_payable = False\ndef abi_type(self) -&gt; str:\nreturn \"address\"\n@property\ndef is_payable(self) -&gt; bool:\n\"\"\"\n        Returns:\n            `True` if the address is payable, `False` otherwise.\n        \"\"\"\nreturn self.__is_payable\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Address.is_payable","title":"<code>is_payable: bool</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the address is payable, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Bool","title":"<code>Bool</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Boolean type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Bool(TypeAbc):\n\"\"\"\n    Boolean type.\n    \"\"\"\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_bool\")\ndef abi_type(self) -&gt; str:\nreturn \"bool\"\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.IntAbc","title":"<code>IntAbc</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Base class for Int and UInt types.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class IntAbc(TypeAbc):\n\"\"\"\n    Base class for [Int][woke.ast.types.Int] and [UInt][woke.ast.types.UInt] types.\n    \"\"\"\n_bits_count: int\n@property\ndef bits_count(self) -&gt; int:\n\"\"\"\n        Can only be a multiple of 8, with a minimum of 8 and a maximum of 256.\n        Returns:\n            Number of bits used to represent this integer.\n        \"\"\"\nreturn self._bits_count\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.IntAbc.bits_count","title":"<code>bits_count: int</code>  <code>property</code>","text":"<p>Can only be a multiple of 8, with a minimum of 8 and a maximum of 256.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of bits used to represent this integer.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Int","title":"<code>Int</code>  <code>class</code>","text":"<p>         Bases: <code>IntAbc</code></p> <p>Signed integer type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Int(IntAbc):\n\"\"\"\n    Signed integer type.\n    \"\"\"\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_int\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None\nnumber = match.group(\"number\")\ntype_identifier.read(number)\nself._bits_count = int(number)\ndef abi_type(self) -&gt; str:\nreturn f\"int{self._bits_count}\"\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.UInt","title":"<code>UInt</code>  <code>class</code>","text":"<p>         Bases: <code>IntAbc</code></p> <p>Unsigned integer type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class UInt(IntAbc):\n\"\"\"\n    Unsigned integer type.\n    \"\"\"\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_uint\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None\nnumber = match.group(\"number\")\ntype_identifier.read(number)\nself._bits_count = int(number)\ndef abi_type(self) -&gt; str:\nreturn f\"uint{self._bits_count}\"\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.FixedAbc","title":"<code>FixedAbc</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Base class for Fixed and UFixed types.</p> <p>Info</p> <p>Currently not fully implemented in Solidity.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class FixedAbc(TypeAbc):\n\"\"\"\n    Base class for [Fixed][woke.ast.types.Fixed] and [UFixed][woke.ast.types.UFixed] types.\n    !!! info\n        Currently not fully implemented in Solidity.\n    \"\"\"\n_total_bits: int\n_fractional_digits: int\n@property\ndef total_bits(self) -&gt; int:\n\"\"\"\n        Returns:\n            Total number of bits used to represent this fixed point number.\n        \"\"\"\nreturn self._total_bits\n@property\ndef fractional_digits(self) -&gt; int:\n\"\"\"\n        Returns:\n            Number of decimal places available.\n        \"\"\"\nreturn self._fractional_digits\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.FixedAbc.total_bits","title":"<code>total_bits: int</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>int</code> <p>Total number of bits used to represent this fixed point number.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.FixedAbc.fractional_digits","title":"<code>fractional_digits: int</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>int</code> <p>Number of decimal places available.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Fixed","title":"<code>Fixed</code>  <code>class</code>","text":"<p>         Bases: <code>FixedAbc</code></p> <p>Signed fixed-point number type as specified by the Solidity docs.</p> <p>Info</p> <p>Currently not fully implemented in Solidity.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Fixed(FixedAbc):\n\"\"\"\n    Signed fixed-point number type as specified by the [Solidity docs](https://docs.soliditylang.org/en/latest/types.html?highlight=fixed#fixed-point-numbers).\n    !!! info\n        Currently not fully implemented in Solidity.\n    \"\"\"\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_fixed\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None\ntotal_bits = match.group(\"number\")\ntype_identifier.read(total_bits)\nself._total_bits = int(total_bits)\ntype_identifier.read(\"x\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None\nfractional_digits = match.group(\"number\")\ntype_identifier.read(fractional_digits)\nself._fractional_digits = int(fractional_digits)\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.UFixed","title":"<code>UFixed</code>  <code>class</code>","text":"<p>         Bases: <code>FixedAbc</code></p> <p>Unsigned fixed point number type as specified by the Solidity docs.</p> <p>Info</p> <p>Currently not fully implemented in Solidity.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class UFixed(FixedAbc):\n\"\"\"\n    Unsigned fixed point number type as specified by the [Solidity docs](https://docs.soliditylang.org/en/latest/types.html?highlight=ufixed#fixed-point-numbers).\n    !!! info\n        Currently not fully implemented in Solidity.\n    \"\"\"\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_ufixed\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None\ntotal_bits = match.group(\"number\")\ntype_identifier.read(total_bits)\nself._total_bits = int(total_bits)\ntype_identifier.read(\"x\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None\nfractional_digits = match.group(\"number\")\ntype_identifier.read(fractional_digits)\nself._fractional_digits = int(fractional_digits)\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.StringLiteral","title":"<code>StringLiteral</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>String literal type.</p> <p>Warning</p> <p>This expression is of the StringLiteral type: <pre><code>\"Hello, world!\"\n</code></pre></p> <p>However, this expression is of the String type and contains a child expression of the StringLiteral type: <pre><code>string(\"Hello, world!\")\n</code></pre></p> Source code in <code>woke/ast/types.py</code> <pre><code>class StringLiteral(TypeAbc):\n\"\"\"\n    String literal type.\n    !!! warning\n        This expression is of the [StringLiteral][woke.ast.types.StringLiteral] type:\n        ```solidity\n        \"Hello, world!\"\n        ```\n        However, this expression is of the [String][woke.ast.types.String] type and contains a child expression of the [StringLiteral][woke.ast.types.StringLiteral] type:\n        ```solidity\n        string(\"Hello, world!\")\n        ```\n    \"\"\"\n__keccak256_hash: bytes\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_stringliteral_\")\nmatch = HEX_RE.match(type_identifier.data)\nassert match is not None\nhex = match.group(\"hex\")\ntype_identifier.read(hex)\nself.__keccak256_hash = bytes.fromhex(hex)\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n@property\ndef keccak256_hash(self) -&gt; bytes:\n\"\"\"\n        Returns:\n            Keccak256 hash of the string literal.\n        \"\"\"\nreturn self.__keccak256_hash\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.StringLiteral.keccak256_hash","title":"<code>keccak256_hash: bytes</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>bytes</code> <p>Keccak256 hash of the string literal.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.String","title":"<code>String</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>String type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class String(TypeAbc):\n\"\"\"\n    String type.\n    \"\"\"\n__data_location: DataLocation\n__is_pointer: bool\n__is_slice: bool\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_string\")\nif type_identifier.startswith(\"_storage\"):\nself.__data_location = DataLocation.STORAGE\ntype_identifier.read(\"_storage\")\nelif type_identifier.startswith(\"_memory\"):\nself.__data_location = DataLocation.MEMORY\ntype_identifier.read(\"_memory\")\nelif type_identifier.startswith(\"_calldata\"):\nself.__data_location = DataLocation.CALLDATA\ntype_identifier.read(\"_calldata\")\nelse:\nassert False, f\"Unexpected string type data location {type_identifier}\"\nif type_identifier.startswith(\"_ptr\"):\nself.__is_pointer = True\ntype_identifier.read(\"_ptr\")\nelse:\nself.__is_pointer = False\nif type_identifier.startswith(\"_slice\"):\nself.__is_slice = True\ntype_identifier.read(\"_slice\")\nelse:\nself.__is_slice = False\ndef abi_type(self) -&gt; str:\nreturn \"string\"\n@property\ndef data_location(self) -&gt; DataLocation:\n\"\"\"\n        Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE]\n        Returns:\n            Data location of the string expression.\n        \"\"\"\nreturn self.__data_location\n@property\ndef is_pointer(self) -&gt; bool:\n\"\"\"\n        Storage references can be pointers or bound references. In general, local variables are of\n        pointer type, state variables are bound references. Assignments to pointers or deleting\n        them will not modify storage (that will only change the pointer). Assignment from\n        non-storage objects to a variable of storage pointer type is not possible.\n        For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments\n        never change the contents of the original value.\n        Returns:\n            Whether the string expression is a pointer to storage.\n        \"\"\"\nreturn self.__is_pointer\n@property\ndef is_slice(self) -&gt; bool:\n\"\"\"\n        !!! example\n            ```solidity\n            function foo(string calldata s) public pure {\n                s[0:5]; // s[0:5] is a string slice\n            }\n            ```\n        Returns:\n            Whether this is a slice of a string expression.\n        \"\"\"\nreturn self.__is_slice\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.String.data_location","title":"<code>data_location: DataLocation</code>  <code>property</code>","text":"<p>Can be either CALLDATA, MEMORY or STORAGE</p> <p>Returns:</p> Type Description <code>DataLocation</code> <p>Data location of the string expression.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.String.is_pointer","title":"<code>is_pointer: bool</code>  <code>property</code>","text":"<p>Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible.</p> <p>For anything other than STORAGE, this always returns <code>True</code> because assignments never change the contents of the original value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the string expression is a pointer to storage.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.String.is_slice","title":"<code>is_slice: bool</code>  <code>property</code>","text":"<p>Example</p> <pre><code>function foo(string calldata s) public pure {\ns[0:5]; // s[0:5] is a string slice\n}\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Whether this is a slice of a string expression.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Bytes","title":"<code>Bytes</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Bytes type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Bytes(TypeAbc):\n\"\"\"\n    Bytes type.\n    \"\"\"\n__data_location: DataLocation\n__is_pointer: bool\n__is_slice: bool\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_bytes\")\nif type_identifier.startswith(\"_storage\"):\nself.__data_location = DataLocation.STORAGE\ntype_identifier.read(\"_storage\")\nelif type_identifier.startswith(\"_memory\"):\nself.__data_location = DataLocation.MEMORY\ntype_identifier.read(\"_memory\")\nelif type_identifier.startswith(\"_calldata\"):\nself.__data_location = DataLocation.CALLDATA\ntype_identifier.read(\"_calldata\")\nelse:\nassert False, f\"Unexpected string type data location {type_identifier}\"\nif type_identifier.startswith(\"_ptr\"):\nself.__is_pointer = True\ntype_identifier.read(\"_ptr\")\nelse:\nself.__is_pointer = False\nif type_identifier.startswith(\"_slice\"):\nself.__is_slice = True\ntype_identifier.read(\"_slice\")\nelse:\nself.__is_slice = False\ndef abi_type(self) -&gt; str:\nreturn \"bytes\"\n@property\ndef data_location(self) -&gt; DataLocation:\n\"\"\"\n        Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE]\n        Returns:\n            Data location of the bytes expression.\n        \"\"\"\nreturn self.__data_location\n@property\ndef is_pointer(self) -&gt; bool:\n\"\"\"\n        Storage references can be pointers or bound references. In general, local variables are of\n        pointer type, state variables are bound references. Assignments to pointers or deleting\n        them will not modify storage (that will only change the pointer). Assignment from\n        non-storage objects to a variable of storage pointer type is not possible.\n        For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments\n        never change the contents of the original value.\n        Returns:\n            Whether the bytes expression is a pointer to storage.\n        \"\"\"\nreturn self.__is_pointer\n@property\ndef is_slice(self) -&gt; bool:\n\"\"\"\n        !!! example\n            ```solidity\n            function foo(bytes calldata b) public pure {\n                b[0:5]; // s[0:5] is a bytes slice\n            }\n            ```\n        Returns:\n            Whether this is a slice of a bytes expression.\n        \"\"\"\nreturn self.__is_slice\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Bytes.data_location","title":"<code>data_location: DataLocation</code>  <code>property</code>","text":"<p>Can be either CALLDATA, MEMORY or STORAGE</p> <p>Returns:</p> Type Description <code>DataLocation</code> <p>Data location of the bytes expression.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Bytes.is_pointer","title":"<code>is_pointer: bool</code>  <code>property</code>","text":"<p>Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible.</p> <p>For anything other than STORAGE, this always returns <code>True</code> because assignments never change the contents of the original value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the bytes expression is a pointer to storage.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Bytes.is_slice","title":"<code>is_slice: bool</code>  <code>property</code>","text":"<p>Example</p> <pre><code>function foo(bytes calldata b) public pure {\nb[0:5]; // s[0:5] is a bytes slice\n}\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Whether this is a slice of a bytes expression.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.FixedBytes","title":"<code>FixedBytes</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Fixed-size byte array type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class FixedBytes(TypeAbc):\n\"\"\"\n    Fixed-size byte array type.\n    \"\"\"\n__bytes_count: int\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_bytes\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None\nnumber = match.group(\"number\")\ntype_identifier.read(number)\nself.__bytes_count = int(number)\ndef abi_type(self) -&gt; str:\nreturn f\"bytes{self.__bytes_count}\"\n@property\ndef bytes_count(self) -&gt; int:\n\"\"\"\n        Is at least 1 and at most 32.\n        Returns:\n            Number of bytes used to represent this fixed-size byte array.\n        \"\"\"\nreturn self.__bytes_count\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.FixedBytes.bytes_count","title":"<code>bytes_count: int</code>  <code>property</code>","text":"<p>Is at least 1 and at most 32.</p> <p>Returns:</p> Type Description <code>int</code> <p>Number of bytes used to represent this fixed-size byte array.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Function","title":"<code>Function</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Function type.</p> <p>Warning</p> <p>Given the following function: <pre><code>function foo(uint a, uint b) public pure returns(uint, uint) {\nreturn (a + b, a - b);\n}\n</code></pre> and the following call: <pre><code>foo(1, 2);\n</code></pre> the type of <code>foo</code> is Function, but the type of <code>foo(1, 2)</code> is Tuple.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Function(TypeAbc):\n\"\"\"\n    Function type.\n    !!! warning\n        Given the following function:\n        ```solidity\n        function foo(uint a, uint b) public pure returns(uint, uint) {\n            return (a + b, a - b);\n        }\n        ```\n        and the following call:\n        ```solidity\n        foo(1, 2);\n        ```\n        the type of `foo` is [Function][woke.ast.types.Function], but the type of `:::solidity foo(1, 2)` is [Tuple][woke.ast.types.Tuple].\n    \"\"\"\n__kind: FunctionTypeKind\n__state_mutability: StateMutability\n__parameters: typ.Tuple[TypeAbc, ...]\n__return_parameters: typ.Tuple[TypeAbc, ...]\n__gas_set: bool\n__value_set: bool\n__salt_set: bool\n__attached_to: typ.Optional[typ.Tuple[TypeAbc, ...]]\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_function_\")\nmatched = []\nfor kind in FunctionTypeKind:\nif type_identifier.startswith(kind):\nmatched.append(kind)\nassert len(matched) &gt;= 1, f\"Unexpected function kind {type_identifier}\"\nself.__kind = FunctionTypeKind(max(matched, key=len))\ntype_identifier.read(self.__kind)\nif type_identifier.startswith(\"_payable\"):\nself.__state_mutability = StateMutability.PAYABLE\ntype_identifier.read(\"_payable\")\nelif type_identifier.startswith(\"_pure\"):\nself.__state_mutability = StateMutability.PURE\ntype_identifier.read(\"_pure\")\nelif type_identifier.startswith(\"_nonpayable\"):\nself.__state_mutability = StateMutability.NONPAYABLE\ntype_identifier.read(\"_nonpayable\")\nelif type_identifier.startswith(\"_view\"):\nself.__state_mutability = StateMutability.VIEW\ntype_identifier.read(\"_view\")\nelse:\nassert False, f\"Unexpected function state mutability {type_identifier}\"\nparameters = _parse_list(type_identifier, reference_resolver, cu_hash)\nassert not any(param is None for param in parameters)\nself.__parameters = parameters  # type: ignore\ntype_identifier.read(\"returns\")\nreturn_parameters = _parse_list(type_identifier, reference_resolver, cu_hash)\nassert not any(param is None for param in return_parameters)\nself.__return_parameters = return_parameters  # type: ignore\nif type_identifier.startswith(\"gas\"):\nself.__gas_set = True\ntype_identifier.read(\"gas\")\nelse:\nself.__gas_set = False\nif type_identifier.startswith(\"value\"):\nself.__value_set = True\ntype_identifier.read(\"value\")\nelse:\nself.__value_set = False\nif type_identifier.startswith(\"salt\"):\nself.__salt_set = True\ntype_identifier.read(\"salt\")\nelse:\nself.__salt_set = False\nif type_identifier.startswith(\"bound_to\"):\ntype_identifier.read(\"bound_to\")\nbound_to = _parse_list(type_identifier, reference_resolver, cu_hash)\nassert not any(param is None for param in bound_to)\nself.__attached_to = bound_to  # type: ignore\nelif type_identifier.startswith(\n\"attached_to\"\n):  # bound_to was renamed to attached_to in 0.8.18\ntype_identifier.read(\"attached_to\")\nattached_to = _parse_list(type_identifier, reference_resolver, cu_hash)\nassert not any(param is None for param in attached_to)\nself.__attached_to = attached_to  # type: ignore\nelse:\nself.__attached_to = None\ndef abi_type(self) -&gt; str:\nreturn \"function\"\n@property\ndef kind(self) -&gt; FunctionTypeKind:\n\"\"\"\n        Returns:\n            Kind of the function type.\n        \"\"\"\nreturn self.__kind\n@property\ndef state_mutability(self) -&gt; StateMutability:\n\"\"\"\n        Returns:\n            State mutability of the function type.\n        \"\"\"\nreturn self.__state_mutability\n@property\ndef parameters(self) -&gt; typ.Tuple[TypeAbc, ...]:\n\"\"\"\n        Returns:\n            Expression types of the parameters of the function type.\n        \"\"\"\nreturn self.__parameters\n@property\ndef return_parameters(self) -&gt; typ.Tuple[TypeAbc, ...]:\n\"\"\"\n        Returns:\n            Expression types of the return parameters of the function type.\n        \"\"\"\nreturn self.__return_parameters\n@property\ndef gas_set(self) -&gt; bool:\n\"\"\"\n        !!! example\n            In the case of the old syntax (deprecated), the `gas` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `gas_set` set to `True`.\n            ```solidity\n            foo.gas(10)(1, 2);\n            ```\n            In the case of the new syntax, the `{gas: 10}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `gas_set` set to `True`.\n            ```solidity\n            foo{gas: 10}(1, 2);\n            ```\n        Returns:\n            `True` if the gas is set in the function type.\n        \"\"\"\nreturn self.__gas_set\n@property\ndef value_set(self) -&gt; bool:\n\"\"\"\n        !!! example\n            In the case of the old syntax (deprecated), the `value` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `value_set` set to `True`.\n            ```solidity\n            foo.value(1)(1, 2);\n            ```\n            In the case of the new syntax, the `{value: 1}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `value_set` set to `True`.\n            ```solidity\n            foo{value: 1}(1, 2);\n            ```\n        Returns:\n            `True` if the value is set in the function type.\n        \"\"\"\nreturn self.__value_set\n@property\ndef salt_set(self) -&gt; bool:\n\"\"\"\n        !!! example\n            In the following example, the `{salt: salt}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `salt_set` set to `True`.\n            ```solidity\n            new Foo{salt: salt}();\n            ```\n        Returns:\n            `True` if the salt is set in the function type.\n        \"\"\"\nreturn self.__salt_set\n@property\ndef attached_to(self) -&gt; typ.Optional[typ.Tuple[TypeAbc, ...]]:\n\"\"\"\n        A function type can be attached to a type using the [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective] or internally in the case of a Solidity global symbol.\n        !!! example\n            In the following example, the `add` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is attached to the [UInt][woke.ast.types.UInt] type.\n            ```solidity linenums=\"1\"\n            function add(uint a, uint b) pure returns (uint) {\n                return a + b;\n            }\n            using {add} for uint;\n            contract Foo {\n                function bar(uint x) public pure returns(uint) {\n                    return x.add(1);\n                }\n            }\n            ```\n            In this example, the `push` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is attached to the [Array][woke.ast.types.Array] type.\n            ```solidity\n            arr.push(1);\n            ```\n        Returns:\n            Type to which the function is attached to.\n        \"\"\"\nreturn self.__attached_to\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Function.kind","title":"<code>kind: FunctionTypeKind</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>FunctionTypeKind</code> <p>Kind of the function type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Function.state_mutability","title":"<code>state_mutability: StateMutability</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>StateMutability</code> <p>State mutability of the function type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Function.parameters","title":"<code>parameters: typ.Tuple[TypeAbc, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>typ.Tuple[TypeAbc, ...]</code> <p>Expression types of the parameters of the function type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Function.return_parameters","title":"<code>return_parameters: typ.Tuple[TypeAbc, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>typ.Tuple[TypeAbc, ...]</code> <p>Expression types of the return parameters of the function type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Function.gas_set","title":"<code>gas_set: bool</code>  <code>property</code>","text":"<p>Example</p> <p>In the case of the old syntax (deprecated), the <code>gas</code> MemberAccess expression is of the Function type which returns a Function with <code>gas_set</code> set to <code>True</code>. <pre><code>foo.gas(10)(1, 2);\n</code></pre></p> <p>In the case of the new syntax, the <code>{gas: 10}</code> FunctionCallOptions expression is of the Function type with <code>gas_set</code> set to <code>True</code>. <pre><code>foo{gas: 10}(1, 2);\n</code></pre></p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the gas is set in the function type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Function.value_set","title":"<code>value_set: bool</code>  <code>property</code>","text":"<p>Example</p> <p>In the case of the old syntax (deprecated), the <code>value</code> MemberAccess expression is of the Function type which returns a Function with <code>value_set</code> set to <code>True</code>. <pre><code>foo.value(1)(1, 2);\n</code></pre></p> <p>In the case of the new syntax, the <code>{value: 1}</code> FunctionCallOptions expression is of the Function type with <code>value_set</code> set to <code>True</code>. <pre><code>foo{value: 1}(1, 2);\n</code></pre></p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the value is set in the function type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Function.salt_set","title":"<code>salt_set: bool</code>  <code>property</code>","text":"<p>Example</p> <p>In the following example, the <code>{salt: salt}</code> FunctionCallOptions expression is of the Function type with <code>salt_set</code> set to <code>True</code>. <pre><code>new Foo{salt: salt}();\n</code></pre></p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the salt is set in the function type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Function.attached_to","title":"<code>attached_to: typ.Optional[typ.Tuple[TypeAbc, ...]]</code>  <code>property</code>","text":"<p>A function type can be attached to a type using the UsingForDirective or internally in the case of a Solidity global symbol.</p> <p>Example</p> <p>In the following example, the <code>add</code> MemberAccess expression on line 9 is of the Function type and is attached to the UInt type. <pre><code>function add(uint a, uint b) pure returns (uint) {\nreturn a + b;\n}\nusing {add} for uint;\ncontract Foo {\nfunction bar(uint x) public pure returns(uint) {\nreturn x.add(1);\n}\n}\n</code></pre></p> <p>In this example, the <code>push</code> MemberAccess expression on line 9 is of the Function type and is attached to the Array type. <pre><code>arr.push(1);\n</code></pre></p> <p>Returns:</p> Type Description <code>typ.Optional[typ.Tuple[TypeAbc, ...]]</code> <p>Type to which the function is attached to.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Tuple","title":"<code>Tuple</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Tuple type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Tuple(TypeAbc):\n\"\"\"\n    Tuple type.\n    \"\"\"\n__components: typ.Tuple[typ.Optional[TypeAbc], ...]\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_tuple\")\nself.__components = _parse_list(type_identifier, reference_resolver, cu_hash)\ndef abi_type(self) -&gt; str:\nif any(component is None for component in self.__components):\nraise NotImplementedError\nreturn (\n\"(\"\n+ \",\".join(\ncomponent.abi_type()  # pyright: ignore reportOptionalMemberAccess\nfor component in self.__components\n)\n+ \")\"\n)\n@property\ndef components(self) -&gt; typ.Tuple[typ.Optional[TypeAbc], ...]:\n\"\"\"\n        A component type can be `None` in the case of a tuple with a missing component.\n        !!! example\n            In the following example, the `(success, )` expression is of the [Tuple][woke.ast.types.Tuple] type with the components of the type [Bool][woke.ast.types.Bool] and `None`.\n            ```solidity\n            bool success;\n            (success, ) = address(addr).call{value: 1}(\"\");\n            ```\n        Returns:\n            Expression types of the components of the tuple type.\n        \"\"\"\nreturn self.__components\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Tuple.components","title":"<code>components: typ.Tuple[typ.Optional[TypeAbc], ...]</code>  <code>property</code>","text":"<p>A component type can be <code>None</code> in the case of a tuple with a missing component.</p> <p>Example</p> <p>In the following example, the <code>(success, )</code> expression is of the Tuple type with the components of the type Bool and <code>None</code>. <pre><code>bool success;\n(success, ) = address(addr).call{value: 1}(\"\");\n</code></pre></p> <p>Returns:</p> Type Description <code>typ.Tuple[typ.Optional[TypeAbc], ...]</code> <p>Expression types of the components of the tuple type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Type","title":"<code>Type</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Type type. As opposed to other types, this type describes the type of a type, not the type of an instance of a type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Type(TypeAbc):\n\"\"\"\n    Type type. As opposed to other types, this type describes the type of a type, not the type of an instance of a type.\n    \"\"\"\n__actual_type: TypeAbc\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_type\")\nactual_type = _parse_list(type_identifier, reference_resolver, cu_hash)\nassert len(actual_type) == 1 and actual_type[0] is not None\nself.__actual_type = actual_type[0]\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n@property\ndef actual_type(self) -&gt; TypeAbc:\n\"\"\"\n        !!! example\n            `payable` in the following example is of the [Type][woke.ast.types.Type] type with the [Address][woke.ast.types.Address] actual type.\n            ```solidity\n            payable(addr);\n            ```\n            `super` in the following example is of the [Type][woke.ast.types.Type] type with the [Contract][woke.ast.types.Contract] actual type.\n            ```solidity\n            super.foo();\n            ```\n            `string` in the following example is of the [Type][woke.ast.types.Type] type with the [String][woke.ast.types.String] actual type.\n            ```solidity\n            string.concat(\"foo\", \"bar\");\n            ```\n            `Foo` in the following example on line 4 is of the [Type][woke.ast.types.Type] type with the [Enum][woke.ast.types.Enum] actual type.\n            ```solidity linenums=\"1\"\n            enum Foo { A, B }\n            function bar() pure returns (Foo) {\n                return Foo.A;\n            }\n            ```\n        Returns:\n            Actual type of the type type.\n        \"\"\"\nreturn self.__actual_type\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Type.actual_type","title":"<code>actual_type: TypeAbc</code>  <code>property</code>","text":"<p>Example</p> <p><code>payable</code> in the following example is of the Type type with the Address actual type. <pre><code>payable(addr);\n</code></pre></p> <p><code>super</code> in the following example is of the Type type with the Contract actual type. <pre><code>super.foo();\n</code></pre></p> <p><code>string</code> in the following example is of the Type type with the String actual type. <pre><code>string.concat(\"foo\", \"bar\");\n</code></pre></p> <p><code>Foo</code> in the following example on line 4 is of the Type type with the Enum actual type. <pre><code>enum Foo { A, B }\nfunction bar() pure returns (Foo) {\nreturn Foo.A;\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>TypeAbc</code> <p>Actual type of the type type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Rational","title":"<code>Rational</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Rational type. Represents the type of constants or expressions with constants.</p> <p>Example</p> <p><code>1</code>, <code>0x1234</code>, <code>1e18</code>, <code>1 * 2 / 3</code> are all of the Rational type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Rational(TypeAbc):\n\"\"\"\n    Rational type. Represents the type of constants or expressions with constants.\n    !!! example\n        `:::solidity 1`, `:::solidity 0x1234`, `:::solidity 1e18`, `:::solidity 1 * 2 / 3` are all of the [Rational][woke.ast.types.Rational] type.\n    \"\"\"\n__numerator: int\n__denominator: int\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_rational_\")\nif type_identifier.startswith(\"minus_\"):\ntype_identifier.read(\"minus_\")\nself.__numerator = -1\nelse:\nself.__numerator = 1\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None, f\"{type_identifier} is not a valid rational\"\nnumber = match.group(\"number\")\ntype_identifier.read(number)\nself.__numerator *= int(number)\ntype_identifier.read(\"_by_\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None, f\"{type_identifier} is not a valid rational\"\nnumber = match.group(\"number\")\ntype_identifier.read(number)\nself.__denominator = int(number)\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n@property\ndef numerator(self) -&gt; int:\n\"\"\"\n        If the rational is negative, the numerator will be negative.\n        Returns:\n            Numerator of the rational number.\n        \"\"\"\nreturn self.__numerator\n@property\ndef denominator(self) -&gt; int:\n\"\"\"\n        Returns:\n            Denominator of the rational number.\n        \"\"\"\nreturn self.__denominator\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Rational.numerator","title":"<code>numerator: int</code>  <code>property</code>","text":"<p>If the rational is negative, the numerator will be negative.</p> <p>Returns:</p> Type Description <code>int</code> <p>Numerator of the rational number.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Rational.denominator","title":"<code>denominator: int</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>int</code> <p>Denominator of the rational number.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Modifier","title":"<code>Modifier</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Modifier type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Modifier(TypeAbc):\n\"\"\"\n    Modifier type.\n    \"\"\"\n__parameters: typ.Tuple[TypeAbc, ...]\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_modifier\")\nparameters = _parse_list(type_identifier, reference_resolver, cu_hash)\nassert not any(param is None for param in parameters)\nself.__parameters = parameters  # type: ignore\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n@property\ndef parameters(self) -&gt; typ.Tuple[TypeAbc, ...]:\n\"\"\"\n        Returns:\n            Expression types of the parameters of the modifier.\n        \"\"\"\nreturn self.__parameters\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Modifier.parameters","title":"<code>parameters: typ.Tuple[TypeAbc, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>typ.Tuple[TypeAbc, ...]</code> <p>Expression types of the parameters of the modifier.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Array","title":"<code>Array</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Array type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Array(TypeAbc):\n\"\"\"\n    Array type.\n    \"\"\"\n__base_type: TypeAbc\n__length: typ.Optional[int]\n__data_location: DataLocation\n__is_pointer: bool\n__is_slice: bool\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_array\")\nbase_type = _parse_list(type_identifier, reference_resolver, cu_hash)\nassert (\nlen(base_type) == 1 and base_type[0] is not None\n), f\"Unexpected array base type {type_identifier}\"\nself.__base_type = base_type[0]\nif type_identifier.startswith(\"dyn\"):\nself.__length = None\ntype_identifier.read(\"dyn\")\nelse:\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None, f\"{type_identifier} is not a valid array length\"\nself.__length = int(match.group(\"number\"))\ntype_identifier.read(match.group(\"number\"))\nif type_identifier.startswith(\"_storage\"):\nself.__data_location = DataLocation.STORAGE\ntype_identifier.read(\"_storage\")\nelif type_identifier.startswith(\"_memory\"):\nself.__data_location = DataLocation.MEMORY\ntype_identifier.read(\"_memory\")\nelif type_identifier.startswith(\"_calldata\"):\nself.__data_location = DataLocation.CALLDATA\ntype_identifier.read(\"_calldata\")\nelse:\nassert False, f\"Unexpected array type data location {type_identifier}\"\nif type_identifier.startswith(\"_ptr\"):\nself.__is_pointer = True\ntype_identifier.read(\"_ptr\")\nelse:\nself.__is_pointer = False\nif type_identifier.startswith(\"_slice\"):\nself.__is_slice = True\ntype_identifier.read(\"_slice\")\nelse:\nself.__is_slice = False\ndef abi_type(self) -&gt; str:\nif self.length is not None:\nreturn f\"{self.base_type.abi_type()}[{self.length}]\"\nelse:\nreturn f\"{self.base_type.abi_type()}[]\"\n@property\ndef base_type(self) -&gt; TypeAbc:\n\"\"\"\n        Returns:\n            Base type of the array.\n        \"\"\"\nreturn self.__base_type\n@property\ndef length(self) -&gt; typ.Optional[int]:\n\"\"\"\n        Returns:\n            Length of the array. `None` if the array is dynamic (not fixed size).\n        \"\"\"\nreturn self.__length\n@property\ndef data_location(self) -&gt; DataLocation:\n\"\"\"\n        Returns:\n            Data location of the array.\n        \"\"\"\nreturn self.__data_location\n@property\ndef is_pointer(self) -&gt; bool:\n\"\"\"\n        Storage references can be pointers or bound references. In general, local variables are of\n        pointer type, state variables are bound references. Assignments to pointers or deleting\n        them will not modify storage (that will only change the pointer). Assignment from\n        non-storage objects to a variable of storage pointer type is not possible.\n        For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments\n        never change the contents of the original value.\n        Returns:\n            Whether the array expression is a pointer to storage.\n        \"\"\"\nreturn self.__is_pointer\n@property\ndef is_slice(self) -&gt; bool:\n\"\"\"\n        !!! example\n            ```solidity\n            function foo(uint[] calldata arr) public pure {\n                arr[0:5]; // arr[0:5] is an array slice\n            }\n            ```\n        Returns:\n            Whether this is a slice of an array expression.\n        \"\"\"\nreturn self.__is_slice\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Array.base_type","title":"<code>base_type: TypeAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>TypeAbc</code> <p>Base type of the array.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Array.length","title":"<code>length: typ.Optional[int]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>typ.Optional[int]</code> <p>Length of the array. <code>None</code> if the array is dynamic (not fixed size).</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Array.data_location","title":"<code>data_location: DataLocation</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>DataLocation</code> <p>Data location of the array.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Array.is_pointer","title":"<code>is_pointer: bool</code>  <code>property</code>","text":"<p>Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible.</p> <p>For anything other than STORAGE, this always returns <code>True</code> because assignments never change the contents of the original value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the array expression is a pointer to storage.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Array.is_slice","title":"<code>is_slice: bool</code>  <code>property</code>","text":"<p>Example</p> <pre><code>function foo(uint[] calldata arr) public pure {\narr[0:5]; // arr[0:5] is an array slice\n}\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p>Whether this is a slice of an array expression.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Mapping","title":"<code>Mapping</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Mapping type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Mapping(TypeAbc):\n\"\"\"\n    Mapping type.\n    \"\"\"\n__key_type: TypeAbc\n__value_type: TypeAbc\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_mapping\")\nkey_value = _parse_list(type_identifier, reference_resolver, cu_hash)\nassert len(key_value) == 2, f\"{type_identifier} is not a valid mapping\"\nassert key_value[0] is not None, f\"{type_identifier} is not a valid mapping\"\nassert key_value[1] is not None, f\"{type_identifier} is not a valid mapping\"\nself.__key_type = key_value[0]\nself.__value_type = key_value[1]\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n@property\ndef key_type(self) -&gt; TypeAbc:\n\"\"\"\n        Returns:\n            Key type of the mapping.\n        \"\"\"\nreturn self.__key_type\n@property\ndef value_type(self) -&gt; TypeAbc:\n\"\"\"\n        Returns:\n            Value type of the mapping.\n        \"\"\"\nreturn self.__value_type\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Mapping.key_type","title":"<code>key_type: TypeAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>TypeAbc</code> <p>Key type of the mapping.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Mapping.value_type","title":"<code>value_type: TypeAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>TypeAbc</code> <p>Value type of the mapping.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Contract","title":"<code>Contract</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> Source code in <code>woke/ast/types.py</code> <pre><code>class Contract(TypeAbc):\n__is_super: bool\n__name: str\n__ast_id: AstNodeId\n__reference_resolver: ReferenceResolver\n__cu_hash: bytes\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\nif type_identifier.startswith(\"t_contract\"):\nself.__is_super = False\ntype_identifier.read(\"t_contract\")\nelif type_identifier.startswith(\"t_super\"):\nself.__is_super = True\ntype_identifier.read(\"t_super\")\nelse:\nassert False, f\"Unexpected contract type {type_identifier}\"\nself.__name = _parse_user_identifier(type_identifier)\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None, f\"{type_identifier} is not a valid contract\"\nself.__ast_id = AstNodeId(int(match.group(\"number\")))\ntype_identifier.read(match.group(\"number\"))\nself.__reference_resolver = reference_resolver\nself.__cu_hash = cu_hash\ndef abi_type(self) -&gt; str:\nreturn \"address\"\n@property\ndef is_super(self) -&gt; bool:\n\"\"\"\n        !!! warning\n            Until 0.7.6, the `super` keyword ([Identifier][woke.ast.ir.expression.identifier.Identifier]) was of the [Contract][woke.ast.types.Contract] type with `is_super` set to `True`.\n            Since 0.8.0, the `super` keyword is of the [Type][woke.ast.types.Type] type with [Contract][woke.ast.types.Contract] as the `actual_type` and `is_super` set to `True`.\n        !!! warning\n            When this is `True`, the `name` and `ir_node` properties refer to the current contract, not the base contract.\n        !!! example\n            The `name` and `ir_node` properties of the [Contract][woke.ast.types.Contract] type of the `super` expression in the following example refer to the `Foo` contract, not the `Bar` contract.\n            ```solidity\n            contract Foo is Bar {\n                function foo() public {\n                    super.foo();\n                }\n            }\n            ```\n        Returns:\n            `True` if the expression is the `super` keyword.\n        \"\"\"\nreturn self.__is_super\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        Returns:\n            Name of the contract.\n        \"\"\"\nreturn self.__name\n@property\ndef ir_node(self) -&gt; ContractDefinition:\n\"\"\"\n        Returns:\n            Contract definition IR node.\n        \"\"\"\nfrom woke.ast.ir.declaration.contract_definition import ContractDefinition\nnode = self.__reference_resolver.resolve_node(self.__ast_id, self.__cu_hash)\nassert isinstance(node, ContractDefinition)\nreturn node\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Contract.is_super","title":"<code>is_super: bool</code>  <code>property</code>","text":"<p>Warning</p> <p>Until 0.7.6, the <code>super</code> keyword (Identifier) was of the Contract type with <code>is_super</code> set to <code>True</code>. Since 0.8.0, the <code>super</code> keyword is of the Type type with Contract as the <code>actual_type</code> and <code>is_super</code> set to <code>True</code>.</p> <p>Warning</p> <p>When this is <code>True</code>, the <code>name</code> and <code>ir_node</code> properties refer to the current contract, not the base contract.</p> <p>Example</p> <p>The <code>name</code> and <code>ir_node</code> properties of the Contract type of the <code>super</code> expression in the following example refer to the <code>Foo</code> contract, not the <code>Bar</code> contract. <pre><code>contract Foo is Bar {\nfunction foo() public {\nsuper.foo();\n}\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the expression is the <code>super</code> keyword.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Contract.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>Name of the contract.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Contract.ir_node","title":"<code>ir_node: ContractDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ContractDefinition</code> <p>Contract definition IR node.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Struct","title":"<code>Struct</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Struct type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Struct(TypeAbc):\n\"\"\"\n    Struct type.\n    \"\"\"\n__name: str\n__ast_id: AstNodeId\n__data_location: DataLocation\n__is_pointer: bool\n__reference_resolver: ReferenceResolver\n__cu_hash: bytes\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_struct\")\nself.__name = _parse_user_identifier(type_identifier)\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None, f\"{type_identifier} is not a valid struct\"\nself.__ast_id = AstNodeId(int(match.group(\"number\")))\ntype_identifier.read(match.group(\"number\"))\nif type_identifier.startswith(\"_storage\"):\nself.__data_location = DataLocation.STORAGE\ntype_identifier.read(\"_storage\")\nelif type_identifier.startswith(\"_memory\"):\nself.__data_location = DataLocation.MEMORY\ntype_identifier.read(\"_memory\")\nelif type_identifier.startswith(\"_calldata\"):\nself.__data_location = DataLocation.CALLDATA\ntype_identifier.read(\"_calldata\")\nelse:\nassert False, f\"Unexpected array type data location {type_identifier}\"\nif type_identifier.startswith(\"_ptr\"):\nself.__is_pointer = True\ntype_identifier.read(\"_ptr\")\nelse:\nself.__is_pointer = False\nself.__reference_resolver = reference_resolver\nself.__cu_hash = cu_hash\ndef abi_type(self) -&gt; str:\nreturn (\n\"(\"\n+ \",\".join([member.type.abi_type() for member in self.ir_node.members])\n+ \")\"\n)\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        Returns:\n            Name of the struct.\n        \"\"\"\nreturn self.__name\n@property\ndef data_location(self) -&gt; DataLocation:\n\"\"\"\n        Returns:\n            Data location of the struct.\n        \"\"\"\nreturn self.__data_location\n@property\ndef is_pointer(self) -&gt; bool:\n\"\"\"\n        Storage references can be pointers or bound references. In general, local variables are of\n        pointer type, state variables are bound references. Assignments to pointers or deleting\n        them will not modify storage (that will only change the pointer). Assignment from\n        non-storage objects to a variable of storage pointer type is not possible.\n        For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments\n        never change the contents of the original value.\n        Returns:\n            Whether the struct expression is a pointer to storage.\n        \"\"\"\nreturn self.__is_pointer\n@property\ndef ir_node(self) -&gt; StructDefinition:\n\"\"\"\n        Returns:\n            Struct definition IR node.\n        \"\"\"\nfrom woke.ast.ir.declaration.struct_definition import StructDefinition\nnode = self.__reference_resolver.resolve_node(self.__ast_id, self.__cu_hash)\nassert isinstance(node, StructDefinition)\nreturn node\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Struct.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>Name of the struct.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Struct.data_location","title":"<code>data_location: DataLocation</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>DataLocation</code> <p>Data location of the struct.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Struct.is_pointer","title":"<code>is_pointer: bool</code>  <code>property</code>","text":"<p>Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible.</p> <p>For anything other than STORAGE, this always returns <code>True</code> because assignments never change the contents of the original value.</p> <p>Returns:</p> Type Description <code>bool</code> <p>Whether the struct expression is a pointer to storage.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Struct.ir_node","title":"<code>ir_node: StructDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>StructDefinition</code> <p>Struct definition IR node.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Enum","title":"<code>Enum</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Enum type.</p> <p>Warning</p> <p>Enum values are of the Enum type and enums are of the Type type with Enum as the actual_type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Enum(TypeAbc):\n\"\"\"\n    Enum type.\n    !!! warning\n        Enum values are of the [Enum][woke.ast.types.Enum] type and enums are of the [Type][woke.ast.types.Type] type with [Enum][woke.ast.types.Enum] as the [actual_type][woke.ast.types.Type.actual_type].\n    \"\"\"\n__name: str\n__ast_id: AstNodeId\n__reference_resolver: ReferenceResolver\n__cu_hash: bytes\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_enum\")\nself.__name = _parse_user_identifier(type_identifier)\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None, f\"{type_identifier} is not a valid enum\"\nself.__ast_id = AstNodeId(int(match.group(\"number\")))\ntype_identifier.read(match.group(\"number\"))\nself.__reference_resolver = reference_resolver\nself.__cu_hash = cu_hash\ndef abi_type(self) -&gt; str:\nreturn \"uint8\"\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        Returns:\n            Name of the enum.\n        \"\"\"\nreturn self.__name\n@property\ndef ir_node(self) -&gt; EnumDefinition:\n\"\"\"\n        Returns:\n            Enum definition IR node.\n        \"\"\"\nfrom woke.ast.ir.declaration.enum_definition import EnumDefinition\nnode = self.__reference_resolver.resolve_node(self.__ast_id, self.__cu_hash)\nassert isinstance(node, EnumDefinition)\nreturn node\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Enum.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>Name of the enum.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Enum.ir_node","title":"<code>ir_node: EnumDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>EnumDefinition</code> <p>Enum definition IR node.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Magic","title":"<code>Magic</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Magic type represents Solidity language built-in objects.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Magic(TypeAbc):\n\"\"\"\n    Magic type represents Solidity language built-in objects.\n    \"\"\"\n__kind: MagicTypeKind\n__meta_argument_type: typ.Optional[TypeAbc]\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_magic_\")\nmatched = False\nfor kind in MagicTypeKind:\nif type_identifier.startswith(kind):\nself.__kind = MagicTypeKind(kind)\ntype_identifier.read(kind)\nmatched = True\nbreak\nassert matched, f\"Unexpected magic kind {type_identifier}\"\nif self.__kind == MagicTypeKind.META_TYPE:\ntype_identifier.read(\"_\")\nmeta_argument_type = TypeAbc.from_type_identifier(\ntype_identifier, reference_resolver, cu_hash\n)\nassert meta_argument_type is not None\nself.__meta_argument_type = meta_argument_type\nelse:\nself.__meta_argument_type = None\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n@property\ndef kind(self) -&gt; MagicTypeKind:\n\"\"\"\n        Returns:\n            Kind of the magic type.\n        \"\"\"\nreturn self.__kind\n@property\ndef meta_argument_type(self) -&gt; typ.Optional[TypeAbc]:\n\"\"\"\n        Is only set for [MagicTypeKind.META_TYPE][woke.ast.enums.MagicTypeKind.META_TYPE] kind.\n        !!! example\n            [Contract][woke.ast.types.Contract] in `:::solidity type(IERC20)`, [UInt][woke.ast.types.UInt] in `:::solidity type(uint)`.\n        Returns:\n            Type of the meta expression argument.\n        \"\"\"\nreturn self.__meta_argument_type\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.Magic.kind","title":"<code>kind: MagicTypeKind</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>MagicTypeKind</code> <p>Kind of the magic type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Magic.meta_argument_type","title":"<code>meta_argument_type: typ.Optional[TypeAbc]</code>  <code>property</code>","text":"<p>Is only set for MagicTypeKind.META_TYPE kind.</p> <p>Example</p> <p>Contract in <code>type(IERC20)</code>, UInt in <code>type(uint)</code>.</p> <p>Returns:</p> Type Description <code>typ.Optional[TypeAbc]</code> <p>Type of the meta expression argument.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.UserDefinedValueType","title":"<code>UserDefinedValueType</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> Source code in <code>woke/ast/types.py</code> <pre><code>class UserDefinedValueType(TypeAbc):\n__name: str\n__ast_id: AstNodeId\n__reference_resolver: ReferenceResolver\n__cu_hash: bytes\ndef __init__(\nself,\ntype_identifier: StringReader,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\n):\ntype_identifier.read(\"t_userDefinedValueType\")\nself.__name = _parse_user_identifier(type_identifier)\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None, f\"{type_identifier} is not a valid enum\"\nself.__ast_id = AstNodeId(int(match.group(\"number\")))\ntype_identifier.read(match.group(\"number\"))\nself.__reference_resolver = reference_resolver\nself.__cu_hash = cu_hash\ndef abi_type(self) -&gt; str:\nreturn self.ir_node.underlying_type.type.abi_type()\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        Returns:\n            Name of the user defined value type.\n        \"\"\"\nreturn self.__name\n@property\ndef ir_node(self) -&gt; UserDefinedValueTypeDefinition:\n\"\"\"\n        Returns:\n            User defined value type definition IR node.\n        \"\"\"\nfrom woke.ast.ir.declaration.user_defined_value_type_definition import (\nUserDefinedValueTypeDefinition,\n)\nnode = self.__reference_resolver.resolve_node(self.__ast_id, self.__cu_hash)\nassert isinstance(node, UserDefinedValueTypeDefinition)\nreturn node\n</code></pre>"},{"location":"api-reference/ir/types/#woke.ast.types.UserDefinedValueType.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>Name of the user defined value type.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.UserDefinedValueType.ir_node","title":"<code>ir_node: UserDefinedValueTypeDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>UserDefinedValueTypeDefinition</code> <p>User defined value type definition IR node.</p>"},{"location":"api-reference/ir/types/#woke.ast.types.Module","title":"<code>Module</code>  <code>class</code>","text":"<p>         Bases: <code>TypeAbc</code></p> <p>Module type.</p> <p>Note</p> <p>It is probably currently not possible to create an expression of this type.</p> Source code in <code>woke/ast/types.py</code> <pre><code>class Module(TypeAbc):\n\"\"\"\n    Module type.\n    !!! note\n        It is probably currently not possible to create an expression of this type.\n    \"\"\"\n__source_unit_id: int\ndef __init__(self, type_identifier: StringReader):\ntype_identifier.read(\"t_module_\")\nmatch = NUMBER_RE.match(type_identifier.data)\nassert match is not None, f\"{type_identifier} is not a valid module\"\nself.__ast_id = AstNodeId(int(match.group(\"number\")))\ntype_identifier.read(match.group(\"number\"))\nself.__source_unit_id = int(match.group(\"number\"))\ndef abi_type(self) -&gt; str:\nraise NotImplementedError\n</code></pre>"},{"location":"api-reference/ir/declarations/contract-definition/","title":"Contract definition","text":""},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition","title":"<code>woke.ast.ir.declaration.contract_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition","title":"<code>ContractDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of a contract, library or interface. byte_location also includes the contract body.</p> <p>Example</p> <pre><code>contract C {\nuint x;\nfunction f() public {}\n}\n</code></pre> <pre><code>interface I {\nfunction f() external;\n}\n</code></pre> <pre><code>library L {\nfunction f() internal pure returns (uint) {\nreturn 7;\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/declaration/contract_definition.py</code> <pre><code>class ContractDefinition(DeclarationAbc):\n\"\"\"\n    Definition of a contract, library or interface. [byte_location][woke.ast.ir.abc.IrAbc.byte_location] also includes the contract body.\n    !!! example\n        ```solidity\n        contract C {\n            uint x;\n            function f() public {}\n        }\n        ```\n        ```solidity\n        interface I {\n            function f() external;\n        }\n        ```\n        ```solidity\n        library L {\n            function f() internal pure returns (uint) {\n                return 7;\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcContractDefinition\n_parent: SourceUnit\n_abstract: bool\n_base_contracts: List[InheritanceSpecifier]\n# ___dependencies\n_kind: ContractKind\n_fully_implemented: Optional[bool]\n_linearized_base_contracts: List[AstNodeId]\n# __scope\n_documentation: Optional[Union[StructuredDocumentation, str]]\n_compilation_info: Optional[SolcOutputContractInfo]\n_used_errors: List[AstNodeId]\n_enums: List[EnumDefinition]\n_errors: List[ErrorDefinition]\n_events: List[EventDefinition]\n_functions: List[FunctionDefinition]\n_modifiers: List[ModifierDefinition]\n_structs: List[StructDefinition]\n_user_defined_value_types: List[UserDefinedValueTypeDefinition]\n_using_for_directives: List[UsingForDirective]\n_declared_variables: List[VariableDeclaration]\n_used_events: List[AstNodeId]\n# _internal_function_ids\n_child_contracts: Set[ContractDefinition]\ndef __init__(\nself, init: IrInitTuple, contract: SolcContractDefinition, parent: SourceUnit\n):\nsuper().__init__(init, contract, parent)\nself._abstract = contract.abstract\nself._kind = contract.contract_kind\nself._fully_implemented = contract.fully_implemented\nself._linearized_base_contracts = list(contract.linearized_base_contracts)\nself._used_errors = (\nlist(contract.used_errors) if contract.used_errors is not None else []\n)\nself._used_events = (\nlist(contract.used_events) if contract.used_events is not None else []\n)\nif contract.documentation is None:\nself._documentation = None\nelif isinstance(contract.documentation, SolcStructuredDocumentation):\nself._documentation = StructuredDocumentation(\ninit, contract.documentation, self\n)\nelif isinstance(contract.documentation, str):\nself._documentation = contract.documentation\nelse:\nraise TypeError(\nf\"Unknown type of documentation: {type(contract.documentation)}\"\n)\nif init.contracts_info is not None and self.name in init.contracts_info:\nself._compilation_info = init.contracts_info[self.name]\nelse:\nself._compilation_info = None\nself._base_contracts = []\nfor base_contract in contract.base_contracts:\nself._base_contracts.append(InheritanceSpecifier(init, base_contract, self))\nself._child_contracts = set()\nself._enums = []\nself._errors = []\nself._events = []\nself._functions = []\nself._modifiers = []\nself._structs = []\nself._user_defined_value_types = []\nself._using_for_directives = []\nself._declared_variables = []\nfor node in contract.nodes:\nif isinstance(node, SolcEnumDefinition):\nself._enums.append(EnumDefinition(init, node, self))\nelif isinstance(node, SolcErrorDefinition):\nself._errors.append(ErrorDefinition(init, node, self))\nelif isinstance(node, SolcEventDefinition):\nself._events.append(EventDefinition(init, node, self))\nelif isinstance(node, SolcFunctionDefinition):\nself._functions.append(FunctionDefinition(init, node, self))\nelif isinstance(node, SolcModifierDefinition):\nself._modifiers.append(ModifierDefinition(init, node, self))\nelif isinstance(node, SolcStructDefinition):\nself._structs.append(StructDefinition(init, node, self))\nelif isinstance(node, SolcUserDefinedValueTypeDefinition):\nself._user_defined_value_types.append(\nUserDefinedValueTypeDefinition(init, node, self)\n)\nelif isinstance(node, SolcUsingForDirective):\nself._using_for_directives.append(UsingForDirective(init, node, self))\nelif isinstance(node, SolcVariableDeclaration):\nself._declared_variables.append(VariableDeclaration(init, node, self))\ninit.reference_resolver.register_post_process_callback(self._post_process)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor base_contract in self._base_contracts:\nyield from base_contract\nif isinstance(self._documentation, StructuredDocumentation):\nyield from self._documentation\nfor enum in self._enums:\nyield from enum\nfor error in self._errors:\nyield from error\nfor event in self._events:\nyield from event\nfor function in self._functions:\nyield from function\nfor modifier in self._modifiers:\nyield from modifier\nfor struct in self._structs:\nyield from struct\nfor user_defined_value_type in self._user_defined_value_types:\nyield from user_defined_value_type\nfor using_for_directive in self._using_for_directives:\nyield from using_for_directive\nfor declared_variable in self._declared_variables:\nyield from declared_variable\ndef _post_process(self, callback_params: CallbackParams):\nbase_contracts = []\nfor base_contract in self._base_contracts:\ncontract = base_contract.base_name.referenced_declaration\nassert isinstance(contract, ContractDefinition)\ncontract._child_contracts.add(self)\nbase_contracts.append(contract)\nfor error in self.used_errors:\nerror._used_in.append(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, base_contracts)\n)\ndef _destroy(self, base_contracts: List[ContractDefinition]) -&gt; None:\nfor base_contract in base_contracts:\nbase_contract._child_contracts.remove(self)\nfor error in self.used_errors:\nerror._used_in.remove(self)\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\nIDENTIFIER = r\"[a-zA-Z$_][a-zA-Z0-9$_]*\"\nCONTRACT_RE = re.compile(\nr\"^\\s*(abstract\\s)?\\s*contract\\s+(?P&lt;name&gt;{identifier})\".format(\nidentifier=IDENTIFIER\n).encode(\"utf-8\")\n)\nINTERFACE_RE = re.compile(\nr\"^\\s*interface\\s+(?P&lt;name&gt;{identifier})\".format(\nidentifier=IDENTIFIER\n).encode(\"utf-8\")\n)\nLIBRARY_RE = re.compile(\nr\"^\\s*library\\s+(?P&lt;name&gt;{identifier})\".format(\nidentifier=IDENTIFIER\n).encode(\"utf-8\")\n)\nif self.kind == ContractKind.CONTRACT:\nmatch = CONTRACT_RE.match(self._source)\nelif self.kind == ContractKind.INTERFACE:\nmatch = INTERFACE_RE.match(self._source)\nelif self.kind == ContractKind.LIBRARY:\nmatch = LIBRARY_RE.match(self._source)\nelse:\nraise ValueError(f\"Unknown contract kind: {self.kind}\")\nassert match\nreturn self.byte_location[0] + match.start(\"name\"), self.byte_location[\n0\n] + match.end(\"name\")\n@property\ndef parent(self) -&gt; SourceUnit:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef canonical_name(self) -&gt; str:\nreturn self._name\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nret = f\"{'abstract ' if self.abstract else ''}{self.kind} {self.name}\"\nret += (\n\" is \" + \", \".join(spec.source for spec in self.base_contracts)\nif len(self.base_contracts) &gt; 0\nelse \"\"\n)\nif isinstance(self.documentation, StructuredDocumentation):\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.text.splitlines())\n+ \"\\n\"\n+ ret\n)\nelif isinstance(self.documentation, str):\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.splitlines())\n+ \"\\n\"\n+ ret\n)\nelse:\nreturn ret\n@property\ndef abstract(self) -&gt; bool:\n\"\"\"\n        Is `False` if the [kind][woke.ast.ir.declaration.contract_definition.ContractDefinition.kind] is [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] or [ContractKind.INTERFACE][woke.ast.enums.ContractKind.INTERFACE].\n        Returns:\n            `True` if the contract is abstract, `False` otherwise.\n        \"\"\"\nreturn self._abstract\n@property\ndef base_contracts(self) -&gt; Tuple[InheritanceSpecifier, ...]:\n\"\"\"\n        Returns base contracts as specified in the source code. Does not return all base contracts (recursively).\n        !!! example\n            `A1` lists the interface `I` as a base contract.\n            `A2` lists the interface `I` as a base contract.\n            `B` lists the contracts `A1` and `A2` as base contracts.\n            ```solidity\n            interface I {}\n            contract A1 is I {}\n            contract A2 is I {}\n            contract B is A1, A2 {}\n            ```\n        Returns:\n            Base contracts of this contract.\n        \"\"\"\nreturn tuple(self._base_contracts)\n@property\ndef child_contracts(self) -&gt; FrozenSet[ContractDefinition]:\n\"\"\"\n        Returns:\n            Contracts that list this contract in their [base_contracts][woke.ast.ir.declaration.contract_definition.ContractDefinition.base_contracts] property.\n        \"\"\"\nreturn frozenset(self._child_contracts)\n@property\ndef kind(self) -&gt; ContractKind:\n\"\"\"\n        Returns:\n            Contract kind.\n        \"\"\"\nreturn self._kind\n@property\ndef fully_implemented(self) -&gt; Optional[bool]:\n\"\"\"\n        Is `None` when a file that imports this contract cannot be compiled. This may happen in the LSP server where partial project analysis is supported.\n        Returns:\n            `True` if all functions and modifiers of the contract are implemented, `False` otherwise.\n        \"\"\"\nreturn self._fully_implemented\n@property\ndef linearized_base_contracts(self) -&gt; Tuple[ContractDefinition, ...]:\n\"\"\"\n        Returns:\n            C3 linearized list of all base contracts.\n        \"\"\"\nbase_contracts = []\nfor base_contract in self._linearized_base_contracts:\nnode = self._reference_resolver.resolve_node(base_contract, self._cu_hash)\nassert isinstance(node, ContractDefinition)\nbase_contracts.append(node)\nreturn tuple(base_contracts)\n@property\ndef used_errors(self) -&gt; Tuple[ErrorDefinition, ...]:\n\"\"\"\n        Returns:\n            Errors used in the contract.\n        \"\"\"\nused_errors = []\nfor error in self._used_errors:\nnode = self._reference_resolver.resolve_node(error, self._cu_hash)\nassert isinstance(node, ErrorDefinition)\nused_errors.append(node)\nreturn tuple(used_errors)\n@property\ndef used_events(self) -&gt; Tuple[EventDefinition, ...]:\n\"\"\"\n        Returns:\n            Events emitted by the contract as well as all events defined and inherited by the contract.\n        \"\"\"\nused_events = []\nfor event in self._used_events:\nnode = self._reference_resolver.resolve_node(event, self._cu_hash)\nassert isinstance(node, EventDefinition)\nused_events.append(node)\nreturn tuple(used_events)\n@property\ndef documentation(self) -&gt; Optional[Union[StructuredDocumentation, str]]:\n\"\"\"\n        Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3.\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation of this contract, if any.\n        \"\"\"\nreturn self._documentation\n@property\ndef compilation_info(self) -&gt; Optional[SolcOutputContractInfo]:\nreturn self._compilation_info\n@property\ndef enums(self) -&gt; Tuple[EnumDefinition, ...]:\n\"\"\"\n        Returns:\n            Enum definitions contained in this contract.\n        \"\"\"\nreturn tuple(self._enums)\n@property\ndef errors(self) -&gt; Tuple[ErrorDefinition, ...]:\n\"\"\"\n        Returns:\n            Error definitions contained in this contract.\n        \"\"\"\nreturn tuple(self._errors)\n@property\ndef events(self) -&gt; Tuple[EventDefinition, ...]:\n\"\"\"\n        Returns:\n            Event definitions contained in this contract.\n        \"\"\"\nreturn tuple(self._events)\n@property\ndef functions(self) -&gt; Tuple[FunctionDefinition, ...]:\n\"\"\"\n        Returns:\n            Function definitions contained in this contract.\n        \"\"\"\nreturn tuple(self._functions)\n@property\ndef modifiers(self) -&gt; Tuple[ModifierDefinition, ...]:\n\"\"\"\n        Returns:\n            Modifier definitions contained in this contract.\n        \"\"\"\nreturn tuple(self._modifiers)\n@property\ndef structs(self) -&gt; Tuple[StructDefinition, ...]:\n\"\"\"\n        Returns:\n            Struct definitions contained in this contract.\n        \"\"\"\nreturn tuple(self._structs)\n@property\ndef user_defined_value_types(self) -&gt; Tuple[UserDefinedValueTypeDefinition, ...]:\n\"\"\"\n        Returns:\n            User defined value type definitions contained in this contract.\n        \"\"\"\nreturn tuple(self._user_defined_value_types)\n@property\ndef using_for_directives(self) -&gt; Tuple[UsingForDirective, ...]:\n\"\"\"\n        Returns:\n            Using for directives contained in this contract.\n        \"\"\"\nreturn tuple(self._using_for_directives)\n@property\ndef declared_variables(self) -&gt; Tuple[VariableDeclaration, ...]:\n\"\"\"\n        Returns:\n            Variable declarations contained in this contract.\n        \"\"\"\nreturn tuple(self._declared_variables)\ndef declarations_iter(self) -&gt; Iterator[DeclarationAbc]:\n\"\"\"\n        Yields:\n            All declarations contained in this contract.\n        \"\"\"\nyield from self.enums\nfor enum in self.enums:\nyield from enum.values\nyield from self.errors\nyield from self.events\nyield from self.functions\nyield from self.modifiers\nyield from self.structs\nyield from self.user_defined_value_types\nyield from self.declared_variables\n</code></pre>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.abstract","title":"<code>abstract: bool</code>  <code>property</code>","text":"<p>Is <code>False</code> if the kind is ContractKind.LIBRARY or ContractKind.INTERFACE.</p> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the contract is abstract, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.base_contracts","title":"<code>base_contracts: Tuple[InheritanceSpecifier, ...]</code>  <code>property</code>","text":"<p>Returns base contracts as specified in the source code. Does not return all base contracts (recursively).</p> <p>Example</p> <p><code>A1</code> lists the interface <code>I</code> as a base contract.</p> <p><code>A2</code> lists the interface <code>I</code> as a base contract.</p> <p><code>B</code> lists the contracts <code>A1</code> and <code>A2</code> as base contracts. <pre><code>interface I {}\ncontract A1 is I {}\ncontract A2 is I {}\ncontract B is A1, A2 {}\n</code></pre></p> <p>Returns:</p> Type Description <code>Tuple[InheritanceSpecifier, ...]</code> <p>Base contracts of this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.child_contracts","title":"<code>child_contracts: FrozenSet[ContractDefinition]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>FrozenSet[ContractDefinition]</code> <p>Contracts that list this contract in their base_contracts property.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.declared_variables","title":"<code>declared_variables: Tuple[VariableDeclaration, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[VariableDeclaration, ...]</code> <p>Variable declarations contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.documentation","title":"<code>documentation: Optional[Union[StructuredDocumentation, str]]</code>  <code>property</code>","text":"<p>Of StructuredDocumentation type since Solidity 0.6.3.</p> <p>Returns:</p> Type Description <code>Optional[Union[StructuredDocumentation, str]]</code> <p>NatSpec documentation of this contract, if any.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.enums","title":"<code>enums: Tuple[EnumDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[EnumDefinition, ...]</code> <p>Enum definitions contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.errors","title":"<code>errors: Tuple[ErrorDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ErrorDefinition, ...]</code> <p>Error definitions contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.events","title":"<code>events: Tuple[EventDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[EventDefinition, ...]</code> <p>Event definitions contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.fully_implemented","title":"<code>fully_implemented: Optional[bool]</code>  <code>property</code>","text":"<p>Is <code>None</code> when a file that imports this contract cannot be compiled. This may happen in the LSP server where partial project analysis is supported.</p> <p>Returns:</p> Type Description <code>Optional[bool]</code> <p><code>True</code> if all functions and modifiers of the contract are implemented, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.functions","title":"<code>functions: Tuple[FunctionDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[FunctionDefinition, ...]</code> <p>Function definitions contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.kind","title":"<code>kind: ContractKind</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ContractKind</code> <p>Contract kind.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.linearized_base_contracts","title":"<code>linearized_base_contracts: Tuple[ContractDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ContractDefinition, ...]</code> <p>C3 linearized list of all base contracts.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.modifiers","title":"<code>modifiers: Tuple[ModifierDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ModifierDefinition, ...]</code> <p>Modifier definitions contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.parent","title":"<code>parent: SourceUnit</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>SourceUnit</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.structs","title":"<code>structs: Tuple[StructDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[StructDefinition, ...]</code> <p>Struct definitions contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.used_errors","title":"<code>used_errors: Tuple[ErrorDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ErrorDefinition, ...]</code> <p>Errors used in the contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.used_events","title":"<code>used_events: Tuple[EventDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[EventDefinition, ...]</code> <p>Events emitted by the contract as well as all events defined and inherited by the contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.user_defined_value_types","title":"<code>user_defined_value_types: Tuple[UserDefinedValueTypeDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[UserDefinedValueTypeDefinition, ...]</code> <p>User defined value type definitions contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.using_for_directives","title":"<code>using_for_directives: Tuple[UsingForDirective, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[UsingForDirective, ...]</code> <p>Using for directives contained in this contract.</p>"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.declarations_iter","title":"<code>declarations_iter()</code>","text":"<p>Yields:</p> Type Description <code>DeclarationAbc</code> <p>All declarations contained in this contract.</p> Source code in <code>woke/ast/ir/declaration/contract_definition.py</code> <pre><code>def declarations_iter(self) -&gt; Iterator[DeclarationAbc]:\n\"\"\"\n    Yields:\n        All declarations contained in this contract.\n    \"\"\"\nyield from self.enums\nfor enum in self.enums:\nyield from enum.values\nyield from self.errors\nyield from self.events\nyield from self.functions\nyield from self.modifiers\nyield from self.structs\nyield from self.user_defined_value_types\nyield from self.declared_variables\n</code></pre>"},{"location":"api-reference/ir/declarations/enum-definition/","title":"Enum definition","text":""},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition","title":"<code>woke.ast.ir.declaration.enum_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition.EnumDefinition","title":"<code>EnumDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of an enum.</p> <p>Example</p> <pre><code>enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill }\n</code></pre> Source code in <code>woke/ast/ir/declaration/enum_definition.py</code> <pre><code>class EnumDefinition(DeclarationAbc):\n\"\"\"\n    Definition of an enum.\n    !!! example\n        ```solidity\n        enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill }\n        ```\n    \"\"\"\n_ast_node: SolcEnumDefinition\n_parent: Union[ContractDefinition, SourceUnit]\n_canonical_name: str\n_values: List[EnumValue]\n_documentation: Optional[StructuredDocumentation]\ndef __init__(\nself, init: IrInitTuple, enum: SolcEnumDefinition, parent: SolidityAbc\n):\nsuper().__init__(init, enum, parent)\nself._canonical_name = enum.canonical_name\nself._values = []\nfor value in enum.members:\nself._values.append(EnumValue(init, value, self))\nself._documentation = (\nStructuredDocumentation(init, enum.documentation, self)\nif enum.documentation is not None\nelse None\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor value in self._values:\nyield from value\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\nIDENTIFIER = r\"[a-zA-Z$_][a-zA-Z0-9$_]*\"\nENUM_RE = re.compile(\nr\"^\\s*enum\\s+(?P&lt;name&gt;{identifier})\".format(identifier=IDENTIFIER).encode(\n\"utf-8\"\n)\n)\nbyte_start = self._ast_node.src.byte_offset\nmatch = ENUM_RE.match(self._source)\nassert match\nreturn byte_start + match.start(\"name\"), byte_start + match.end(\"name\")\n@property\ndef parent(self) -&gt; Union[SourceUnit, ContractDefinition]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef canonical_name(self) -&gt; str:\nreturn self._canonical_name\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nreturn (\nf\"enum {self.name}\"\n+ \" {\\n\"\n+ \",\\n\".join(f\"    {value.name}\" for value in self._values)\n+ \"\\n}\"\n)\n@property\ndef values(self) -&gt; Tuple[EnumValue, ...]:\n\"\"\"\n        Returns:\n            Enum values defined in this enum.\n        \"\"\"\nreturn tuple(self._values)\n@property\ndef documentation(self) -&gt; Optional[StructuredDocumentation]:\n\"\"\"\n        Added in Solidity 0.8.20.\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any.\n        \"\"\"\nreturn self._documentation\n</code></pre>"},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition.EnumDefinition.documentation","title":"<code>documentation: Optional[StructuredDocumentation]</code>  <code>property</code>","text":"<p>Added in Solidity 0.8.20.</p> <p>Returns:</p> Type Description <code>Optional[StructuredDocumentation]</code> <p>NatSpec documentation string, if any.</p>"},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition.EnumDefinition.parent","title":"<code>parent: Union[SourceUnit, ContractDefinition]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[SourceUnit, ContractDefinition]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition.EnumDefinition.values","title":"<code>values: Tuple[EnumValue, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[EnumValue, ...]</code> <p>Enum values defined in this enum.</p>"},{"location":"api-reference/ir/declarations/enum-value/","title":"Enum value","text":""},{"location":"api-reference/ir/declarations/enum-value/#woke.ast.ir.declaration.enum_value","title":"<code>woke.ast.ir.declaration.enum_value</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/enum-value/#woke.ast.ir.declaration.enum_value.EnumValue","title":"<code>EnumValue</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of an enum value inside an enum definition.</p> <p>Example</p> <p><code>GoLeft</code>, <code>GoRight</code>, <code>GoStraight</code>, <code>SitStill</code> in the following enum definition: <pre><code>enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill }\n</code></pre></p> Source code in <code>woke/ast/ir/declaration/enum_value.py</code> <pre><code>class EnumValue(DeclarationAbc):\n\"\"\"\n    Definition of an enum value inside an enum definition.\n    !!! example\n        `GoLeft`, `GoRight`, `GoStraight`, `SitStill` in the following enum definition:\n        ```solidity\n        enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill }\n        ```\n    \"\"\"\n_ast_node: SolcEnumValue\n_parent: EnumDefinition\ndef __init__(self, init: IrInitTuple, value: SolcEnumValue, parent: SolidityAbc):\nsuper().__init__(init, value, parent)\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\nsrc = self._ast_node.src\nreturn src.byte_offset, src.byte_offset + src.byte_length\n@property\ndef parent(self) -&gt; EnumDefinition:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef canonical_name(self) -&gt; str:\nreturn f\"{self._parent.canonical_name}.{self._name}\"\n@property\ndef declaration_string(self) -&gt; str:\nreturn self.name\n</code></pre>"},{"location":"api-reference/ir/declarations/enum-value/#woke.ast.ir.declaration.enum_value.EnumValue.parent","title":"<code>parent: EnumDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>EnumDefinition</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/error-definition/","title":"Error definition","text":""},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition","title":"<code>woke.ast.ir.declaration.error_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition","title":"<code>ErrorDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of an error.</p> <p>Example</p> <pre><code>error InsufficientBalance(uint256 available, uint256 required);\n</code></pre> Source code in <code>woke/ast/ir/declaration/error_definition.py</code> <pre><code>class ErrorDefinition(DeclarationAbc):\n\"\"\"\n    Definition of an error.\n    !!! example\n        ```solidity\n        error InsufficientBalance(uint256 available, uint256 required);\n        ```\n    \"\"\"\n_ast_node: SolcErrorDefinition\n_parent: Union[ContractDefinition, SourceUnit]\n_parameters: ParameterList\n_documentation: Optional[StructuredDocumentation]\n_error_selector: Optional[bytes]\n_used_in: List[ContractDefinition]\ndef __init__(\nself, init: IrInitTuple, error: SolcErrorDefinition, parent: SolidityAbc\n):\nsuper().__init__(init, error, parent)\nself._parameters = ParameterList(init, error.parameters, self)\nself._documentation = (\nStructuredDocumentation(init, error.documentation, self)\nif error.documentation is not None\nelse None\n)\nself._error_selector = (\nbytes.fromhex(error.error_selector) if error.error_selector else None\n)\nself._used_in = []\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._parameters\nif self._documentation is not None:\nyield from self._documentation\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\n# SolcErrorDefinition node always contains name_location attribute\n# this method is implemented here just for completeness and to satisfy the linter\nbyte_start = self._ast_node.name_location.byte_offset\nbyte_length = self._ast_node.name_location.byte_length\nreturn byte_start, byte_start + byte_length\n@property\ndef parent(self) -&gt; Union[ContractDefinition, SourceUnit]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\n@lru_cache(maxsize=2048)\ndef canonical_name(self) -&gt; str:\nfrom .contract_definition import ContractDefinition\nif isinstance(self._parent, ContractDefinition):\nreturn f\"{self._parent.canonical_name}.{self._name}\"\nreturn self._name\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nret = (\nf\"error {self._name}(\"\n+ \", \".join(\nparam.declaration_string for param in self.parameters.parameters\n)\n+ \")\"\n)\nif self.documentation is not None:\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.text.splitlines())\n+ \"\\n\"\n+ ret\n)\nreturn ret\n@property\ndef parameters(self) -&gt; ParameterList:\n\"\"\"\n        Returns:\n            Parameter list describing parameters of the error.\n        \"\"\"\nreturn self._parameters\n@property\ndef documentation(self) -&gt; Optional[StructuredDocumentation]:\n\"\"\"\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any.\n        \"\"\"\nreturn self._documentation\n@property\n@lru_cache(maxsize=2048)\ndef error_selector(self) -&gt; bytes:\n\"\"\"\n        Returns:\n            Selector of the error.\n        \"\"\"\nif self._error_selector is not None:\nreturn self._error_selector\nelse:\nsignature = f\"{self._name}(\"\nsignature += \",\".join(\nparam.type.abi_type() for param in self.parameters.parameters\n)\nsignature += \")\"\nh = keccak.new(data=signature.encode(\"utf-8\"), digest_bits=256)\nreturn h.digest()[:4]\n@property\ndef used_in(self) -&gt; Tuple[ContractDefinition, ...]:\n\"\"\"\n        Returns:\n            List of contracts where the error is used.\n        \"\"\"\nreturn tuple(self._used_in)\n</code></pre>"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.documentation","title":"<code>documentation: Optional[StructuredDocumentation]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[StructuredDocumentation]</code> <p>NatSpec documentation string, if any.</p>"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.error_selector","title":"<code>error_selector: bytes</code>  <code>cached</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>bytes</code> <p>Selector of the error.</p>"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.parameters","title":"<code>parameters: ParameterList</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ParameterList</code> <p>Parameter list describing parameters of the error.</p>"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.parent","title":"<code>parent: Union[ContractDefinition, SourceUnit]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[ContractDefinition, SourceUnit]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.used_in","title":"<code>used_in: Tuple[ContractDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ContractDefinition, ...]</code> <p>List of contracts where the error is used.</p>"},{"location":"api-reference/ir/declarations/event-definition/","title":"Event definition","text":""},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition","title":"<code>woke.ast.ir.declaration.event_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition","title":"<code>EventDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of an event.</p> <p>Example</p> <pre><code>event Transfer(address indexed from, address indexed to, uint256 value);\n</code></pre> Source code in <code>woke/ast/ir/declaration/event_definition.py</code> <pre><code>class EventDefinition(DeclarationAbc):\n\"\"\"\n    Definition of an event.\n    !!! example\n        ```solidity\n        event Transfer(address indexed from, address indexed to, uint256 value);\n        ```\n    \"\"\"\n_ast_node: SolcEventDefinition\n_parent: ContractDefinition\n_anonymous: bool\n_parameters: ParameterList\n_documentation: Optional[Union[StructuredDocumentation, str]]\n_event_selector: Optional[bytes]\ndef __init__(\nself, init: IrInitTuple, event: SolcEventDefinition, parent: SolidityAbc\n):\nsuper().__init__(init, event, parent)\nself._anonymous = event.anonymous\nself._parameters = ParameterList(init, event.parameters, self)\nif event.documentation is None:\nself._documentation = None\nelif isinstance(event.documentation, SolcStructuredDocumentation):\nself._documentation = StructuredDocumentation(\ninit, event.documentation, self\n)\nelif isinstance(event.documentation, str):\nself._documentation = event.documentation\nelse:\nraise TypeError(\nf\"Unknown type of documentation: {type(event.documentation)}\"\n)\nself._event_selector = (\nbytes.fromhex(event.event_selector) if event.event_selector else None\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._parameters\nif isinstance(self._documentation, StructuredDocumentation):\nyield from self._documentation\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\nIDENTIFIER = r\"[a-zA-Z$_][a-zA-Z0-9$_]*\"\nEVENT_RE = re.compile(\nr\"^\\s*event\\s+(?P&lt;name&gt;{identifier})\".format(identifier=IDENTIFIER).encode(\n\"utf-8\"\n)\n)\nbyte_start = self._ast_node.src.byte_offset\nmatch = EVENT_RE.match(self._source)\nassert match\nreturn byte_start + match.start(\"name\"), byte_start + match.end(\"name\")\n@property\ndef parent(self) -&gt; ContractDefinition:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef canonical_name(self) -&gt; str:\nreturn f\"{self._parent.canonical_name}.{self._name}\"\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nret = (\nf\"event {self._name}(\"\n+ \", \".join(\nparam.declaration_string for param in self.parameters.parameters\n)\n+ f\"){' anonymous' if self.anonymous else ''}\"\n)\nif isinstance(self.documentation, StructuredDocumentation):\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.text.splitlines())\n+ \"\\n\"\n+ ret\n)\nelif isinstance(self.documentation, str):\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.splitlines())\n+ \"\\n\"\n+ ret\n)\nelse:\nreturn ret\n@property\ndef anonymous(self) -&gt; bool:\n\"\"\"\n        !!! example\n            ```solidity\n            event Transfer(address indexed from, address indexed to, uint256 value) anonymous;\n            ```\n        Returns:\n            `True` if the event is anonymous, `False` otherwise.\n        \"\"\"\nreturn self._anonymous\n@property\ndef parameters(self) -&gt; ParameterList:\n\"\"\"\n        Returns:\n            Parameter list describing parameters of the event.\n        \"\"\"\nreturn self._parameters\n@property\ndef documentation(self) -&gt; Optional[Union[StructuredDocumentation, str]]:\n\"\"\"\n        Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3.\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any.\n        \"\"\"\nreturn self._documentation\n@property\n@lru_cache(maxsize=2048)\ndef event_selector(self) -&gt; bytes:\n\"\"\"\n        Returns:\n            Selector of the event.\n        \"\"\"\nif self._event_selector is not None:\nreturn self._event_selector\nelse:\nsignature = f\"{self._name}({','.join(param.type.abi_type() for param in self.parameters.parameters)})\"\nh = keccak.new(data=signature.encode(\"utf-8\"), digest_bits=256)\nreturn h.digest()\n</code></pre>"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.anonymous","title":"<code>anonymous: bool</code>  <code>property</code>","text":"<p>Example</p> <pre><code>event Transfer(address indexed from, address indexed to, uint256 value) anonymous;\n</code></pre> <p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the event is anonymous, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.documentation","title":"<code>documentation: Optional[Union[StructuredDocumentation, str]]</code>  <code>property</code>","text":"<p>Of StructuredDocumentation type since Solidity 0.6.3.</p> <p>Returns:</p> Type Description <code>Optional[Union[StructuredDocumentation, str]]</code> <p>NatSpec documentation string, if any.</p>"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.event_selector","title":"<code>event_selector: bytes</code>  <code>cached</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>bytes</code> <p>Selector of the event.</p>"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.parameters","title":"<code>parameters: ParameterList</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ParameterList</code> <p>Parameter list describing parameters of the event.</p>"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.parent","title":"<code>parent: ContractDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ContractDefinition</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/function-definition/","title":"Function definition","text":""},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition","title":"<code>woke.ast.ir.declaration.function_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition","title":"<code>FunctionDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of a function.</p> <p>Example</p> <p>Free function (= outside of a contract): <pre><code>function f(uint a, uint b) pure returns (uint) {\nreturn a + b;\n}\n</code></pre></p> <p>Function inside a contract (lines 2-4): <pre><code>contract C {\nfunction f(uint a, uint b) public pure returns (uint) {\nreturn a + b;\n}\n}\n</code></pre></p> <p>Constructor (lines 3-5): <pre><code>contract C {\nuint public x;\nconstructor(uint a) public {\nx = a;\n}\n}\n</code></pre></p> <p>Fallback function (line 2): <pre><code>contract C {\nfallback() external payable {}\n}\n</code></pre></p> <p>Receive function (line 2): <pre><code>contract C {\nreceive() external payable {}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/declaration/function_definition.py</code> <pre><code>class FunctionDefinition(DeclarationAbc):\n\"\"\"\n    Definition of a function.\n    !!! example\n        Free function (= outside of a contract):\n        ```solidity linenums=\"1\"\n        function f(uint a, uint b) pure returns (uint) {\n            return a + b;\n        }\n        ```\n        Function inside a contract (lines 2-4):\n        ```solidity linenums=\"1\"\n        contract C {\n            function f(uint a, uint b) public pure returns (uint) {\n                return a + b;\n            }\n        }\n        ```\n        Constructor (lines 3-5):\n        ```solidity linenums=\"1\"\n        contract C {\n            uint public x;\n            constructor(uint a) public {\n                x = a;\n            }\n        }\n        ```\n        Fallback function (line 2):\n        ```solidity linenums=\"1\"\n        contract C {\n            fallback() external payable {}\n        }\n        ```\n        Receive function (line 2):\n        ```solidity linenums=\"1\"\n        contract C {\n            receive() external payable {}\n        }\n        ```\n    \"\"\"\n_ast_node: SolcFunctionDefinition\n_parent: Union[ContractDefinition, SourceUnit]\n_child_functions: Set[Union[FunctionDefinition, VariableDeclaration]]\n_implemented: bool\n_kind: FunctionKind\n_modifiers: List[ModifierInvocation]\n_parameters: ParameterList\n_return_parameters: ParameterList\n# __scope\n_state_mutability: StateMutability\n_virtual: bool\n_visibility: Visibility\n_base_functions: List[AstNodeId]\n_documentation: Optional[Union[StructuredDocumentation, str]]\n_function_selector: Optional[bytes]\n_body: Optional[Block]\n_overrides: Optional[OverrideSpecifier]\ndef __init__(\nself, init: IrInitTuple, function: SolcFunctionDefinition, parent: SolidityAbc\n):\nsuper().__init__(init, function, parent)\nself._child_functions = set()\nself._implemented = function.implemented\nself._kind = function.kind\nif self._kind == FunctionKind.CONSTRUCTOR:\nself._name = \"constructor\"\nelif self._kind == FunctionKind.FALLBACK:\nself._name = \"fallback\"\nelif self._kind == FunctionKind.RECEIVE:\nself._name = \"receive\"\nself._modifiers = [\nModifierInvocation(init, modifier, self) for modifier in function.modifiers\n]\nself._parameters = ParameterList(init, function.parameters, self)\nself._return_parameters = ParameterList(init, function.return_parameters, self)\n# self.__scope = function.scope\nself._state_mutability = function.state_mutability\nself._virtual = function.virtual\nself._visibility = function.visibility\nself._base_functions = (\nlist(function.base_functions) if function.base_functions is not None else []\n)\nif function.documentation is None:\nself._documentation = None\nelif isinstance(function.documentation, SolcStructuredDocumentation):\nself._documentation = StructuredDocumentation(\ninit, function.documentation, self\n)\nelif isinstance(function.documentation, str):\nself._documentation = function.documentation\nelse:\nraise TypeError(\nf\"Unknown type of documentation: {type(function.documentation)}\"\n)\nself._function_selector = (\nbytes.fromhex(function.function_selector)\nif function.function_selector\nelse None\n)\nif (\nself._visibility in {Visibility.PUBLIC, Visibility.EXTERNAL}\nand self._kind == FunctionKind.FUNCTION\n):\nassert self._function_selector is not None\nelse:\nassert self._function_selector is None\nself._body = Block(init, function.body, self) if function.body else None\nassert (self._body is not None) == self._implemented\nself._overrides = (\nOverrideSpecifier(init, function.overrides, self)\nif function.overrides\nelse None\n)\nself._reference_resolver.register_post_process_callback(self._post_process)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor modifier in self._modifiers:\nyield from modifier\nyield from self._parameters\nyield from self._return_parameters\nif isinstance(self._documentation, StructuredDocumentation):\nyield from self._documentation\nif self._body is not None:\nyield from self._body\nif self._overrides is not None:\nyield from self._overrides\ndef _post_process(self, callback_params: CallbackParams):\nbase_functions = self.base_functions\nfor base_function in base_functions:\nbase_function._child_functions.add(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, base_functions)\n)\ndef _destroy(self, base_functions: Tuple[FunctionDefinition]) -&gt; None:\nfor base_function in base_functions:\nbase_function._child_functions.remove(self)\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\nIDENTIFIER = r\"[a-zA-Z$_][a-zA-Z0-9$_]*\"\nFUNCTION_RE = re.compile(\nr\"^\\s*function\\s+(?P&lt;name&gt;{identifier})\".format(\nidentifier=IDENTIFIER\n).encode(\"utf-8\")\n)\nCONSTRUCTOR_RE = re.compile(r\"^\\s*(?P&lt;name&gt;constructor)\".encode(\"utf-8\"))\nFALLBACK_RE = re.compile(r\"^\\s*(?P&lt;name&gt;fallback)\".encode(\"utf-8\"))\nRECEIVE_RE = re.compile(r\"^\\s*(?P&lt;name&gt;receive)\".encode(\"utf-8\"))\nregexps = [FUNCTION_RE, CONSTRUCTOR_RE, FALLBACK_RE, RECEIVE_RE]\nmatches = [regexp.match(self._source) for regexp in regexps]\nassert any(matches)\nbyte_start = self._ast_node.src.byte_offset\nmatch = next(match for match in matches if match)\nreturn byte_start + match.start(\"name\"), byte_start + match.end(\"name\")\ndef get_all_references(\nself, include_declarations: bool\n) -&gt; Iterator[\nUnion[\nDeclarationAbc,\nIdentifier,\nIdentifierPathPart,\nMemberAccess,\nExternalReference,\nUnaryOperation,\nBinaryOperation,\n]\n]:\nfrom .variable_declaration import VariableDeclaration\nprocessed_declarations: Set[Union[FunctionDefinition, VariableDeclaration]] = {\nself\n}\ndeclarations_queue: Deque[\nUnion[FunctionDefinition, VariableDeclaration]\n] = deque([self])\nwhile declarations_queue:\ndeclaration = declarations_queue.pop()\nif include_declarations:\nyield declaration\nyield from declaration.references\nif isinstance(declaration, (FunctionDefinition, VariableDeclaration)):\nfor base_function in declaration.base_functions:\nif base_function not in processed_declarations:\ndeclarations_queue.append(base_function)\nprocessed_declarations.add(base_function)\nif isinstance(declaration, FunctionDefinition):\nfor child_function in declaration.child_functions:\nif child_function not in processed_declarations:\ndeclarations_queue.append(child_function)\nprocessed_declarations.add(child_function)\n@property\ndef parent(self) -&gt; Union[ContractDefinition, SourceUnit]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\n@lru_cache(maxsize=2048)\ndef canonical_name(self) -&gt; str:\nfrom .contract_definition import ContractDefinition\nif isinstance(self._parent, ContractDefinition):\nreturn f\"{self._parent.canonical_name}.{self._name}({','.join(param.type_name.type_string for param in self._parameters.parameters)})\"\nreturn f\"{self._name}({','.join(param.type_name.type_string for param in self._parameters.parameters)})\"\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nif self.kind == FunctionKind.CONSTRUCTOR:\nret = \"constructor\"\nelif self.kind == FunctionKind.FALLBACK:\nret = \"fallback\"\nelif self.kind == FunctionKind.RECEIVE:\nret = \"receive\"\nelse:\nret = f\"function {self.name}\"\nret += f\"({', '.join(parameter.declaration_string for parameter in self.parameters.parameters)})\"\nret += f\" {self.visibility}\"\nret += (\nf\" {self.state_mutability}\"\nif self.state_mutability != StateMutability.NONPAYABLE\nelse \"\"\n)\nret += f\" virtual\" if self.virtual else \"\"\nret += (\n(\nf\" override\"\n+ (\n\"(\"\n+ \", \".join(\noverride.source for override in self.overrides.overrides\n)\n+ \")\"\nif len(self.overrides.overrides) &gt; 0\nelse \"\"\n)\n)\nif self.overrides is not None\nelse \"\"\n)\nret += (\n(\" \" + \" \".join(modifier.source for modifier in self.modifiers))\nif len(self.modifiers) &gt; 0\nelse \"\"\n)\nret += (\n\" returns (\"\n+ \", \".join(\nparameter.declaration_string\nfor parameter in self.return_parameters.parameters\n)\n+ \")\"\nif len(self.return_parameters.parameters) &gt; 0\nelse \"\"\n)\nif isinstance(self.documentation, StructuredDocumentation):\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.text.splitlines())\n+ \"\\n\"\n+ ret\n)\nelif isinstance(self.documentation, str):\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.splitlines())\n+ \"\\n\"\n+ ret\n)\nelse:\nreturn ret\n@property\ndef implemented(self) -&gt; bool:\n\"\"\"\n        Returns:\n            `True` if the function [body][woke.ast.ir.declaration.function_definition.FunctionDefinition.body] is not `None`, `False` otherwise.\n        \"\"\"\nreturn self._implemented\n@property\ndef kind(self) -&gt; FunctionKind:\n\"\"\"\n        Returns:\n            Kind of the function.\n        \"\"\"\nreturn self._kind\n@property\ndef modifiers(self) -&gt; Tuple[ModifierInvocation, ...]:\n\"\"\"\n        Also includes base constructor invocations.\n        !!! example\n            Both `:::solidity ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18)` and `initializer` are listed by this property.\n            ```solidity\n            contract MyToken is ERC20Token {\n                constructor() ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18) initializer {}\n            }\n            ```\n        Returns:\n            List of modifiers applied to the function.\n        \"\"\"\nreturn tuple(self._modifiers)\n@property\ndef parameters(self) -&gt; ParameterList:\n\"\"\"\n        Returns:\n            Parameter list describing the function parameters.\n        \"\"\"\nreturn self._parameters\n@property\ndef return_parameters(self) -&gt; ParameterList:\n\"\"\"\n        Returns:\n            Parameter list describing the function return parameters.\n        \"\"\"\nreturn self._return_parameters\n@property\ndef state_mutability(self) -&gt; StateMutability:\n\"\"\"\n        Returns:\n            State mutability of the function.\n        \"\"\"\nreturn self._state_mutability\n@property\ndef virtual(self) -&gt; bool:\n\"\"\"\n        Returns:\n            `True` if the function is virtual, `False` otherwise.\n        \"\"\"\nreturn self._virtual\n@property\ndef visibility(self) -&gt; Visibility:\n\"\"\"\n        Returns:\n            Visibility of the function.\n        \"\"\"\nreturn self._visibility\n@property\ndef base_functions(self) -&gt; Tuple[FunctionDefinition, ...]:\n\"\"\"\n        !!! example\n            `A.foo` on lines 6-8 lists `I.foo` on line 2 as a base function.\n            `B.foo` on lines 12-14 lists only `A.foo` on lines 6-8 as a base function.\n            ```solidity linenums=\"1\"\n            interface I {\n                function foo() external returns(uint);\n            }\n            contract A is I {\n                function foo() external pure virtual override returns(uint) {\n                    return 1;\n                }\n            }\n            contract B is A {\n                function foo() external pure override returns(uint) {\n                    return 2;\n                }\n            }\n            ```\n        !!! example\n            `A1.foo` on lines 6-8 lists `I.foo` on line 2 as a base function.\n            `A2.foo` on lines 12-14 lists `I.foo` on line 2 as a base function.\n            `B.foo` on lines 18-20 lists `A1.foo` on lines 6-8 and `A2.foo` on lines 12-14 as base functions.\n            ```solidity linenums=\"1\"\n            interface I {\n                function foo() external returns(uint);\n            }\n            contract A1 is I {\n                function foo() external pure virtual override returns(uint) {\n                    return 1;\n                }\n            }\n            contract A2 is I {\n                function foo() external pure virtual override returns(uint) {\n                    return 2;\n                }\n            }\n            contract B is A1, A2 {\n                function foo() external pure override(A1, A2) returns(uint) {\n                    return 3;\n                }\n            }\n            ```\n        Returns:\n            List of base functions overridden by this function.\n        \"\"\"\nbase_functions = []\nfor base_function_id in self._base_functions:\nbase_function = self._reference_resolver.resolve_node(\nbase_function_id, self._cu_hash\n)\nassert isinstance(base_function, FunctionDefinition)\nbase_functions.append(base_function)\nreturn tuple(base_functions)\n@property\ndef child_functions(\nself,\n) -&gt; FrozenSet[Union[FunctionDefinition, VariableDeclaration]]:\n\"\"\"\n        Returns:\n            Functions that list this function in their [base_functions][woke.ast.ir.declaration.function_definition.FunctionDefinition.base_functions] property.\n        \"\"\"\nreturn frozenset(self._child_functions)\n@property\ndef documentation(self) -&gt; Optional[Union[StructuredDocumentation, str]]:\n\"\"\"\n        Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3.\n        Returns:\n            [NatSpec](https://solidity.readthedocs.io/en/latest/natspec-format.html) documentation string, if any.\n        \"\"\"\nreturn self._documentation\n@property\ndef function_selector(self) -&gt; Optional[bytes]:\n\"\"\"\n        Is only set for [Visibility.PUBLIC][woke.ast.enums.Visibility.PUBLIC] and [Visibility.EXTERNAL][woke.ast.enums.Visibility.EXTERNAL] functions of the [FunctionKind.FUNCTION][woke.ast.enums.FunctionKind.FUNCTION] kind.\n        Returns:\n            Selector of the function.\n        \"\"\"\nreturn self._function_selector\n@property\ndef body(self) -&gt; Optional[Block]:\n\"\"\"\n        Returns:\n            Body of the function, if any.\n        \"\"\"\nreturn self._body\n@property\ndef overrides(self) -&gt; Optional[OverrideSpecifier]:\n\"\"\"\n        Returns override specifier as present in the source code.\n        !!! example\n            `I.foo` on line 2 does not have an override specifier.\n            `A.foo` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty.\n            `B.foo` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg one item referencing the contract `A` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]).\n            ```solidity linenums=\"1\"\n            interface I {\n                function foo() external returns(uint);\n            }\n            contract A is I {\n                function foo() external pure virtual override returns(uint) {\n                    return 1;\n                }\n            }\n            contract B is A {\n                function foo() external pure override(A) returns(uint) {\n                    return 2;\n                }\n            }\n            ```\n        Returns:\n            Override specifier, if any.\n        \"\"\"\nreturn self._overrides\n@property\n@lru_cache(maxsize=2048)\ndef cfg(self) -&gt; Optional[ControlFlowGraph]:\nfrom woke.analysis.cfg import ControlFlowGraph\nif self.body is None:\nreturn None\nreturn ControlFlowGraph(self)\n</code></pre>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.base_functions","title":"<code>base_functions: Tuple[FunctionDefinition, ...]</code>  <code>property</code>","text":"<p>Example</p> <p><code>A.foo</code> on lines 6-8 lists <code>I.foo</code> on line 2 as a base function.</p> <p><code>B.foo</code> on lines 12-14 lists only <code>A.foo</code> on lines 6-8 as a base function. <pre><code>interface I {\nfunction foo() external returns(uint);\n}\ncontract A is I {\nfunction foo() external pure virtual override returns(uint) {\nreturn 1;\n}\n}\ncontract B is A {\nfunction foo() external pure override returns(uint) {\nreturn 2;\n}\n}\n</code></pre></p> <p>Example</p> <p><code>A1.foo</code> on lines 6-8 lists <code>I.foo</code> on line 2 as a base function.</p> <p><code>A2.foo</code> on lines 12-14 lists <code>I.foo</code> on line 2 as a base function.</p> <p><code>B.foo</code> on lines 18-20 lists <code>A1.foo</code> on lines 6-8 and <code>A2.foo</code> on lines 12-14 as base functions. <pre><code>interface I {\nfunction foo() external returns(uint);\n}\ncontract A1 is I {\nfunction foo() external pure virtual override returns(uint) {\nreturn 1;\n}\n}\ncontract A2 is I {\nfunction foo() external pure virtual override returns(uint) {\nreturn 2;\n}\n}\ncontract B is A1, A2 {\nfunction foo() external pure override(A1, A2) returns(uint) {\nreturn 3;\n}\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Tuple[FunctionDefinition, ...]</code> <p>List of base functions overridden by this function.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.body","title":"<code>body: Optional[Block]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[Block]</code> <p>Body of the function, if any.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.child_functions","title":"<code>child_functions: FrozenSet[Union[FunctionDefinition, VariableDeclaration]]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>FrozenSet[Union[FunctionDefinition, VariableDeclaration]]</code> <p>Functions that list this function in their base_functions property.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.documentation","title":"<code>documentation: Optional[Union[StructuredDocumentation, str]]</code>  <code>property</code>","text":"<p>Of StructuredDocumentation type since Solidity 0.6.3.</p> <p>Returns:</p> Type Description <code>Optional[Union[StructuredDocumentation, str]]</code> <p>NatSpec documentation string, if any.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.function_selector","title":"<code>function_selector: Optional[bytes]</code>  <code>property</code>","text":"<p>Is only set for Visibility.PUBLIC and Visibility.EXTERNAL functions of the FunctionKind.FUNCTION kind.</p> <p>Returns:</p> Type Description <code>Optional[bytes]</code> <p>Selector of the function.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.implemented","title":"<code>implemented: bool</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the function body is not <code>None</code>, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.kind","title":"<code>kind: FunctionKind</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>FunctionKind</code> <p>Kind of the function.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.modifiers","title":"<code>modifiers: Tuple[ModifierInvocation, ...]</code>  <code>property</code>","text":"<p>Also includes base constructor invocations.</p> <p>Example</p> <p>Both <code>ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18)</code> and <code>initializer</code> are listed by this property. <pre><code>contract MyToken is ERC20Token {\nconstructor() ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18) initializer {}\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Tuple[ModifierInvocation, ...]</code> <p>List of modifiers applied to the function.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.overrides","title":"<code>overrides: Optional[OverrideSpecifier]</code>  <code>property</code>","text":"<p>Returns override specifier as present in the source code.</p> <p>Example</p> <p><code>I.foo</code> on line 2 does not have an override specifier.</p> <p><code>A.foo</code> on lines 6-8 has an override specifier with the overrides property empty.</p> <p><code>B.foo</code> on lines 12-14 has an override specifier with the overrides property containg one item referencing the contract <code>A</code> (ContractDefinition). <pre><code>interface I {\nfunction foo() external returns(uint);\n}\ncontract A is I {\nfunction foo() external pure virtual override returns(uint) {\nreturn 1;\n}\n}\ncontract B is A {\nfunction foo() external pure override(A) returns(uint) {\nreturn 2;\n}\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[OverrideSpecifier]</code> <p>Override specifier, if any.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.parameters","title":"<code>parameters: ParameterList</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ParameterList</code> <p>Parameter list describing the function parameters.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.parent","title":"<code>parent: Union[ContractDefinition, SourceUnit]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[ContractDefinition, SourceUnit]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.return_parameters","title":"<code>return_parameters: ParameterList</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ParameterList</code> <p>Parameter list describing the function return parameters.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.state_mutability","title":"<code>state_mutability: StateMutability</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>StateMutability</code> <p>State mutability of the function.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.virtual","title":"<code>virtual: bool</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the function is virtual, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.visibility","title":"<code>visibility: Visibility</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Visibility</code> <p>Visibility of the function.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/","title":"Modifier definition","text":""},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition","title":"<code>woke.ast.ir.declaration.modifier_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition","title":"<code>ModifierDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of a modifier.</p> <p>Example</p> <pre><code>modifier onlyOwner {\nrequire(msg.sender == owner);\n_;\n}\n</code></pre> Source code in <code>woke/ast/ir/declaration/modifier_definition.py</code> <pre><code>class ModifierDefinition(DeclarationAbc):\n\"\"\"\n    Definition of a modifier.\n    !!! example\n        ```solidity\n        modifier onlyOwner {\n            require(msg.sender == owner);\n            _;\n        }\n        ```\n    \"\"\"\n_ast_node: SolcModifierDefinition\n_parent: ContractDefinition\n_child_modifiers: Set[ModifierDefinition]\n_body: Optional[Block]\n_implemented: bool\n_parameters: ParameterList\n_virtual: bool\n_visibility: Visibility\n_base_modifiers: List[AstNodeId]\n_documentation: Optional[Union[StructuredDocumentation, str]]\n_overrides: Optional[OverrideSpecifier]\ndef __init__(\nself, init: IrInitTuple, modifier: SolcModifierDefinition, parent: SolidityAbc\n):\nsuper().__init__(init, modifier, parent)\nself._child_modifiers = set()\nself._body = Block(init, modifier.body, self) if modifier.body else None\nself._implemented = self._body is not None\nself._parameters = ParameterList(init, modifier.parameters, self)\nself._virtual = modifier.virtual\nself._visibility = modifier.visibility\nself._base_modifiers = (\nlist(modifier.base_modifiers) if modifier.base_modifiers is not None else []\n)\nif modifier.documentation is None:\nself._documentation = None\nelif isinstance(modifier.documentation, SolcStructuredDocumentation):\nself._documentation = StructuredDocumentation(\ninit, modifier.documentation, self\n)\nelif isinstance(modifier.documentation, str):\nself._documentation = modifier.documentation\nelse:\nraise TypeError(\nf\"Unknown type of documentation: {type(modifier.documentation)}\"\n)\nself._overrides = (\nOverrideSpecifier(init, modifier.overrides, self)\nif modifier.overrides is not None\nelse None\n)\nself._reference_resolver.register_post_process_callback(self._post_process)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nif self._body is not None:\nyield from self._body\nyield from self._parameters\nif isinstance(self._documentation, StructuredDocumentation):\nyield from self._documentation\nif self._overrides is not None:\nyield from self._overrides\ndef _post_process(self, callback_params: CallbackParams):\nbase_modifiers = self.base_modifiers\nfor base_modifier in base_modifiers:\nbase_modifier._child_modifiers.add(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, base_modifiers)\n)\ndef _destroy(self, base_modifiers: Tuple[ModifierDefinition]) -&gt; None:\nfor base_modifier in base_modifiers:\nbase_modifier._child_modifiers.remove(self)\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\nIDENTIFIER = r\"[a-zA-Z$_][a-zA-Z0-9$_]*\"\nMODIFIER_RE = re.compile(\nr\"^\\s*modifier\\s+(?P&lt;name&gt;{identifier})\".format(\nidentifier=IDENTIFIER\n).encode(\"utf-8\")\n)\nbyte_start = self._ast_node.src.byte_offset\nmatch = MODIFIER_RE.match(self._source)\nassert match\nreturn byte_start + match.start(\"name\"), byte_start + match.end(\"name\")\ndef get_all_references(\nself, include_declarations: bool\n) -&gt; Iterator[\nUnion[\nDeclarationAbc,\nIdentifier,\nIdentifierPathPart,\nMemberAccess,\nExternalReference,\nUnaryOperation,\nBinaryOperation,\n]\n]:\nprocessed_declarations: Set[ModifierDefinition] = {self}\ndeclarations_queue: Deque[ModifierDefinition] = deque([self])\nwhile declarations_queue:\ndeclaration = declarations_queue.pop()\nif include_declarations:\nyield declaration\nyield from declaration.references\nfor base_modifier in declaration.base_modifiers:\nif base_modifier not in processed_declarations:\ndeclarations_queue.append(base_modifier)\nprocessed_declarations.add(base_modifier)\nfor child_modifier in declaration.child_modifiers:\nif child_modifier not in processed_declarations:\ndeclarations_queue.append(child_modifier)\nprocessed_declarations.add(child_modifier)\n@property\ndef parent(self) -&gt; ContractDefinition:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef canonical_name(self) -&gt; str:\nreturn f\"{self._parent.canonical_name}.{self._name}\"\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nret = f\"modifier {self._name}\"\nret += (\nf\"({', '.join(param.declaration_string for param in self.parameters.parameters)})\"\nif len(self.parameters.parameters) &gt; 0\nelse \"\"\n)\nret += \" virtual\" if self.virtual else \"\"\nret += (\n(\nf\" override\"\n+ (\n\"(\"\n+ \", \".join(\noverride.source for override in self.overrides.overrides\n)\n+ \")\"\nif len(self.overrides.overrides) &gt; 0\nelse \"\"\n)\n)\nif self.overrides is not None\nelse \"\"\n)\nif isinstance(self.documentation, StructuredDocumentation):\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.text.splitlines())\n+ \"\\n\"\n+ ret\n)\nelif isinstance(self.documentation, str):\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.splitlines())\n+ \"\\n\"\n+ ret\n)\nelse:\nreturn ret\n@property\ndef body(self) -&gt; Optional[Block]:\n\"\"\"\n        Returns:\n            Body of the modifier, if any.\n        \"\"\"\nreturn self._body\n@property\ndef implemented(self) -&gt; bool:\n\"\"\"\n        Returns:\n            `True` if the modifier [body][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.body] is not `None`, `False` otherwise.\n        \"\"\"\nreturn self._implemented\n@property\ndef parameters(self) -&gt; ParameterList:\n\"\"\"\n        Returns:\n            Parameter list describing the modifier parameters.\n        \"\"\"\nreturn self._parameters\n@property\ndef virtual(self) -&gt; bool:\n\"\"\"\n        Returns:\n            `True` if the modifier is virtual, `False` otherwise.\n        \"\"\"\nreturn self._virtual\n@property\ndef visibility(self) -&gt; Visibility:\n\"\"\"\n        Returns:\n            Visibility of the modifier.\n        \"\"\"\nreturn self._visibility\n@property\ndef base_modifiers(self) -&gt; Tuple[ModifierDefinition, ...]:\n\"\"\"\n        !!! example\n            `B.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier.\n            `C.mod` on lines 12-14 lists only `B.mod` on lines 6-8 as a base modifier.\n            ```solidity linenums=\"1\"\n            abstract contract A {\n                modifier mod virtual;\n            }\n            contract B is A {\n                modifier mod virtual override {\n                    _;\n                }\n            }\n            contract C is B {\n                modifier mod override {\n                    _;\n                }\n            }\n            ```\n        !!! example\n            `B1.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier.\n            `B2.mod` on lines 12-14 lists `A.mod` on line 2 as a base modifier.\n            `C.mod` on lines 18-20 lists `B1.mod` on lines 6-8 and `B2.mod` on lines 12-14 as base modifiers.\n            ```solidity linenums=\"1\"\n            abstract contract A {\n                modifier mod virtual;\n            }\n            contract B1 is A {\n                modifier mod virtual override {\n                    _;\n                }\n            }\n            contract B2 is A {\n                modifier mod virtual override {\n                    _;\n                }\n            }\n            contract C is B1, B2 {\n                modifier mod override(B1, B2) {\n                    _;\n                }\n            }\n            ```\n        Returns:\n            List of base modifiers overridden by this modifier.\n        \"\"\"\nbase_modifiers = []\nfor base_modifier_id in self._base_modifiers:\nbase_modifier = self._reference_resolver.resolve_node(\nbase_modifier_id, self._cu_hash\n)\nassert isinstance(base_modifier, ModifierDefinition)\nbase_modifiers.append(base_modifier)\nreturn tuple(base_modifiers)\n@property\ndef child_modifiers(self) -&gt; FrozenSet[ModifierDefinition]:\n\"\"\"\n        Returns:\n            Modifiers that list this modifier in their [base_modifiers][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.base_modifiers] property.\n        \"\"\"\nreturn frozenset(self._child_modifiers)\n@property\ndef documentation(self) -&gt; Optional[Union[StructuredDocumentation, str]]:\n\"\"\"\n        Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3.\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any.\n        \"\"\"\nreturn self._documentation\n@property\ndef overrides(self) -&gt; Optional[OverrideSpecifier]:\n\"\"\"\n        Returns override specifier as present in the source code.\n        !!! example\n            `A.mod` on line 2 does not have an override specifier.\n            `B1.mod` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty.\n            `B2.mod` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty.\n            `C.mod` on lines 18-20 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg two items referencing the contracts `B1` and `B2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]).\n            ```solidity linenums=\"1\"\n            abstract contract A {\n                modifier mod virtual;\n            }\n            contract B1 is A {\n                modifier mod virtual override {\n                    _;\n                }\n            }\n            contract B2 is A {\n                modifier mod virtual override {\n                    _;\n                }\n            }\n            contract C is B1, B2 {\n                modifier mod override(B1, B2) {\n                    _;\n                }\n            }\n            ```\n        Returns:\n            Override specifier, if any.\n        \"\"\"\nreturn self._overrides\n@property\n@lru_cache(maxsize=2048)\ndef cfg(self) -&gt; Optional[ControlFlowGraph]:\nfrom woke.analysis.cfg import ControlFlowGraph\nif self.body is None:\nreturn None\nreturn ControlFlowGraph(self)\n</code></pre>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.base_modifiers","title":"<code>base_modifiers: Tuple[ModifierDefinition, ...]</code>  <code>property</code>","text":"<p>Example</p> <p><code>B.mod</code> on lines 6-8 lists <code>A.mod</code> on line 2 as a base modifier.</p> <p><code>C.mod</code> on lines 12-14 lists only <code>B.mod</code> on lines 6-8 as a base modifier. <pre><code>abstract contract A {\nmodifier mod virtual;\n}\ncontract B is A {\nmodifier mod virtual override {\n_;\n}\n}\ncontract C is B {\nmodifier mod override {\n_;\n}\n}\n</code></pre></p> <p>Example</p> <p><code>B1.mod</code> on lines 6-8 lists <code>A.mod</code> on line 2 as a base modifier.</p> <p><code>B2.mod</code> on lines 12-14 lists <code>A.mod</code> on line 2 as a base modifier.</p> <p><code>C.mod</code> on lines 18-20 lists <code>B1.mod</code> on lines 6-8 and <code>B2.mod</code> on lines 12-14 as base modifiers. <pre><code>abstract contract A {\nmodifier mod virtual;\n}\ncontract B1 is A {\nmodifier mod virtual override {\n_;\n}\n}\ncontract B2 is A {\nmodifier mod virtual override {\n_;\n}\n}\ncontract C is B1, B2 {\nmodifier mod override(B1, B2) {\n_;\n}\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Tuple[ModifierDefinition, ...]</code> <p>List of base modifiers overridden by this modifier.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.body","title":"<code>body: Optional[Block]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[Block]</code> <p>Body of the modifier, if any.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.child_modifiers","title":"<code>child_modifiers: FrozenSet[ModifierDefinition]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>FrozenSet[ModifierDefinition]</code> <p>Modifiers that list this modifier in their base_modifiers property.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.documentation","title":"<code>documentation: Optional[Union[StructuredDocumentation, str]]</code>  <code>property</code>","text":"<p>Of StructuredDocumentation type since Solidity 0.6.3.</p> <p>Returns:</p> Type Description <code>Optional[Union[StructuredDocumentation, str]]</code> <p>NatSpec documentation string, if any.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.implemented","title":"<code>implemented: bool</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the modifier body is not <code>None</code>, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.overrides","title":"<code>overrides: Optional[OverrideSpecifier]</code>  <code>property</code>","text":"<p>Returns override specifier as present in the source code.</p> <p>Example</p> <p><code>A.mod</code> on line 2 does not have an override specifier.</p> <p><code>B1.mod</code> on lines 6-8 has an override specifier with the overrides property empty.</p> <p><code>B2.mod</code> on lines 12-14 has an override specifier with the overrides property empty.</p> <p><code>C.mod</code> on lines 18-20 has an override specifier with the overrides property containg two items referencing the contracts <code>B1</code> and <code>B2</code> (ContractDefinition). <pre><code>abstract contract A {\nmodifier mod virtual;\n}\ncontract B1 is A {\nmodifier mod virtual override {\n_;\n}\n}\ncontract B2 is A {\nmodifier mod virtual override {\n_;\n}\n}\ncontract C is B1, B2 {\nmodifier mod override(B1, B2) {\n_;\n}\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[OverrideSpecifier]</code> <p>Override specifier, if any.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.parameters","title":"<code>parameters: ParameterList</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ParameterList</code> <p>Parameter list describing the modifier parameters.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.parent","title":"<code>parent: ContractDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ContractDefinition</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.virtual","title":"<code>virtual: bool</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the modifier is virtual, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.visibility","title":"<code>visibility: Visibility</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Visibility</code> <p>Visibility of the modifier.</p>"},{"location":"api-reference/ir/declarations/struct-definition/","title":"Struct definition","text":""},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition","title":"<code>woke.ast.ir.declaration.struct_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition.StructDefinition","title":"<code>StructDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of a struct.</p> <p>Example</p> <pre><code>struct S {\nuint a;\nuint b;\n}\n</code></pre> Source code in <code>woke/ast/ir/declaration/struct_definition.py</code> <pre><code>class StructDefinition(DeclarationAbc):\n\"\"\"\n    Definition of a struct.\n    !!! example\n        ```solidity\n        struct S {\n            uint a;\n            uint b;\n        }\n        ```\n    \"\"\"\n_ast_node: SolcStructDefinition\n_parent: Union[ContractDefinition, SourceUnit]\n_canonical_name: str\n_members: List[VariableDeclaration]\n_visibility: Visibility\n_documentation: Optional[StructuredDocumentation]\ndef __init__(\nself,\ninit: IrInitTuple,\nstruct_definition: SolcStructDefinition,\nparent: SolidityAbc,\n):\nsuper().__init__(init, struct_definition, parent)\nself._canonical_name = struct_definition.canonical_name\n# TODO scope\nself._visibility = struct_definition.visibility\nself._members = []\nfor member in struct_definition.members:\nself._members.append(VariableDeclaration(init, member, self))\nself._documentation = (\nStructuredDocumentation(init, struct_definition.documentation, self)\nif struct_definition.documentation is not None\nelse None\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor member in self._members:\nyield from member\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\nIDENTIFIER = r\"[a-zA-Z$_][a-zA-Z0-9$_]*\"\nSTRUCT_RE = re.compile(\nr\"^\\s*struct\\s+(?P&lt;name&gt;{identifier})\".format(identifier=IDENTIFIER).encode(\n\"utf-8\"\n)\n)\nbyte_start = self._ast_node.src.byte_offset\nmatch = STRUCT_RE.match(self._source)\nassert match\nreturn byte_start + match.start(\"name\"), byte_start + match.end(\"name\")\n@property\ndef parent(self) -&gt; Union[ContractDefinition, SourceUnit]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef canonical_name(self) -&gt; str:\nreturn self._canonical_name\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nreturn (\nf\"struct {self.name}\"\n+ \" {\\n\"\n+ \";\\n\".join(f\"    {member.declaration_string}\" for member in self._members)\n+ \";\\n}\"\n)\n@property\ndef members(self) -&gt; Tuple[VariableDeclaration, ...]:\n\"\"\"\n        Returns:\n            Tuple of member variable declarations.\n        \"\"\"\nreturn tuple(self._members)\n@property\ndef documentation(self) -&gt; Optional[StructuredDocumentation]:\n\"\"\"\n        Added in Solidity 0.8.20.\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any.\n        \"\"\"\nreturn self._documentation\n</code></pre>"},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition.StructDefinition.documentation","title":"<code>documentation: Optional[StructuredDocumentation]</code>  <code>property</code>","text":"<p>Added in Solidity 0.8.20.</p> <p>Returns:</p> Type Description <code>Optional[StructuredDocumentation]</code> <p>NatSpec documentation string, if any.</p>"},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition.StructDefinition.members","title":"<code>members: Tuple[VariableDeclaration, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[VariableDeclaration, ...]</code> <p>Tuple of member variable declarations.</p>"},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition.StructDefinition.parent","title":"<code>parent: Union[ContractDefinition, SourceUnit]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[ContractDefinition, SourceUnit]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/","title":"User defined value type definition","text":""},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/#woke.ast.ir.declaration.user_defined_value_type_definition","title":"<code>woke.ast.ir.declaration.user_defined_value_type_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/#woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition","title":"<code>UserDefinedValueTypeDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Definition of a user defined value type.</p> <p>Example</p> <pre><code>type MyInt is uint;\n</code></pre> Source code in <code>woke/ast/ir/declaration/user_defined_value_type_definition.py</code> <pre><code>class UserDefinedValueTypeDefinition(DeclarationAbc):\n\"\"\"\n    Definition of a user defined value type.\n    !!! example\n        ```solidity\n        type MyInt is uint;\n        ```\n    \"\"\"\n_ast_node: SolcUserDefinedValueTypeDefinition\n_parent: Union[ContractDefinition, SourceUnit]\n_underlying_type: ElementaryTypeName\ndef __init__(\nself,\ninit: IrInitTuple,\nuser_defined_value_type_definition: SolcUserDefinedValueTypeDefinition,\nparent: SolidityAbc,\n):\nsuper().__init__(init, user_defined_value_type_definition, parent)\nself._underlying_type = ElementaryTypeName(\ninit, user_defined_value_type_definition.underlying_type, self\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._underlying_type\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\nIDENTIFIER = r\"[a-zA-Z$_][a-zA-Z0-9$_]*\"\nUSER_DEF_VAL_TYPE_RE = re.compile(\nr\"^\\s*type\\s+(?P&lt;name&gt;{identifier})\".format(identifier=IDENTIFIER).encode(\n\"utf-8\"\n)\n)\nbyte_start = self._ast_node.src.byte_offset\nmatch = USER_DEF_VAL_TYPE_RE.match(self._source)\nassert match\nreturn byte_start + match.start(\"name\"), byte_start + match.end(\"name\")\n@property\ndef parent(self) -&gt; Union[ContractDefinition, SourceUnit]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\n@lru_cache(maxsize=2048)\ndef canonical_name(self) -&gt; str:\nfrom .contract_definition import ContractDefinition\nif isinstance(self._parent, ContractDefinition):\nreturn f\"{self._parent.canonical_name}.{self._name}\"\nreturn self._name\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nreturn f\"type {self.name} is {self._underlying_type.source}\"\n@property\ndef underlying_type(self) -&gt; ElementaryTypeName:\n\"\"\"\n        Returns:\n            Underlying type of the user defined value type.\n        \"\"\"\nreturn self._underlying_type\n</code></pre>"},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/#woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition.parent","title":"<code>parent: Union[ContractDefinition, SourceUnit]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[ContractDefinition, SourceUnit]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/#woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition.underlying_type","title":"<code>underlying_type: ElementaryTypeName</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ElementaryTypeName</code> <p>Underlying type of the user defined value type.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/","title":"Variable declaration","text":""},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration","title":"<code>woke.ast.ir.declaration.variable_declaration</code>  <code>module</code>","text":""},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration","title":"<code>VariableDeclaration</code>  <code>class</code>","text":"<p>         Bases: <code>DeclarationAbc</code></p> <p>Example</p> <p>A variable can be declared:</p> <ul> <li>inside a ContractDefinition as a state variable:<ul> <li><code>uint public stateVar</code> in line 4,</li> </ul> </li> <li>inside a ParameterList:<ul> <li>in an ErrorDefinition parameters:<ul> <li><code>uint errorArg</code> in line 5,</li> </ul> </li> <li>in an EventDefinition parameters:<ul> <li><code>uint indexed eventArg</code> in line 6,</li> </ul> </li> <li>in a FunctionDefinition parameters or return parameters:<ul> <li><code>uint funcReturnArg</code> in line 16</li> <li><code>uint x</code> and <code>uint</code> in line 20</li> <li><code>uint</code> in line 30</li> <li><code>function (uint) pure returns(uint) h</code> and the third occurrence <code>uint</code> in line 34,</li> </ul> </li> <li>in a ModifierDefinition parameters:<ul> <li><code>uint modifierArg</code> in line 12,</li> </ul> </li> <li>in a FunctionTypeName parameters or return parameters:<ul> <li>the first two occurrences of <code>uint</code> in line 34,</li> </ul> </li> <li>in a TryCatchClause:<ul> <li><code>uint z</code> in line 22</li> <li><code>string memory reason</code> in line 24,</li> </ul> </li> </ul> </li> <li>inside a SourceUnit only as a constant variable:<ul> <li><code>uint constant CONST = 10</code> in line 1,</li> </ul> </li> <li>inside a StructDefinition as a member variable:<ul> <li><code>uint structMember</code> in line 9,</li> </ul> </li> <li>inside a VariableDeclarationStatement in a FunctionDefinition.body as a local variable:<ul> <li><code>uint y = x</code> in line 21.</li> </ul> </li> </ul> <pre><code>uint constant CONST = 10;\ncontract C {\nuint public stateVar;\nerror E(uint errorArg);\nevent F(uint indexed eventArg);\nstruct S {\nuint structMember;\n}\nmodifier M(uint modifierArg) {\n_;\n}\nfunction foo() public pure returns (uint funcReturnArg) {\nfuncReturnArg = 7;\n}\nfunction f(uint x) public view returns (uint) {\nuint y = x;\ntry this.tmp() returns (uint z) {\ny = z;\n} catch Error(string memory reason) {\nrevert(reason);\n}\nreturn y;\n}\nfunction tmp() external pure returns(uint) {\nreturn CONST;\n}\nfunction g(function (uint) pure returns(uint) h) internal pure returns (uint) {\nreturn h(7);\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/declaration/variable_declaration.py</code> <pre><code>class VariableDeclaration(DeclarationAbc):\n\"\"\"\n    !!! example\n        A variable can be declared:\n        - inside a [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] as a state variable:\n            - `:::solidity uint public stateVar` in line 4,\n        - inside a [ParameterList][woke.ast.ir.meta.parameter_list.ParameterList]:\n            - in an [ErrorDefinition][woke.ast.ir.declaration.error_definition.ErrorDefinition] parameters:\n                - `:::solidity uint errorArg` in line 5,\n            - in an [EventDefinition][woke.ast.ir.declaration.event_definition.EventDefinition] parameters:\n                - `:::solidity uint indexed eventArg` in line 6,\n            - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] parameters or return parameters:\n                - `:::solidity uint funcReturnArg` in line 16\n                - `:::solidity uint x` and `:::solidity uint` in line 20\n                - `:::solidity uint` in line 30\n                - `:::solidity function (uint) pure returns(uint) h` and the third occurrence `:::solidity uint` in line 34,\n            - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition] parameters:\n                - `:::solidity uint modifierArg` in line 12,\n            - in a [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] parameters or return parameters:\n                - the first two occurrences of `:::solidity uint` in line 34,\n            - in a [TryCatchClause][woke.ast.ir.meta.try_catch_clause.TryCatchClause]:\n                - `:::solidity uint z` in line 22\n                - `:::solidity string memory reason` in line 24,\n        - inside a [SourceUnit][woke.ast.ir.meta.source_unit.SourceUnit] only as a constant variable:\n            - `:::solidity uint constant CONST = 10` in line 1,\n        - inside a [StructDefinition][woke.ast.ir.declaration.struct_definition.StructDefinition] as a member variable:\n            - `:::solidity uint structMember` in line 9,\n        - inside a [VariableDeclarationStatement][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement] in a [FunctionDefinition.body][woke.ast.ir.declaration.function_definition.FunctionDefinition.body] as a local variable:\n            - `:::solidity uint y = x` in line 21.\n        ```solidity linenums=\"1\"\n        uint constant CONST = 10;\n        contract C {\n            uint public stateVar;\n            error E(uint errorArg);\n            event F(uint indexed eventArg);\n            struct S {\n                uint structMember;\n            }\n            modifier M(uint modifierArg) {\n                _;\n            }\n            function foo() public pure returns (uint funcReturnArg) {\n                funcReturnArg = 7;\n            }\n            function f(uint x) public view returns (uint) {\n                uint y = x;\n                try this.tmp() returns (uint z) {\n                    y = z;\n                } catch Error(string memory reason) {\n                    revert(reason);\n                }\n                return y;\n            }\n            function tmp() external pure returns(uint) {\n                return CONST;\n            }\n            function g(function (uint) pure returns(uint) h) internal pure returns (uint) {\n                return h(7);\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcVariableDeclaration\n_parent: Union[\nContractDefinition,\nParameterList,\nSourceUnit,\nStructDefinition,\nVariableDeclarationStatement,\n]\n_constant: bool\n# __scope\n_mutability: Optional[Mutability]\n_state_variable: bool\n_data_location: DataLocation\n_visibility: Visibility\n_base_functions: List[AstNodeId]\n_documentation: Optional[StructuredDocumentation]\n_function_selector: Optional[bytes]\n_indexed: bool\n_overrides: Optional[OverrideSpecifier]\n_type_name: TypeNameAbc\n_value: Optional[ExpressionAbc]\n_type_descriptions: TypeDescriptionsModel\ndef __init__(\nself,\ninit: IrInitTuple,\nvariable_declaration: SolcVariableDeclaration,\nparent: SolidityAbc,\n):\nsuper().__init__(init, variable_declaration, parent)\nself._constant = variable_declaration.constant\nself._mutability = variable_declaration.mutability\n# TODO scope\nself._state_variable = variable_declaration.state_variable\nself._data_location = variable_declaration.storage_location\nself._visibility = variable_declaration.visibility\nself._base_functions = (\nlist(variable_declaration.base_functions)\nif variable_declaration.base_functions is not None\nelse []\n)\nself._documentation = (\nStructuredDocumentation(init, variable_declaration.documentation, self)\nif variable_declaration.documentation\nelse None\n)\nself._function_selector = (\nbytes.fromhex(variable_declaration.function_selector)\nif variable_declaration.function_selector\nelse None\n)\nself._indexed = variable_declaration.indexed or False\nself._overrides = (\nOverrideSpecifier(init, variable_declaration.overrides, self)\nif variable_declaration.overrides\nelse None\n)\n# type name should not be None\n# prior 0.5.0, there was a `var` keyword which resulted in the type name being None\nassert (\nvariable_declaration.type_name is not None\n), \"Variable declaration must have a type name\"\nself._type_name = TypeNameAbc.from_ast(\ninit, variable_declaration.type_name, self\n)\nself._value = (\nExpressionAbc.from_ast(init, variable_declaration.value, self)\nif variable_declaration.value is not None\nelse None\n)\nself._type_descriptions = variable_declaration.type_descriptions\nself._reference_resolver.register_post_process_callback(self._post_process)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nif self._documentation is not None:\nyield from self._documentation\nif self._overrides is not None:\nyield from self._overrides\nyield from self._type_name\nif self._value is not None:\nyield from self._value\ndef _post_process(self, callback_params: CallbackParams):\nbase_functions = self.base_functions\nfor base_function in base_functions:\nbase_function._child_functions.add(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, base_functions)\n)\ndef _destroy(self, base_functions: Tuple[FunctionDefinition]) -&gt; None:\nfor base_function in base_functions:\nbase_function._child_functions.discard(self)\ndef _parse_name_location(self) -&gt; Tuple[int, int]:\n# this one is a bit tricky\n# it is easier to parse the variable declaration from the end (while omitting an optional assigned expression)\nif self._value is None:\nsource_without_value = self._source\nelse:\nlength_without_value = self._value.byte_location[0] - self.byte_location[0]\nsource_without_value = self._source[:length_without_value]\nIDENTIFIER = r\"[a-zA-Z$_][a-zA-Z0-9$_]*\"\nVARIABLE_RE = re.compile(\nr\"(?P&lt;name&gt;{identifier})(\\s*=)?\\s*$\".format(identifier=IDENTIFIER).encode(\n\"utf-8\"\n)\n)\nmatch = VARIABLE_RE.search(source_without_value)\nassert match\nbyte_start = self._ast_node.src.byte_offset\nreturn byte_start + match.start(\"name\"), byte_start + match.end(\"name\")\ndef get_all_references(\nself, include_declarations: bool\n) -&gt; Iterator[\nUnion[\nDeclarationAbc,\nIdentifier,\nIdentifierPathPart,\nMemberAccess,\nExternalReference,\nUnaryOperation,\nBinaryOperation,\n]\n]:\nfrom .function_definition import FunctionDefinition\nprocessed_declarations: Set[Union[FunctionDefinition, VariableDeclaration]] = {\nself\n}\ndeclarations_queue: Deque[\nUnion[FunctionDefinition, VariableDeclaration]\n] = deque([self])\nwhile declarations_queue:\ndeclaration = declarations_queue.pop()\nif include_declarations:\nyield declaration\nyield from declaration.references\nif isinstance(declaration, (FunctionDefinition, VariableDeclaration)):\nfor base_function in declaration.base_functions:\nif base_function not in processed_declarations:\ndeclarations_queue.append(base_function)\nprocessed_declarations.add(base_function)\nif isinstance(declaration, FunctionDefinition):\nfor child_function in declaration.child_functions:\nif child_function not in processed_declarations:\ndeclarations_queue.append(child_function)\nprocessed_declarations.add(child_function)\n@property\ndef parent(\nself,\n) -&gt; Union[\nContractDefinition,\nParameterList,\nSourceUnit,\nStructDefinition,\nVariableDeclarationStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\n@lru_cache(maxsize=2048)\ndef canonical_name(self) -&gt; str:\nnode = self.parent\nwhile node is not None:\nif isinstance(node, DeclarationAbc):\nbreak\nnode = node.parent\nif node is None:\nreturn self.name\nreturn f\"{node.canonical_name}.{self.name}\"\n@property\n@lru_cache(maxsize=2048)\ndef declaration_string(self) -&gt; str:\nret = self.type_name.source\nret += f\" {self.visibility}\" if self.is_state_variable else \"\"\nret += f\" {self.mutability}\" if self.mutability != Mutability.MUTABLE else \"\"\nret += (\nf\" {self.data_location}\"\nif self.data_location != DataLocation.DEFAULT\nelse \"\"\n)\nret += (\n(\nf\" override\"\n+ \", \".join(override.source for override in self.overrides.overrides)\n)\nif self.overrides is not None\nelse \"\"\n)\nret += f\" {self.name}\" if len(self.name) &gt; 0 else \"\"\nret += (\nf\" = {self.value.source}\"\nif self.value is not None and self.mutability == Mutability.CONSTANT\nelse \"\"\n)\nif self.documentation is not None:\nreturn (\n\"/// \"\n+ \"\\n///\".join(line for line in self.documentation.text.splitlines())\n+ \"\\n\"\n+ ret\n)\nreturn ret\n@property\ndef mutability(self) -&gt; Mutability:\n\"\"\"\n        Returns:\n            Mutability of the variable.\n        \"\"\"\nif self._mutability is None:\nrelative_type_end = self._type_name.byte_location[1] - self.byte_location[0]\nrelative_name_start = self.name_location[0] - self.byte_location[0]\nkeywords_source = self._source[relative_type_end:relative_name_start]\nif b\"immutable\" in keywords_source:\nself._mutability = Mutability.IMMUTABLE\nelif self._constant:\nself._mutability = Mutability.CONSTANT\nelse:\nself._mutability = Mutability.MUTABLE\nreturn self._mutability\n@property\ndef is_state_variable(self) -&gt; bool:\n\"\"\"\n        Returns:\n            `True` if the variable is a state variable, `False` otherwise.\n        \"\"\"\nreturn self._state_variable\n@property\ndef data_location(self) -&gt; DataLocation:\n\"\"\"\n        [DataLocation.DEFAULT][woke.ast.enums.DataLocation.DEFAULT] is returned if the data location is not specified in the source code.\n        Returns:\n            Data location of the variable.\n        \"\"\"\nreturn self._data_location\n@property\ndef visibility(self) -&gt; Visibility:\n\"\"\"\n        Returns:\n            Visibility of the variable.\n        \"\"\"\nreturn self._visibility\n@property\ndef base_functions(self) -&gt; Tuple[FunctionDefinition, ...]:\n\"\"\"\n        !!! example\n            `C.foo` in line 6 lists `I.foo` in line 2 as a base function.\n            ```solidity linenums=\"1\"\n            interface I {\n                function foo(uint, bool) external returns(uint);\n            }\n            contract C is I {\n                mapping(uint =&gt; mapping(bool =&gt; uint)) public override foo;\n            }\n            ```\n        !!! example\n            `B.foo` in line 14 lists `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 as base functions.\n            ```solidity linenums=\"1\"\n            contract A1 {\n                function foo(uint, bool) external virtual returns(uint) {\n                    return 1;\n                }\n            }\n            contract A2 {\n                function foo(uint, bool) external virtual returns(uint) {\n                    return 2;\n                }\n            }\n            contract B is A1, A2 {\n                mapping(uint =&gt; mapping(bool =&gt; uint)) public override(A1, A2) foo;\n            }\n            ```\n        Returns:\n            List of base functions overridden by this function.\n        \"\"\"\nfrom ..declaration.function_definition import FunctionDefinition\nbase_functions = []\nfor base_function_id in self._base_functions:\nbase_function = self._reference_resolver.resolve_node(\nbase_function_id, self._cu_hash\n)\nassert isinstance(base_function, FunctionDefinition)\nbase_functions.append(base_function)\nreturn tuple(base_functions)\n@property\ndef documentation(self) -&gt; Optional[StructuredDocumentation]:\n\"\"\"\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any.\n        \"\"\"\nreturn self._documentation\n@property\ndef function_selector(self) -&gt; Optional[bytes]:\n\"\"\"\n        Is only set for public state variables.\n        Returns:\n            Function selector of the getter function generated for this variable, if any.\n        \"\"\"\nreturn self._function_selector\n@property\ndef indexed(self) -&gt; bool:\n\"\"\"\n        Returns:\n            `True` if the variable is indexed, `False` otherwise.\n        \"\"\"\nreturn self._indexed\n@property\ndef overrides(self) -&gt; Optional[OverrideSpecifier]:\n\"\"\"\n        Returns override specified as specified in the source code.\n        !!! example\n            `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 do not have an override specifier.\n            `B.foo` in line 14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containing two items referencing the contracts `A1` and `A2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]).\n            ```solidity linenums=\"1\"\n            contract A1 {\n                function foo(uint, bool) external virtual returns(uint) {\n                    return 1;\n                }\n            }\n            contract A2 {\n                function foo(uint, bool) external virtual returns(uint) {\n                    return 2;\n                }\n            }\n            contract B is A1, A2 {\n                mapping(uint =&gt; mapping(bool =&gt; uint)) public override(A1, A2) foo;\n            }\n            ```\n        Returns:\n            Override specifier, if any.\n        \"\"\"\nreturn self._overrides\n@property\ndef type_name(self) -&gt; TypeNameAbc:\n\"\"\"\n        Returns:\n            Type name IR node as present in the source code.\n        \"\"\"\nreturn self._type_name\n@property\ndef value(self) -&gt; Optional[ExpressionAbc]:\n\"\"\"\n        Is not set if the parent is a [VariableDeclarationStatement][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement].\n        In this case, the initial value (if any) is set in the [VariableDeclarationStatement.initial_value][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.initial_value] property.\n        Returns:\n            Initial value expression assigned to the variable in this declaration, if any.\n        \"\"\"\nreturn self._value\n@property\n@lru_cache(maxsize=2048)\ndef type(self) -&gt; TypeAbc:\n\"\"\"\n        Returns:\n            Type of the variable.\n        \"\"\"\nassert self._type_descriptions.type_identifier is not None\ntype_identifier = StringReader(self._type_descriptions.type_identifier)\nret = TypeAbc.from_type_identifier(\ntype_identifier, self._reference_resolver, self.cu_hash\n)\nassert (\nlen(type_identifier) == 0 and ret is not None\n), f\"Failed to parse type identifier: {self._type_descriptions.type_identifier}\"\nreturn ret\n@property\ndef type_identifier(self) -&gt; str:\nassert self._type_descriptions.type_identifier is not None\nreturn self._type_descriptions.type_identifier\n@property\ndef type_string(self) -&gt; str:\n\"\"\"\n        Returns:\n            User-friendly string describing the variable type.\n        \"\"\"\nassert self._type_descriptions.type_string is not None\nreturn self._type_descriptions.type_string\n</code></pre>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.base_functions","title":"<code>base_functions: Tuple[FunctionDefinition, ...]</code>  <code>property</code>","text":"<p>Example</p> <p><code>C.foo</code> in line 6 lists <code>I.foo</code> in line 2 as a base function. <pre><code>interface I {\nfunction foo(uint, bool) external returns(uint);\n}\ncontract C is I {\nmapping(uint =&gt; mapping(bool =&gt; uint)) public override foo;\n}\n</code></pre></p> <p>Example</p> <p><code>B.foo</code> in line 14 lists <code>A1.foo</code> in lines 2-4 and <code>A2.foo</code> in lines 8-10 as base functions. <pre><code>contract A1 {\nfunction foo(uint, bool) external virtual returns(uint) {\nreturn 1;\n}\n}\ncontract A2 {\nfunction foo(uint, bool) external virtual returns(uint) {\nreturn 2;\n}\n}\ncontract B is A1, A2 {\nmapping(uint =&gt; mapping(bool =&gt; uint)) public override(A1, A2) foo;\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Tuple[FunctionDefinition, ...]</code> <p>List of base functions overridden by this function.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.data_location","title":"<code>data_location: DataLocation</code>  <code>property</code>","text":"<p>DataLocation.DEFAULT is returned if the data location is not specified in the source code.</p> <p>Returns:</p> Type Description <code>DataLocation</code> <p>Data location of the variable.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.documentation","title":"<code>documentation: Optional[StructuredDocumentation]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[StructuredDocumentation]</code> <p>NatSpec documentation string, if any.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.function_selector","title":"<code>function_selector: Optional[bytes]</code>  <code>property</code>","text":"<p>Is only set for public state variables.</p> <p>Returns:</p> Type Description <code>Optional[bytes]</code> <p>Function selector of the getter function generated for this variable, if any.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.indexed","title":"<code>indexed: bool</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the variable is indexed, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.is_state_variable","title":"<code>is_state_variable: bool</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>bool</code> <p><code>True</code> if the variable is a state variable, <code>False</code> otherwise.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.mutability","title":"<code>mutability: Mutability</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Mutability</code> <p>Mutability of the variable.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.overrides","title":"<code>overrides: Optional[OverrideSpecifier]</code>  <code>property</code>","text":"<p>Returns override specified as specified in the source code.</p> <p>Example</p> <p><code>A1.foo</code> in lines 2-4 and <code>A2.foo</code> in lines 8-10 do not have an override specifier.</p> <p><code>B.foo</code> in line 14 has an override specifier with the overrides property containing two items referencing the contracts <code>A1</code> and <code>A2</code> (ContractDefinition). <pre><code>contract A1 {\nfunction foo(uint, bool) external virtual returns(uint) {\nreturn 1;\n}\n}\ncontract A2 {\nfunction foo(uint, bool) external virtual returns(uint) {\nreturn 2;\n}\n}\ncontract B is A1, A2 {\nmapping(uint =&gt; mapping(bool =&gt; uint)) public override(A1, A2) foo;\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[OverrideSpecifier]</code> <p>Override specifier, if any.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.parent","title":"<code>parent: Union[ContractDefinition, ParameterList, SourceUnit, StructDefinition, VariableDeclarationStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[ContractDefinition, ParameterList, SourceUnit, StructDefinition, VariableDeclarationStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.type","title":"<code>type: TypeAbc</code>  <code>cached</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>TypeAbc</code> <p>Type of the variable.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.type_name","title":"<code>type_name: TypeNameAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>TypeNameAbc</code> <p>Type name IR node as present in the source code.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.type_string","title":"<code>type_string: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>User-friendly string describing the variable type.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.value","title":"<code>value: Optional[ExpressionAbc]</code>  <code>property</code>","text":"<p>Is not set if the parent is a VariableDeclarationStatement. In this case, the initial value (if any) is set in the VariableDeclarationStatement.initial_value property.</p> <p>Returns:</p> Type Description <code>Optional[ExpressionAbc]</code> <p>Initial value expression assigned to the variable in this declaration, if any.</p>"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.visibility","title":"<code>visibility: Visibility</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Visibility</code> <p>Visibility of the variable.</p>"},{"location":"api-reference/ir/expressions/assignment/","title":"Assignment","text":""},{"location":"api-reference/ir/expressions/assignment/#woke.ast.ir.expression.assignment","title":"<code>woke.ast.ir.expression.assignment</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/assignment/#woke.ast.ir.expression.assignment.Assignment","title":"<code>Assignment</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/assignment.py</code> <pre><code>class Assignment(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcAssignment\n_parent: SolidityAbc  # TODO: make this more specific\n_left_expression: ExpressionAbc\n_right_expression: ExpressionAbc\n_operator: AssignmentOperator\ndef __init__(\nself, init: IrInitTuple, assignment: SolcAssignment, parent: SolidityAbc\n):\nsuper().__init__(init, assignment, parent)\nself._operator = assignment.operator\nself._left_expression = ExpressionAbc.from_ast(\ninit, assignment.left_hand_side, self\n)\nself._right_expression = ExpressionAbc.from_ast(\ninit, assignment.right_hand_side, self\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._left_expression\nyield from self._right_expression\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef left_expression(self) -&gt; ExpressionAbc:\nreturn self._left_expression\n@property\ndef right_expression(self) -&gt; ExpressionAbc:\nreturn self._right_expression\n@property\ndef operator(self) -&gt; AssignmentOperator:\nreturn self._operator\n@property\n@lru_cache(maxsize=2048)\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn self.left_expression.is_ref_to_state_variable\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nret = self.left_expression.modifies_state | self.right_expression.modifies_state\nif self.left_expression.is_ref_to_state_variable:\nret |= {(self, ModifiesStateFlag.MODIFIES_STATE_VAR)}\nreturn ret\n@property\n@lru_cache(maxsize=2048)\ndef assigned_variables(self) -&gt; Tuple[Optional[Set[AssignedVariablePath]], ...]:\ndef resolve_node(node: ExpressionAbc) -&gt; Set[AssignedVariablePath]:\nif isinstance(node, Conditional):\nreturn resolve_node(node.true_expression) | resolve_node(\nnode.false_expression\n)\nelif isinstance(node, Identifier):\nreferenced_declaration = node.referenced_declaration\nassert isinstance(referenced_declaration, (DeclarationAbc, SourceUnit))\nreturn {(referenced_declaration,)}\nelif isinstance(node, IndexAccess):\nreturn {\npath + (\"IndexAccess\",)\nfor path in resolve_node(node.base_expression)\n}\nelif isinstance(node, MemberAccess):\nreferenced_declaration = node.referenced_declaration\nassert isinstance(referenced_declaration, (DeclarationAbc, SourceUnit))\nreturn {\npath + (referenced_declaration,)\nfor path in resolve_node(node.expression)\n}\nelif isinstance(node, FunctionCall):\nfunction_called = node.function_called\nif function_called is None:\nreturn set()\nelif isinstance(\nfunction_called, (GlobalSymbolsEnum, VariableDeclaration)\n):\n# global function or variable getter called\n# variable getter may return different type than variable declaration (structs with arrays and mappings)\n# return empty set for now\nreturn set()\nelif isinstance(function_called, FunctionDefinition):\n# cannot be handled in the current implementation, return empty set for now\nreturn set()\nelif isinstance(function_called, StructDefinition):\nreturn {(function_called,)}\nelse:\nassert False, f\"Unexpected node type: {type(node)}\\n{self.source}\"\nelse:\nassert False, f\"Unexpected node type: {type(node)}\\n{self.source}\"\nnode = self.left_expression\nif isinstance(node, TupleExpression):\nreturn tuple(\nresolve_node(expression) if expression is not None else None\nfor expression in node.components\n)\nelse:\nreturn (resolve_node(node),)\n</code></pre>"},{"location":"api-reference/ir/expressions/binary-operation/","title":"Binary operation","text":""},{"location":"api-reference/ir/expressions/binary-operation/#woke.ast.ir.expression.binary_operation","title":"<code>woke.ast.ir.expression.binary_operation</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/binary-operation/#woke.ast.ir.expression.binary_operation.BinaryOperation","title":"<code>BinaryOperation</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/binary_operation.py</code> <pre><code>class BinaryOperation(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcBinaryOperation\n_parent: SolidityAbc  # TODO: make this more specific\n_left_expression: ExpressionAbc\n_operator: BinaryOpOperator\n_right_expression: ExpressionAbc\n_function_id: Optional[AstNodeId]\ndef __init__(\nself,\ninit: IrInitTuple,\nbinary_operation: SolcBinaryOperation,\nparent: SolidityAbc,\n):\nsuper().__init__(init, binary_operation, parent)\nself._operator = binary_operation.operator\nself._left_expression = ExpressionAbc.from_ast(\ninit, binary_operation.left_expression, self\n)\nself._right_expression = ExpressionAbc.from_ast(\ninit, binary_operation.right_expression, self\n)\nself._function_id = binary_operation.function\nif self._function_id is not None:\ninit.reference_resolver.register_post_process_callback(self._post_process)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._left_expression\nyield from self._right_expression\ndef _post_process(self, callback_params: CallbackParams):\nfunction = self.function\nassert function is not None\nfunction.register_reference(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, function)\n)\ndef _destroy(self, function: FunctionDefinition) -&gt; None:\nfunction.unregister_reference(self)\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef operator(self) -&gt; BinaryOpOperator:\nreturn self._operator\n@property\ndef left_expression(self) -&gt; ExpressionAbc:\nreturn self._left_expression\n@property\ndef right_expression(self) -&gt; ExpressionAbc:\nreturn self._right_expression\n@property\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn False\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn (\nself.left_expression.modifies_state | self.right_expression.modifies_state\n)\n@property\ndef function(self) -&gt; Optional[FunctionDefinition]:\nif self._function_id is None:\nreturn None\nnode = self._reference_resolver.resolve_node(self._function_id, self._cu_hash)\nassert isinstance(node, FunctionDefinition)\nreturn node\n</code></pre>"},{"location":"api-reference/ir/expressions/conditional/","title":"Conditional","text":""},{"location":"api-reference/ir/expressions/conditional/#woke.ast.ir.expression.conditional","title":"<code>woke.ast.ir.expression.conditional</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/conditional/#woke.ast.ir.expression.conditional.Conditional","title":"<code>Conditional</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/conditional.py</code> <pre><code>class Conditional(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcConditional\n_parent: SolidityAbc  # TODO: make this more specific\n_condition: ExpressionAbc\n_false_expression: ExpressionAbc\n_true_expression: ExpressionAbc\ndef __init__(\nself, init: IrInitTuple, conditional: SolcConditional, parent: SolidityAbc\n):\nsuper().__init__(init, conditional, parent)\nself._condition = ExpressionAbc.from_ast(init, conditional.condition, self)\nself._false_expression = ExpressionAbc.from_ast(\ninit, conditional.false_expression, self\n)\nself._true_expression = ExpressionAbc.from_ast(\ninit, conditional.true_expression, self\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._condition\nyield from self._false_expression\nyield from self._true_expression\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef condition(self) -&gt; ExpressionAbc:\nreturn self._condition\n@property\ndef false_expression(self) -&gt; ExpressionAbc:\nreturn self._false_expression\n@property\ndef true_expression(self) -&gt; ExpressionAbc:\nreturn self._true_expression\n@property\n@lru_cache(maxsize=2048)\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn (\nself.true_expression.is_ref_to_state_variable\nor self.false_expression.is_ref_to_state_variable\n)\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn (\nself.condition.modifies_state\n| self.true_expression.modifies_state\n| self.false_expression.modifies_state\n)\n</code></pre>"},{"location":"api-reference/ir/expressions/elementary-type-name-expression/","title":"Elementary type name expression","text":""},{"location":"api-reference/ir/expressions/elementary-type-name-expression/#woke.ast.ir.expression.elementary_type_name_expression","title":"<code>woke.ast.ir.expression.elementary_type_name_expression</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/elementary-type-name-expression/#woke.ast.ir.expression.elementary_type_name_expression.ElementaryTypeNameExpression","title":"<code>ElementaryTypeNameExpression</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/elementary_type_name_expression.py</code> <pre><code>class ElementaryTypeNameExpression(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcElementaryTypeNameExpression\n_parent: SolidityAbc  # TODO: make this more specific\n_type_name: ElementaryTypeName\ndef __init__(\nself,\ninit: IrInitTuple,\nelementary_type_name_expression: SolcElementaryTypeNameExpression,\nparent: SolidityAbc,\n):\nsuper().__init__(init, elementary_type_name_expression, parent)\nself._type_name = ElementaryTypeName(\ninit, elementary_type_name_expression.type_name, self\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._type_name\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef type_name(self) -&gt; ElementaryTypeName:\nreturn self._type_name\n@property\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn False\n@property\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn set()\n</code></pre>"},{"location":"api-reference/ir/expressions/function-call-options/","title":"Function call options","text":""},{"location":"api-reference/ir/expressions/function-call-options/#woke.ast.ir.expression.function_call_options","title":"<code>woke.ast.ir.expression.function_call_options</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/function-call-options/#woke.ast.ir.expression.function_call_options.FunctionCallOptions","title":"<code>FunctionCallOptions</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/function_call_options.py</code> <pre><code>class FunctionCallOptions(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcFunctionCallOptions\n_parent: SolidityAbc  # TODO: make this more specific\n_expression: ExpressionAbc\n_names: List[str]\n_options: List[ExpressionAbc]\ndef __init__(\nself,\ninit: IrInitTuple,\nfunction_call_options: SolcFunctionCallOptions,\nparent: SolidityAbc,\n):\nsuper().__init__(init, function_call_options, parent)\nself._expression = ExpressionAbc.from_ast(\ninit, function_call_options.expression, self\n)\nself._names = list(function_call_options.names)\nself._options = [\nExpressionAbc.from_ast(init, option, self)\nfor option in function_call_options.options\n]\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._expression\nfor option in self._options:\nyield from option\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef expression(self) -&gt; ExpressionAbc:\nreturn self._expression\n@property\ndef names(self) -&gt; Tuple[str, ...]:\nreturn tuple(self._names)\n@property\ndef options(self) -&gt; Tuple[ExpressionAbc, ...]:\nreturn tuple(self._options)\n@property\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn False\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nret = self.expression.modifies_state | reduce(\nor_,\n(option.modifies_state for option in self.options),\nset(),\n)\nif \"value\" in self.names:\nret |= {(self, ModifiesStateFlag.SENDS_ETHER)}\nreturn ret\n</code></pre>"},{"location":"api-reference/ir/expressions/function-call/","title":"Function call","text":""},{"location":"api-reference/ir/expressions/function-call/#woke.ast.ir.expression.function_call","title":"<code>woke.ast.ir.expression.function_call</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/function-call/#woke.ast.ir.expression.function_call.FunctionCall","title":"<code>FunctionCall</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/function_call.py</code> <pre><code>class FunctionCall(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcFunctionCall\n_parent: SolidityAbc  # TODO: make this more specific\n_arguments: List[ExpressionAbc]\n_expression: ExpressionAbc\n_kind: FunctionCallKind\n_names: List[str]\n_try_call: bool\n_recursion_lock: bool\ndef __init__(\nself, init: IrInitTuple, function_call: SolcFunctionCall, parent: SolidityAbc\n):\nsuper().__init__(init, function_call, parent)\nself._recursion_lock = False\nself._kind = function_call.kind\nself._names = list(function_call.names)\nself._try_call = function_call.try_call\nself._expression = ExpressionAbc.from_ast(init, function_call.expression, self)\nself._arguments = [\nExpressionAbc.from_ast(init, argument, self)\nfor argument in function_call.arguments\n]\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor argument in self._arguments:\nyield from argument\nyield from self._expression\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef kind(self) -&gt; FunctionCallKind:\nreturn self._kind\n@property\ndef names(self) -&gt; Tuple[str, ...]:\nreturn tuple(self._names)\n@property\ndef try_call(self) -&gt; bool:\nreturn self._try_call\n@property\ndef expression(self) -&gt; ExpressionAbc:\nreturn self._expression\n@property\ndef arguments(self) -&gt; Tuple[ExpressionAbc, ...]:\nreturn tuple(self._arguments)\n@property\n@lru_cache(maxsize=2048)\ndef function_called(\nself,\n) -&gt; Optional[\nUnion[\nEventDefinition,\nErrorDefinition,\nFunctionDefinition,\nGlobalSymbolsEnum,\nStructDefinition,\nVariableDeclaration,\n]\n]:\nif self.kind == FunctionCallKind.TYPE_CONVERSION:\nreturn None\nnode = self.expression\nwhile True:\nif isinstance(node, Identifier):\nreferenced_declaration = node.referenced_declaration\nif isinstance(\nreferenced_declaration,\n(\nEventDefinition,\nErrorDefinition,\nFunctionDefinition,\nGlobalSymbolsEnum,\nStructDefinition,\nVariableDeclaration,\n),\n):\nreturn referenced_declaration\nelse:\nassert (\nFalse\n), f\"Unexpected function call referenced declaration type: {referenced_declaration}\"\nelif isinstance(node, MemberAccess):\nreferenced_declaration = node.referenced_declaration\nif isinstance(\nreferenced_declaration,\n(\nEventDefinition,\nErrorDefinition,\nFunctionDefinition,\nGlobalSymbolsEnum,\nStructDefinition,\nVariableDeclaration,\n),\n):\nreturn referenced_declaration\nelse:\nassert (\nFalse\n), f\"Unexpected function call referenced declaration type: {referenced_declaration}\"\nelif isinstance(node, FunctionCall):\nnode = node.expression\nwhile isinstance(\nnode, MemberAccess\n) and node.referenced_declaration in {\nGlobalSymbolsEnum.FUNCTION_VALUE,\nGlobalSymbolsEnum.FUNCTION_GAS,\n}:\nnode = node.expression\nelif isinstance(node, FunctionCallOptions):\nnode = node.expression\nelif isinstance(node, NewExpression):\nreturn None\nelif isinstance(node, TupleExpression):\nif len(node.components) != 1:\nassert (\nFalse\n), f\"Unexpected function call child node: {node}\\n{self.source}\"\nnode = node.components[0]\nelse:\nassert (\nFalse\n), f\"Unexpected function call child node: {node}\\n{self.source}\"\n@property\n@lru_cache(maxsize=2048)\ndef is_ref_to_state_variable(self) -&gt; bool:\nif self.kind == FunctionCallKind.TYPE_CONVERSION:\nreturn self.expression.is_ref_to_state_variable\nreturn False\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nif self._recursion_lock:\nreturn set()\nself._recursion_lock = True\nret = self.expression.modifies_state | reduce(\nor_, (arg.modifies_state for arg in self.arguments), set()\n)\nif self.kind == FunctionCallKind.FUNCTION_CALL:\ncalled_function = self.function_called\nif called_function in {\nGlobalSymbolsEnum.SELFDESTRUCT,\nGlobalSymbolsEnum.SUICIDE,\n}:\nret |= {(self, ModifiesStateFlag.SELFDESTRUCTS)}\nelif called_function in {\nGlobalSymbolsEnum.ADDRESS_TRANSFER,\nGlobalSymbolsEnum.ADDRESS_SEND,\n}:\nret |= {(self, ModifiesStateFlag.SENDS_ETHER)}\nelif called_function == GlobalSymbolsEnum.ADDRESS_CALL:\nret |= {(self, ModifiesStateFlag.PERFORMS_CALL)}\nelif called_function == GlobalSymbolsEnum.ADDRESS_DELEGATECALL:\nret |= {(self, ModifiesStateFlag.PERFORMS_DELEGATECALL)}\nelif (\ncalled_function\nin {GlobalSymbolsEnum.ARRAY_PUSH, GlobalSymbolsEnum.ARRAY_POP}\nand self.expression.is_ref_to_state_variable\n):\nret |= {(self, ModifiesStateFlag.MODIFIES_STATE_VAR)}\nelif called_function == GlobalSymbolsEnum.FUNCTION_VALUE:\nret |= {(self, ModifiesStateFlag.SENDS_ETHER)}\nelif isinstance(called_function, FunctionDefinition):\nif called_function.state_mutability in {\nStateMutability.PURE,\nStateMutability.VIEW,\n}:\npass\nelif called_function.body is not None:\nret |= called_function.body.modifies_state\nfor modifier in called_function.modifiers:\nmodifier_def = modifier.modifier_name.referenced_declaration\nassert isinstance(modifier_def, ModifierDefinition)\nif modifier_def.body is not None:\nret |= modifier_def.body.modifies_state\nelif called_function.state_mutability == StateMutability.NONPAYABLE:\nret |= {\n(\nself,\nModifiesStateFlag.CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION,\n)\n}\nelif called_function.state_mutability == StateMutability.PAYABLE:\nret |= {\n(self, ModifiesStateFlag.CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION)\n}\nelse:\nassert False\nself._recursion_lock = False\nreturn ret\n</code></pre>"},{"location":"api-reference/ir/expressions/identifier/","title":"Identifier","text":""},{"location":"api-reference/ir/expressions/identifier/#woke.ast.ir.expression.identifier","title":"<code>woke.ast.ir.expression.identifier</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/identifier/#woke.ast.ir.expression.identifier.Identifier","title":"<code>Identifier</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/identifier.py</code> <pre><code>class Identifier(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcIdentifier\n_parent: SolidityAbc  # TODO: make this more specific\n_name: str\n_overloaded_declarations: List[AstNodeId]\n_referenced_declaration_id: Optional[AstNodeId]\ndef __init__(\nself, init: IrInitTuple, identifier: SolcIdentifier, parent: SolidityAbc\n):\nfrom ..meta.import_directive import ImportDirective\nsuper().__init__(init, identifier, parent)\nself._name = identifier.name\nself._overloaded_declarations = list(identifier.overloaded_declarations)\nself._referenced_declaration_id = identifier.referenced_declaration\nif self._referenced_declaration_id is None:\nassert isinstance(self._parent, ImportDirective)\ninit.reference_resolver.register_post_process_callback(\nself._post_process, priority=-1\n)\ndef _post_process(self, callback_params: CallbackParams):\nfrom ..meta.import_directive import ImportDirective\nassert self._referenced_declaration_id is not None\nif self._referenced_declaration_id &lt; 0:\nglobal_symbol = GlobalSymbolsEnum(self._referenced_declaration_id)\nself._reference_resolver.register_global_symbol_reference(\nglobal_symbol, self\n)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, global_symbol)\n)\nelse:\nnode = self._reference_resolver.resolve_node(\nself._referenced_declaration_id, self._cu_hash\n)\nif isinstance(node, DeclarationAbc):\nnode.register_reference(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, node)\n)\nelif isinstance(node, ImportDirective):\n# make this node to reference the source unit directly\nassert node.unit_alias is not None\nsource_unit = callback_params.source_units[node.imported_file]\nnode_path_order = self._reference_resolver.get_node_path_order(\nAstNodeId(source_unit.ast_node_id),\nsource_unit.cu_hash,\n)\nself._referenced_declaration_id = (\nself._reference_resolver.get_ast_id_from_cu_node_path_order(\nnode_path_order, self.cu_hash\n)\n)\nelse:\nraise TypeError(f\"Unexpected type: {type(node)}\")\ndef _destroy(\nself, referenced_declaration: Union[GlobalSymbolsEnum, DeclarationAbc]\n) -&gt; None:\nif isinstance(referenced_declaration, GlobalSymbolsEnum):\nself._reference_resolver.unregister_global_symbol_reference(\nreferenced_declaration, self\n)\nelif isinstance(referenced_declaration, DeclarationAbc):\nreferenced_declaration.unregister_reference(self)\nelse:\nraise TypeError(f\"Unexpected type: {type(referenced_declaration)}\")\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef name(self) -&gt; str:\nreturn self._name\n@property\ndef overloaded_declarations(self) -&gt; Tuple[DeclarationAbc, ...]:\noverloaded_declarations = []\nfor overloaded_declaration_id in self._overloaded_declarations:\nif overloaded_declaration_id &lt; 0:\ncontinue\noverloaded_declaration = self._reference_resolver.resolve_node(\noverloaded_declaration_id, self._cu_hash\n)\nassert isinstance(overloaded_declaration, DeclarationAbc)\noverloaded_declarations.append(overloaded_declaration)\nreturn tuple(overloaded_declarations)\n@property\ndef referenced_declaration(\nself,\n) -&gt; Union[DeclarationAbc, GlobalSymbolsEnum, SourceUnit]:\nfrom ..meta.source_unit import SourceUnit\nassert self._referenced_declaration_id is not None\nif self._referenced_declaration_id &lt; 0:\nreturn GlobalSymbolsEnum(self._referenced_declaration_id)\nnode = self._reference_resolver.resolve_node(\nself._referenced_declaration_id, self._cu_hash\n)\nassert isinstance(\nnode, (DeclarationAbc, SourceUnit)\n), f\"Unexpected type: {type(node)}\\n{node.source}\\n{self.source}\\n{self.file}\"\nreturn node\n@property\n@lru_cache(maxsize=2048)\ndef is_ref_to_state_variable(self) -&gt; bool:\nreferenced_declaration = self.referenced_declaration\nreturn (\nisinstance(referenced_declaration, VariableDeclaration)\nand referenced_declaration.is_state_variable\n)\n@property\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn set()\n</code></pre>"},{"location":"api-reference/ir/expressions/identifier/#woke.ast.ir.expression.identifier.Identifier.__init__","title":"<code>__init__(init, identifier, parent)</code>","text":"Source code in <code>woke/ast/ir/expression/identifier.py</code> <pre><code>def __init__(\nself, init: IrInitTuple, identifier: SolcIdentifier, parent: SolidityAbc\n):\nfrom ..meta.import_directive import ImportDirective\nsuper().__init__(init, identifier, parent)\nself._name = identifier.name\nself._overloaded_declarations = list(identifier.overloaded_declarations)\nself._referenced_declaration_id = identifier.referenced_declaration\nif self._referenced_declaration_id is None:\nassert isinstance(self._parent, ImportDirective)\ninit.reference_resolver.register_post_process_callback(\nself._post_process, priority=-1\n)\n</code></pre>"},{"location":"api-reference/ir/expressions/index-access/","title":"Index access","text":""},{"location":"api-reference/ir/expressions/index-access/#woke.ast.ir.expression.index_access","title":"<code>woke.ast.ir.expression.index_access</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/index-access/#woke.ast.ir.expression.index_access.IndexAccess","title":"<code>IndexAccess</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/index_access.py</code> <pre><code>class IndexAccess(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcIndexAccess\n_parent: SolidityAbc  # TODO: make this more specific\n_base_expression: ExpressionAbc\n_index_expression: Optional[ExpressionAbc]\ndef __init__(\nself, init: IrInitTuple, index_access: SolcIndexAccess, parent: SolidityAbc\n):\nsuper().__init__(init, index_access, parent)\nself._base_expression = ExpressionAbc.from_ast(\ninit, index_access.base_expression, self\n)\nif index_access.index_expression is None:\nself._index_expression = None\nelse:\nself._index_expression = ExpressionAbc.from_ast(\ninit, index_access.index_expression, self\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._base_expression\nif self._index_expression is not None:\nyield from self._index_expression\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef base_expression(self) -&gt; ExpressionAbc:\nreturn self._base_expression\n@property\ndef index_expression(self) -&gt; Optional[ExpressionAbc]:\nreturn self._index_expression\n@property\n@lru_cache(maxsize=2048)\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn self.base_expression.is_ref_to_state_variable\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nret = self.base_expression.modifies_state\nif self.index_expression is not None:\nret |= self.index_expression.modifies_state\nreturn ret\n</code></pre>"},{"location":"api-reference/ir/expressions/index-range-access/","title":"Index range access","text":""},{"location":"api-reference/ir/expressions/index-range-access/#woke.ast.ir.expression.index_range_access","title":"<code>woke.ast.ir.expression.index_range_access</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/index-range-access/#woke.ast.ir.expression.index_range_access.IndexRangeAccess","title":"<code>IndexRangeAccess</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/index_range_access.py</code> <pre><code>class IndexRangeAccess(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcIndexRangeAccess\n_parent: SolidityAbc  # TODO: make this more specific\n_base_expression: ExpressionAbc\n_start_expression: Optional[ExpressionAbc]\n_end_expression: Optional[ExpressionAbc]\ndef __init__(\nself,\ninit: IrInitTuple,\nindex_range_access: SolcIndexRangeAccess,\nparent: SolidityAbc,\n):\nsuper().__init__(init, index_range_access, parent)\nself._base_expression = ExpressionAbc.from_ast(\ninit, index_range_access.base_expression, self\n)\nif index_range_access.start_expression is None:\nself._start_expression = None\nelse:\nself._start_expression = ExpressionAbc.from_ast(\ninit, index_range_access.start_expression, self\n)\nif index_range_access.end_expression is None:\nself._end_expression = None\nelse:\nself._end_expression = ExpressionAbc.from_ast(\ninit, index_range_access.end_expression, self\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._base_expression\nif self._start_expression is not None:\nyield from self._start_expression\nif self._end_expression is not None:\nyield from self._end_expression\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef base_expression(self) -&gt; ExpressionAbc:\nreturn self._base_expression\n@property\ndef start_expression(self) -&gt; Optional[ExpressionAbc]:\nreturn self._start_expression\n@property\ndef end_expression(self) -&gt; Optional[ExpressionAbc]:\nreturn self._end_expression\n@property\ndef is_ref_to_state_variable(self) -&gt; bool:\n# index range access in only supported for dynamic calldata arrays\nreturn False\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nret = self.base_expression.modifies_state\nif self.start_expression is not None:\nret |= self.start_expression.modifies_state\nif self.end_expression is not None:\nret |= self.end_expression.modifies_state\nreturn ret\n</code></pre>"},{"location":"api-reference/ir/expressions/literal/","title":"Literal","text":""},{"location":"api-reference/ir/expressions/literal/#woke.ast.ir.expression.literal","title":"<code>woke.ast.ir.expression.literal</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/literal/#woke.ast.ir.expression.literal.Literal","title":"<code>Literal</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/literal.py</code> <pre><code>class Literal(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcLiteral\n_parent: SolidityAbc  # TODO: make this more specific\n_hex_value: str\n_kind: LiteralKind\n_subdenomination: Optional[str]\n_value: Optional[str]\ndef __init__(self, init: IrInitTuple, literal: SolcLiteral, parent: SolidityAbc):\nsuper().__init__(init, literal, parent)\nself._hex_value = literal.hex_value\nself._kind = literal.kind\nself._subdenomination = literal.subdenomination\nself._value = literal.value\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef hex_value(self) -&gt; str:\nreturn self._hex_value\n@property\ndef kind(self) -&gt; LiteralKind:\nreturn self._kind\n@property\ndef subdenomination(self) -&gt; Optional[str]:\nreturn self._subdenomination\n@property\ndef value(self) -&gt; Optional[str]:\nreturn self._value\n@property\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn False\n@property\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn set()\n</code></pre>"},{"location":"api-reference/ir/expressions/member-access/","title":"Member access","text":""},{"location":"api-reference/ir/expressions/member-access/#woke.ast.ir.expression.member_access","title":"<code>woke.ast.ir.expression.member_access</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/member-access/#woke.ast.ir.expression.member_access.MemberAccess","title":"<code>MemberAccess</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/member_access.py</code> <pre><code>class MemberAccess(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcMemberAccess\n_parent: SolidityAbc  # TODO: make this more specific\n_expression: ExpressionAbc\n_member_name: str\n_referenced_declaration_id: Optional[AstNodeId]\ndef __init__(\nself, init: IrInitTuple, member_access: SolcMemberAccess, parent: SolidityAbc\n):\nsuper().__init__(init, member_access, parent)\nself._expression = ExpressionAbc.from_ast(init, member_access.expression, self)\nassert self._expression.byte_location[0] == self.byte_location[0]\nassert self._expression.byte_location[1] &lt; self.byte_location[1]\nself._member_name = member_access.member_name\nself._referenced_declaration_id = member_access.referenced_declaration\nself._reference_resolver.register_post_process_callback(\nself._post_process, priority=-1\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._expression\ndef _post_process(self, callback_params: CallbackParams):\n# workaround for enum value bug in Solidity versions prior to 0.8.2\nif self._referenced_declaration_id is None:\nif isinstance(self._expression, Identifier) or (\nisinstance(self._expression, MemberAccess)\nand self._expression._referenced_declaration_id is not None\n):\nreferenced_declaration = self._expression.referenced_declaration\nif isinstance(referenced_declaration, EnumDefinition):\nfor enum_value in referenced_declaration.values:\nif enum_value.name == self._member_name:\nnode_path_order = (\nself._reference_resolver.get_node_path_order(\nAstNodeId(enum_value.ast_node_id),\nenum_value.cu_hash,\n)\n)\nthis_cu_id = self._reference_resolver.get_ast_id_from_cu_node_path_order(\nnode_path_order, self.cu_hash\n)\nself._referenced_declaration_id = this_cu_id\nbreak\nif self._referenced_declaration_id is None:\nexpr_type = self.expression.type\nif isinstance(expr_type, Address):\nif self.member_name == \"balance\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ADDRESS_BALANCE\n)\nelif self.member_name == \"code\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ADDRESS_CODE\n)\nelif self.member_name == \"codehash\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ADDRESS_CODEHASH\n)\nelif self.member_name == \"transfer\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ADDRESS_TRANSFER\n)\nelif self.member_name == \"send\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ADDRESS_SEND\n)\nelif self.member_name == \"call\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ADDRESS_CALL\n)\nelif self.member_name == \"delegatecall\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ADDRESS_DELEGATECALL\n)\nelif self.member_name == \"staticcall\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ADDRESS_STATICCALL\n)\nelse:\nassert False, f\"Unknown address member: {self.member_name}\"\nelif isinstance(expr_type, Array):\nif self.member_name == \"length\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ARRAY_LENGTH\n)\nelif self.member_name == \"push\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ARRAY_PUSH\n)\nelif self.member_name == \"pop\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ARRAY_POP\n)\nelse:\nassert False, f\"Unknown array member: {self.member_name}\"\nelif isinstance(expr_type, (Bytes, FixedBytes)):\nif self.member_name == \"length\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BYTES_LENGTH\n)\nelif self.member_name == \"push\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BYTES_PUSH\n)\nelse:\nassert False, f\"Unknown bytes member: {self.member_name}\"\nelif isinstance(expr_type, Function):\nif self.member_name == \"selector\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.FUNCTION_SELECTOR\n)\nelif self.member_name == \"value\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.FUNCTION_VALUE\n)\nelif self.member_name == \"gas\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.FUNCTION_GAS\n)\nelif self.member_name == \"address\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.FUNCTION_ADDRESS\n)\nelse:\nassert False, f\"Unknown function member: {self.member_name}\"\nelif isinstance(expr_type, Magic):\nif expr_type.kind == MagicTypeKind.BLOCK:\nif self.member_name == \"basefee\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BLOCK_BASEFEE\n)\nelif self.member_name == \"chainid\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BLOCK_CHAINID\n)\nelif self.member_name == \"coinbase\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BLOCK_COINBASE\n)\nelif self.member_name == \"difficulty\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BLOCK_DIFFICULTY\n)\nelif self.member_name == \"gaslimit\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BLOCK_GASLIMIT\n)\nelif self.member_name == \"number\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BLOCK_NUMBER\n)\nelif self.member_name == \"timestamp\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BLOCK_TIMESTAMP\n)\nelif self.member_name == \"prevrandao\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BLOCK_PREVRANDAO\n)\nelse:\nassert False, f\"Unknown block member {self.member_name}\"\nelif expr_type.kind == MagicTypeKind.MESSAGE:\nif self.member_name == \"data\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.MSG_DATA\n)\nelif self.member_name == \"sender\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.MSG_SENDER\n)\nelif self.member_name == \"sig\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.MSG_SIG\n)\nelif self.member_name == \"value\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.MSG_VALUE\n)\nelse:\nassert False, f\"Unknown msg member {self.member_name}\"\nelif expr_type.kind == MagicTypeKind.TRANSACTION:\nif self.member_name == \"gasprice\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.TX_GASPRICE\n)\nelif self.member_name == \"origin\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.TX_ORIGIN\n)\nelse:\nassert False, f\"Unknown tx member {self.member_name}\"\nelif expr_type.kind == MagicTypeKind.ABI:\nif self.member_name == \"decode\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ABI_DECODE\n)\nelif self.member_name == \"encode\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ABI_ENCODE\n)\nelif self.member_name == \"encodePacked\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ABI_ENCODE_PACKED\n)\nelif self.member_name == \"encodeWithSelector\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ABI_ENCODE_WITH_SELECTOR\n)\nelif self.member_name == \"encodeWithSignature\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ABI_ENCODE_WITH_SIGNATURE\n)\nelif self.member_name == \"encodeCall\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.ABI_ENCODE_CALL\n)\nelse:\nassert False, f\"Unknown abi member {self.member_name}\"\nelif expr_type.kind == MagicTypeKind.META_TYPE:\nif self.member_name == \"name\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.TYPE_NAME\n)\nelif self.member_name == \"creationCode\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.TYPE_CREATION_CODE\n)\nelif self.member_name == \"runtimeCode\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.TYPE_RUNTIME_CODE\n)\nelif self.member_name == \"interfaceId\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.TYPE_INTERFACE_ID\n)\nelif self.member_name == \"min\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.TYPE_MIN\n)\nelif self.member_name == \"max\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.TYPE_MAX\n)\nelse:\nassert False, f\"Unknown type member {self.member_name}\"\nelif isinstance(expr_type, Type):\nif isinstance(expr_type.actual_type, Bytes):\nif self.member_name == \"concat\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.BYTES_CONCAT\n)\nelse:\nassert False, f\"Unknown bytes member {self.member_name}\"\nelif isinstance(expr_type.actual_type, String):\nif self.member_name == \"concat\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.STRING_CONCAT\n)\nelse:\nassert False, f\"Unknown string member {self.member_name}\"\nelif isinstance(expr_type.actual_type, UserDefinedValueType):\nif self.member_name == \"wrap\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.USER_DEFINED_VALUE_TYPE_WRAP\n)\nelif self.member_name == \"unwrap\":\nself._referenced_declaration_id = AstNodeId(\nGlobalSymbolsEnum.USER_DEFINED_VALUE_TYPE_UNWRAP\n)\nelse:\nassert (\nFalse\n), f\"Unknown user defined value type member {self.member_name}\"\nelse:\nassert (\nFalse\n), f\"Unknown type member {self.member_name} {expr_type.actual_type}\"\nassert (\nself._referenced_declaration_id is not None\n), f\"Unknown member {self.member_name}\"\nif self._referenced_declaration_id &lt; 0:\nglobal_symbol = GlobalSymbolsEnum(self._referenced_declaration_id)\nself._reference_resolver.register_global_symbol_reference(\nglobal_symbol, self\n)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, global_symbol)\n)\nelse:\nnode = self._reference_resolver.resolve_node(\nself._referenced_declaration_id, self._cu_hash\n)\nif isinstance(node, DeclarationAbc):\nnode.register_reference(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, node)\n)\nelif isinstance(node, ImportDirective):\n# make this node to reference the source unit directly\nassert node.unit_alias is not None\nsource_unit = callback_params.source_units[node.imported_file]\nnode_path_order = self._reference_resolver.get_node_path_order(\nAstNodeId(source_unit.ast_node_id),\nsource_unit.cu_hash,\n)\nself._referenced_declaration_id = (\nself._reference_resolver.get_ast_id_from_cu_node_path_order(\nnode_path_order, self.cu_hash\n)\n)\nelse:\nraise TypeError(f\"Unexpected type: {type(node)}\")\ndef _destroy(\nself, referenced_declaration: Union[GlobalSymbolsEnum, DeclarationAbc]\n) -&gt; None:\nif isinstance(referenced_declaration, GlobalSymbolsEnum):\nself._reference_resolver.unregister_global_symbol_reference(\nreferenced_declaration, self\n)\nelif isinstance(referenced_declaration, DeclarationAbc):\nreferenced_declaration.unregister_reference(self)\nelse:\nraise TypeError(f\"Unexpected type: {type(referenced_declaration)}\")\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef expression(self) -&gt; ExpressionAbc:\nreturn self._expression\n@property\ndef member_name(self) -&gt; str:\nreturn self._member_name\n@property\n@lru_cache(maxsize=2048)\ndef member_byte_location(self) -&gt; Tuple[int, int]:\nrelative_expression_end = (\nself._expression.byte_location[1] - self.byte_location[0]\n)\nmatch = MEMBER_RE.match(self._source[relative_expression_end:])\nassert match\nreturn self._expression.byte_location[1] + match.start(\n\"member\"\n), self._expression.byte_location[1] + match.end(\"member\")\n@property\ndef referenced_declaration(\nself,\n) -&gt; Union[DeclarationAbc, GlobalSymbolsEnum, SourceUnit]:\nassert self._referenced_declaration_id is not None\nif self._referenced_declaration_id &lt; 0:\nreturn GlobalSymbolsEnum(self._referenced_declaration_id)\nnode = self._reference_resolver.resolve_node(\nself._referenced_declaration_id, self._cu_hash\n)\nassert isinstance(node, (DeclarationAbc, SourceUnit))\nreturn node\n@property\n@lru_cache(maxsize=2048)\ndef is_ref_to_state_variable(self) -&gt; bool:\nreferenced_declaration = self.referenced_declaration\nreturn (\nisinstance(referenced_declaration, VariableDeclaration)\nand referenced_declaration.is_state_variable\nor self.expression.is_ref_to_state_variable\n)\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn self.expression.modifies_state\n</code></pre>"},{"location":"api-reference/ir/expressions/new-expression/","title":"New expression","text":""},{"location":"api-reference/ir/expressions/new-expression/#woke.ast.ir.expression.new_expression","title":"<code>woke.ast.ir.expression.new_expression</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/new-expression/#woke.ast.ir.expression.new_expression.NewExpression","title":"<code>NewExpression</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/new_expression.py</code> <pre><code>class NewExpression(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcNewExpression\n_parent: SolidityAbc  # TODO: make this more specific\n_type_name: TypeNameAbc\ndef __init__(\nself, init: IrInitTuple, new_expression: SolcNewExpression, parent: SolidityAbc\n):\nsuper().__init__(init, new_expression, parent)\nself._type_name = TypeNameAbc.from_ast(init, new_expression.type_name, self)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._type_name\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef type_name(self) -&gt; TypeNameAbc:\nreturn self._type_name\n@property\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn False\n@property\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nif isinstance(self.type, Contract):\nreturn {(self, ModifiesStateFlag.DEPLOYS_CONTRACT)}\nelse:\nreturn set()\n</code></pre>"},{"location":"api-reference/ir/expressions/tuple-expression/","title":"Tuple expression","text":""},{"location":"api-reference/ir/expressions/tuple-expression/#woke.ast.ir.expression.tuple_expression","title":"<code>woke.ast.ir.expression.tuple_expression</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/tuple-expression/#woke.ast.ir.expression.tuple_expression.TupleExpression","title":"<code>TupleExpression</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/tuple_expression.py</code> <pre><code>class TupleExpression(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcTupleExpression\n_parent: SolidityAbc  # TODO: make this more specific\n_components: List[Optional[ExpressionAbc]]\n_is_inline_array: bool\ndef __init__(\nself,\ninit: IrInitTuple,\ntuple_expression: SolcTupleExpression,\nparent: SolidityAbc,\n):\nsuper().__init__(init, tuple_expression, parent)\nself._is_inline_array = tuple_expression.is_inline_array\nself._components = []\nfor component in tuple_expression.components:\nif component is None:\nself._components.append(None)\nelse:\nself._components.append(ExpressionAbc.from_ast(init, component, self))\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor component in self._components:\nif component is not None:\nyield from component\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef is_inline_array(self) -&gt; bool:\nreturn self._is_inline_array\n@property\ndef components(self) -&gt; Tuple[Optional[ExpressionAbc], ...]:\nreturn tuple(self._components)\n@property\n@lru_cache(maxsize=2048)\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn any(\ncomponent.is_ref_to_state_variable\nfor component in self._components\nif component is not None\n)\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn reduce(\nor_,\n(\ncomponent.modifies_state\nfor component in self._components\nif component is not None\n),\nset(),\n)\n</code></pre>"},{"location":"api-reference/ir/expressions/unary-operation/","title":"Unary operation","text":""},{"location":"api-reference/ir/expressions/unary-operation/#woke.ast.ir.expression.unary_operation","title":"<code>woke.ast.ir.expression.unary_operation</code>  <code>module</code>","text":""},{"location":"api-reference/ir/expressions/unary-operation/#woke.ast.ir.expression.unary_operation.UnaryOperation","title":"<code>UnaryOperation</code>  <code>class</code>","text":"<p>         Bases: <code>ExpressionAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/expression/unary_operation.py</code> <pre><code>class UnaryOperation(ExpressionAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_ast_node: SolcUnaryOperation\n_parent: SolidityAbc\n_operator: UnaryOpOperator\n_prefix: bool\n_sub_expression: ExpressionAbc\n_function_id: Optional[AstNodeId]\ndef __init__(\nself,\ninit: IrInitTuple,\nunary_operation: SolcUnaryOperation,\nparent: SolidityAbc,\n):\nsuper().__init__(init, unary_operation, parent)\nself._operator = unary_operation.operator\nself._prefix = unary_operation.prefix\nself._sub_expression = ExpressionAbc.from_ast(\ninit, unary_operation.sub_expression, self\n)\nself._function_id = unary_operation.function\nif self._function_id is not None:\ninit.reference_resolver.register_post_process_callback(self._post_process)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._sub_expression\ndef _post_process(self, callback_params: CallbackParams):\nfunction = self.function\nassert function is not None\nfunction.register_reference(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, function)\n)\ndef _destroy(self, function: FunctionDefinition) -&gt; None:\nfunction.unregister_reference(self)\n@property\ndef parent(self) -&gt; SolidityAbc:\nreturn self._parent\n@property\ndef operator(self) -&gt; UnaryOpOperator:\nreturn self._operator\n@property\ndef prefix(self) -&gt; bool:\nreturn self._prefix\n@property\ndef sub_expression(self) -&gt; ExpressionAbc:\nreturn self._sub_expression\n@property\ndef is_ref_to_state_variable(self) -&gt; bool:\nreturn False\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nret = self.sub_expression.modifies_state\nif (\nself.operator\nin {\nUnaryOpOperator.PLUS_PLUS,\nUnaryOpOperator.MINUS_MINUS,\nUnaryOpOperator.DELETE,\n}\nand self.sub_expression.is_ref_to_state_variable\n):\nret |= {(self, ModifiesStateFlag.MODIFIES_STATE_VAR)}\nreturn ret\n@property\ndef function(self) -&gt; Optional[FunctionDefinition]:\nif self._function_id is None:\nreturn None\nnode = self._reference_resolver.resolve_node(self._function_id, self._cu_hash)\nassert isinstance(node, FunctionDefinition)\nreturn node\n</code></pre>"},{"location":"api-reference/ir/meta/identifier-path/","title":"Identifier path","text":""},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path","title":"<code>woke.ast.ir.meta.identifier_path</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath","title":"<code>IdentifierPath</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Identifier path represents a path name of identifiers separated by dots. It was introduced in Solidity 0.8.0 to replace UserDefinedTypeName in some cases.</p> Source code in <code>woke/ast/ir/meta/identifier_path.py</code> <pre><code>class IdentifierPath(SolidityAbc):\n\"\"\"\n    Identifier path represents a path name of identifiers separated by dots. It was introduced in Solidity 0.8.0 to replace\n    [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] in some cases.\n    \"\"\"\n_ast_node: SolcIdentifierPath\n_parent: Union[\nInheritanceSpecifier,\nModifierInvocation,\nOverrideSpecifier,\nUsingForDirective,\nUserDefinedTypeName,\n]\n_name: str\n_referenced_declaration_id: AstNodeId\n_parts: IntervalTree\ndef __init__(\nself,\ninit: IrInitTuple,\nidentifier_path: SolcIdentifierPath,\nparent: SolidityAbc,\n):\nsuper().__init__(init, identifier_path, parent)\nself._name = identifier_path.name\nself._referenced_declaration_id = identifier_path.referenced_declaration\nassert self._referenced_declaration_id &gt;= 0\nself._reference_resolver.register_post_process_callback(self._post_process)\ndef _post_process(self, callback_params: CallbackParams):\ndef find_referenced_source_unit(\nsearched_name: str, start_source_unit: SourceUnit\n) -&gt; SourceUnit:\nsource_units_queue: Deque[SourceUnit] = deque([start_source_unit])\nprocessed_source_units: Set[Path] = {start_source_unit.file}\nreferenced_declaration = None\nwhile source_units_queue and referenced_declaration is None:\nsource_unit = source_units_queue.popleft()\nfor import_ in source_unit.imports:\nif import_.unit_alias == searched_name:\nreferenced_declaration = callback_params.source_units[\nimport_.imported_file\n]\nbreak\nfor symbol_alias in import_.symbol_aliases:\nif symbol_alias.local == searched_name:\nref = symbol_alias.foreign.referenced_declaration\nassert isinstance(ref, SourceUnit)\nreferenced_declaration = ref\nif referenced_declaration is not None:\nbreak\nif import_.imported_file not in processed_source_units:\nsource_units_queue.append(\ncallback_params.source_units[import_.imported_file]\n)\nprocessed_source_units.add(import_.imported_file)\nassert referenced_declaration is not None\nreturn referenced_declaration\nfrom ..meta.source_unit import SourceUnit\nmatches = list(IDENTIFIER_RE.finditer(self._source))\ngroups_count = len(matches)\nassert groups_count &gt; 0\nself._parts = IntervalTree()\nstart_source_unit = callback_params.source_units[self._file]\nref = self.referenced_declaration\nrefs = []\nfor _ in range(groups_count):\nrefs.append(ref)\nif ref is not None:\nref = ref.parent\nfor match, ref in zip(matches, reversed(refs)):\nname = match.group(0).decode(\"utf-8\")\nif ref is None:\nstart_source_unit = find_referenced_source_unit(name, start_source_unit)\nreferenced_node = start_source_unit\nelif isinstance(ref, (DeclarationAbc, SourceUnit)):\nreferenced_node = ref\nelse:\nraise TypeError(\nf\"Unexpected type of referenced declaration: {type(ref)}\"\n)\nnode_path_order = self._reference_resolver.get_node_path_order(\nAstNodeId(referenced_node.ast_node_id),\nreferenced_node.cu_hash,\n)\nreferenced_node_id = (\nself._reference_resolver.get_ast_id_from_cu_node_path_order(\nnode_path_order, self._cu_hash\n)\n)\nstart = self.byte_location[0] + match.start()\nend = self.byte_location[0] + match.end()\nself._parts[start:end] = IdentifierPathPart(\nself,\n(start, end),\nname,\nreferenced_node_id,\nself._reference_resolver,\nself._cu_hash,\nself._file,\n)\n@property\ndef parent(\nself,\n) -&gt; Union[\nInheritanceSpecifier,\nModifierInvocation,\nOverrideSpecifier,\nUsingForDirective,\nUserDefinedTypeName,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        Returns:\n            Name (as it appears in the source code) of the user-defined type referenced by this identifier path.\n        \"\"\"\nreturn self._name\n@property\ndef identifier_path_parts(self) -&gt; Tuple[IdentifierPathPart, ...]:\n\"\"\"\n        Returns:\n            Parts of the identifier path.\n        \"\"\"\nreturn tuple(interval.data for interval in sorted(self._parts))\ndef identifier_path_part_at(self, byte_offset: int) -&gt; Optional[IdentifierPathPart]:\n\"\"\"\n        Parameters:\n            byte_offset: Byte offset in the source code.\n        Returns:\n            Identifier path part at the given byte offset, if any.\n        \"\"\"\nintervals = self._parts.at(byte_offset)\nassert len(intervals) &lt;= 1\nif len(intervals) == 0:\nreturn None\nreturn intervals.pop().data\n@property\ndef referenced_declaration(self) -&gt; DeclarationAbc:\n\"\"\"\n        Returns:\n            Declaration referenced by this identifier path.\n        \"\"\"\nnode = self._reference_resolver.resolve_node(\nself._referenced_declaration_id, self._cu_hash\n)\nassert isinstance(node, DeclarationAbc)\nreturn node\n</code></pre>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.identifier_path_parts","title":"<code>identifier_path_parts: Tuple[IdentifierPathPart, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[IdentifierPathPart, ...]</code> <p>Parts of the identifier path.</p>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>Name (as it appears in the source code) of the user-defined type referenced by this identifier path.</p>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.parent","title":"<code>parent: Union[InheritanceSpecifier, ModifierInvocation, OverrideSpecifier, UsingForDirective, UserDefinedTypeName]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[InheritanceSpecifier, ModifierInvocation, OverrideSpecifier, UsingForDirective, UserDefinedTypeName]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.referenced_declaration","title":"<code>referenced_declaration: DeclarationAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>DeclarationAbc</code> <p>Declaration referenced by this identifier path.</p>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.identifier_path_part_at","title":"<code>identifier_path_part_at(byte_offset)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>byte_offset</code> <code>int</code> <p>Byte offset in the source code.</p> required <p>Returns:</p> Type Description <code>Optional[IdentifierPathPart]</code> <p>Identifier path part at the given byte offset, if any.</p> Source code in <code>woke/ast/ir/meta/identifier_path.py</code> <pre><code>def identifier_path_part_at(self, byte_offset: int) -&gt; Optional[IdentifierPathPart]:\n\"\"\"\n    Parameters:\n        byte_offset: Byte offset in the source code.\n    Returns:\n        Identifier path part at the given byte offset, if any.\n    \"\"\"\nintervals = self._parts.at(byte_offset)\nassert len(intervals) &lt;= 1\nif len(intervals) == 0:\nreturn None\nreturn intervals.pop().data\n</code></pre>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart","title":"<code>IdentifierPathPart</code>  <code>class</code>","text":"<p>A class representing a part of an identifier path. Is almost the same as Identifier, but it is not generated in the AST output of the compiler and so it is not an IR node.</p> Source code in <code>woke/ast/ir/meta/identifier_path.py</code> <pre><code>class IdentifierPathPart:\n\"\"\"\n    A class representing a part of an identifier path. Is almost the same as [Identifier][woke.ast.ir.expression.identifier.Identifier], but it is not generated in the AST output of the compiler and so it is not an IR node.\n    \"\"\"\n_reference_resolver: ReferenceResolver\n_underlying_node: Union[IdentifierPath, UserDefinedTypeName]\n_referenced_declaration_id: Optional[AstNodeId]\n_cu_hash: bytes\n_file: Path\n_byte_location: Tuple[int, int]\n_name: str\ndef __init__(\nself,\nunderlying_node: Union[IdentifierPath, UserDefinedTypeName],\nbyte_location: Tuple[int, int],\nname: str,\nreferenced_declaration_id: AstNodeId,\nreference_resolver: ReferenceResolver,\ncu_hash: bytes,\nfile: Path,\n):\nself._underlying_node = underlying_node\nself._reference_resolver = reference_resolver\nself._referenced_declaration_id = referenced_declaration_id\nself._cu_hash = cu_hash\nself._file = file\nself._byte_location = byte_location\nself._name = name\nself._reference_resolver.register_post_process_callback(self._post_process)\ndef _post_process(self, callback_params: CallbackParams):\nreferenced_declaration = self.referenced_declaration\nif isinstance(referenced_declaration, DeclarationAbc):\nreferenced_declaration.register_reference(self)\nself._reference_resolver.register_destroy_callback(\nself.file, partial(self._destroy, referenced_declaration)\n)\ndef _destroy(self, referenced_declaration: DeclarationAbc) -&gt; None:\nreferenced_declaration.unregister_reference(self)\n@property\ndef underlying_node(self) -&gt; Union[IdentifierPath, UserDefinedTypeName]:\n\"\"\"\n        Returns:\n            Underlying IR node (parent) of this identifier path part.\n        \"\"\"\nreturn self._underlying_node\n@property\ndef file(self) -&gt; Path:\n\"\"\"\n        The absolute path to the source file that contains the parent IR node of this identifier path part.\n        Returns:\n            Absolute path to the file containing this identifier path part.\n        \"\"\"\nreturn self._file\n@property\ndef byte_location(self) -&gt; Tuple[int, int]:\n\"\"\"\n        The start and end byte offsets of this identifier path part in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset.\n        `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`.\n        Returns:\n            Tuple of the start and end byte offsets of this node in the source file.\n        \"\"\"\nreturn self._byte_location\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        !!! example\n            `Contract` or `Event` in `Contract.Event`.\n        Returns:\n            Name of the identifier path part as it appears in the source code.\n        \"\"\"\nreturn self._name\n@property\ndef referenced_declaration(self) -&gt; Union[DeclarationAbc, SourceUnit]:\n\"\"\"\n        !!! example\n            In the case of `Contract.Struct` [IdentifierPath][woke.ast.ir.meta.identifier_path.IdentifierPath], the referenced declaration of `Struct` is the declaration of the struct `Struct` in the contract `Contract`.\n        !!! example\n            Can be a [SourceUnit][woke.ast.ir.meta.source_unit.SourceUnit] in the following case:\n            ```solidity\n            import * as Utils from \"./Utils.sol\";\n            ```\n        Returns:\n            Declaration referenced by this identifier path part.\n        \"\"\"\nfrom .source_unit import SourceUnit\nassert self._referenced_declaration_id is not None\nnode = self._reference_resolver.resolve_node(\nself._referenced_declaration_id, self._cu_hash\n)\nassert isinstance(node, (DeclarationAbc, SourceUnit))\nreturn node\n</code></pre>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.byte_location","title":"<code>byte_location: Tuple[int, int]</code>  <code>property</code>","text":"<p>The start and end byte offsets of this identifier path part in the source file. <code>{node}.byte_location[0]</code> is the start byte offset, <code>{node}.byte_location[1]</code> is the end byte offset.</p> <p><code>{node}.byte_location[1]</code> is always greater than or equal to <code>{node}.byte_location[0]</code>.</p> <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>Tuple of the start and end byte offsets of this node in the source file.</p>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.file","title":"<code>file: Path</code>  <code>property</code>","text":"<p>The absolute path to the source file that contains the parent IR node of this identifier path part.</p> <p>Returns:</p> Type Description <code>Path</code> <p>Absolute path to the file containing this identifier path part.</p>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Example</p> <p><code>Contract</code> or <code>Event</code> in <code>Contract.Event</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>Name of the identifier path part as it appears in the source code.</p>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.referenced_declaration","title":"<code>referenced_declaration: Union[DeclarationAbc, SourceUnit]</code>  <code>property</code>","text":"<p>Example</p> <p>In the case of <code>Contract.Struct</code> IdentifierPath, the referenced declaration of <code>Struct</code> is the declaration of the struct <code>Struct</code> in the contract <code>Contract</code>.</p> <p>Example</p> <p>Can be a SourceUnit in the following case: <pre><code>import * as Utils from \"./Utils.sol\";\n</code></pre></p> <p>Returns:</p> Type Description <code>Union[DeclarationAbc, SourceUnit]</code> <p>Declaration referenced by this identifier path part.</p>"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.underlying_node","title":"<code>underlying_node: Union[IdentifierPath, UserDefinedTypeName]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[IdentifierPath, UserDefinedTypeName]</code> <p>Underlying IR node (parent) of this identifier path part.</p>"},{"location":"api-reference/ir/meta/import-directive/","title":"Import directive","text":""},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive","title":"<code>woke.ast.ir.meta.import_directive</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective","title":"<code>ImportDirective</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Example</p> <p><pre><code>import \"SafeLib.sol\";\n</code></pre> <pre><code>import \"SafeLib.sol\" as SafeLib;\n</code></pre> <pre><code>import * as SafeLib from \"SafeLib.sol\";\n</code></pre> <pre><code>import { SafeType as CustomSafeType } from \"SafeLib.sol\";\n</code></pre></p> Source code in <code>woke/ast/ir/meta/import_directive.py</code> <pre><code>class ImportDirective(SolidityAbc):\n\"\"\"\n    !!! example\n        ```solidity\n        import \"SafeLib.sol\";\n        ```\n        ```solidity\n        import \"SafeLib.sol\" as SafeLib;\n        ```\n        ```solidity\n        import * as SafeLib from \"SafeLib.sol\";\n        ```\n        ```solidity\n        import { SafeType as CustomSafeType } from \"SafeLib.sol\";\n        ```\n    \"\"\"\n_ast_node: SolcImportDirective\n_parent: SourceUnit\n_source_unit_name: str\n_import_string: str\n_imported_file: Path\n_source_unit_id: AstNodeId\n_symbol_aliases: List[SymbolAlias]\n_unit_alias: Optional[str]\ndef __init__(\nself,\ninit: IrInitTuple,\nimport_directive: SolcImportDirective,\nparent: SolidityAbc,\n):\nsuper().__init__(init, import_directive, parent)\nself._source_unit_name = import_directive.absolute_path\nself._import_string = import_directive.file\nself._imported_file = init.cu.source_unit_name_to_path(self._source_unit_name)\nself._source_unit_id = import_directive.source_unit\nself._symbol_aliases = []\nif len(import_directive.unit_alias) &gt; 0:\nself._unit_alias = import_directive.unit_alias\nelse:\nself._unit_alias = None\nfor alias in import_directive.symbol_aliases:\nself._symbol_aliases.append(\nSymbolAlias(Identifier(init, alias.foreign, self), alias.local)\n)\nself._reference_resolver.register_post_process_callback(\nself._post_process, priority=-2\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor symbol_alias in self._symbol_aliases:\nyield from symbol_alias.foreign\ndef _post_process(self, callback_params: CallbackParams):\n# referenced declaration ID is missing (for whatever reason) in import directive symbol aliases\n# for example `import { SafeType } from \"SafeLib.sol\";`\n# fix: find these reference IDs manually\n# seems to be fixed in solc &gt;= 0.8.12\nfor symbol_alias in self._symbol_aliases:\nif symbol_alias.foreign._referenced_declaration_id is not None:\ncontinue\nsource_units_queue: Deque[SourceUnit] = deque(\n[callback_params.source_units[self._imported_file]]\n)\nprocessed_source_units: Set[Path] = {self._imported_file}\nreferenced_declaration = None\nsearched_name = symbol_alias.foreign.name\nwhile source_units_queue and referenced_declaration is None:\nimported_source_unit = source_units_queue.pop()\nfor declaration in imported_source_unit.declarations_iter():\nif declaration.canonical_name == searched_name:\nreferenced_declaration = declaration\nbreak\nfor import_ in imported_source_unit.imports:\nif import_.unit_alias == searched_name:\nreferenced_declaration = import_\nbreak\n# handle the case when an imported symbol is an alias of another symbol\nfor alias in import_.symbol_aliases:\nif alias.local == symbol_alias.foreign.name:\nsearched_name = alias.foreign.name\nif import_.imported_file not in processed_source_units:\nsource_units_queue.append(\ncallback_params.source_units[import_.imported_file]\n)\nprocessed_source_units.add(import_.imported_file)\nassert referenced_declaration is not None\nnode_path_order = self._reference_resolver.get_node_path_order(\nAstNodeId(referenced_declaration.ast_node_id),\nreferenced_declaration.cu_hash,\n)\nreferenced_declaration_id = (\nself._reference_resolver.get_ast_id_from_cu_node_path_order(\nnode_path_order, self.cu_hash\n)\n)\nsymbol_alias.foreign._referenced_declaration_id = referenced_declaration_id\n@property\ndef parent(self) -&gt; SourceUnit:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef source_unit_name(self) -&gt; str:\n\"\"\"\n        Returns:\n            Source unit name of the imported file.\n        \"\"\"\nreturn self._source_unit_name\n@property\ndef imported_file(self) -&gt; Path:\n\"\"\"\n        Returns:\n            Absolute path of the imported file.\n        \"\"\"\nreturn self._imported_file\n@property\ndef import_string(self) -&gt; str:\n\"\"\"\n        Returns:\n            Import string as it appears in the source code.\n        \"\"\"\nreturn self._import_string\n@property\ndef source_unit(self) -&gt; SourceUnit:\n\"\"\"\n        Returns:\n            Source unit imported by this import directive.\n        \"\"\"\nfrom .source_unit import SourceUnit\nnode = self._reference_resolver.resolve_node(\nself._source_unit_id, self._cu_hash\n)\nassert isinstance(node, SourceUnit)\nreturn node\n@property\ndef symbol_aliases(self) -&gt; Tuple[SymbolAlias, ...]:\n\"\"\"\n        Is only set in the case of `:::solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\";` import directive type.\n        Returns:\n            Symbol aliases present in the import directive.\n        \"\"\"\nreturn tuple(self._symbol_aliases)\n@property\ndef unit_alias(self) -&gt; Optional[str]:\n\"\"\"\n        !!! example\n            Is `SafeLib` in the case of these import directives:\n            ```solidity\n            import \"SafeLib.sol\" as SafeLib;\n            ```\n            ```solidity\n            import * as SafeLib from \"SafeLib.sol\";\n            ```\n            Is `None` in the case of these import directives:\n            ```solidity\n            import \"SafeLib.sol\";\n            ```\n            ```solidity\n            import { SafeType as CustomSafeType } from \"SafeLib.sol\";\n            ```\n        Returns:\n            Alias for the namespace of the imported source unit.\n        \"\"\"\nreturn self._unit_alias\n@property\n@lru_cache(maxsize=2048)\ndef import_string_pos(self) -&gt; Tuple[int, int]:\n\"\"\"\n        Returns:\n            Byte offsets (start, end) of the import string in the source file.\n        \"\"\"\nsource_start = self._ast_node.src.byte_offset\nres = (\nIMPORT_FILENAME_RE,\nIMPORT_AS_FROM_RE,\nIMPORT_AS_RE,\nIMPORT_ALIAS_LIST,\n)\nmatches = list(re.match(self._source) for re in res)\nassert any(matches)\nmatch = next(m for m in matches if m)\nreturn source_start + match.start(\"filename\"), source_start + match.end(\n\"filename\"\n)\n</code></pre>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.import_string","title":"<code>import_string: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>Import string as it appears in the source code.</p>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.import_string_pos","title":"<code>import_string_pos: Tuple[int, int]</code>  <code>cached</code> <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>Byte offsets (start, end) of the import string in the source file.</p>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.imported_file","title":"<code>imported_file: Path</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Path</code> <p>Absolute path of the imported file.</p>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.parent","title":"<code>parent: SourceUnit</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>SourceUnit</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.source_unit","title":"<code>source_unit: SourceUnit</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>SourceUnit</code> <p>Source unit imported by this import directive.</p>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.source_unit_name","title":"<code>source_unit_name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>Source unit name of the imported file.</p>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.symbol_aliases","title":"<code>symbol_aliases: Tuple[SymbolAlias, ...]</code>  <code>property</code>","text":"<p>Is only set in the case of <code>import { SafeType as CustomSafeType } from \"SafeLib.sol\";</code> import directive type.</p> <p>Returns:</p> Type Description <code>Tuple[SymbolAlias, ...]</code> <p>Symbol aliases present in the import directive.</p>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.unit_alias","title":"<code>unit_alias: Optional[str]</code>  <code>property</code>","text":"<p>Example</p> <p>Is <code>SafeLib</code> in the case of these import directives: <pre><code>import \"SafeLib.sol\" as SafeLib;\n</code></pre> <pre><code>import * as SafeLib from \"SafeLib.sol\";\n</code></pre></p> <p>Is <code>None</code> in the case of these import directives: <pre><code>import \"SafeLib.sol\";\n</code></pre> <pre><code>import { SafeType as CustomSafeType } from \"SafeLib.sol\";\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>Alias for the namespace of the imported source unit.</p>"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.SymbolAlias","title":"<code>SymbolAlias</code>  <code>class</code>","text":"<p>Helper class representing a symbol alias in an import directive of the<code>import {symbol as alias} from \"file.sol\";</code> form.</p> <p>Example</p> <p><code>symbol</code> is the <code>foreign</code> attribute and <code>alias</code> is the <code>local</code> attribute in the following example: <pre><code>import {symbol as alias} from \"file.sol\";\n</code></pre></p> <p>Attributes:</p> Name Type Description <code>foreign</code> <code>Identifier</code> <p>Identifier referencing the symbol in the imported file.</p> <code>local</code> <code>Optional[str]</code> <p>Alias name of the imported symbol (if any).</p> Source code in <code>woke/ast/ir/meta/import_directive.py</code> <pre><code>@dataclass\nclass SymbolAlias:\n\"\"\"\n    Helper class representing a symbol alias in an import directive of the`:::solidity import {symbol as alias} from \"file.sol\";` form.\n    !!! example\n        `symbol` is the `foreign` attribute and `alias` is the `local` attribute in the following example:\n        ```solidity\n        import {symbol as alias} from \"file.sol\";\n        ```\n    Attributes:\n        foreign (Identifier): Identifier referencing the symbol in the imported file.\n        local (Optional[str]): Alias name of the imported symbol (if any).\n    \"\"\"\nforeign: Identifier\nlocal: Optional[str]\n</code></pre>"},{"location":"api-reference/ir/meta/inheritance-specifier/","title":"Inheritance specifier","text":""},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier","title":"<code>woke.ast.ir.meta.inheritance_specifier</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier","title":"<code>InheritanceSpecifier</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Example</p> <p><code>A(0x1234567890123456789012345678901234567890)</code> in the following code: <pre><code>contract A {\naddress immutable owner;\nconstructor(address _owner) {\nowner = _owner;\n}\n}\ncontract B is A(0x1234567890123456789012345678901234567890) {}\n</code></pre></p> Source code in <code>woke/ast/ir/meta/inheritance_specifier.py</code> <pre><code>class InheritanceSpecifier(SolidityAbc):\n\"\"\"\n    !!! example\n        `:::solidity A(0x1234567890123456789012345678901234567890)` in the following code:\n        ```solidity\n        contract A {\n            address immutable owner;\n            constructor(address _owner) {\n                owner = _owner;\n            }\n        }\n        contract B is A(0x1234567890123456789012345678901234567890) {}\n        ```\n    \"\"\"\n_ast_node: SolcInheritanceSpecifier\n_parent: ContractDefinition\n_base_name: Union[IdentifierPath, UserDefinedTypeName]\n_arguments: Optional[List[ExpressionAbc]]\ndef __init__(\nself,\ninit: IrInitTuple,\ninheritance_specifier: SolcInheritanceSpecifier,\nparent: ContractDefinition,\n):\nsuper().__init__(init, inheritance_specifier, parent)\nif isinstance(inheritance_specifier.base_name, SolcIdentifierPath):\nself._base_name = IdentifierPath(\ninit, inheritance_specifier.base_name, self\n)\nelif isinstance(inheritance_specifier.base_name, SolcUserDefinedTypeName):\nself._base_name = UserDefinedTypeName(\ninit, inheritance_specifier.base_name, self\n)\nif inheritance_specifier.arguments is None:\nself._arguments = None\nelse:\nself._arguments = []\nfor argument in inheritance_specifier.arguments:\nself._arguments.append(ExpressionAbc.from_ast(init, argument, self))\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._base_name\nif self._arguments is not None:\nfor argument in self._arguments:\nyield from argument\n@property\ndef parent(self) -&gt; ContractDefinition:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef base_name(self) -&gt; Union[IdentifierPath, UserDefinedTypeName]:\n\"\"\"\n        The returned IR node holds a reference to the base contract definition ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]).\n        !!! example\n            `A` in the following code:\n            ```solidity\n            contract B is A(0x1234567890123456789012345678901234567890) {}\n            ```\n        Returns:\n            IR node representing the base contract name.\n        \"\"\"\nreturn self._base_name\n@property\ndef arguments(self) -&gt; Optional[List[ExpressionAbc]]:\n\"\"\"\n        !!! warning\n            Is `None` when there are no curly braces after the inheritance specifier name.\n            ```solidity\n            contract B is A {}\n            ```\n            Is an empty list when there are curly braces but no arguments.\n            ```solidity\n            contract B is A() {}\n            ```\n        !!! example\n            `:::solidity 0x1234567890123456789012345678901234567890` in the following code:\n            ```solidity\n            contract B is A(0x1234567890123456789012345678901234567890) {}\n            ```\n        Returns:\n            Arguments of the base constructor call, if provided.\n        \"\"\"\nreturn self._arguments\n</code></pre>"},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier.arguments","title":"<code>arguments: Optional[List[ExpressionAbc]]</code>  <code>property</code>","text":"<p>Warning</p> <p>Is <code>None</code> when there are no curly braces after the inheritance specifier name. <pre><code>contract B is A {}\n</code></pre></p> <p>Is an empty list when there are curly braces but no arguments. <pre><code>contract B is A() {}\n</code></pre></p> <p>Example</p> <p><code>0x1234567890123456789012345678901234567890</code> in the following code: <pre><code>contract B is A(0x1234567890123456789012345678901234567890) {}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[List[ExpressionAbc]]</code> <p>Arguments of the base constructor call, if provided.</p>"},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier.base_name","title":"<code>base_name: Union[IdentifierPath, UserDefinedTypeName]</code>  <code>property</code>","text":"<p>The returned IR node holds a reference to the base contract definition (ContractDefinition).</p> <p>Example</p> <p><code>A</code> in the following code: <pre><code>contract B is A(0x1234567890123456789012345678901234567890) {}\n</code></pre></p> <p>Returns:</p> Type Description <code>Union[IdentifierPath, UserDefinedTypeName]</code> <p>IR node representing the base contract name.</p>"},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier.parent","title":"<code>parent: ContractDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ContractDefinition</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/modifier-invocation/","title":"Modifier invocation","text":""},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation","title":"<code>woke.ast.ir.meta.modifier_invocation</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation","title":"<code>ModifierInvocation</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Warning</p> <p>Also represents a base constructor invocation.</p> <p>Example</p> <ul> <li><code>IERC20(\"MyToken\", \"MTK\")</code> (ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER),</li> <li><code>initializer</code> (ModifierInvocationKind.MODIFIER_INVOCATION)</li> </ul> <p>in the following code: <pre><code>import Initializable from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\ncontract MyContract is ERC20, Initializable {\nconstructor() ERC20(\"MyToken\", \"MTK\") initializer {\n// ...\n}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/meta/modifier_invocation.py</code> <pre><code>class ModifierInvocation(SolidityAbc):\n\"\"\"\n    !!! warning\n        Also represents a base constructor invocation.\n    !!! example\n        - `:::solidity IERC20(\"MyToken\", \"MTK\")` ([ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER][woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER]),\n        - `:::solidity initializer` ([ModifierInvocationKind.MODIFIER_INVOCATION][woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION])\n        in the following code:\n        ```solidity\n        import Initializable from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\";\n        contract MyContract is ERC20, Initializable {\n            constructor() ERC20(\"MyToken\", \"MTK\") initializer {\n                // ...\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcModifierInvocation\n_parent: FunctionDefinition\n_kind: Optional[ModifierInvocationKind]\n_modifier_name: Union[Identifier, IdentifierPath]\n_arguments: Optional[List[ExpressionAbc]]\ndef __init__(\nself,\ninit: IrInitTuple,\nmodifier_invocation: SolcModifierInvocation,\nparent: SolidityAbc,\n):\nsuper().__init__(init, modifier_invocation, parent)\nself._kind = None\nif isinstance(modifier_invocation.modifier_name, SolcIdentifier):\nself._modifier_name = Identifier(\ninit, modifier_invocation.modifier_name, self\n)\nelif isinstance(modifier_invocation.modifier_name, SolcIdentifierPath):\nself._modifier_name = IdentifierPath(\ninit, modifier_invocation.modifier_name, self\n)\nif modifier_invocation.arguments is None:\nself._arguments = None\nelse:\nself._arguments = [\nExpressionAbc.from_ast(init, argument, self)\nfor argument in modifier_invocation.arguments\n]\nself._reference_resolver.register_post_process_callback(self._post_process)\ndef _post_process(self, callback_params: CallbackParams):\nfrom ..declaration.contract_definition import ContractDefinition\nfrom ..declaration.modifier_definition import ModifierDefinition\nreferenced_declaration = self.modifier_name.referenced_declaration\nif isinstance(referenced_declaration, ModifierDefinition):\nself._kind = ModifierInvocationKind.MODIFIER_INVOCATION\nelif isinstance(referenced_declaration, ContractDefinition):\nself._kind = ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER\nelse:\nassert False, f\"Unexpected declaration type: {referenced_declaration}\"\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._modifier_name\nif self._arguments is not None:\nfor argument in self._arguments:\nyield from argument\n@property\ndef parent(self) -&gt; FunctionDefinition:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef kind(self) -&gt; ModifierInvocationKind:\n\"\"\"\n        Returns:\n            Kind of the modifier invocation.\n        \"\"\"\nassert self._kind is not None\nreturn self._kind\n@property\ndef modifier_name(self) -&gt; Union[Identifier, IdentifierPath]:\n\"\"\"\n        The returned IR node holds a reference to the [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition] declaration of the modifier being invoked in the case of the [ModifierInvocationKind.MODIFIER_INVOCATION][woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION] kind.\n        In the case of the [ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER][woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER] kind, the returned IR node holds a reference to the [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] whose constructor is being invoked.\n        !!! example\n            `ERC20` and `initializer` in the following code:\n            ```solidity\n            constructor() ERC20(\"MyToken\", \"MTK\") initializer {\n                // ...\n            }\n            ```\n        Returns:\n            IR node representing the name of the modifier.\n        \"\"\"\nreturn self._modifier_name\n@property\ndef arguments(self) -&gt; Optional[List[ExpressionAbc]]:\n\"\"\"\n        !!! warning\n            Is `None` when there are no curly braces after the modifier name.\n            ```solidity\n            constructor() initializer {}\n            ```\n            Is an empty list when there are curly braces but no arguments.\n            ```solidity\n            constructor() initializer() {}\n            ```\n        !!! example\n            `:::solidity \"MyToken\"` and `:::solidity \"MTK\"` in the following code:\n            ```solidity\n            constructor() ERC20(\"MyToken\", \"MTK\") initializer {\n                // ...\n            }\n            ```\n        Returns:\n            Arguments of the base constructor or modifier invocation (if any).\n        \"\"\"\nreturn self._arguments\n</code></pre>"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation.arguments","title":"<code>arguments: Optional[List[ExpressionAbc]]</code>  <code>property</code>","text":"<p>Warning</p> <p>Is <code>None</code> when there are no curly braces after the modifier name. <pre><code>constructor() initializer {}\n</code></pre></p> <p>Is an empty list when there are curly braces but no arguments. <pre><code>constructor() initializer() {}\n</code></pre></p> <p>Example</p> <p><code>\"MyToken\"</code> and <code>\"MTK\"</code> in the following code: <pre><code>constructor() ERC20(\"MyToken\", \"MTK\") initializer {\n// ...\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[List[ExpressionAbc]]</code> <p>Arguments of the base constructor or modifier invocation (if any).</p>"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation.kind","title":"<code>kind: ModifierInvocationKind</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ModifierInvocationKind</code> <p>Kind of the modifier invocation.</p>"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation.modifier_name","title":"<code>modifier_name: Union[Identifier, IdentifierPath]</code>  <code>property</code>","text":"<p>The returned IR node holds a reference to the ModifierDefinition declaration of the modifier being invoked in the case of the ModifierInvocationKind.MODIFIER_INVOCATION kind. In the case of the ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER kind, the returned IR node holds a reference to the ContractDefinition whose constructor is being invoked.</p> <p>Example</p> <p><code>ERC20</code> and <code>initializer</code> in the following code: <pre><code>constructor() ERC20(\"MyToken\", \"MTK\") initializer {\n// ...\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Union[Identifier, IdentifierPath]</code> <p>IR node representing the name of the modifier.</p>"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation.parent","title":"<code>parent: FunctionDefinition</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>FunctionDefinition</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/override-specifier/","title":"Override specifier","text":""},{"location":"api-reference/ir/meta/override-specifier/#woke.ast.ir.meta.override_specifier","title":"<code>woke.ast.ir.meta.override_specifier</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/override-specifier/#woke.ast.ir.meta.override_specifier.OverrideSpecifier","title":"<code>OverrideSpecifier</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Example</p> <p>An override specifier can be used:</p> <ul> <li>in a FunctionDefinition:<ul> <li><code>override</code> in line 19,</li> </ul> </li> <li>in a ModifierDefinition:<ul> <li><code>override</code> in line 12,</li> </ul> </li> <li>in a VariableDeclaration:<ul> <li><code>override(IERC20)</code> in line 17.</li> </ul> </li> </ul> <pre><code>interface IERC20 {\nfunction transfer(address to, uint256 value) external returns (bool);\nfunction allowance(address owner, address spender) external view returns (uint256);\n}\nabstract contract ERC20 is IERC20 {\nmodifier EOA() virtual;\n}\ncontract C is ERC20 {\nmodifier EOA() override {\nrequire(msg.sender == tx.origin);\n_;\n}\nmapping(address =&gt; mapping(address =&gt; uint256)) public override(IERC20) allowance;\nfunction transfer(address to, uint256 value) external override returns (bool) {\n// ...\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/meta/override_specifier.py</code> <pre><code>class OverrideSpecifier(SolidityAbc):\n\"\"\"\n    !!! example\n        An override specifier can be used:\n        - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition]:\n            - `:::solidity override` in line 19,\n        - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition]:\n            - `:::solidity override` in line 12,\n        - in a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]:\n            - `:::solidity override(IERC20)` in line 17.\n        ```solidity linenums=\"1\"\n        interface IERC20 {\n            function transfer(address to, uint256 value) external returns (bool);\n            function allowance(address owner, address spender) external view returns (uint256);\n        }\n        abstract contract ERC20 is IERC20 {\n            modifier EOA() virtual;\n        }\n        contract C is ERC20 {\n            modifier EOA() override {\n                require(msg.sender == tx.origin);\n                _;\n            }\n            mapping(address =&gt; mapping(address =&gt; uint256)) public override(IERC20) allowance;\n            function transfer(address to, uint256 value) external override returns (bool) {\n                // ...\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcOverrideSpecifier\n_parent: Union[FunctionDefinition, ModifierDefinition, VariableDeclaration]\n_overrides: List[Union[IdentifierPath, UserDefinedTypeName]]\ndef __init__(\nself,\ninit: IrInitTuple,\noverride_specifier: SolcOverrideSpecifier,\nparent: SolidityAbc,\n):\nsuper().__init__(init, override_specifier, parent)\nself._overrides = []\nfor override in override_specifier.overrides:\nif isinstance(override, SolcIdentifierPath):\nself._overrides.append(IdentifierPath(init, override, self))\nelif isinstance(override, SolcUserDefinedTypeName):\nself._overrides.append(UserDefinedTypeName(init, override, self))\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor override in self._overrides:\nyield from override\n@property\ndef parent(\nself,\n) -&gt; Union[FunctionDefinition, ModifierDefinition, VariableDeclaration]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef overrides(self) -&gt; Tuple[Union[IdentifierPath, UserDefinedTypeName], ...]:\n\"\"\"\n        !!! note\n            Is empty when there are no curly braces after the `:::solidity override` keyword.\n        Returns:\n            Tuple of IR nodes referencing the contract or interface whose declaration is being overridden.\n        \"\"\"\nreturn tuple(self._overrides)\n</code></pre>"},{"location":"api-reference/ir/meta/override-specifier/#woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides","title":"<code>overrides: Tuple[Union[IdentifierPath, UserDefinedTypeName], ...]</code>  <code>property</code>","text":"<p>Note</p> <p>Is empty when there are no curly braces after the <code>override</code> keyword.</p> <p>Returns:</p> Type Description <code>Tuple[Union[IdentifierPath, UserDefinedTypeName], ...]</code> <p>Tuple of IR nodes referencing the contract or interface whose declaration is being overridden.</p>"},{"location":"api-reference/ir/meta/override-specifier/#woke.ast.ir.meta.override_specifier.OverrideSpecifier.parent","title":"<code>parent: Union[FunctionDefinition, ModifierDefinition, VariableDeclaration]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[FunctionDefinition, ModifierDefinition, VariableDeclaration]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/parameter-list/","title":"Parameter list","text":""},{"location":"api-reference/ir/meta/parameter-list/#woke.ast.ir.meta.parameter_list","title":"<code>woke.ast.ir.meta.parameter_list</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/parameter-list/#woke.ast.ir.meta.parameter_list.ParameterList","title":"<code>ParameterList</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Example</p> <p>A parameter list can be used:</p> <ul> <li>in an ErrorDefinition:<ul> <li><code>(uint requested, uint available)</code> in line 2,</li> </ul> </li> <li>in an EventDefinition:<ul> <li><code>(address indexed previousOwner, address indexed newOwner)</code> in line 3,</li> </ul> </li> <li>in a FunctionDefinition:<ul> <li><code>(uint a, uint b)</code> in line 12 as function parameters,</li> <li><code>(uint256)</code> in line 12 as function return parameters,</li> </ul> </li> <li>in a FunctionTypeName:<ul> <li><code>(string memory, uint)</code> in line 5 as function type name parameters,</li> <li><code>(bool)</code> in line 5 as function type name return parameters,</li> </ul> </li> <li>in a ModifierDefinition:<ul> <li><code>(uint x)</code> in line 7,</li> </ul> </li> <li>in a TryCatchClause:<ul> <li><code>(bool success)</code> in line 17 as try clause parameters,</li> <li><code>(string memory reason)</code> in line 19 as catch clause parameters.</li> </ul> </li> </ul> <pre><code>contract C {\nerror InsufficientBalance(uint requested, uint available);\nevent OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\nfunction (string memory, uint) external returns (bool) externalFunction;\nmodifier onlyPositive(uint x) {\nrequire(x &gt; 0, \"x must be positive\");\n_;\n}\nfunction add(uint a, uint b) onlyPositive(a) public pure returns (uint256) {\nreturn a + b;\n}\nfunction callExternalFunction() public {\ntry externalFunction(\"abc\", 123) returns (bool success) {\n// ...\n} catch Error(string memory reason) {\n// ...\n}\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/meta/parameter_list.py</code> <pre><code>class ParameterList(SolidityAbc):\n\"\"\"\n    !!! example\n        A parameter list can be used:\n        - in an [ErrorDefinition][woke.ast.ir.declaration.error_definition.ErrorDefinition]:\n            - `:::solidity (uint requested, uint available)` in line 2,\n        - in an [EventDefinition][woke.ast.ir.declaration.event_definition.EventDefinition]:\n            - `:::solidity (address indexed previousOwner, address indexed newOwner)` in line 3,\n        - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition]:\n            - `:::solidity (uint a, uint b)` in line 12 as function parameters,\n            - `:::solidity (uint256)` in line 12 as function return parameters,\n        - in a [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName]:\n            - `:::solidity (string memory, uint)` in line 5 as function type name parameters,\n            - `:::solidity (bool)` in line 5 as function type name return parameters,\n        - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition]:\n            - `:::solidity (uint x)` in line 7,\n        - in a [TryCatchClause][woke.ast.ir.meta.try_catch_clause.TryCatchClause]:\n            - `:::solidity (bool success)` in line 17 as try clause parameters,\n            - `:::solidity (string memory reason)` in line 19 as catch clause parameters.\n        ```solidity linenums=\"1\"\n        contract C {\n            error InsufficientBalance(uint requested, uint available);\n            event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n            function (string memory, uint) external returns (bool) externalFunction;\n            modifier onlyPositive(uint x) {\n                require(x &gt; 0, \"x must be positive\");\n                _;\n            }\n            function add(uint a, uint b) onlyPositive(a) public pure returns (uint256) {\n                return a + b;\n            }\n            function callExternalFunction() public {\n                try externalFunction(\"abc\", 123) returns (bool success) {\n                    // ...\n                } catch Error(string memory reason) {\n                    // ...\n                }\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcParameterList\n_parent: Union[\nErrorDefinition,\nEventDefinition,\nFunctionDefinition,\nFunctionTypeName,\nModifierDefinition,\nTryCatchClause,\n]\n_parameters: List[VariableDeclaration]\ndef __init__(\nself, init: IrInitTuple, parameter_list: SolcParameterList, parent: SolidityAbc\n):\nsuper().__init__(init, parameter_list, parent)\nself._parameters = []\nfor parameter in parameter_list.parameters:\nself._parameters.append(VariableDeclaration(init, parameter, self))\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor parameter in self._parameters:\nyield from parameter\n@property\ndef parent(\nself,\n) -&gt; Union[\nErrorDefinition,\nEventDefinition,\nFunctionDefinition,\nFunctionTypeName,\nModifierDefinition,\nTryCatchClause,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef parameters(self) -&gt; Tuple[VariableDeclaration, ...]:\n\"\"\"\n        Can be empty.\n        Returns:\n            Variable declarations of the parameter list.\n        \"\"\"\nreturn tuple(self._parameters)\n</code></pre>"},{"location":"api-reference/ir/meta/parameter-list/#woke.ast.ir.meta.parameter_list.ParameterList.parameters","title":"<code>parameters: Tuple[VariableDeclaration, ...]</code>  <code>property</code>","text":"<p>Can be empty.</p> <p>Returns:</p> Type Description <code>Tuple[VariableDeclaration, ...]</code> <p>Variable declarations of the parameter list.</p>"},{"location":"api-reference/ir/meta/parameter-list/#woke.ast.ir.meta.parameter_list.ParameterList.parent","title":"<code>parent: Union[ErrorDefinition, EventDefinition, FunctionDefinition, FunctionTypeName, ModifierDefinition, TryCatchClause]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[ErrorDefinition, EventDefinition, FunctionDefinition, FunctionTypeName, ModifierDefinition, TryCatchClause]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/pragma-directive/","title":"Pragma directive","text":""},{"location":"api-reference/ir/meta/pragma-directive/#woke.ast.ir.meta.pragma_directive","title":"<code>woke.ast.ir.meta.pragma_directive</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/pragma-directive/#woke.ast.ir.meta.pragma_directive.PragmaDirective","title":"<code>PragmaDirective</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> Source code in <code>woke/ast/ir/meta/pragma_directive.py</code> <pre><code>class PragmaDirective(SolidityAbc):\n_ast_node: SolcPragmaDirective\n_parent: SourceUnit\n_literals: List[str]\ndef __init__(\nself, init: IrInitTuple, pragma: SolcPragmaDirective, parent: SolidityAbc\n):\nsuper().__init__(init, pragma, parent)\nself._literals = list(pragma.literals)\n@property\ndef parent(self) -&gt; SourceUnit:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef literals(self) -&gt; Tuple[str, ...]:\n\"\"\"\n        !!! example\n            `:::py ('solidity', '^', '0.8', '||', '0.7', '.1', '-', '0.7', '.6')` for the following pragma:\n            ```solidity\n            pragma solidity ^0.8 || 0.7.1 - 0.7.6;\n            ```\n        !!! example\n            `:::py ('abicoder', 'v2')` for the following pragma:\n            ```solidity\n            pragma abicoder v2;\n            ```\n        !!! example\n            `:::py ('experimental', 'SMTChecker')` for the following pragma:\n            ```solidity\n            pragma experimental SMTChecker;\n            ```\n        Returns:\n            Literals of the pragma directive.\n        \"\"\"\nreturn tuple(self._literals)\n</code></pre>"},{"location":"api-reference/ir/meta/pragma-directive/#woke.ast.ir.meta.pragma_directive.PragmaDirective.literals","title":"<code>literals: Tuple[str, ...]</code>  <code>property</code>","text":"<p>Example</p> <p><code>('solidity', '^', '0.8', '||', '0.7', '.1', '-', '0.7', '.6')</code> for the following pragma: <pre><code>pragma solidity ^0.8 || 0.7.1 - 0.7.6;\n</code></pre></p> <p>Example</p> <p><code>('abicoder', 'v2')</code> for the following pragma: <pre><code>pragma abicoder v2;\n</code></pre></p> <p>Example</p> <p><code>('experimental', 'SMTChecker')</code> for the following pragma: <pre><code>pragma experimental SMTChecker;\n</code></pre></p> <p>Returns:</p> Type Description <code>Tuple[str, ...]</code> <p>Literals of the pragma directive.</p>"},{"location":"api-reference/ir/meta/pragma-directive/#woke.ast.ir.meta.pragma_directive.PragmaDirective.parent","title":"<code>parent: SourceUnit</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>SourceUnit</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/source-unit/","title":"Source unit","text":""},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit","title":"<code>woke.ast.ir.meta.source_unit</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit","title":"<code>SourceUnit</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Source unit is the root node.</p> <p>Warning</p> <p>Source unit byte_location does not cover the whole file. Only lines 3-7 are covered by the source unit in the following example: <pre><code>// SPDX-License-Identifier: MIT\npragma solidity ^0.8;\ncontract Foo {\nfunction bar() public {}\n}\n</code></pre> Also trailing newlines are not covered by the source unit.</p> Source code in <code>woke/ast/ir/meta/source_unit.py</code> <pre><code>class SourceUnit(SolidityAbc):\n\"\"\"\n    Source unit is the root node.\n    !!! warning\n        Source unit [byte_location][woke.ast.ir.abc.IrAbc.byte_location] does not cover the whole file.\n        Only lines 3-7 are covered by the source unit in the following example:\n        ```solidity linenums=\"1\"\n        // SPDX-License-Identifier: MIT\n        pragma solidity ^0.8;\n        contract Foo {\n            function bar() public {}\n        }\n        ```\n        Also trailing newlines are not covered by the source unit.\n    \"\"\"\n_ast_node: SolcSourceUnit\n_file_source: bytes\n_license: Optional[str]\n_source_unit_name: str\n_pragmas: List[PragmaDirective]\n_imports: List[ImportDirective]\n_declared_variables: List[VariableDeclaration]\n_enums: List[EnumDefinition]\n_functions: List[FunctionDefinition]\n_structs: List[StructDefinition]\n_errors: List[ErrorDefinition]\n_user_defined_value_types: List[UserDefinedValueTypeDefinition]\n_contracts: List[ContractDefinition]\n_using_for_directives: List[UsingForDirective]\ndef __init__(\nself,\ninit: IrInitTuple,\nsource_unit: SolcSourceUnit,\n):\nsuper().__init__(init, source_unit, None)\nself._file_source = init.source\nself._license = source_unit.license\nself._source_unit_name = source_unit.absolute_path\nself._pragmas = []\nself._imports = []\nself._declared_variables = []\nself._enums = []\nself._functions = []\nself._structs = []\nself._errors = []\nself._user_defined_value_types = []\nself._contracts = []\nself._using_for_directives = []\nfor node in source_unit.nodes:\nif isinstance(node, SolcPragmaDirective):\nself._pragmas.append(PragmaDirective(init, node, self))\nelif isinstance(node, SolcImportDirective):\nself._imports.append(ImportDirective(init, node, self))\nelif isinstance(node, SolcVariableDeclaration):\nself._declared_variables.append(VariableDeclaration(init, node, self))\nelif isinstance(node, SolcEnumDefinition):\nself._enums.append(EnumDefinition(init, node, self))\nelif isinstance(node, SolcFunctionDefinition):\nself._functions.append(FunctionDefinition(init, node, self))\nelif isinstance(node, SolcStructDefinition):\nself._structs.append(StructDefinition(init, node, self))\nelif isinstance(node, SolcErrorDefinition):\nself._errors.append(ErrorDefinition(init, node, self))\nelif isinstance(node, SolcUserDefinedValueTypeDefinition):\nself._user_defined_value_types.append(\nUserDefinedValueTypeDefinition(init, node, self)\n)\nelif isinstance(node, SolcContractDefinition):\nself._contracts.append(ContractDefinition(init, node, self))\nelif isinstance(node, SolcUsingForDirective):\nself._using_for_directives.append(UsingForDirective(init, node, self))\nelse:\nassert False, f\"Unknown node type: {node}\"\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor pragma in self._pragmas:\nyield from pragma\nfor import_directive in self._imports:\nyield from import_directive\nfor variable_declaration in self._declared_variables:\nyield from variable_declaration\nfor enum in self._enums:\nyield from enum\nfor function in self._functions:\nyield from function\nfor struct in self._structs:\nyield from struct\nfor error in self._errors:\nyield from error\nfor user_defined_value_type in self._user_defined_value_types:\nyield from user_defined_value_type\nfor contract in self._contracts:\nyield from contract\nfor using_for_directive in self._using_for_directives:\nyield from using_for_directive\n@property\ndef parent(self) -&gt; None:\n\"\"\"\n        Returns:\n            Does not have a parent.\n        \"\"\"\nreturn None\n@property\ndef file_source(self) -&gt; bytes:\n\"\"\"\n        As opposed to [source][woke.ast.ir.abc.IrAbc.source], this property returns the whole file source.\n        Returns:\n            Source code of the file including trailing newlines and license string.\n        \"\"\"\nreturn self._file_source\n@property\ndef license(self) -&gt; Optional[str]:\n\"\"\"\n        !!! example\n            Returns `MIT` for the following license comment:\n            ```solidity\n            // SPDX-License-Identifier: MIT\n            ```\n        Returns:\n            License string of the file, if any.\n        \"\"\"\nreturn self._license\n@property\ndef source_unit_name(self) -&gt; str:\n\"\"\"\n        Returns:\n            Source unit name of the file.\n        \"\"\"\nreturn self._source_unit_name\n@property\ndef pragmas(self) -&gt; Tuple[PragmaDirective, ...]:\n\"\"\"\n        Returns:\n            Pragma directives present in the file.\n        \"\"\"\nreturn tuple(self._pragmas)\n@property\ndef imports(self) -&gt; Tuple[ImportDirective, ...]:\n\"\"\"\n        Returns:\n            Import directives present in the file.\n        \"\"\"\nreturn tuple(self._imports)\n@property\ndef declared_variables(self) -&gt; Tuple[VariableDeclaration, ...]:\n\"\"\"\n        Should only return constants.\n        Returns:\n            Top-level variable declarations present in the file.\n        \"\"\"\nreturn tuple(self._declared_variables)\n@property\ndef enums(self) -&gt; Tuple[EnumDefinition, ...]:\n\"\"\"\n        Returns:\n            Top-level enum definitions present in the file.\n        \"\"\"\nreturn tuple(self._enums)\n@property\ndef functions(self) -&gt; Tuple[FunctionDefinition, ...]:\n\"\"\"\n        Should only return [FunctionDefinitions][woke.ast.ir.declaration.function_definition.FunctionDefinition] of the [FunctionKind.FREE_FUNCTION][woke.ast.enums.FunctionKind.FREE_FUNCTION] kind.\n        Returns:\n            Top-level function definitions present in the file.\n        \"\"\"\nreturn tuple(self._functions)\n@property\ndef structs(self) -&gt; Tuple[StructDefinition, ...]:\n\"\"\"\n        Returns:\n            Top-level struct definitions present in the file.\n        \"\"\"\nreturn tuple(self._structs)\n@property\ndef errors(self) -&gt; Tuple[ErrorDefinition, ...]:\n\"\"\"\n        Returns:\n            Top-level error definitions present in the file.\n        \"\"\"\nreturn tuple(self._errors)\n@property\ndef user_defined_value_types(self) -&gt; Tuple[UserDefinedValueTypeDefinition, ...]:\n\"\"\"\n        Returns:\n            Top-level user-defined value type definitions present in the file.\n        \"\"\"\nreturn tuple(self._user_defined_value_types)\n@property\ndef contracts(self) -&gt; Tuple[ContractDefinition, ...]:\n\"\"\"\n        Returns:\n            Contract definitions present in the file.\n        \"\"\"\nreturn tuple(self._contracts)\n@property\ndef using_for_directives(self) -&gt; Tuple[UsingForDirective, ...]:\n\"\"\"\n        Returns:\n            Top-level using for directives present in the file.\n        \"\"\"\nreturn tuple(self._using_for_directives)\ndef declarations_iter(self) -&gt; Iterator[DeclarationAbc]:\n\"\"\"\n        Yields:\n            All declarations ([DeclarationAbc][woke.ast.ir.declaration.abc.DeclarationAbc]) present in the file (recursively).\n        \"\"\"\nyield from self.declared_variables\nyield from self.enums\nfor enum in self.enums:\nyield from enum.values\nyield from self.functions\nyield from self.structs\nyield from self.errors\nyield from self.user_defined_value_types\nyield from self.contracts\nfor contract in self.contracts:\nyield from contract.declarations_iter()\n</code></pre>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.contracts","title":"<code>contracts: Tuple[ContractDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ContractDefinition, ...]</code> <p>Contract definitions present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.declared_variables","title":"<code>declared_variables: Tuple[VariableDeclaration, ...]</code>  <code>property</code>","text":"<p>Should only return constants.</p> <p>Returns:</p> Type Description <code>Tuple[VariableDeclaration, ...]</code> <p>Top-level variable declarations present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.enums","title":"<code>enums: Tuple[EnumDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[EnumDefinition, ...]</code> <p>Top-level enum definitions present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.errors","title":"<code>errors: Tuple[ErrorDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ErrorDefinition, ...]</code> <p>Top-level error definitions present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.file_source","title":"<code>file_source: bytes</code>  <code>property</code>","text":"<p>As opposed to source, this property returns the whole file source.</p> <p>Returns:</p> Type Description <code>bytes</code> <p>Source code of the file including trailing newlines and license string.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.functions","title":"<code>functions: Tuple[FunctionDefinition, ...]</code>  <code>property</code>","text":"<p>Should only return FunctionDefinitions of the FunctionKind.FREE_FUNCTION kind.</p> <p>Returns:</p> Type Description <code>Tuple[FunctionDefinition, ...]</code> <p>Top-level function definitions present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.imports","title":"<code>imports: Tuple[ImportDirective, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ImportDirective, ...]</code> <p>Import directives present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.license","title":"<code>license: Optional[str]</code>  <code>property</code>","text":"<p>Example</p> <p>Returns <code>MIT</code> for the following license comment: <pre><code>// SPDX-License-Identifier: MIT\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[str]</code> <p>License string of the file, if any.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.parent","title":"<code>parent: None</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>None</code> <p>Does not have a parent.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.pragmas","title":"<code>pragmas: Tuple[PragmaDirective, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[PragmaDirective, ...]</code> <p>Pragma directives present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.source_unit_name","title":"<code>source_unit_name: str</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>str</code> <p>Source unit name of the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.structs","title":"<code>structs: Tuple[StructDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[StructDefinition, ...]</code> <p>Top-level struct definitions present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.user_defined_value_types","title":"<code>user_defined_value_types: Tuple[UserDefinedValueTypeDefinition, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[UserDefinedValueTypeDefinition, ...]</code> <p>Top-level user-defined value type definitions present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.using_for_directives","title":"<code>using_for_directives: Tuple[UsingForDirective, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[UsingForDirective, ...]</code> <p>Top-level using for directives present in the file.</p>"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.declarations_iter","title":"<code>declarations_iter()</code>","text":"<p>Yields:</p> Type Description <code>DeclarationAbc</code> <p>All declarations (DeclarationAbc) present in the file (recursively).</p> Source code in <code>woke/ast/ir/meta/source_unit.py</code> <pre><code>def declarations_iter(self) -&gt; Iterator[DeclarationAbc]:\n\"\"\"\n    Yields:\n        All declarations ([DeclarationAbc][woke.ast.ir.declaration.abc.DeclarationAbc]) present in the file (recursively).\n    \"\"\"\nyield from self.declared_variables\nyield from self.enums\nfor enum in self.enums:\nyield from enum.values\nyield from self.functions\nyield from self.structs\nyield from self.errors\nyield from self.user_defined_value_types\nyield from self.contracts\nfor contract in self.contracts:\nyield from contract.declarations_iter()\n</code></pre>"},{"location":"api-reference/ir/meta/structured-documentation/","title":"Structured documentation","text":""},{"location":"api-reference/ir/meta/structured-documentation/#woke.ast.ir.meta.structured_documentation","title":"<code>woke.ast.ir.meta.structured_documentation</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/structured-documentation/#woke.ast.ir.meta.structured_documentation.StructuredDocumentation","title":"<code>StructuredDocumentation</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Example</p> <p>Lines 1-4 in the following example: <pre><code>/// @title A simulator for trees\n/// @author John\n/// @notice You can use this contract for only the most basic simulation\n/// @dev All function calls are currently implemented without side effects\ncontract Tree {\nfunction multiply(uint a) public pure returns(uint) {\nreturn a * 7;\n}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/meta/structured_documentation.py</code> <pre><code>class StructuredDocumentation(SolidityAbc):\n\"\"\"\n    !!! example\n        Lines 1-4 in the following example:\n        ```solidity linenums=\"1\"\n        /// @title A simulator for trees\n        /// @author John\n        /// @notice You can use this contract for only the most basic simulation\n        /// @dev All function calls are currently implemented without side effects\n        contract Tree {\n            function multiply(uint a) public pure returns(uint) {\n                return a * 7;\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcStructuredDocumentation\n_parent: Union[\nContractDefinition,\nErrorDefinition,\nEventDefinition,\nFunctionDefinition,\nModifierDefinition,\nVariableDeclaration,\n]\n_text: str\ndef __init__(\nself,\ninit: IrInitTuple,\nstructured_documentation: SolcStructuredDocumentation,\nparent: SolidityAbc,\n):\nsuper().__init__(init, structured_documentation, parent)\nself._text = structured_documentation.text\n@property\ndef parent(\nself,\n) -&gt; Union[\nContractDefinition,\nErrorDefinition,\nEventDefinition,\nFunctionDefinition,\nModifierDefinition,\nVariableDeclaration,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef text(self) -&gt; str:\n\"\"\"\n        Does not include the leading `///` or `/**` and trailing `*/`.\n        Returns:\n            [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string.\n        \"\"\"\nreturn self._text\n</code></pre>"},{"location":"api-reference/ir/meta/structured-documentation/#woke.ast.ir.meta.structured_documentation.StructuredDocumentation.parent","title":"<code>parent: Union[ContractDefinition, ErrorDefinition, EventDefinition, FunctionDefinition, ModifierDefinition, VariableDeclaration]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[ContractDefinition, ErrorDefinition, EventDefinition, FunctionDefinition, ModifierDefinition, VariableDeclaration]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/structured-documentation/#woke.ast.ir.meta.structured_documentation.StructuredDocumentation.text","title":"<code>text: str</code>  <code>property</code>","text":"<p>Does not include the leading <code>///</code> or <code>/**</code> and trailing <code>*/</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>NatSpec documentation string.</p>"},{"location":"api-reference/ir/meta/try-catch-clause/","title":"Try catch clause","text":""},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause","title":"<code>woke.ast.ir.meta.try_catch_clause</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause","title":"<code>TryCatchClause</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Example</p> <ul> <li><code>returns(uint x) {}</code>,</li> <li><code>catch Error(string memory reason) {}</code>,</li> <li><code>catch Panic(uint errorCode) {}</code>,</li> <li><code>catch (bytes memory lowLevelData) {}</code> are all try/catch clauses in the following example: <pre><code>contract C {\nfunction foo() public view {\ntry this.bar(10) returns(uint x) {}\ncatch Error(string memory reason) {}\ncatch Panic(uint errorCode) {}\ncatch (bytes memory lowLevelData) {}\n}\nfunction bar(uint x) external pure returns(uint) {\nreturn x;\n}\n}\n</code></pre></li> </ul> Source code in <code>woke/ast/ir/meta/try_catch_clause.py</code> <pre><code>class TryCatchClause(SolidityAbc):\n\"\"\"\n    !!! example\n        - `:::solidity returns(uint x) {}`,\n        - `:::solidity catch Error(string memory reason) {}`,\n        - `:::solidity catch Panic(uint errorCode) {}`,\n        - `:::solidity catch (bytes memory lowLevelData) {}` are all try/catch clauses in the following example:\n        ```solidity\n        contract C {\n            function foo() public view {\n                try this.bar(10) returns(uint x) {}\n                catch Error(string memory reason) {}\n                catch Panic(uint errorCode) {}\n                catch (bytes memory lowLevelData) {}\n            }\n            function bar(uint x) external pure returns(uint) {\n                return x;\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcTryCatchClause\n_parent: TryStatement\n_block: Block\n_error_name: str\n_parameters: Optional[ParameterList]\ndef __init__(\nself,\ninit: IrInitTuple,\ntry_catch_clause: SolcTryCatchClause,\nparent: TryStatement,\n):\nsuper().__init__(init, try_catch_clause, parent)\nself._block = Block(init, try_catch_clause.block, self)\nself._error_name = try_catch_clause.error_name\nif try_catch_clause.parameters is None:\nself._parameters = None\nelse:\nself._parameters = ParameterList(init, try_catch_clause.parameters, self)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._block\nif self._parameters is not None:\nyield from self._parameters\n@property\ndef parent(self) -&gt; TryStatement:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef block(self) -&gt; Block:\n\"\"\"\n        Returns:\n            Body of the try/catch clause.\n        \"\"\"\nreturn self._block\n@property\ndef error_name(self) -&gt; str:\n\"\"\"\n        !!! example\n            For the following snippet:\n            ```solidity\n            try this.f() returns (uint256) {\n                // ...\n            } catch Error(string memory reason) {\n                // ...\n            } catch Panic(uint errorCode) {\n                // ...\n            } catch (bytes memory lowLevelData) {\n                // ...\n            }\n            ```\n            - the `error_name` of the first (try) clause is empty,\n            - the `error_name` of the second (catch) clause is `Error`,\n            - the `error_name` of the third (catch) clause is `Panic`,\n            - the `error_name` of the fourth (catch) clause is empty.\n        Returns:\n            Error name of the try/catch clause.\n        \"\"\"\nreturn self._error_name\n@property\ndef parameters(self) -&gt; Optional[ParameterList]:\n\"\"\"\n        Can be `None` if the try clause does not have return parameters or if the catch clause does not accept parameters.\n        !!! example\n            Both clauses in the following example do not have parameters:\n            ```solidity\n            try this.f() {\n                // ...\n            } catch {\n                // ...\n            }\n            ```\n        !!! example\n            `:::solidity (uint x)`, `:::solidity (string memory reason)`, `:::solidity (uint errorCode)` and `:::solidity (bytes memory lowLevelData)` are the parameters of the try/catch clauses in the following example:\n            ```solidity\n            try this.f() returns (uint x) {\n                // ...\n            } catch Error(string memory reason) {\n                // ...\n            } catch Panic(uint errorCode) {\n                // ...\n            } catch (bytes memory lowLevelData) {\n                // ...\n            }\n            ```\n        Returns:\n            Return parameters in the case of a try clause, or error parameters in the case of a catch clause.\n        \"\"\"\nreturn self._parameters\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn self.block.modifies_state\n</code></pre>"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause.block","title":"<code>block: Block</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Block</code> <p>Body of the try/catch clause.</p>"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause.error_name","title":"<code>error_name: str</code>  <code>property</code>","text":"<p>Example</p> <p>For the following snippet: <pre><code>try this.f() returns (uint256) {\n// ...\n} catch Error(string memory reason) {\n// ...\n} catch Panic(uint errorCode) {\n// ...\n} catch (bytes memory lowLevelData) {\n// ...\n}\n</code></pre></p> <ul> <li>the <code>error_name</code> of the first (try) clause is empty,</li> <li>the <code>error_name</code> of the second (catch) clause is <code>Error</code>,</li> <li>the <code>error_name</code> of the third (catch) clause is <code>Panic</code>,</li> <li>the <code>error_name</code> of the fourth (catch) clause is empty.</li> </ul> <p>Returns:</p> Type Description <code>str</code> <p>Error name of the try/catch clause.</p>"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause.parameters","title":"<code>parameters: Optional[ParameterList]</code>  <code>property</code>","text":"<p>Can be <code>None</code> if the try clause does not have return parameters or if the catch clause does not accept parameters.</p> <p>Example</p> <p>Both clauses in the following example do not have parameters: <pre><code>try this.f() {\n// ...\n} catch {\n// ...\n}\n</code></pre></p> <p>Example</p> <p><code>(uint x)</code>, <code>(string memory reason)</code>, <code>(uint errorCode)</code> and <code>(bytes memory lowLevelData)</code> are the parameters of the try/catch clauses in the following example: <pre><code>try this.f() returns (uint x) {\n// ...\n} catch Error(string memory reason) {\n// ...\n} catch Panic(uint errorCode) {\n// ...\n} catch (bytes memory lowLevelData) {\n// ...\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[ParameterList]</code> <p>Return parameters in the case of a try clause, or error parameters in the case of a catch clause.</p>"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause.parent","title":"<code>parent: TryStatement</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>TryStatement</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/using-for-directive/","title":"Using for directive","text":""},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive","title":"<code>woke.ast.ir.meta.using_for_directive</code>  <code>module</code>","text":""},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective","title":"<code>UsingForDirective</code>  <code>class</code>","text":"<p>         Bases: <code>SolidityAbc</code></p> <p>Note</p> <p>Either library_name must be set or one of functions or operator_functions must be non-empty.</p> <p>Example</p> <p>Lines 13 and 14 in the following example: <pre><code>type I8 is int8;\nfunction add(uint a, uint b) pure returns (uint) {\nreturn a + b;\n}\nfunction sub(I8 a, I8 b) pure returns (I8) {\nreturn I8.wrap(I8.unwrap(a) - I8.unwrap(b));\n}\nlibrary SafeMath {\nfunction sub(uint a, uint b) public pure returns (uint) {\nrequire(b &lt;= a);\nreturn a - b;\n}\n}\nusing {sub as -} for I8 global;\ncontract C {\nusing SafeMath for uint;\nusing {add} for uint;\n}\n</code></pre></p> Source code in <code>woke/ast/ir/meta/using_for_directive.py</code> <pre><code>class UsingForDirective(SolidityAbc):\n\"\"\"\n    !!! note\n        Either [library_name][woke.ast.ir.meta.using_for_directive.UsingForDirective.library_name] must be set or one of [functions][woke.ast.ir.meta.using_for_directive.UsingForDirective.functions] or [operator_functions][woke.ast.ir.meta.using_for_directive.UsingForDirective.operator_functions] must be non-empty.\n    !!! example\n        Lines 13 and 14 in the following example:\n        ```solidity linenums=\"1\"\n        type I8 is int8;\n        function add(uint a, uint b) pure returns (uint) {\n            return a + b;\n        }\n        function sub(I8 a, I8 b) pure returns (I8) {\n            return I8.wrap(I8.unwrap(a) - I8.unwrap(b));\n        }\n        library SafeMath {\n            function sub(uint a, uint b) public pure returns (uint) {\n                require(b &lt;= a);\n                return a - b;\n            }\n        }\n        using {sub as -} for I8 global;\n        contract C {\n            using SafeMath for uint;\n            using {add} for uint;\n        }\n        ```\n    \"\"\"\n_ast_node: SolcUsingForDirective\n_parent: Union[ContractDefinition, SourceUnit]\n_functions: List[IdentifierPath]\n_operator_functions: List[\nTuple[IdentifierPath, Union[UnaryOpOperator, BinaryOpOperator]]\n]\n_library_name: Optional[Union[IdentifierPath, UserDefinedTypeName]]\n_type_name: Optional[TypeNameAbc]\n# TODO add _global\ndef __init__(\nself,\ninit: IrInitTuple,\nusing_for_directive: SolcUsingForDirective,\nparent: Union[ContractDefinition, SourceUnit],\n):\nsuper().__init__(init, using_for_directive, parent)\nif using_for_directive.function_list is None:\nself._functions = []\nself._operator_functions = []\nelse:\nself._functions = [\nIdentifierPath(init, function.function, self)\nfor function in using_for_directive.function_list\nif function.function is not None\n]\nself._operator_functions = [\n(\nIdentifierPath(init, function.definition, self),\nfunction.operator,\n)\nfor function in using_for_directive.function_list\nif function.definition is not None and function.operator is not None\n]\nif using_for_directive.library_name is None:\nself._library_name = None\nelif isinstance(using_for_directive.library_name, SolcUserDefinedTypeName):\nself._library_name = UserDefinedTypeName(\ninit, using_for_directive.library_name, self\n)\nelif isinstance(using_for_directive.library_name, SolcIdentifierPath):\nself._library_name = IdentifierPath(\ninit, using_for_directive.library_name, self\n)\nif using_for_directive.type_name is None:\nself._type_name = None\nelse:\nself._type_name = TypeNameAbc.from_ast(\ninit, using_for_directive.type_name, self\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor function in self._functions:\nyield from function\nfor function, _ in self._operator_functions:\nyield from function\nif self._library_name is not None:\nyield from self._library_name\nif self._type_name is not None:\nyield from self._type_name\n@property\ndef parent(self) -&gt; Union[ContractDefinition, SourceUnit]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef functions(self) -&gt; Tuple[IdentifierPath, ...]:\n\"\"\"\n        Returns:\n            List of functions that are attached to the target type.\n        \"\"\"\nreturn tuple(self._functions)\n@property\ndef operator_functions(\nself,\n) -&gt; Tuple[Tuple[IdentifierPath, Union[UnaryOpOperator, BinaryOpOperator]], ...]:\n\"\"\"\n        Returns:\n            List of operator functions and their operators that are attached to the target type.\n        \"\"\"\nreturn tuple(self._operator_functions)\n@property\ndef library_name(self) -&gt; Optional[Union[IdentifierPath, UserDefinedTypeName]]:\n\"\"\"\n        Is only set in the case of `:::solidity using LibraryName for TypeName;` directive type.\n        Returns:\n            IR node referencing the library ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] of the [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] kind) that is attached to the target type.\n        \"\"\"\nreturn self._library_name\n@property\ndef type_name(self) -&gt; Optional[TypeNameAbc]:\n\"\"\"\n        Is `None` in the case of `:::solidity using Lib for *;`.\n        Returns:\n            Type name that is attached to the functions or library.\n        \"\"\"\nreturn self._type_name\n</code></pre>"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.functions","title":"<code>functions: Tuple[IdentifierPath, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[IdentifierPath, ...]</code> <p>List of functions that are attached to the target type.</p>"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.library_name","title":"<code>library_name: Optional[Union[IdentifierPath, UserDefinedTypeName]]</code>  <code>property</code>","text":"<p>Is only set in the case of <code>using LibraryName for TypeName;</code> directive type.</p> <p>Returns:</p> Type Description <code>Optional[Union[IdentifierPath, UserDefinedTypeName]]</code> <p>IR node referencing the library (ContractDefinition of the ContractKind.LIBRARY kind) that is attached to the target type.</p>"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.operator_functions","title":"<code>operator_functions: Tuple[Tuple[IdentifierPath, Union[UnaryOpOperator, BinaryOpOperator]], ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[Tuple[IdentifierPath, Union[UnaryOpOperator, BinaryOpOperator]], ...]</code> <p>List of operator functions and their operators that are attached to the target type.</p>"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.parent","title":"<code>parent: Union[ContractDefinition, SourceUnit]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[ContractDefinition, SourceUnit]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.type_name","title":"<code>type_name: Optional[TypeNameAbc]</code>  <code>property</code>","text":"<p>Is <code>None</code> in the case of <code>using Lib for *;</code>.</p> <p>Returns:</p> Type Description <code>Optional[TypeNameAbc]</code> <p>Type name that is attached to the functions or library.</p>"},{"location":"api-reference/ir/statements/block/","title":"Block","text":""},{"location":"api-reference/ir/statements/block/#woke.ast.ir.statement.block","title":"<code>woke.ast.ir.statement.block</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/block/#woke.ast.ir.statement.block.Block","title":"<code>Block</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Block statements group multiple statements into a single block.</p> <p>Example</p> <p>Lines 3-5 in the following code: <pre><code>contract Foo {\nfunction bar(uint a, uint b) public pure returns(uint)\n{\nreturn a + b;\n}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/block.py</code> <pre><code>class Block(StatementAbc):\n\"\"\"\n    Block statements group multiple statements into a single block.\n    !!! example\n        Lines 3-5 in the following code:\n        ```solidity linenums=\"1\"\n        contract Foo {\n            function bar(uint a, uint b) public pure returns(uint)\n            {\n                return a + b;\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcBlock\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,  # statements\nFunctionDefinition,\nModifierDefinition,  # declarations\nTryCatchClause,  # meta\n]\n_statements: List[StatementAbc]\ndef __init__(self, init: IrInitTuple, block: SolcBlock, parent: SolidityAbc):\nsuper().__init__(init, block, parent)\nself._statements = [\nStatementAbc.from_ast(init, statement, self)\nfor statement in block.statements\n]\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nif self._statements is not None:\nfor statement in self._statements:\nyield from statement\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\nFunctionDefinition,\nModifierDefinition,\nTryCatchClause,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef statements(self) -&gt; Tuple[StatementAbc, ...]:\n\"\"\"\n        Can be empty.\n        Returns:\n            Statements in the block.\n        \"\"\"\nreturn tuple(self._statements)\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nif self.statements is None:\nreturn set()\nreturn reduce(\nor_,\n(statement.modifies_state for statement in self.statements),\nset(),\n)\ndef statements_iter(self) -&gt; Iterator[\"StatementAbc\"]:\nyield self\nif self._statements is not None:\nfor statement in self._statements:\nyield from statement.statements_iter()\n</code></pre>"},{"location":"api-reference/ir/statements/block/#woke.ast.ir.statement.block.Block.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement, FunctionDefinition, ModifierDefinition, TryCatchClause]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement, FunctionDefinition, ModifierDefinition, TryCatchClause]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/block/#woke.ast.ir.statement.block.Block.statements","title":"<code>statements: Tuple[StatementAbc, ...]</code>  <code>property</code>","text":"<p>Can be empty.</p> <p>Returns:</p> Type Description <code>Tuple[StatementAbc, ...]</code> <p>Statements in the block.</p>"},{"location":"api-reference/ir/statements/break-statement/","title":"Break statement","text":""},{"location":"api-reference/ir/statements/break-statement/#woke.ast.ir.statement.break_statement","title":"<code>woke.ast.ir.statement.break_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/break-statement/#woke.ast.ir.statement.break_statement.Break","title":"<code>Break</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p><code>break</code> in the following code: <pre><code>function foo() public {\nfor (uint i = 0; i &lt; 10; i++) {\nif (i == 5)\nbreak;\n}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/break_statement.py</code> <pre><code>class Break(StatementAbc):\n\"\"\"\n    !!! example\n        `:::solidity break` in the following code:\n        ```solidity\n        function foo() public {\n            for (uint i = 0; i &lt; 10; i++) {\n                if (i == 5)\n                    break;\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcBreak\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\ndef __init__(self, init: IrInitTuple, break_: SolcBreak, parent: SolidityAbc):\nsuper().__init__(init, break_, parent)\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn set()\n</code></pre>"},{"location":"api-reference/ir/statements/break-statement/#woke.ast.ir.statement.break_statement.Break.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/continue-statement/","title":"Continue statement","text":""},{"location":"api-reference/ir/statements/continue-statement/#woke.ast.ir.statement.continue_statement","title":"<code>woke.ast.ir.statement.continue_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/continue-statement/#woke.ast.ir.statement.continue_statement.Continue","title":"<code>Continue</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p><code>continue</code> in the following code: <pre><code>function foo() public {\nfor (uint i = 0; i &lt; 10; i++) {\nif (i == 5)\ncontinue;\n}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/continue_statement.py</code> <pre><code>class Continue(StatementAbc):\n\"\"\"\n    !!! example\n        `:::solidity continue` in the following code:\n        ```solidity\n        function foo() public {\n            for (uint i = 0; i &lt; 10; i++) {\n                if (i == 5)\n                    continue;\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcContinue\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\ndef __init__(self, init: IrInitTuple, continue_: SolcContinue, parent: SolidityAbc):\nsuper().__init__(init, continue_, parent)\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn set()\n</code></pre>"},{"location":"api-reference/ir/statements/continue-statement/#woke.ast.ir.statement.continue_statement.Continue.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/do-while-statement/","title":"Do while statement","text":""},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement","title":"<code>woke.ast.ir.statement.do_while_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement.DoWhileStatement","title":"<code>DoWhileStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p>Lines 2-4 in the following code: <pre><code>function foo(uint x) public {\ndo {\nx += 1;\n} while (x &lt; 10);\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/do_while_statement.py</code> <pre><code>class DoWhileStatement(StatementAbc):\n\"\"\"\n    !!! example\n        Lines 2-4 in the following code:\n        ```solidity linenums=\"1\"\n        function foo(uint x) public {\n            do {\n                x += 1;\n            } while (x &lt; 10);\n        }\n        ```\n    \"\"\"\n_ast_node: SolcDoWhileStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_body: StatementAbc\n_condition: ExpressionAbc\ndef __init__(\nself, init: IrInitTuple, do_while: SolcDoWhileStatement, parent: SolidityAbc\n):\nsuper().__init__(init, do_while, parent)\nself._body = StatementAbc.from_ast(init, do_while.body, self)\nself._condition = ExpressionAbc.from_ast(init, do_while.condition, self)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._body\nyield from self._condition\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef body(self) -&gt; StatementAbc:\n\"\"\"\n        Returns:\n            Body of the do-while statement.\n        \"\"\"\nreturn self._body\n@property\ndef condition(self) -&gt; ExpressionAbc:\n\"\"\"\n        Returns:\n            Condition of the do-while statement.\n        \"\"\"\nreturn self._condition\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn self.condition.modifies_state | self.body.modifies_state\ndef statements_iter(self) -&gt; Iterator[\"StatementAbc\"]:\nyield self\nyield from self._body.statements_iter()\n</code></pre>"},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement.DoWhileStatement.body","title":"<code>body: StatementAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>StatementAbc</code> <p>Body of the do-while statement.</p>"},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement.DoWhileStatement.condition","title":"<code>condition: ExpressionAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ExpressionAbc</code> <p>Condition of the do-while statement.</p>"},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement.DoWhileStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/emit-statement/","title":"Emit statement","text":""},{"location":"api-reference/ir/statements/emit-statement/#woke.ast.ir.statement.emit_statement","title":"<code>woke.ast.ir.statement.emit_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/emit-statement/#woke.ast.ir.statement.emit_statement.EmitStatement","title":"<code>EmitStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p><code>emit Transfer(msg.sender, to, amount)</code> in the following code: <pre><code>function transfer(address to, uint amount) public {\nemit Transfer(msg.sender, to, amount);\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/emit_statement.py</code> <pre><code>class EmitStatement(StatementAbc):\n\"\"\"\n    !!! example\n        `:::solidity emit Transfer(msg.sender, to, amount)` in the following code:\n        ```solidity\n        function transfer(address to, uint amount) public {\n            emit Transfer(msg.sender, to, amount);\n        }\n        ```\n    \"\"\"\n_ast_node: SolcEmitStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_event_call: FunctionCall\ndef __init__(self, init: IrInitTuple, emit: SolcEmitStatement, parent: SolidityAbc):\nsuper().__init__(init, emit, parent)\nself._event_call = FunctionCall(init, emit.event_call, self)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._event_call\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef event_call(self) -&gt; FunctionCall:\n\"\"\"\n        !!! example\n            ```solidity\n            Transfer(msg.sender, to, amount)\n            ```\n            in the following emit statement:\n            ```solidity\n            emit Transfer(msg.sender, to, amount)\n            ```\n        Returns:\n            Expression representing the event call.\n        \"\"\"\nreturn self._event_call\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn {(self, ModifiesStateFlag.EMITS)} | self.event_call.modifies_state\n</code></pre>"},{"location":"api-reference/ir/statements/emit-statement/#woke.ast.ir.statement.emit_statement.EmitStatement.event_call","title":"<code>event_call: FunctionCall</code>  <code>property</code>","text":"<p>Example</p> <p><pre><code>Transfer(msg.sender, to, amount)\n</code></pre> in the following emit statement: <pre><code>emit Transfer(msg.sender, to, amount)\n</code></pre></p> <p>Returns:</p> Type Description <code>FunctionCall</code> <p>Expression representing the event call.</p>"},{"location":"api-reference/ir/statements/emit-statement/#woke.ast.ir.statement.emit_statement.EmitStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/expression-statement/","title":"Expression statement","text":""},{"location":"api-reference/ir/statements/expression-statement/#woke.ast.ir.statement.expression_statement","title":"<code>woke.ast.ir.statement.expression_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/expression-statement/#woke.ast.ir.statement.expression_statement.ExpressionStatement","title":"<code>ExpressionStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p>The underlying expression can be:</p> <ul> <li>an Assignment:<ul> <li><code>i = 1</code> in line 6,</li> </ul> </li> <li>a BinaryOperation:<ul> <li><code>arr[0] + arr[1]</code> in line 11,</li> </ul> </li> <li>a Conditional:<ul> <li><code>arr[i] &gt;= arr[i - 1] ? x++ : x--</code> in line 7,</li> </ul> </li> <li>a FunctionCall:<ul> <li><code>require(arr.length &gt; 1)</code> in line 3,</li> </ul> </li> <li>a FunctionCallOptions:<ul> <li><code>payable(msg.sender).call{value: 1}</code> in line 16,</li> </ul> </li> <li>an Identifier:<ul> <li><code>this</code> in line 15,</li> </ul> </li> <li>an IndexAccess:<ul> <li><code>arr[0]</code> in line 9,</li> </ul> </li> <li>an IndexRangeAccess:<ul> <li><code>arr[0:1]</code> in line 10,</li> </ul> </li> <li>a Literal:<ul> <li><code>10</code> in line 12,</li> </ul> </li> <li>a MemberAccess:<ul> <li><code>arr.length</code> in line 13,</li> </ul> </li> <li>a TupleExpression:<ul> <li><code>(arr)</code> in line 14,</li> </ul> </li> <li>an UnaryOperation:<ul> <li><code>i++</code> in line 6.</li> </ul> </li> </ul> <pre><code>contract C {\nfunction foo(uint[] calldata arr) external view {\nrequire(arr.length &gt; 1);\nuint i;\nint x = 0;\nfor (i = 1; i &lt; arr.length; i++)\narr[i] &gt;= arr[i - 1] ? x++ : x--;\narr[0];\narr[0:1];\narr[0] + arr[1];\n10;\narr.length;\n(arr);\nthis; // silence state mutability warning without generating bytecode\npayable(msg.sender).call{value: 1};\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/statement/expression_statement.py</code> <pre><code>class ExpressionStatement(StatementAbc):\n\"\"\"\n    !!! example\n        The underlying expression can be:\n        - an [Assignment][woke.ast.ir.expression.assignment.Assignment]:\n            - `:::solidity i = 1` in line 6,\n        - a [BinaryOperation][woke.ast.ir.expression.binary_operation.BinaryOperation]:\n            - `:::solidity arr[0] + arr[1]` in line 11,\n        - a [Conditional][woke.ast.ir.expression.conditional.Conditional]:\n            - `:::solidity arr[i] &gt;= arr[i - 1] ? x++ : x--` in line 7,\n        - a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall]:\n            - `:::solidity require(arr.length &gt; 1)` in line 3,\n        - a [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions]:\n            - `:::solidity payable(msg.sender).call{value: 1}` in line 16,\n        - an [Identifier][woke.ast.ir.expression.identifier.Identifier]:\n            - `:::solidity this` in line 15,\n        - an [IndexAccess][woke.ast.ir.expression.index_access.IndexAccess]:\n            - `:::solidity arr[0]` in line 9,\n        - an [IndexRangeAccess][woke.ast.ir.expression.index_range_access.IndexRangeAccess]:\n            - `:::solidity arr[0:1]` in line 10,\n        - a [Literal][woke.ast.ir.expression.literal.Literal]:\n            - `:::solidity 10` in line 12,\n        - a [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess]:\n            - `:::solidity arr.length` in line 13,\n        - a [TupleExpression][woke.ast.ir.expression.tuple_expression.TupleExpression]:\n            - `:::solidity (arr)` in line 14,\n        - an [UnaryOperation][woke.ast.ir.expression.unary_operation.UnaryOperation]:\n            - `:::solidity i++` in line 6.\n        ```solidity linenums=\"1\"\n        contract C {\n            function foo(uint[] calldata arr) external view {\n                require(arr.length &gt; 1);\n                uint i;\n                int x = 0;\n                for (i = 1; i &lt; arr.length; i++)\n                    arr[i] &gt;= arr[i - 1] ? x++ : x--;\n                arr[0];\n                arr[0:1];\n                arr[0] + arr[1];\n                10;\n                arr.length;\n                (arr);\n                this; // silence state mutability warning without generating bytecode\n                payable(msg.sender).call{value: 1};\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcExpressionStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n__expression: Union[\nAssignment,\nBinaryOperation,\nConditional,\nFunctionCall,\nFunctionCallOptions,\nIdentifier,\nIndexAccess,\nIndexRangeAccess,\nLiteral,\nMemberAccess,\nTupleExpression,\nUnaryOperation,\n]\ndef __init__(\nself,\ninit: IrInitTuple,\nexpression_statement: SolcExpressionStatement,\nparent: SolidityAbc,\n):\nsuper().__init__(init, expression_statement, parent)\nexpr = ExpressionAbc.from_ast(init, expression_statement.expression, self)\nassert isinstance(\nexpr,\n(\nAssignment,\nBinaryOperation,\nConditional,\nFunctionCall,\nFunctionCallOptions,\nIdentifier,\nIndexAccess,\nIndexRangeAccess,\nLiteral,\nMemberAccess,\nTupleExpression,\nUnaryOperation,\n),\n)\nself._expression = expr\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._expression\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef expression(\nself,\n) -&gt; Union[\nAssignment,\nBinaryOperation,\nConditional,\nFunctionCall,\nFunctionCallOptions,\nIdentifier,\nIndexAccess,\nIndexRangeAccess,\nLiteral,\nMemberAccess,\nTupleExpression,\nUnaryOperation,\n]:\n\"\"\"\n        Returns:\n            Expression of the expression statement.\n        \"\"\"\nreturn self._expression\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn self.expression.modifies_state\n</code></pre>"},{"location":"api-reference/ir/statements/expression-statement/#woke.ast.ir.statement.expression_statement.ExpressionStatement.expression","title":"<code>expression: Union[Assignment, BinaryOperation, Conditional, FunctionCall, FunctionCallOptions, Identifier, IndexAccess, IndexRangeAccess, Literal, MemberAccess, TupleExpression, UnaryOperation]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Assignment, BinaryOperation, Conditional, FunctionCall, FunctionCallOptions, Identifier, IndexAccess, IndexRangeAccess, Literal, MemberAccess, TupleExpression, UnaryOperation]</code> <p>Expression of the expression statement.</p>"},{"location":"api-reference/ir/statements/expression-statement/#woke.ast.ir.statement.expression_statement.ExpressionStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/for-statement/","title":"For statement","text":""},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement","title":"<code>woke.ast.ir.statement.for_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement","title":"<code>ForStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p>Lines 2-4 in the following code: <pre><code>function foo(uint x) public pure {\nfor (uint i = 0; i &lt; 10; i++) {\nx += 1;\n}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/for_statement.py</code> <pre><code>class ForStatement(StatementAbc):\n\"\"\"\n    !!! example\n        Lines 2-4 in the following code:\n        ```solidity linenums=\"1\"\n        function foo(uint x) public pure {\n            for (uint i = 0; i &lt; 10; i++) {\n                x += 1;\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcForStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_body: StatementAbc\n_condition: Optional[ExpressionAbc]\n_initialization_expression: Optional[\nUnion[ExpressionStatement, VariableDeclarationStatement]\n]\n_loop_expression: Optional[ExpressionStatement]\ndef __init__(self, init: IrInitTuple, for_: SolcForStatement, parent: SolidityAbc):\nsuper().__init__(init, for_, parent)\nself._body = StatementAbc.from_ast(init, for_.body, self)\nself._condition = (\nExpressionAbc.from_ast(init, for_.condition, self)\nif for_.condition\nelse None\n)\nif for_.initialization_expression is None:\nself._initialization_expression = None\nelse:\nif isinstance(for_.initialization_expression, SolcExpressionStatement):\nself._initialization_expression = ExpressionStatement(\ninit, for_.initialization_expression, self\n)\nelif isinstance(\nfor_.initialization_expression, SolcVariableDeclarationStatement\n):\nself._initialization_expression = VariableDeclarationStatement(\ninit, for_.initialization_expression, self\n)\nself._loop_expression = (\nExpressionStatement(init, for_.loop_expression, self)\nif for_.loop_expression\nelse None\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._body\nif self._condition is not None:\nyield from self._condition\nif self._initialization_expression is not None:\nyield from self._initialization_expression\nif self._loop_expression is not None:\nyield from self._loop_expression\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef body(self) -&gt; StatementAbc:\n\"\"\"\n        Returns:\n            Body of the for loop.\n        \"\"\"\nreturn self._body\n@property\ndef condition(self) -&gt; Optional[ExpressionAbc]:\n\"\"\"\n        !!! example\n            ```solidity\n            i &lt; 10\n            ```\n            in the following for loop:\n            ```solidity\n            for (uint i = 0; i &lt; 10; i++) {}\n            ```\n        Returns:\n            Condition of the for loop, if any.\n        \"\"\"\nreturn self._condition\n@property\ndef initialization_expression(\nself,\n) -&gt; Optional[Union[ExpressionStatement, VariableDeclarationStatement]]:\n\"\"\"\n        !!! example\n            ```solidity\n            uint i = 0\n            ```\n            in the following for loop:\n            ```solidity\n            for (uint i = 0; i &lt; 10; i++) {}\n            ```\n        Returns:\n            Initialization expression of the for loop, if any.\n        \"\"\"\nreturn self._initialization_expression\n@property\ndef loop_expression(self) -&gt; Optional[ExpressionStatement]:\n\"\"\"\n        !!! example\n            ```solidity\n            i++\n            ```\n            in the following for loop:\n            ```solidity\n            for (uint i = 0; i &lt; 10; i++) {}\n            ```\n        Returns:\n            Loop expression of the for loop, if any.\n        \"\"\"\nreturn self._loop_expression\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nret = set()\nif self.initialization_expression is not None:\nret |= self.initialization_expression.modifies_state\nif self.condition is not None:\nret |= self.condition.modifies_state\nif self.loop_expression is not None:\nret |= self.loop_expression.modifies_state\nreturn ret\ndef statements_iter(self) -&gt; Iterator[\"StatementAbc\"]:\nyield self\nyield from self._body.statements_iter()\nif self._initialization_expression is not None:\nyield from self._initialization_expression.statements_iter()\nif self._loop_expression is not None:\nyield from self._loop_expression.statements_iter()\n</code></pre>"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.body","title":"<code>body: StatementAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>StatementAbc</code> <p>Body of the for loop.</p>"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.condition","title":"<code>condition: Optional[ExpressionAbc]</code>  <code>property</code>","text":"<p>Example</p> <p><pre><code>i &lt; 10\n</code></pre> in the following for loop: <pre><code>for (uint i = 0; i &lt; 10; i++) {}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[ExpressionAbc]</code> <p>Condition of the for loop, if any.</p>"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.initialization_expression","title":"<code>initialization_expression: Optional[Union[ExpressionStatement, VariableDeclarationStatement]]</code>  <code>property</code>","text":"<p>Example</p> <p><pre><code>uint i = 0\n</code></pre> in the following for loop: <pre><code>for (uint i = 0; i &lt; 10; i++) {}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[Union[ExpressionStatement, VariableDeclarationStatement]]</code> <p>Initialization expression of the for loop, if any.</p>"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.loop_expression","title":"<code>loop_expression: Optional[ExpressionStatement]</code>  <code>property</code>","text":"<p>Example</p> <p><pre><code>i++\n</code></pre> in the following for loop: <pre><code>for (uint i = 0; i &lt; 10; i++) {}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[ExpressionStatement]</code> <p>Loop expression of the for loop, if any.</p>"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/if-statement/","title":"If statement","text":""},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement","title":"<code>woke.ast.ir.statement.if_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement","title":"<code>IfStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p>Lines 2-6 in the following code: <pre><code>function foo(int x) public pure returns(uint) {\nif (x &lt; 0) {\nreturn 0;\n} else {\nreturn uint(x);\n}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/if_statement.py</code> <pre><code>class IfStatement(StatementAbc):\n\"\"\"\n    !!! example\n        Lines 2-6 in the following code:\n        ```solidity linenums=\"1\"\n        function foo(int x) public pure returns(uint) {\n            if (x &lt; 0) {\n                return 0;\n            } else {\n                return uint(x);\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcIfStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_condition: ExpressionAbc\n_true_body: StatementAbc\n_false_body: Optional[StatementAbc]\ndef __init__(\nself, init: IrInitTuple, if_statement: SolcIfStatement, parent: SolidityAbc\n):\nsuper().__init__(init, if_statement, parent)\nself._condition = ExpressionAbc.from_ast(init, if_statement.condition, self)\nself._true_body = StatementAbc.from_ast(init, if_statement.true_body, self)\nself._false_body = (\nNone\nif if_statement.false_body is None\nelse StatementAbc.from_ast(init, if_statement.false_body, self)\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._condition\nyield from self._true_body\nif self._false_body is not None:\nyield from self._false_body\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef condition(self) -&gt; ExpressionAbc:\n\"\"\"\n        Returns:\n            Condition of the if statement.\n        \"\"\"\nreturn self._condition\n@property\ndef true_body(self) -&gt; StatementAbc:\n\"\"\"\n        Returns:\n            Statement executed if the condition is true.\n        \"\"\"\nreturn self._true_body\n@property\ndef false_body(self) -&gt; Optional[StatementAbc]:\n\"\"\"\n        Returns:\n            Statement executed if the condition is false (if any).\n        \"\"\"\nreturn self._false_body\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn (\nself.condition.modifies_state\n| self.true_body.modifies_state\n| (self.false_body.modifies_state if self.false_body is not None else set())\n)\ndef statements_iter(self) -&gt; Iterator[\"StatementAbc\"]:\nyield self\nyield from self._true_body.statements_iter()\nif self._false_body is not None:\nyield from self._false_body.statements_iter()\n</code></pre>"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement.condition","title":"<code>condition: ExpressionAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ExpressionAbc</code> <p>Condition of the if statement.</p>"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement.false_body","title":"<code>false_body: Optional[StatementAbc]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[StatementAbc]</code> <p>Statement executed if the condition is false (if any).</p>"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement.true_body","title":"<code>true_body: StatementAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>StatementAbc</code> <p>Statement executed if the condition is true.</p>"},{"location":"api-reference/ir/statements/inline-assembly/","title":"Inline assembly","text":""},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly","title":"<code>woke.ast.ir.statement.inline_assembly</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference","title":"<code>ExternalReference</code>  <code>class</code>","text":"<p>Reference from an inline assembly block to a Solidity declaration.</p> <p>Warning</p> <p>This is not an IR node, but a helper class for InlineAssembly. Since this is not an IR node, there must still be a Yul IR node (Yul Identifier) in the source code that represents the identifier.</p> Source code in <code>woke/ast/ir/statement/inline_assembly.py</code> <pre><code>class ExternalReference:\n\"\"\"\n    Reference from an inline assembly block to a Solidity declaration.\n    !!! warning\n        This is not an IR node, but a helper class for [InlineAssembly][woke.ast.ir.statement.inline_assembly.InlineAssembly].\n        Since this is not an IR node, there must still be a Yul IR node (Yul [Identifier][woke.ast.ir.yul.identifier.Identifier]) in the source code that represents the identifier.\n    \"\"\"\n_inline_assembly: InlineAssembly\n_external_reference_model: ExternalReferenceModel\n_reference_resolver: ReferenceResolver\n_cu_hash: bytes\n_file: Path\n_source: bytes\n_referenced_declaration_id: AstNodeId\n_value_size: int\n_suffix: Optional[InlineAssemblySuffix]\n_yul_identifier: Optional[Identifier]\ndef __init__(\nself,\ninline_assembly: InlineAssembly,\ninit: IrInitTuple,\nexternal_reference_model: ExternalReferenceModel,\n):\nself._inline_assembly = inline_assembly\nself._external_reference_model = external_reference_model\nself._reference_resolver = init.reference_resolver\nself._cu_hash = init.cu.hash\nself._file = init.file\nself._source = init.source[self.byte_location[0] : self.byte_location[1]]\nself._referenced_declaration_id = external_reference_model.declaration\nassert self._referenced_declaration_id &gt;= 0\nself._value_size = external_reference_model.value_size\nself._suffix = external_reference_model.suffix\nself._yul_identifier = None\nif external_reference_model.is_offset:\nself._suffix = InlineAssemblySuffix.OFFSET\nelif external_reference_model.is_slot:\nself._suffix = InlineAssemblySuffix.SLOT\nself._reference_resolver.register_post_process_callback(self._post_process)\ndef _post_process(self, callback_params: CallbackParams):\nreferenced_declaration = self.referenced_declaration\nreferenced_declaration.register_reference(self)\nself._reference_resolver.register_destroy_callback(\nself._file, partial(self._destroy, referenced_declaration)\n)\ninterval_tree = callback_params.interval_trees[self._file]\nstart, end = self.byte_location\nnodes = interval_tree[start:end]\nnode = next(node for node in nodes if node.begin == start and node.end == end)\nassert isinstance(\nnode.data, Identifier\n), f\"Expected Identifier, got {type(node.data)}\"\nself._yul_identifier = node.data\nself._yul_identifier._external_reference = self\ndef _destroy(self, referenced_declaration: DeclarationAbc) -&gt; None:\nreferenced_declaration.unregister_reference(self)\n@property\ndef file(self) -&gt; Path:\n\"\"\"\n        Returns:\n            Absolute path to the file containing the inline assembly block.\n        \"\"\"\nreturn self._file\n@property\ndef byte_location(self) -&gt; Tuple[int, int]:\n\"\"\"\n        Returns:\n            Byte offsets (start and end) of the external reference in the source file.\n        \"\"\"\nreturn (\nself._external_reference_model.src.byte_offset,\nself._external_reference_model.src.byte_offset\n+ self._external_reference_model.src.byte_length,\n)\n@property\n@lru_cache(maxsize=2048)\ndef identifier_byte_location(self) -&gt; Tuple[int, int]:\n\"\"\"\n        !!! example\n            Returns the byte location of `stateVar` in line 6, not `stateVar.slot`:\n            ```solidity linenums=\"1\"\n            contract Foo {\n                uint stateVar;\n                function f() public pure {\n                    assembly {\n                        let x := stateVar.slot\n                    }\n                }\n            }\n            ```\n        Returns:\n            Byte offsets (start and end) of the identifier representing the external reference in the source file.\n        \"\"\"\nmatch = IDENTIFIER_RE.match(self._source)\nassert match\nstart = self.byte_location[0] + match.start()\nend = self.byte_location[0] + match.end()\nreturn start, end\n@property\ndef referenced_declaration(self) -&gt; DeclarationAbc:\n\"\"\"\n        Returns:\n            Solidity declaration referenced by this external reference.\n        \"\"\"\nnode = self._reference_resolver.resolve_node(\nself._referenced_declaration_id, self._cu_hash\n)\nassert isinstance(node, DeclarationAbc)\nreturn node\n@property\ndef inline_assembly(self) -&gt; InlineAssembly:\n\"\"\"\n        Returns:\n            Inline assembly block this external references belongs to.\n        \"\"\"\nreturn self._inline_assembly\n@property\ndef yul_identifier(self) -&gt; Identifier:\n\"\"\"\n        Returns:\n            Yul Identifier node representing this external reference.\n        \"\"\"\nassert isinstance(self._yul_identifier, Identifier)\nreturn self._yul_identifier\n@property\ndef value_size(self) -&gt; int:\n# TODO document this?\nreturn self._value_size\n@property\ndef suffix(self) -&gt; Optional[InlineAssemblySuffix]:\n\"\"\"\n        Returns:\n            Suffix of the external reference, if any.\n        \"\"\"\nreturn self._suffix\n</code></pre>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.byte_location","title":"<code>byte_location: Tuple[int, int]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>Byte offsets (start and end) of the external reference in the source file.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.file","title":"<code>file: Path</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Path</code> <p>Absolute path to the file containing the inline assembly block.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.identifier_byte_location","title":"<code>identifier_byte_location: Tuple[int, int]</code>  <code>cached</code> <code>property</code>","text":"<p>Example</p> <p>Returns the byte location of <code>stateVar</code> in line 6, not <code>stateVar.slot</code>: <pre><code>contract Foo {\nuint stateVar;\nfunction f() public pure {\nassembly {\nlet x := stateVar.slot\n        }\n}\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Tuple[int, int]</code> <p>Byte offsets (start and end) of the identifier representing the external reference in the source file.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.inline_assembly","title":"<code>inline_assembly: InlineAssembly</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>InlineAssembly</code> <p>Inline assembly block this external references belongs to.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.referenced_declaration","title":"<code>referenced_declaration: DeclarationAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>DeclarationAbc</code> <p>Solidity declaration referenced by this external reference.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.suffix","title":"<code>suffix: Optional[InlineAssemblySuffix]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[InlineAssemblySuffix]</code> <p>Suffix of the external reference, if any.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.yul_identifier","title":"<code>yul_identifier: Identifier</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Identifier</code> <p>Yul Identifier node representing this external reference.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly","title":"<code>InlineAssembly</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Inline assembly block in Solidity.</p> <p>Example</p> <pre><code>function f() public pure {\nassembly {\nlet x := 1\nlet y := 2\nlet z := add(x, y)\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/statement/inline_assembly.py</code> <pre><code>class InlineAssembly(StatementAbc):\n\"\"\"\n    Inline assembly block in Solidity.\n    !!! example\n        ```solidity\n        function f() public pure {\n            assembly {\n                let x := 1\n                let y := 2\n                let z := add(x, y)\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcInlineAssembly\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_yul_block: YulBlock\n_evm_version: InlineAssemblyEvmVersion\n_external_references: IntervalTree\n_flags: Set[InlineAssemblyFlag]\ndef __init__(\nself,\ninit: IrInitTuple,\ninline_assembly: SolcInlineAssembly,\nparent: SolidityAbc,\n):\nsuper().__init__(init, inline_assembly, parent)\nself._yul_block = YulBlock(init, inline_assembly.ast, self)\nself._evm_version = inline_assembly.evm_version\nself._external_references = IntervalTree()\nself._flags = set()\nif inline_assembly.flags is not None:\nfor flag in inline_assembly.flags:\nself._flags.add(InlineAssemblyFlag(flag))\nfor external_reference in inline_assembly.external_references:\nstart = external_reference.src.byte_offset\nend = start + external_reference.src.byte_length\nself._external_references[start:end] = ExternalReference(\nself, init, external_reference\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._yul_block\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef yul_block(self) -&gt; YulBlock:\n\"\"\"\n        Returns:\n            Yul block containing Yul IR nodes ([YulAbc][woke.ast.ir.yul.abc.YulAbc]).\n        \"\"\"\nreturn self._yul_block\n@property\ndef evm_version(self) -&gt; InlineAssemblyEvmVersion:\n\"\"\"\n        Depends on the version of the `solc` compiler used to compile the contract.\n        Returns:\n            EVM version used for the inline assembly block.\n        \"\"\"\nreturn self._evm_version\n@property\ndef flags(self) -&gt; FrozenSet[InlineAssemblyFlag]:\n\"\"\"\n        !!! example\n            ```solidity\n            function f() public pure {\n                assembly (\"memory-safe\") {\n                    let x := 1\n                    let y := 2\n                    let z := add(x, y)\n                }\n            }\n            ```\n        Returns:\n            Flags decorating the inline assembly block.\n        \"\"\"\nreturn frozenset(self._flags)\n@property\ndef external_references(self) -&gt; Tuple[ExternalReference, ...]:\n\"\"\"\n        Returns:\n            External references in the inline assembly block.\n        \"\"\"\nreturn tuple(interval.data for interval in self._external_references)\ndef external_reference_at(self, byte_offset: int) -&gt; Optional[ExternalReference]:\n\"\"\"\n        Args:\n            byte_offset: Byte offset in the source file.\n        Returns:\n            External reference at the given byte offset, if any.\n        \"\"\"\nintervals = self._external_references.at(byte_offset)\nassert len(intervals) &lt;= 1\nif len(intervals) == 0:\nreturn None\nreturn intervals.pop().data\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn self.yul_block.modifies_state\n</code></pre>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.evm_version","title":"<code>evm_version: InlineAssemblyEvmVersion</code>  <code>property</code>","text":"<p>Depends on the version of the <code>solc</code> compiler used to compile the contract.</p> <p>Returns:</p> Type Description <code>InlineAssemblyEvmVersion</code> <p>EVM version used for the inline assembly block.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.external_references","title":"<code>external_references: Tuple[ExternalReference, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[ExternalReference, ...]</code> <p>External references in the inline assembly block.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.flags","title":"<code>flags: FrozenSet[InlineAssemblyFlag]</code>  <code>property</code>","text":"<p>Example</p> <pre><code>function f() public pure {\nassembly (\"memory-safe\") {\nlet x := 1\nlet y := 2\nlet z := add(x, y)\n}\n}\n</code></pre> <p>Returns:</p> Type Description <code>FrozenSet[InlineAssemblyFlag]</code> <p>Flags decorating the inline assembly block.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.yul_block","title":"<code>yul_block: YulBlock</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>YulBlock</code> <p>Yul block containing Yul IR nodes (YulAbc).</p>"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.external_reference_at","title":"<code>external_reference_at(byte_offset)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>byte_offset</code> <code>int</code> <p>Byte offset in the source file.</p> required <p>Returns:</p> Type Description <code>Optional[ExternalReference]</code> <p>External reference at the given byte offset, if any.</p> Source code in <code>woke/ast/ir/statement/inline_assembly.py</code> <pre><code>def external_reference_at(self, byte_offset: int) -&gt; Optional[ExternalReference]:\n\"\"\"\n    Args:\n        byte_offset: Byte offset in the source file.\n    Returns:\n        External reference at the given byte offset, if any.\n    \"\"\"\nintervals = self._external_references.at(byte_offset)\nassert len(intervals) &lt;= 1\nif len(intervals) == 0:\nreturn None\nreturn intervals.pop().data\n</code></pre>"},{"location":"api-reference/ir/statements/placeholder-statement/","title":"Placeholder statement","text":""},{"location":"api-reference/ir/statements/placeholder-statement/#woke.ast.ir.statement.placeholder_statement","title":"<code>woke.ast.ir.statement.placeholder_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/placeholder-statement/#woke.ast.ir.statement.placeholder_statement.PlaceholderStatement","title":"<code>PlaceholderStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Placeholder statements represent <code>_</code> (underscore) in a modifier body.</p> <p>Example</p> <p><code>_</code> in the following code: <pre><code>modifier foo() {\nrequire(msg.sender == owner, \"Not owner\");\n_;\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/placeholder_statement.py</code> <pre><code>class PlaceholderStatement(StatementAbc):\n\"\"\"\n    Placeholder statements represent `_` (underscore) in a modifier body.\n    !!! example\n        `:::solidity _` in the following code:\n        ```solidity linenums=\"1\"\n        modifier foo() {\n            require(msg.sender == owner, \"Not owner\");\n            _;\n        }\n        ```\n    \"\"\"\n_ast_node: SolcPlaceholderStatement\n_parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, WhileStatement]\ndef __init__(\nself,\ninit: IrInitTuple,\nplaceholder_statement: SolcPlaceholderStatement,\nparent: SolidityAbc,\n):\nsuper().__init__(init, placeholder_statement, parent)\n@property\ndef parent(\nself,\n) -&gt; Union[Block, DoWhileStatement, ForStatement, IfStatement, WhileStatement]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn set()\n</code></pre>"},{"location":"api-reference/ir/statements/placeholder-statement/#woke.ast.ir.statement.placeholder_statement.PlaceholderStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/return-statement/","title":"Return statement","text":""},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement","title":"<code>woke.ast.ir.statement.return_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement.Return","title":"<code>Return</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p><code>return 1</code> in the following code: <pre><code>function f() public pure returns(uint) {\nreturn 1;\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/return_statement.py</code> <pre><code>class Return(StatementAbc):\n\"\"\"\n    !!! example\n        `:::solidity return 1` in the following code:\n        ```solidity\n        function f() public pure returns(uint) {\n            return 1;\n        }\n        ```\n    \"\"\"\n_ast_node: SolcReturn\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_function_return_parameters: Optional[AstNodeId]\n_expression: Optional[ExpressionAbc]\ndef __init__(self, init: IrInitTuple, return_: SolcReturn, parent: SolidityAbc):\nsuper().__init__(init, return_, parent)\nself._function_return_parameters = return_.function_return_parameters\nself._expression = (\nExpressionAbc.from_ast(init, return_.expression, self)\nif return_.expression\nelse None\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nif self._expression is not None:\nyield from self._expression\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef function_return_parameters(self) -&gt; Optional[ParameterList]:\n\"\"\"\n        !!! example\n            Can be `None` if the function does not return anything.\n            ```solidity\n            function f(uint x) public {\n                if (x &gt; 0) {\n                    return;\n                }\n                doSomething(x);\n            }\n            ```\n        Returns:\n            Parameter list describing the return parameters of the function (if any).\n        \"\"\"\nfrom ..meta.parameter_list import ParameterList\nif self._function_return_parameters is None:\nreturn None\nnode = self._reference_resolver.resolve_node(\nself._function_return_parameters, self._cu_hash\n)\nassert isinstance(node, ParameterList)\nreturn node\n@property\ndef expression(self) -&gt; Optional[ExpressionAbc]:\n\"\"\"\n        Returns:\n            Expression returned by the return statement, if any.\n        \"\"\"\nreturn self._expression\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nif self._expression is None:\nreturn set()\nreturn self._expression.modifies_state\n</code></pre>"},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement.Return.expression","title":"<code>expression: Optional[ExpressionAbc]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Optional[ExpressionAbc]</code> <p>Expression returned by the return statement, if any.</p>"},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement.Return.function_return_parameters","title":"<code>function_return_parameters: Optional[ParameterList]</code>  <code>property</code>","text":"<p>Example</p> <p>Can be <code>None</code> if the function does not return anything. <pre><code>function f(uint x) public {\nif (x &gt; 0) {\nreturn;\n}\ndoSomething(x);\n}\n</code></pre></p> <p>Returns:</p> Type Description <code>Optional[ParameterList]</code> <p>Parameter list describing the return parameters of the function (if any).</p>"},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement.Return.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/revert-statement/","title":"Revert statement","text":""},{"location":"api-reference/ir/statements/revert-statement/#woke.ast.ir.statement.revert_statement","title":"<code>woke.ast.ir.statement.revert_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/revert-statement/#woke.ast.ir.statement.revert_statement.RevertStatement","title":"<code>RevertStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Warning</p> <p>Only matches reverts with user-defined errors: <pre><code>revert InsufficientBalance(want, have);\n</code></pre> This is an ExpressionStatement with a FunctionCall expression: <pre><code>revert(\"Insufficient balance\");\n</code></pre></p> Source code in <code>woke/ast/ir/statement/revert_statement.py</code> <pre><code>class RevertStatement(StatementAbc):\n\"\"\"\n    !!! warning\n        Only matches reverts with user-defined errors:\n        ```solidity\n        revert InsufficientBalance(want, have);\n        ```\n        This is an [ExpressionStatement][woke.ast.ir.statement.expression_statement.ExpressionStatement] with a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] expression:\n        ```solidity\n        revert(\"Insufficient balance\");\n        ```\n    \"\"\"\n_ast_node: SolcRevertStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_error_call: FunctionCall\ndef __init__(\nself, init: IrInitTuple, revert: SolcRevertStatement, parent: SolidityAbc\n):\nsuper().__init__(init, revert, parent)\nself._error_call = FunctionCall(init, revert.error_call, self)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._error_call\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef error_call(self) -&gt; FunctionCall:\n\"\"\"\n        !!! example\n            ```solidity\n            InsufficientBalance(want, have)\n            ```\n            in the following revert statement:\n            ```solidity\n            revert InsufficientBalance(want, have)\n            ```\n        Returns:\n            Expression representing the error call.\n        \"\"\"\nreturn self._error_call\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn self.error_call.modifies_state\n</code></pre>"},{"location":"api-reference/ir/statements/revert-statement/#woke.ast.ir.statement.revert_statement.RevertStatement.error_call","title":"<code>error_call: FunctionCall</code>  <code>property</code>","text":"<p>Example</p> <p><pre><code>InsufficientBalance(want, have)\n</code></pre> in the following revert statement: <pre><code>revert InsufficientBalance(want, have)\n</code></pre></p> <p>Returns:</p> Type Description <code>FunctionCall</code> <p>Expression representing the error call.</p>"},{"location":"api-reference/ir/statements/revert-statement/#woke.ast.ir.statement.revert_statement.RevertStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/try-statement/","title":"Try statement","text":""},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement","title":"<code>woke.ast.ir.statement.try_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement.TryStatement","title":"<code>TryStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <pre><code>try this.f() returns (uint256) {\n// ...\n} catch Error(string memory reason) {\n// ...\n} catch Panic(uint errorCode) {\n// ...\n} catch (bytes memory lowLevelData) {\n// ...\n}\n</code></pre> Source code in <code>woke/ast/ir/statement/try_statement.py</code> <pre><code>class TryStatement(StatementAbc):\n\"\"\"\n    !!! example\n        ```solidity\n        try this.f() returns (uint256) {\n            // ...\n        } catch Error(string memory reason) {\n            // ...\n        } catch Panic(uint errorCode) {\n            // ...\n        } catch (bytes memory lowLevelData) {\n            // ...\n        }\n        ```\n    \"\"\"\n_ast_node: SolcTryStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_clauses: List[TryCatchClause]\n_external_call: FunctionCall\ndef __init__(\nself, init: IrInitTuple, try_statement: SolcTryStatement, parent: SolidityAbc\n):\nsuper().__init__(init, try_statement, parent)\nself._clauses = [\nTryCatchClause(init, clause, self) for clause in try_statement.clauses\n]\nself._external_call = FunctionCall(init, try_statement.external_call, self)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor clause in self._clauses:\nyield from clause\nyield from self._external_call\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef clauses(self) -&gt; Tuple[TryCatchClause, ...]:\n\"\"\"\n        Returns:\n            Try/catch clauses.\n        \"\"\"\nreturn tuple(self._clauses)\n@property\ndef external_call(self) -&gt; FunctionCall:\n\"\"\"\n        Returns:\n            External call executed in the try statement.\n        \"\"\"\nreturn self._external_call\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn (\nreduce(\nor_,\n(clause.modifies_state for clause in self._clauses),\nset(),\n)\n| self.external_call.modifies_state\n)\ndef statements_iter(self) -&gt; Iterator[\"StatementAbc\"]:\nyield self\nfor clause in self._clauses:\nyield from clause.block.statements_iter()\n</code></pre>"},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement.TryStatement.clauses","title":"<code>clauses: Tuple[TryCatchClause, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[TryCatchClause, ...]</code> <p>Try/catch clauses.</p>"},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement.TryStatement.external_call","title":"<code>external_call: FunctionCall</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>FunctionCall</code> <p>External call executed in the try statement.</p>"},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement.TryStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/unchecked-block/","title":"Unchecked block","text":""},{"location":"api-reference/ir/statements/unchecked-block/#woke.ast.ir.statement.unchecked_block","title":"<code>woke.ast.ir.statement.unchecked_block</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/unchecked-block/#woke.ast.ir.statement.unchecked_block.UncheckedBlock","title":"<code>UncheckedBlock</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p>Lines 2-4 in the following code: <pre><code>function inc(uint x) public pure returns(uint) {\nunchecked {\nx += 1;\n}\nreturn x;\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/unchecked_block.py</code> <pre><code>class UncheckedBlock(StatementAbc):\n\"\"\"\n    !!! example\n        Lines 2-4 in the following code:\n        ```solidity linenums=\"1\"\n        function inc(uint x) public pure returns(uint) {\n            unchecked {\n                x += 1;\n            }\n            return x;\n        }\n        ```\n    \"\"\"\n_ast_node: SolcUncheckedBlock\n_parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, WhileStatement]\n_statements: List[StatementAbc]\ndef __init__(\nself,\ninit: IrInitTuple,\nunchecked_block: SolcUncheckedBlock,\nparent: SolidityAbc,\n):\nsuper().__init__(init, unchecked_block, parent)\nself._statements = [\nStatementAbc.from_ast(init, statement, self)\nfor statement in unchecked_block.statements\n]\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor statement in self._statements:\nyield from statement\n@property\ndef parent(\nself,\n) -&gt; Union[Block, DoWhileStatement, ForStatement, IfStatement, WhileStatement]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef statements(self) -&gt; Tuple[StatementAbc, ...]:\n\"\"\"\n        Can be empty.\n        Returns:\n            Statements in the block.\n        \"\"\"\nreturn tuple(self._statements)\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn reduce(\nor_,\n(statement.modifies_state for statement in self._statements),\nset(),\n)\ndef statements_iter(self) -&gt; Iterator[\"StatementAbc\"]:\nyield self\nfor statement in self._statements:\nyield from statement.statements_iter()\n</code></pre>"},{"location":"api-reference/ir/statements/unchecked-block/#woke.ast.ir.statement.unchecked_block.UncheckedBlock.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/unchecked-block/#woke.ast.ir.statement.unchecked_block.UncheckedBlock.statements","title":"<code>statements: Tuple[StatementAbc, ...]</code>  <code>property</code>","text":"<p>Can be empty.</p> <p>Returns:</p> Type Description <code>Tuple[StatementAbc, ...]</code> <p>Statements in the block.</p>"},{"location":"api-reference/ir/statements/variable-declaration-statement/","title":"Variable declaration statement","text":""},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement","title":"<code>woke.ast.ir.statement.variable_declaration_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement","title":"<code>VariableDeclarationStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p><code>(uint a, uint b) = (1, 2)</code> in the following code: <pre><code>contract C {\nfunction f() public {\n(uint a, uint b) = (1, 2);\n}\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/variable_declaration_statement.py</code> <pre><code>class VariableDeclarationStatement(StatementAbc):\n\"\"\"\n    !!! example\n        `:::solidity (uint a, uint b) = (1, 2)` in the following code:\n        ```solidity\n        contract C {\n            function f() public {\n                (uint a, uint b) = (1, 2);\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcVariableDeclarationStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_assignments: List[Optional[AstNodeId]]\n_declarations: List[Optional[VariableDeclaration]]\n_initial_value: Optional[ExpressionAbc]\ndef __init__(\nself,\ninit: IrInitTuple,\nvariable_declaration_statement: SolcVariableDeclarationStatement,\nparent: SolidityAbc,\n):\nsuper().__init__(init, variable_declaration_statement, parent)\nself._assignments = list(variable_declaration_statement.assignments)\nself._declarations = []\nfor declaration in variable_declaration_statement.declarations:\nif declaration is None:\nself._declarations.append(None)\nelse:\nself._declarations.append(VariableDeclaration(init, declaration, self))\nif variable_declaration_statement.initial_value is None:\nself._initial_value = None\nelse:\nself._initial_value = ExpressionAbc.from_ast(\ninit, variable_declaration_statement.initial_value, self\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nfor declaration in self._declarations:\nif declaration is not None:\nyield from declaration\nif self._initial_value is not None:\nyield from self._initial_value\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef declarations(self) -&gt; Tuple[Optional[VariableDeclaration], ...]:\n\"\"\"\n        !!! example\n            Some declarations may be `None`, e.g. in the following code:\n            ```solidity\n            (bool success, ) = address(this).call{value: 1}(\"\");\n            ```\n        Returns:\n            Tuple of variable declarations in this statement.\n        \"\"\"\nreturn tuple(self._declarations)\n@property\ndef initial_value(self) -&gt; Optional[ExpressionAbc]:\n\"\"\"\n        Does not need to be a [TupleExpression][woke.ast.ir.expression.tuple_expression.TupleExpression] when there is more than one variable declared.\n        Can also be a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] returning a tuple.\n        Returns:\n            Initial value assigned to the declared variables (if any).\n        \"\"\"\nreturn self._initial_value\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nret = set()\nif self.initial_value is not None:\nret |= self.initial_value.modifies_state\nif any(\ndeclaration.is_state_variable\nfor declaration in self.declarations\nif declaration is not None\n):\nret |= {(self, ModifiesStateFlag.MODIFIES_STATE_VAR)}\nreturn ret\n</code></pre>"},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.declarations","title":"<code>declarations: Tuple[Optional[VariableDeclaration], ...]</code>  <code>property</code>","text":"<p>Example</p> <p>Some declarations may be <code>None</code>, e.g. in the following code: <pre><code>(bool success, ) = address(this).call{value: 1}(\"\");\n</code></pre></p> <p>Returns:</p> Type Description <code>Tuple[Optional[VariableDeclaration], ...]</code> <p>Tuple of variable declarations in this statement.</p>"},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.initial_value","title":"<code>initial_value: Optional[ExpressionAbc]</code>  <code>property</code>","text":"<p>Does not need to be a TupleExpression when there is more than one variable declared. Can also be a FunctionCall returning a tuple.</p> <p>Returns:</p> Type Description <code>Optional[ExpressionAbc]</code> <p>Initial value assigned to the declared variables (if any).</p>"},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/statements/while-statement/","title":"While statement","text":""},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement","title":"<code>woke.ast.ir.statement.while_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement.WhileStatement","title":"<code>WhileStatement</code>  <code>class</code>","text":"<p>         Bases: <code>StatementAbc</code></p> <p>Example</p> <p>Lines 2-3 in the following code: <pre><code>function foo(uint x) public pure {\nwhile (x % 2 == 0)\nx /= 2;\n}\n</code></pre></p> Source code in <code>woke/ast/ir/statement/while_statement.py</code> <pre><code>class WhileStatement(StatementAbc):\n\"\"\"\n    !!! example\n        Lines 2-3 in the following code:\n        ```solidity linenums=\"1\"\n        function foo(uint x) public pure {\n            while (x % 2 == 0)\n                x /= 2;\n        }\n        ```\n    \"\"\"\n_ast_node: SolcWhileStatement\n_parent: Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]\n_body: StatementAbc\n_condition: ExpressionAbc\ndef __init__(\nself,\ninit: IrInitTuple,\nwhile_statement: SolcWhileStatement,\nparent: SolidityAbc,\n):\nsuper().__init__(init, while_statement, parent)\nself._body = StatementAbc.from_ast(init, while_statement.body, self)\nself._condition = ExpressionAbc.from_ast(init, while_statement.condition, self)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._body\nyield from self._condition\n@property\ndef parent(\nself,\n) -&gt; Union[\nBlock,\nDoWhileStatement,\nForStatement,\nIfStatement,\nUncheckedBlock,\nWhileStatement,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef body(self) -&gt; StatementAbc:\n\"\"\"\n        Returns:\n            Body of the while statement.\n        \"\"\"\nreturn self._body\n@property\ndef condition(self) -&gt; ExpressionAbc:\n\"\"\"\n        Returns:\n            Condition of the while statement.\n        \"\"\"\nreturn self._condition\n@property\n@lru_cache(maxsize=2048)\ndef modifies_state(self) -&gt; Set[Tuple[IrAbc, ModifiesStateFlag]]:\nreturn self.body.modifies_state | self.condition.modifies_state\ndef statements_iter(self) -&gt; Iterator[\"StatementAbc\"]:\nyield self\nyield from self._body.statements_iter()\n</code></pre>"},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement.WhileStatement.body","title":"<code>body: StatementAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>StatementAbc</code> <p>Body of the while statement.</p>"},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement.WhileStatement.condition","title":"<code>condition: ExpressionAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ExpressionAbc</code> <p>Condition of the while statement.</p>"},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement.WhileStatement.parent","title":"<code>parent: Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Block, DoWhileStatement, ForStatement, IfStatement, UncheckedBlock, WhileStatement]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/type-names/array-type-name/","title":"Array type name","text":""},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name","title":"<code>woke.ast.ir.type_name.array_type_name</code>  <code>module</code>","text":""},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName","title":"<code>ArrayTypeName</code>  <code>class</code>","text":"<p>         Bases: <code>TypeNameAbc</code></p> <p>Array type name.</p> <p>Example</p> <p>An array type name can be used:</p> <ul> <li>inside a VariableDeclaration:<ul> <li><code>bool[]</code> in line 1,</li> <li><code>int[10][20]</code> in line 11,</li> <li><code>string[10]</code> in line 12,</li> <li><code>address[]</code> in line 16,</li> </ul> </li> <li>inside a NewExpression:<ul> <li><code>address[]</code> in line 16,</li> </ul> </li> <li>inside a UsingForDirective:<ul> <li><code>bool[]</code> in line 8,</li> </ul> </li> <li>inside an ArrayTypeName:<ul> <li><code>int[10]</code> in line 11,</li> </ul> </li> <li>inside a Mapping:<ul> <li><code>C[]</code> in line 13.</li> </ul> </li> </ul> <pre><code>function or(bool[] memory arr) pure returns(bool) {\nfor (uint i = 0; i &lt; arr.length; i++)\nif (arr[i])\nreturn true;\nreturn false;\n}\nusing {or} for bool[];\ncontract C {\nint[10][20] arr;\nstring[10] names;\nmapping(address =&gt; C[]) map;\nfunction foo() public pure {\naddress[] memory addresses = new address[](5);\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/type_name/array_type_name.py</code> <pre><code>class ArrayTypeName(TypeNameAbc):\n\"\"\"\n    Array type name.\n    !!! example\n        An array type name can be used:\n        - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]:\n            - `:::solidity bool[]` in line 1,\n            - `:::solidity int[10][20]` in line 11,\n            - `:::solidity string[10]` in line 12,\n            - `:::solidity address[]` in line 16,\n        - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]:\n            - `:::solidity address[]` in line 16,\n        - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]:\n            - `:::solidity bool[]` in line 8,\n        - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]:\n            - `:::solidity int[10]` in line 11,\n        - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]:\n            - `:::solidity C[]` in line 13.\n        ```solidity linenums=\"1\"\n        function or(bool[] memory arr) pure returns(bool) {\n            for (uint i = 0; i &lt; arr.length; i++)\n                if (arr[i])\n                    return true;\n            return false;\n        }\n        using {or} for bool[];\n        contract C {\n            int[10][20] arr;\n            string[10] names;\n            mapping(address =&gt; C[]) map;\n            function foo() public pure {\n                address[] memory addresses = new address[](5);\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcArrayTypeName\n_parent: Union[\nVariableDeclaration, NewExpression, UsingForDirective, ArrayTypeName, Mapping\n]\n_base_type: TypeNameAbc\n_length: Optional[ExpressionAbc]\ndef __init__(\nself, init: IrInitTuple, array_type_name: SolcArrayTypeName, parent: SolidityAbc\n):\nsuper().__init__(init, array_type_name, parent)\nself._base_type = TypeNameAbc.from_ast(init, array_type_name.base_type, self)\nself._length = (\nExpressionAbc.from_ast(init, array_type_name.length, self)\nif array_type_name.length is not None\nelse None\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._base_type\nif self._length is not None:\nyield from self._length\n@property\ndef parent(\nself,\n) -&gt; Union[\nVariableDeclaration, NewExpression, UsingForDirective, ArrayTypeName, Mapping\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef type(self) -&gt; Array:\n\"\"\"\n        Returns:\n            Type description.\n        \"\"\"\nt = super().type\nassert isinstance(t, Array)\nreturn t\n@property\ndef base_type(self) -&gt; TypeNameAbc:\n\"\"\"\n        !!! example\n            `uint8[2]` has `uint8` ([ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName]) as a base type.\n            `uint8[2][3]` has `uint8[2]` ([ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]) as a base type.\n        Returns:\n            Type name IR node describing the base type.\n        \"\"\"\nreturn self._base_type\n@property\ndef length(self) -&gt; Optional[ExpressionAbc]:\n\"\"\"\n        Returns an expression as present in the source code.\n        Returns:\n            Expression defining the length of the array.\n        \"\"\"\nreturn self._length\n</code></pre>"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName.base_type","title":"<code>base_type: TypeNameAbc</code>  <code>property</code>","text":"<p>Example</p> <p><code>uint8[2]</code> has <code>uint8</code> (ElementaryTypeName) as a base type.</p> <p><code>uint8[2][3]</code> has <code>uint8[2]</code> (ArrayTypeName) as a base type.</p> <p>Returns:</p> Type Description <code>TypeNameAbc</code> <p>Type name IR node describing the base type.</p>"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName.length","title":"<code>length: Optional[ExpressionAbc]</code>  <code>property</code>","text":"<p>Returns an expression as present in the source code.</p> <p>Returns:</p> Type Description <code>Optional[ExpressionAbc]</code> <p>Expression defining the length of the array.</p>"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName.parent","title":"<code>parent: Union[VariableDeclaration, NewExpression, UsingForDirective, ArrayTypeName, Mapping]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[VariableDeclaration, NewExpression, UsingForDirective, ArrayTypeName, Mapping]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName.type","title":"<code>type: Array</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Array</code> <p>Type description.</p>"},{"location":"api-reference/ir/type-names/elementary-type-name/","title":"Elementary type name","text":""},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name","title":"<code>woke.ast.ir.type_name.elementary_type_name</code>  <code>module</code>","text":""},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName","title":"<code>ElementaryTypeName</code>  <code>class</code>","text":"<p>         Bases: <code>TypeNameAbc</code></p> <p>Elementary type name.</p> <p>Example</p> <p>An elementary type name can be used:</p> <ul> <li>inside a VariableDeclaration:<ul> <li>both occurrences of <code>uint</code> in line 1,</li> <li><code>int</code> in line 1,</li> <li><code>string</code> in line 10,</li> <li>the first occurrence of <code>bytes</code> in line 15,</li> </ul> </li> <li>inside a UserDefinedValueTypeDefinition:<ul> <li><code>int</code> in line 7,</li> </ul> </li> <li>inside an ElementaryTypeNameExpression:<ul> <li><code>int</code> in line 2,</li> </ul> </li> <li>inside a NewExpression:<ul> <li>the second occurrence of <code>bytes</code> in line 15,</li> </ul> </li> <li>inside a UsingForDirective:<ul> <li><code>uint</code> in line 5,</li> </ul> </li> <li>inside an ArrayTypeName:<ul> <li><code>uint</code> in line 11,</li> </ul> </li> <li>inside a Mapping:<ul> <li><code>address</code> in line 12.</li> </ul> </li> </ul> <pre><code>function add(uint a, uint b) pure returns(int) {\nreturn int(a + b);\n}\nusing {add} for uint;\ntype MyInt is int;\ncontract C {\nstring public str;\nuint[10] arr;\nmapping(address =&gt; MyInt) map;\nfunction foo() public pure {\nbytes memory b = new bytes(10);\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/type_name/elementary_type_name.py</code> <pre><code>class ElementaryTypeName(TypeNameAbc):\n\"\"\"\n    Elementary type name.\n    !!! example\n        An elementary type name can be used:\n        - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]:\n            - both occurrences of `:::solidity uint` in line 1,\n            - `:::solidity int` in line 1,\n            - `:::solidity string` in line 10,\n            - the first occurrence of `:::solidity bytes` in line 15,\n        - inside a [UserDefinedValueTypeDefinition][woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition]:\n            - `:::solidity int` in line 7,\n        - inside an [ElementaryTypeNameExpression][woke.ast.ir.expression.elementary_type_name_expression.ElementaryTypeNameExpression]:\n            - `:::solidity int` in line 2,\n        - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]:\n            - the second occurrence of `:::solidity bytes` in line 15,\n        - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]:\n            - `:::solidity uint` in line 5,\n        - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]:\n            - `:::solidity uint` in line 11,\n        - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]:\n            - `:::solidity address` in line 12.\n        ```solidity linenums=\"1\"\n        function add(uint a, uint b) pure returns(int) {\n            return int(a + b);\n        }\n        using {add} for uint;\n        type MyInt is int;\n        contract C {\n            string public str;\n            uint[10] arr;\n            mapping(address =&gt; MyInt) map;\n            function foo() public pure {\n                bytes memory b = new bytes(10);\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcElementaryTypeName\n_parent: Union[\nVariableDeclaration,\nUserDefinedValueTypeDefinition,\nElementaryTypeNameExpression,\nNewExpression,\nUsingForDirective,\nArrayTypeName,\nMapping,\n]\n_name: str\n_state_mutability: Optional[StateMutability]\ndef __init__(\nself,\ninit: IrInitTuple,\nelementary_type_name: SolcElementaryTypeName,\nparent: SolidityAbc,\n):\nsuper().__init__(init, elementary_type_name, parent)\nself._name = elementary_type_name.name\nself._state_mutability = elementary_type_name.state_mutability\nfrom woke.ast.ir.expression.elementary_type_name_expression import (\nElementaryTypeNameExpression,\n)\n# fix missing type descriptions in AST\nif self._type_descriptions.type_identifier is None and isinstance(\nparent, ElementaryTypeNameExpression\n):\nself._type_descriptions = parent._type_descriptions\n@property\ndef parent(\nself,\n) -&gt; Union[\nVariableDeclaration,\nUserDefinedValueTypeDefinition,\nElementaryTypeNameExpression,\nNewExpression,\nUsingForDirective,\nArrayTypeName,\nMapping,\n]:\n\"\"\"\n        When the parent is a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression], this can only be `bytes` or `string`.\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef type(\nself,\n) -&gt; Union[\nAddress, Bool, Int, UInt, Fixed, UFixed, String, Bytes, FixedBytes, Type\n]:\n\"\"\"\n        Returns either the generic [Type][woke.ast.types.Type] expression type (this is the case of a type conversion, for example `:::solidity address(0)`) or directly one of the elementary expression types.\n        Returns:\n            Type description.\n        \"\"\"\nt = super().type\nif not isinstance(\nt,\n(Address, Bool, Int, UInt, Fixed, UFixed, String, Bytes, FixedBytes, Type),\n):\nraise TypeError(f\"Unexpected type {t} {self.source}\")\nassert isinstance(\nt,\n(Address, Bool, Int, UInt, Fixed, UFixed, String, Bytes, FixedBytes, Type),\n)\nreturn t\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        !!! example\n            For example `uint256`, `bool`, `string`, `bytes1` or `address`.\n        !!! tip\n            Instead of working with the name, it may be better to use the [type][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.type] property.\n        Returns:\n            Name of the elementary type.\n        \"\"\"\nreturn self._name\n@property\ndef state_mutability(self) -&gt; Optional[StateMutability]:\n\"\"\"\n        Is only set for `address` as either [StateMutability.PAYABLE][woke.ast.enums.StateMutability.PAYABLE] or [StateMutability.NONPAYABLE][woke.ast.enums.StateMutability.NONPAYABLE].\n        Returns:\n            State mutability of the `address` type.\n        \"\"\"\nreturn self._state_mutability\n</code></pre>"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Example</p> <p>For example <code>uint256</code>, <code>bool</code>, <code>string</code>, <code>bytes1</code> or <code>address</code>.</p> <p>Tip</p> <p>Instead of working with the name, it may be better to use the type property.</p> <p>Returns:</p> Type Description <code>str</code> <p>Name of the elementary type.</p>"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.parent","title":"<code>parent: Union[VariableDeclaration, UserDefinedValueTypeDefinition, ElementaryTypeNameExpression, NewExpression, UsingForDirective, ArrayTypeName, Mapping]</code>  <code>property</code>","text":"<p>When the parent is a NewExpression, this can only be <code>bytes</code> or <code>string</code>.</p> <p>Returns:</p> Type Description <code>Union[VariableDeclaration, UserDefinedValueTypeDefinition, ElementaryTypeNameExpression, NewExpression, UsingForDirective, ArrayTypeName, Mapping]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.state_mutability","title":"<code>state_mutability: Optional[StateMutability]</code>  <code>property</code>","text":"<p>Is only set for <code>address</code> as either StateMutability.PAYABLE or StateMutability.NONPAYABLE.</p> <p>Returns:</p> Type Description <code>Optional[StateMutability]</code> <p>State mutability of the <code>address</code> type.</p>"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.type","title":"<code>type: Union[Address, Bool, Int, UInt, Fixed, UFixed, String, Bytes, FixedBytes, Type]</code>  <code>property</code>","text":"<p>Returns either the generic Type expression type (this is the case of a type conversion, for example <code>address(0)</code>) or directly one of the elementary expression types.</p> <p>Returns:</p> Type Description <code>Union[Address, Bool, Int, UInt, Fixed, UFixed, String, Bytes, FixedBytes, Type]</code> <p>Type description.</p>"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.__init__","title":"<code>__init__(init, elementary_type_name, parent)</code>","text":"Source code in <code>woke/ast/ir/type_name/elementary_type_name.py</code> <pre><code>def __init__(\nself,\ninit: IrInitTuple,\nelementary_type_name: SolcElementaryTypeName,\nparent: SolidityAbc,\n):\nsuper().__init__(init, elementary_type_name, parent)\nself._name = elementary_type_name.name\nself._state_mutability = elementary_type_name.state_mutability\nfrom woke.ast.ir.expression.elementary_type_name_expression import (\nElementaryTypeNameExpression,\n)\n# fix missing type descriptions in AST\nif self._type_descriptions.type_identifier is None and isinstance(\nparent, ElementaryTypeNameExpression\n):\nself._type_descriptions = parent._type_descriptions\n</code></pre>"},{"location":"api-reference/ir/type-names/function-type-name/","title":"Function type name","text":""},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name","title":"<code>woke.ast.ir.type_name.function_type_name</code>  <code>module</code>","text":""},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName","title":"<code>FunctionTypeName</code>  <code>class</code>","text":"<p>         Bases: <code>TypeNameAbc</code></p> <p>Function type name.</p> <p>Example</p> <p>A function type name (<code>function (uint) returns(uint)</code>) can be used:</p> <ul> <li>inside a VariableDeclaration (lines 1 and 8),</li> <li>inside a UsingForDirective (line 5),</li> <li>inside a ArrayTypeName (line 9),</li> <li>inside a Mapping (line 11).</li> </ul> <pre><code>function test(function (uint) returns(uint) f) {\nf(10);\n}\nusing {test} for function (uint) returns(uint);\ncontract X {\nfunction (uint) returns(uint) x;\nfunction (uint) returns(uint)[] y;\nmapping(uint =&gt; function (uint) returns(uint)) map;\nfunction foo(uint a) public returns(uint){\nx = foo;\ny.push(foo);\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/type_name/function_type_name.py</code> <pre><code>class FunctionTypeName(TypeNameAbc):\n\"\"\"\n    Function type name.\n    !!! example\n        A function type name (`:::solidity function (uint) returns(uint)`) can be used:\n        - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] (lines 1 and 8),\n        - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective] (line 5),\n        - inside a [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName] (line 9),\n        - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping] (line 11).\n        ```solidity linenums=\"1\"\n        function test(function (uint) returns(uint) f) {\n            f(10);\n        }\n        using {test} for function (uint) returns(uint);\n        contract X {\n            function (uint) returns(uint) x;\n            function (uint) returns(uint)[] y;\n            mapping(uint =&gt; function (uint) returns(uint)) map;\n            function foo(uint a) public returns(uint){\n                x = foo;\n                y.push(foo);\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcFunctionTypeName\n_parent: Union[VariableDeclaration, UsingForDirective, ArrayTypeName, Mapping]\n_parameter_types: ParameterList\n_return_parameter_types: ParameterList\n_state_mutability: StateMutability\n_visibility: Visibility\ndef __init__(\nself,\ninit: IrInitTuple,\nfunction_type_name: SolcFunctionTypeName,\nparent: SolidityAbc,\n):\nsuper().__init__(init, function_type_name, parent)\nself._parameter_types = ParameterList(\ninit, function_type_name.parameter_types, self\n)\nself._return_parameter_types = ParameterList(\ninit, function_type_name.return_parameter_types, self\n)\nself._state_mutability = function_type_name.state_mutability\nself._visibility = function_type_name.visibility\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._parameter_types\nyield from self._return_parameter_types\n@property\ndef parent(\nself,\n) -&gt; Union[VariableDeclaration, UsingForDirective, ArrayTypeName, Mapping]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef type(self) -&gt; Function:\n\"\"\"\n        Returns:\n            Type description.\n        \"\"\"\nt = super().type\nassert isinstance(t, Function)\nreturn t\n@property\ndef parameter_types(self) -&gt; ParameterList:\n\"\"\"\n        Returns:\n            Parameter list describing the function type name parameters.\n        \"\"\"\nreturn self._parameter_types\n@property\ndef return_parameter_types(self) -&gt; ParameterList:\n\"\"\"\n        Returns:\n            Parameter list describing the function type name return parameters.\n        \"\"\"\nreturn self._return_parameter_types\n@property\ndef state_mutability(self) -&gt; StateMutability:\n\"\"\"\n        Returns:\n            State mutability of the function type name.\n        \"\"\"\nreturn self._state_mutability\n@property\ndef visibility(self) -&gt; Visibility:\n\"\"\"\n        Returns:\n            Visibility of the function type name.\n        \"\"\"\nreturn self._visibility\n</code></pre>"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.parameter_types","title":"<code>parameter_types: ParameterList</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ParameterList</code> <p>Parameter list describing the function type name parameters.</p>"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.parent","title":"<code>parent: Union[VariableDeclaration, UsingForDirective, ArrayTypeName, Mapping]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[VariableDeclaration, UsingForDirective, ArrayTypeName, Mapping]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.return_parameter_types","title":"<code>return_parameter_types: ParameterList</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>ParameterList</code> <p>Parameter list describing the function type name return parameters.</p>"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.state_mutability","title":"<code>state_mutability: StateMutability</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>StateMutability</code> <p>State mutability of the function type name.</p>"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.type","title":"<code>type: Function</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Function</code> <p>Type description.</p>"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.visibility","title":"<code>visibility: Visibility</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Visibility</code> <p>Visibility of the function type name.</p>"},{"location":"api-reference/ir/type-names/mapping/","title":"Mapping","text":""},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping","title":"<code>woke.ast.ir.type_name.mapping</code>  <code>module</code>","text":""},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping","title":"<code>Mapping</code>  <code>class</code>","text":"<p>         Bases: <code>TypeNameAbc</code></p> <p>Mapping type name.</p> <p>Example</p> <p>A mapping type name can be used:</p> <ul> <li>inside a VariableDeclaration:<ul> <li><code>mapping(address =&gt; uint)</code> in line 1,</li> <li><code>mapping(address =&gt; mapping(address =&gt; uint))</code> in line 8,</li> </ul> </li> <li>inside a UsingForDirective:<ul> <li><code>mapping(address =&gt; uint)</code> in line 5,</li> </ul> </li> <li>inside an ArrayTypeName:<ul> <li><code>mapping(address =&gt; uint)</code> in line 9,</li> </ul> </li> <li>inside a Mapping:<ul> <li><code>mapping(address =&gt; uint)</code> in line 8.</li> </ul> </li> </ul> <pre><code>function remove(mapping(address =&gt; uint) storage balances, address account) {\ndelete balances[account];\n}\nusing {remove} for mapping(address =&gt; uint);\ncontract C {\nmapping(address =&gt; mapping(address =&gt; uint)) public allowances;\nmapping(address =&gt; uint)[2] public balances;\n}\n</code></pre> Source code in <code>woke/ast/ir/type_name/mapping.py</code> <pre><code>class Mapping(TypeNameAbc):\n\"\"\"\n    Mapping type name.\n    !!! example\n        A mapping type name can be used:\n        - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]:\n            - `:::solidity mapping(address =&gt; uint)` in line 1,\n            - `:::solidity mapping(address =&gt; mapping(address =&gt; uint))` in line 8,\n        - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]:\n            - `:::solidity mapping(address =&gt; uint)` in line 5,\n        - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]:\n            - `:::solidity mapping(address =&gt; uint)` in line 9,\n        - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]:\n            - `:::solidity mapping(address =&gt; uint)` in line 8.\n        ```solidity linenums=\"1\"\n        function remove(mapping(address =&gt; uint) storage balances, address account) {\n            delete balances[account];\n        }\n        using {remove} for mapping(address =&gt; uint);\n        contract C {\n            mapping(address =&gt; mapping(address =&gt; uint)) public allowances;\n            mapping(address =&gt; uint)[2] public balances;\n        }\n        ```\n    \"\"\"\n_ast_node: SolcMapping\n_parent: Union[VariableDeclaration, UsingForDirective, ArrayTypeName, Mapping]\n_key_type: Union[ElementaryTypeName, UserDefinedTypeName]\n_value_type: TypeNameAbc\ndef __init__(self, init: IrInitTuple, mapping: SolcMapping, parent: SolidityAbc):\nsuper().__init__(init, mapping, parent)\nkey_type = TypeNameAbc.from_ast(init, mapping.key_type, self)\nassert isinstance(key_type, (ElementaryTypeName, UserDefinedTypeName))\nself._key_type = key_type\nself._value_type = TypeNameAbc.from_ast(init, mapping.value_type, self)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nyield from self._key_type\nyield from self._value_type\n@property\ndef parent(\nself,\n) -&gt; Union[VariableDeclaration, UsingForDirective, ArrayTypeName, Mapping]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef type(self) -&gt; types.Mapping:\n\"\"\"\n        Returns:\n            Type description.\n        \"\"\"\nt = super().type\nassert isinstance(t, types.Mapping)\nreturn t\n@property\ndef key_type(self) -&gt; Union[ElementaryTypeName, UserDefinedTypeName]:\n\"\"\"\n        Can only be:\n        - an [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName],\n        - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [Contract][woke.ast.types.Contract] type,\n        - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of an [Enum][woke.ast.types.Enum] type,\n        - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [UserDefinedValueType][woke.ast.types.UserDefinedValueType] type.\n        Returns:\n            Mapping key type name.\n        \"\"\"\nreturn self._key_type\n@property\ndef value_type(self) -&gt; TypeNameAbc:\n\"\"\"\n        Returns:\n            Mapping value type name.\n        \"\"\"\nreturn self._value_type\n</code></pre>"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping.key_type","title":"<code>key_type: Union[ElementaryTypeName, UserDefinedTypeName]</code>  <code>property</code>","text":"<p>Can only be:</p> <ul> <li>an ElementaryTypeName,</li> <li>a UserDefinedTypeName of a Contract type,</li> <li>a UserDefinedTypeName of an Enum type,</li> <li>a UserDefinedTypeName of a UserDefinedValueType type.</li> </ul> <p>Returns:</p> Type Description <code>Union[ElementaryTypeName, UserDefinedTypeName]</code> <p>Mapping key type name.</p>"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping.parent","title":"<code>parent: Union[VariableDeclaration, UsingForDirective, ArrayTypeName, Mapping]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[VariableDeclaration, UsingForDirective, ArrayTypeName, Mapping]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping.type","title":"<code>type: types.Mapping</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>types.Mapping</code> <p>Type description.</p>"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping.value_type","title":"<code>value_type: TypeNameAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>TypeNameAbc</code> <p>Mapping value type name.</p>"},{"location":"api-reference/ir/type-names/user-defined-type-name/","title":"User defined type name","text":""},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name","title":"<code>woke.ast.ir.type_name.user_defined_type_name</code>  <code>module</code>","text":""},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName","title":"<code>UserDefinedTypeName</code>  <code>class</code>","text":"<p>         Bases: <code>TypeNameAbc</code></p> <p>User defined type name represents a name path to a user defined type. Path parts are separated by dots. In Solidity 0.8.0 a new IR node (IdentifierPath) was introduced to replace UserDefinedTypeName in some cases.</p> <p>Example</p> <p>A user defined type name can be used:</p> <ul> <li>inside a VariableDeclaration:<ul> <li><code>Interface.Struct</code> in line 18,</li> <li><code>Interface.Enum</code> in line 26,</li> </ul> </li> <li>inside a NewExpression:<ul> <li><code>Contract</code> in line 20,</li> </ul> </li> <li>inside an InheritanceSpecifier:<ul> <li><code>Interface</code> in line 23,</li> </ul> </li> <li>inside an OverrideSpecifier:<ul> <li><code>Interface</code> in line 30,</li> </ul> </li> <li>inside a UsingForDirective:<ul> <li><code>Lib</code> in line 24,</li> <li><code>Interface.Struct</code> in line 24,</li> </ul> </li> <li>inside an ArrayTypeName:<ul> <li><code>Interface.Enum</code> in line 27,</li> </ul> </li> <li>inside a Mapping:<ul> <li>both occurrences of <code>Interface.Enum</code> in line 28.</li> </ul> </li> </ul> <pre><code>pragma solidity 0.7;\ninterface Interface {\nenum Enum {\nREADY,\nWAITING\n    }\nstruct Struct {\nuint a;\n}\nfunction foo() external;\n}\nlibrary Lib {}\nfunction tmp(Interface.Struct memory s) {\ns.a = 5;\nnew Contract();\n}\ncontract Contract is Interface {\nusing Lib for Interface.Struct;\nInterface.Enum state;\nInterface.Enum[] states;\nmapping(Interface.Enum =&gt; Interface.Enum) map;\nfunction foo() external override(Interface) {\n}\n}\n</code></pre> Source code in <code>woke/ast/ir/type_name/user_defined_type_name.py</code> <pre><code>class UserDefinedTypeName(TypeNameAbc):\n\"\"\"\n    User defined type name represents a name path to a user defined type. Path parts are separated by dots.\n    In Solidity 0.8.0 a new IR node ([IdentifierPath][woke.ast.ir.meta.identifier_path.IdentifierPath]) was introduced to replace [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] in some cases.\n    !!! example\n        A user defined type name can be used:\n        - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]:\n            - `:::solidity Interface.Struct` in line 18,\n            - `:::solidity Interface.Enum` in line 26,\n        - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]:\n            - `:::solidity Contract` in line 20,\n        - inside an [InheritanceSpecifier][woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier]:\n            - `:::solidity Interface` in line 23,\n        - inside an [OverrideSpecifier][woke.ast.ir.meta.override_specifier.OverrideSpecifier]:\n            - `:::solidity Interface` in line 30,\n        - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]:\n            - `:::solidity Lib` in line 24,\n            - `:::solidity Interface.Struct` in line 24,\n        - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]:\n            - `:::solidity Interface.Enum` in line 27,\n        - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]:\n            - both occurrences of `:::solidity Interface.Enum` in line 28.\n        ```solidity linenums=\"1\"\n        pragma solidity 0.7;\n        interface Interface {\n            enum Enum {\n                READY,\n                WAITING\n            }\n            struct Struct {\n                uint a;\n            }\n            function foo() external;\n        }\n        library Lib {}\n        function tmp(Interface.Struct memory s) {\n            s.a = 5;\n            new Contract();\n        }\n        contract Contract is Interface {\n            using Lib for Interface.Struct;\n            Interface.Enum state;\n            Interface.Enum[] states;\n            mapping(Interface.Enum =&gt; Interface.Enum) map;\n            function foo() external override(Interface) {\n            }\n        }\n        ```\n    \"\"\"\n_ast_node: SolcUserDefinedTypeName\n_parent: Union[\nVariableDeclaration,\nNewExpression,\nInheritanceSpecifier,\nOverrideSpecifier,\nUsingForDirective,\nArrayTypeName,\nMapping,\n]\n_referenced_declaration_id: AstNodeId\n_contract_scope_id: Optional[AstNodeId]\n_name: Optional[str]\n_path_node: Optional[IdentifierPath]\n_parts: Optional[IntervalTree]\ndef __init__(\nself,\ninit: IrInitTuple,\nuser_defined_type_name: SolcUserDefinedTypeName,\nparent: SolidityAbc,\n):\nsuper().__init__(init, user_defined_type_name, parent)\nself._name = user_defined_type_name.name\nself._referenced_declaration_id = user_defined_type_name.referenced_declaration\nassert self._referenced_declaration_id &gt;= 0\nself._contract_scope_id = user_defined_type_name.contract_scope\nif user_defined_type_name.path_node is None:\nself._path_node = None\nself._reference_resolver.register_post_process_callback(self._post_process)\nelse:\nself._path_node = IdentifierPath(\ninit, user_defined_type_name.path_node, self\n)\nself._parts = None\ndef _post_process(self, callback_params: CallbackParams):\ndef find_referenced_source_unit(\nsearched_name: str, start_source_unit: SourceUnit\n) -&gt; SourceUnit:\nsource_units_queue: Deque[SourceUnit] = deque([start_source_unit])\nprocessed_source_units: Set[Path] = {start_source_unit.file}\nreferenced_declaration = None\nwhile source_units_queue and referenced_declaration is None:\nsource_unit = source_units_queue.popleft()\nfor import_ in source_unit.imports:\nif import_.unit_alias == searched_name:\nreferenced_declaration = callback_params.source_units[\nimport_.imported_file\n]\nbreak\nfor symbol_alias in import_.symbol_aliases:\nif symbol_alias.local == searched_name:\nref = symbol_alias.foreign.referenced_declaration\nassert isinstance(ref, SourceUnit)\nreferenced_declaration = ref\nif referenced_declaration is not None:\nbreak\nif import_.imported_file not in processed_source_units:\nsource_units_queue.append(\ncallback_params.source_units[import_.imported_file]\n)\nprocessed_source_units.add(import_.imported_file)\nassert referenced_declaration is not None\nreturn referenced_declaration\nfrom ..meta.source_unit import SourceUnit\nmatches = list(IDENTIFIER_RE.finditer(self._source))\ngroups_count = len(matches)\nassert groups_count &gt; 0\nself._parts = IntervalTree()\nstart_source_unit = callback_params.source_units[self._file]\nref = self.referenced_declaration\nrefs = []\nfor _ in range(groups_count):\nrefs.append(ref)\nif ref is not None:\nref = ref.parent\nfor match, ref in zip(matches, reversed(refs)):\nname = match.group(0).decode(\"utf-8\")\nif ref is None:\nstart_source_unit = find_referenced_source_unit(name, start_source_unit)\nreferenced_node = start_source_unit\nelif isinstance(ref, (DeclarationAbc, SourceUnit)):\nreferenced_node = ref\nelse:\nraise TypeError(\nf\"Unexpected type of referenced declaration: {type(ref)}\"\n)\nnode_path_order = self._reference_resolver.get_node_path_order(\nAstNodeId(referenced_node.ast_node_id),\nreferenced_node.cu_hash,\n)\nreferenced_node_id = (\nself._reference_resolver.get_ast_id_from_cu_node_path_order(\nnode_path_order, self._cu_hash\n)\n)\nstart = self.byte_location[0] + match.start()\nend = self.byte_location[0] + match.end()\nself._parts[start:end] = IdentifierPathPart(\nself,\n(start, end),\nname,\nreferenced_node_id,\nself._reference_resolver,\nself._cu_hash,\nself._file,\n)\ndef __iter__(self) -&gt; Iterator[IrAbc]:\nyield self\nif self._path_node is not None:\nyield from self._path_node\n@property\ndef parent(\nself,\n) -&gt; Union[\nVariableDeclaration,\nNewExpression,\nInheritanceSpecifier,\nOverrideSpecifier,\nUsingForDirective,\nArrayTypeName,\nMapping,\n]:\n\"\"\"\n        Returns:\n            Parent IR node.\n        \"\"\"\nreturn self._parent\n@property\ndef type(self) -&gt; Union[Contract, Struct, Enum, UserDefinedValueType]:\n\"\"\"\n        Returns:\n            Type description.\n        \"\"\"\nt = super().type\nassert isinstance(t, (Contract, Struct, Enum, UserDefinedValueType))\nreturn t\n@property\ndef name(self) -&gt; str:\n\"\"\"\n        !!! note\n            Should be the same as [source][woke.ast.ir.abc.IrAbc.source] and is the same as [path_node.name][woke.ast.ir.meta.identifier_path.IdentifierPath.name] if [path_node][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.path_node] is not `None`.\n        Returns:\n            Name of the user defined type as it appears in the source code.\n        \"\"\"\nif self._name is None:\nassert self._path_node is not None\nself._name = self._path_node.name\nreturn self._name\n@property\ndef identifier_path_parts(self) -&gt; Tuple[IdentifierPathPart, ...]:\n\"\"\"\n        Returns:\n            Parts of the user defined type name.\n        \"\"\"\nif self._path_node is not None:\nreturn self._path_node.identifier_path_parts\nassert self._parts is not None\nreturn tuple(interval.data for interval in sorted(self._parts))\ndef identifier_path_part_at(self, byte_offset: int) -&gt; Optional[IdentifierPathPart]:\n\"\"\"\n        Args:\n            byte_offset: Byte offset in the source file.\n        Returns:\n            Identifier path part at the given byte offset, if any.\n        \"\"\"\nif self._path_node is not None:\nreturn self._path_node.identifier_path_part_at(byte_offset)\nassert self._parts is not None\nintervals = self._parts.at(byte_offset)\nassert len(intervals) &lt;= 1\nif len(intervals) == 0:\nreturn None\nreturn intervals.pop().data\n@property\ndef referenced_declaration(self) -&gt; DeclarationAbc:\n\"\"\"\n        Returns:\n            Declaration IR node referenced by this user defined type name.\n        \"\"\"\nnode = self._reference_resolver.resolve_node(\nself._referenced_declaration_id, self._cu_hash\n)\nassert isinstance(node, DeclarationAbc)\nreturn node\n@property\ndef path_node(self) -&gt; Optional[IdentifierPath]:\n\"\"\"\n        Always present since Solidity 0.8.0. If not `None`, it represents the same source code as this node ([byte_location][woke.ast.ir.abc.IrAbc.byte_location] properties are the same) and references the same declaration.\n        Returns:\n            Identifier path IR node.\n        \"\"\"\nreturn self._path_node\n</code></pre>"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.identifier_path_parts","title":"<code>identifier_path_parts: Tuple[IdentifierPathPart, ...]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Tuple[IdentifierPathPart, ...]</code> <p>Parts of the user defined type name.</p>"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.name","title":"<code>name: str</code>  <code>property</code>","text":"<p>Note</p> <p>Should be the same as source and is the same as path_node.name if path_node is not <code>None</code>.</p> <p>Returns:</p> Type Description <code>str</code> <p>Name of the user defined type as it appears in the source code.</p>"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.parent","title":"<code>parent: Union[VariableDeclaration, NewExpression, InheritanceSpecifier, OverrideSpecifier, UsingForDirective, ArrayTypeName, Mapping]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[VariableDeclaration, NewExpression, InheritanceSpecifier, OverrideSpecifier, UsingForDirective, ArrayTypeName, Mapping]</code> <p>Parent IR node.</p>"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.path_node","title":"<code>path_node: Optional[IdentifierPath]</code>  <code>property</code>","text":"<p>Always present since Solidity 0.8.0. If not <code>None</code>, it represents the same source code as this node (byte_location properties are the same) and references the same declaration.</p> <p>Returns:</p> Type Description <code>Optional[IdentifierPath]</code> <p>Identifier path IR node.</p>"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.referenced_declaration","title":"<code>referenced_declaration: DeclarationAbc</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>DeclarationAbc</code> <p>Declaration IR node referenced by this user defined type name.</p>"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.type","title":"<code>type: Union[Contract, Struct, Enum, UserDefinedValueType]</code>  <code>property</code>","text":"<p>Returns:</p> Type Description <code>Union[Contract, Struct, Enum, UserDefinedValueType]</code> <p>Type description.</p>"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.identifier_path_part_at","title":"<code>identifier_path_part_at(byte_offset)</code>","text":"<p>Parameters:</p> Name Type Description Default <code>byte_offset</code> <code>int</code> <p>Byte offset in the source file.</p> required <p>Returns:</p> Type Description <code>Optional[IdentifierPathPart]</code> <p>Identifier path part at the given byte offset, if any.</p> Source code in <code>woke/ast/ir/type_name/user_defined_type_name.py</code> <pre><code>def identifier_path_part_at(self, byte_offset: int) -&gt; Optional[IdentifierPathPart]:\n\"\"\"\n    Args:\n        byte_offset: Byte offset in the source file.\n    Returns:\n        Identifier path part at the given byte offset, if any.\n    \"\"\"\nif self._path_node is not None:\nreturn self._path_node.identifier_path_part_at(byte_offset)\nassert self._parts is not None\nintervals = self._parts.at(byte_offset)\nassert len(intervals) &lt;= 1\nif len(intervals) == 0:\nreturn None\nreturn intervals.pop().data\n</code></pre>"},{"location":"api-reference/ir/yul/assignment/","title":"Assignment","text":""},{"location":"api-reference/ir/yul/assignment/#woke.ast.ir.yul.assignment","title":"<code>woke.ast.ir.yul.assignment</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/assignment/#woke.ast.ir.yul.assignment.Assignment","title":"<code>Assignment</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/assignment.py</code> <pre><code>class Assignment(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n_value: Union[FunctionCall, Identifier, Literal]\n_variable_names: List[Identifier]\ndef __init__(self, init: IrInitTuple, assignment: YulAssignment, parent: YulAbc):\nsuper().__init__(init, assignment, parent)\nif isinstance(assignment.value, YulFunctionCall):\nself._value = FunctionCall(init, assignment.value, self)\nelif isinstance(assignment.value, YulIdentifier):\nself._value = Identifier(init, assignment.value, self)\nelif isinstance(assignment.value, YulLiteral):\nself._value = Literal(init, assignment.value, self)\nelse:\nassert False, f\"Unexpected type: {type(assignment.value)}\"\nself._variable_names = [\nIdentifier(init, variable_name, self)\nfor variable_name in assignment.variable_names\n]\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nyield from self._value\nfor variable_name in self._variable_names:\nyield from variable_name\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n@property\ndef value(self) -&gt; Union[FunctionCall, Identifier, Literal]:\nreturn self._value\n@property\ndef variable_names(self) -&gt; Tuple[Identifier, ...]:\nreturn tuple(self._variable_names)\n</code></pre>"},{"location":"api-reference/ir/yul/block/","title":"Block","text":""},{"location":"api-reference/ir/yul/block/#woke.ast.ir.yul.block","title":"<code>woke.ast.ir.yul.block</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/block/#woke.ast.ir.yul.block.Block","title":"<code>Block</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/block.py</code> <pre><code>class Block(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Union[InlineAssembly, Block, ForLoop, FunctionDefinition, If, Case]\n_statements: List[\nUnion[\nAssignment,\n\"Block\",\nBreak,\nContinue,\nExpressionStatement,\nLeave,\nForLoop,\nFunctionDefinition,\nIf,\nSwitch,\nVariableDeclaration,\n]\n]\ndef __init__(\nself, init: IrInitTuple, block: YulBlock, parent: Union[InlineAssembly, YulAbc]\n):\nfrom .assignment import Assignment\nfrom .break_statement import Break\nfrom .continue_statement import Continue\nfrom .expression_statement import ExpressionStatement\nfrom .for_loop import ForLoop\nfrom .function_definition import FunctionDefinition\nfrom .if_statement import If\nfrom .leave import Leave\nfrom .switch import Switch\nfrom .variable_declaration import VariableDeclaration\nsuper().__init__(init, block, parent)\nself._statements = []\nfor statement in block.statements:\nif isinstance(statement, YulAssignment):\nself._statements.append(Assignment(init, statement, self))\nelif isinstance(statement, YulBlock):\nself._statements.append(Block(init, statement, self))\nelif isinstance(statement, YulBreak):\nself._statements.append(Break(init, statement, self))\nelif isinstance(statement, YulContinue):\nself._statements.append(Continue(init, statement, self))\nelif isinstance(statement, YulExpressionStatement):\nself._statements.append(ExpressionStatement(init, statement, self))\nelif isinstance(statement, YulLeave):\nself._statements.append(Leave(init, statement, self))\nelif isinstance(statement, YulForLoop):\nself._statements.append(ForLoop(init, statement, self))\nelif isinstance(statement, YulFunctionDefinition):\nself._statements.append(FunctionDefinition(init, statement, self))\nelif isinstance(statement, YulIf):\nself._statements.append(If(init, statement, self))\nelif isinstance(statement, YulSwitch):\nself._statements.append(Switch(init, statement, self))\nelif isinstance(statement, YulVariableDeclaration):\nself._statements.append(VariableDeclaration(init, statement, self))\nelse:\nassert False, f\"Unexpected type: {type(statement)}\"\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nfor statement in self._statements:\nyield from statement\n@property\ndef parent(\nself,\n) -&gt; Union[InlineAssembly, Block, ForLoop, FunctionDefinition, If, Case]:\nreturn self._parent\n@property\ndef statements(\nself,\n) -&gt; Tuple[\nUnion[\nAssignment,\n\"Block\",\nBreak,\nContinue,\nExpressionStatement,\nLeave,\nForLoop,\nFunctionDefinition,\nIf,\nSwitch,\nVariableDeclaration,\n],\n...,\n]:\nreturn tuple(self._statements)\n</code></pre>"},{"location":"api-reference/ir/yul/block/#woke.ast.ir.yul.block.Block.__init__","title":"<code>__init__(init, block, parent)</code>","text":"Source code in <code>woke/ast/ir/yul/block.py</code> <pre><code>def __init__(\nself, init: IrInitTuple, block: YulBlock, parent: Union[InlineAssembly, YulAbc]\n):\nfrom .assignment import Assignment\nfrom .break_statement import Break\nfrom .continue_statement import Continue\nfrom .expression_statement import ExpressionStatement\nfrom .for_loop import ForLoop\nfrom .function_definition import FunctionDefinition\nfrom .if_statement import If\nfrom .leave import Leave\nfrom .switch import Switch\nfrom .variable_declaration import VariableDeclaration\nsuper().__init__(init, block, parent)\nself._statements = []\nfor statement in block.statements:\nif isinstance(statement, YulAssignment):\nself._statements.append(Assignment(init, statement, self))\nelif isinstance(statement, YulBlock):\nself._statements.append(Block(init, statement, self))\nelif isinstance(statement, YulBreak):\nself._statements.append(Break(init, statement, self))\nelif isinstance(statement, YulContinue):\nself._statements.append(Continue(init, statement, self))\nelif isinstance(statement, YulExpressionStatement):\nself._statements.append(ExpressionStatement(init, statement, self))\nelif isinstance(statement, YulLeave):\nself._statements.append(Leave(init, statement, self))\nelif isinstance(statement, YulForLoop):\nself._statements.append(ForLoop(init, statement, self))\nelif isinstance(statement, YulFunctionDefinition):\nself._statements.append(FunctionDefinition(init, statement, self))\nelif isinstance(statement, YulIf):\nself._statements.append(If(init, statement, self))\nelif isinstance(statement, YulSwitch):\nself._statements.append(Switch(init, statement, self))\nelif isinstance(statement, YulVariableDeclaration):\nself._statements.append(VariableDeclaration(init, statement, self))\nelse:\nassert False, f\"Unexpected type: {type(statement)}\"\n</code></pre>"},{"location":"api-reference/ir/yul/break-statement/","title":"Break statement","text":""},{"location":"api-reference/ir/yul/break-statement/#woke.ast.ir.yul.break_statement","title":"<code>woke.ast.ir.yul.break_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/break-statement/#woke.ast.ir.yul.break_statement.Break","title":"<code>Break</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/break_statement.py</code> <pre><code>class Break(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n</code></pre>"},{"location":"api-reference/ir/yul/case-statement/","title":"Case statement","text":""},{"location":"api-reference/ir/yul/case-statement/#woke.ast.ir.yul.case_statement","title":"<code>woke.ast.ir.yul.case_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/case-statement/#woke.ast.ir.yul.case_statement.Case","title":"<code>Case</code>  <code>class</code>","text":"<p>         Bases: <code>YulAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/case_statement.py</code> <pre><code>class Case(YulAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Switch\n_body: Block\n_value: Union[typing_extensions.Literal[\"default\"], Literal]\ndef __init__(self, init: IrInitTuple, case_: YulCase, parent: YulAbc):\nsuper().__init__(init, case_, parent)\nself._body = Block(init, case_.body, self)\nif case_.value == \"default\":\nself._value = \"default\"\nelse:\nself._value = Literal(init, case_.value, self)\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nyield from self._body\nif self._value != \"default\":\nyield from self._value\n@property\ndef parent(self) -&gt; Switch:\nreturn self._parent\n@property\ndef body(self) -&gt; Block:\nreturn self._body\n@property\ndef value(self) -&gt; Union[typing_extensions.Literal[\"default\"], Literal]:\nreturn self._value\n</code></pre>"},{"location":"api-reference/ir/yul/continue-statement/","title":"Continue statement","text":""},{"location":"api-reference/ir/yul/continue-statement/#woke.ast.ir.yul.continue_statement","title":"<code>woke.ast.ir.yul.continue_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/continue-statement/#woke.ast.ir.yul.continue_statement.Continue","title":"<code>Continue</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/continue_statement.py</code> <pre><code>class Continue(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n</code></pre>"},{"location":"api-reference/ir/yul/expression-statement/","title":"Expression statement","text":""},{"location":"api-reference/ir/yul/expression-statement/#woke.ast.ir.yul.expression_statement","title":"<code>woke.ast.ir.yul.expression_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/expression-statement/#woke.ast.ir.yul.expression_statement.ExpressionStatement","title":"<code>ExpressionStatement</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/expression_statement.py</code> <pre><code>class ExpressionStatement(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n_expression: Union[FunctionCall, Identifier, Literal]\ndef __init__(\nself,\ninit: IrInitTuple,\nexpression_statement: YulExpressionStatement,\nparent: YulAbc,\n):\nsuper().__init__(init, expression_statement, parent)\nif isinstance(expression_statement.expression, YulFunctionCall):\nself._expression = FunctionCall(init, expression_statement.expression, self)\nelif isinstance(expression_statement.expression, YulIdentifier):\nself._expression = Identifier(init, expression_statement.expression, self)\nelif isinstance(expression_statement.expression, YulLiteral):\nself._expression = Literal(init, expression_statement.expression, self)\nelse:\nassert False, f\"Unexpected type: {type(expression_statement.expression)}\"\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nyield from self._expression\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n@property\ndef expression(self) -&gt; Union[FunctionCall, Identifier, Literal]:\nreturn self._expression\n</code></pre>"},{"location":"api-reference/ir/yul/for-loop/","title":"For loop","text":""},{"location":"api-reference/ir/yul/for-loop/#woke.ast.ir.yul.for_loop","title":"<code>woke.ast.ir.yul.for_loop</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/for-loop/#woke.ast.ir.yul.for_loop.ForLoop","title":"<code>ForLoop</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/for_loop.py</code> <pre><code>class ForLoop(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n_body: Block\n_condition: Union[FunctionCall, Identifier, Literal]\n_post: Block\n_pre: Block\ndef __init__(self, init: IrInitTuple, for_loop: YulForLoop, parent: YulAbc):\nsuper().__init__(init, for_loop, parent)\nself._body = Block(init, for_loop.body, self)\nif isinstance(for_loop.condition, YulFunctionCall):\nself._condition = FunctionCall(init, for_loop.condition, self)\nelif isinstance(for_loop.condition, YulIdentifier):\nself._condition = Identifier(init, for_loop.condition, self)\nelif isinstance(for_loop.condition, YulLiteral):\nself._condition = Literal(init, for_loop.condition, self)\nelse:\nassert False, f\"Unexpected type: {type(for_loop.condition)}\"\nself._post = Block(init, for_loop.post, self)\nself._pre = Block(init, for_loop.pre, self)\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nyield from self._pre\nyield from self._condition\nyield from self._body\nyield from self._post\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n@property\ndef body(self) -&gt; Block:\nreturn self._body\n@property\ndef condition(self) -&gt; Union[FunctionCall, Identifier, Literal]:\nreturn self._condition\n@property\ndef post(self) -&gt; Block:\nreturn self._post\n@property\ndef pre(self) -&gt; Block:\nreturn self._pre\n</code></pre>"},{"location":"api-reference/ir/yul/function-call/","title":"Function call","text":""},{"location":"api-reference/ir/yul/function-call/#woke.ast.ir.yul.function_call","title":"<code>woke.ast.ir.yul.function_call</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/function-call/#woke.ast.ir.yul.function_call.FunctionCall","title":"<code>FunctionCall</code>  <code>class</code>","text":"<p>         Bases: <code>YulAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/function_call.py</code> <pre><code>class FunctionCall(YulAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Union[\nAssignment,\nExpressionStatement,\nForLoop,\nIf,\nSwitch,\nVariableDeclaration,\nFunctionCall,\n]\n_arguments: List[Union[\"FunctionCall\", Identifier, Literal]]\n_function_name: Identifier\ndef __init__(\nself, init: IrInitTuple, function_call: YulFunctionCall, parent: YulAbc\n):\nsuper().__init__(init, function_call, parent)\nself._function_name = Identifier(init, function_call.function_name, self)\nself._arguments = []\nfor argument in function_call.arguments:\nif isinstance(argument, YulFunctionCall):\nself._arguments.append(FunctionCall(init, argument, self))\nelif isinstance(argument, YulIdentifier):\nself._arguments.append(Identifier(init, argument, self))\nelif isinstance(argument, YulLiteral):\nself._arguments.append(Literal(init, argument, self))\nelse:\nassert False, f\"Unexpected type: {type(argument)}\"\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nyield from self._function_name\nfor argument in self._arguments:\nyield from argument\n@property\ndef parent(\nself,\n) -&gt; Union[\nAssignment,\nExpressionStatement,\nForLoop,\nIf,\nSwitch,\nVariableDeclaration,\nFunctionCall,\n]:\nreturn self._parent\n@property\ndef arguments(self) -&gt; Tuple[Union[\"FunctionCall\", Identifier, Literal], ...]:\nreturn tuple(self._arguments)\n@property\ndef function_name(self) -&gt; Identifier:\nreturn self._function_name\n</code></pre>"},{"location":"api-reference/ir/yul/function-definition/","title":"Function definition","text":""},{"location":"api-reference/ir/yul/function-definition/#woke.ast.ir.yul.function_definition","title":"<code>woke.ast.ir.yul.function_definition</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/function-definition/#woke.ast.ir.yul.function_definition.FunctionDefinition","title":"<code>FunctionDefinition</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/function_definition.py</code> <pre><code>class FunctionDefinition(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n_body: Block\n_name: str\n_parameters: Optional[List[TypedName]]\n_return_variables: Optional[List[TypedName]]\ndef __init__(\nself,\ninit: IrInitTuple,\nfunction_definition: YulFunctionDefinition,\nparent: YulAbc,\n):\nsuper().__init__(init, function_definition, parent)\nself._body = Block(init, function_definition.body, self)\nself._name = function_definition.name\nif function_definition.parameters is None:\nself._parameters = None\nelse:\nself._parameters = [\nTypedName(init, parameter, self)\nfor parameter in function_definition.parameters\n]\nif function_definition.return_variables is None:\nself._return_variables = None\nelse:\nself._return_variables = [\nTypedName(init, return_variable, self)\nfor return_variable in function_definition.return_variables\n]\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nyield from self._body\nif self._parameters is not None:\nfor parameter in self._parameters:\nyield from parameter\nif self._return_variables is not None:\nfor return_variable in self._return_variables:\nyield from return_variable\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n@property\ndef body(self) -&gt; Block:\nreturn self._body\n@property\ndef name(self) -&gt; str:\nreturn self._name\n@property\ndef parameters(self) -&gt; Optional[Tuple[TypedName, ...]]:\nif self._parameters is None:\nreturn None\nreturn tuple(self._parameters)\n@property\ndef return_variables(self) -&gt; Optional[Tuple[TypedName, ...]]:\nif self._return_variables is None:\nreturn None\nreturn tuple(self._return_variables)\n</code></pre>"},{"location":"api-reference/ir/yul/identifier/","title":"Identifier","text":""},{"location":"api-reference/ir/yul/identifier/#woke.ast.ir.yul.identifier","title":"<code>woke.ast.ir.yul.identifier</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/identifier/#woke.ast.ir.yul.identifier.Identifier","title":"<code>Identifier</code>  <code>class</code>","text":"<p>         Bases: <code>YulAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/identifier.py</code> <pre><code>class Identifier(YulAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Union[\nAssignment,\nExpressionStatement,\nForLoop,\nIf,\nSwitch,\nVariableDeclaration,\nFunctionCall,\n]\n_name: str\n_external_reference: Optional[ExternalReference]\ndef __init__(self, init: IrInitTuple, identifier: YulIdentifier, parent: YulAbc):\nsuper().__init__(init, identifier, parent)\nself._name = identifier.name\nself._external_reference = None\n@property\ndef parent(\nself,\n) -&gt; Union[\nAssignment,\nExpressionStatement,\nForLoop,\nIf,\nSwitch,\nVariableDeclaration,\nFunctionCall,\n]:\nreturn self._parent\n@property\ndef name(self) -&gt; str:\nreturn self._name\n@property\ndef external_reference(self) -&gt; Optional[ExternalReference]:\nreturn self._external_reference\n</code></pre>"},{"location":"api-reference/ir/yul/if-statement/","title":"If statement","text":""},{"location":"api-reference/ir/yul/if-statement/#woke.ast.ir.yul.if_statement","title":"<code>woke.ast.ir.yul.if_statement</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/if-statement/#woke.ast.ir.yul.if_statement.If","title":"<code>If</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/if_statement.py</code> <pre><code>class If(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n_body: Block\n_condition: Union[FunctionCall, Identifier, Literal]\ndef __init__(self, init: IrInitTuple, if_statement: YulIf, parent: YulAbc):\nsuper().__init__(init, if_statement, parent)\nself._body = Block(init, if_statement.body, self)\nif isinstance(if_statement.condition, YulFunctionCall):\nself._condition = FunctionCall(init, if_statement.condition, self)\nelif isinstance(if_statement.condition, YulIdentifier):\nself._condition = Identifier(init, if_statement.condition, self)\nelif isinstance(if_statement.condition, YulLiteral):\nself._condition = Literal(init, if_statement.condition, self)\nelse:\nassert False, f\"Unexpected type: {type(if_statement.condition)}\"\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nyield from self._condition\nyield from self._body\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n@property\ndef body(self) -&gt; Block:\nreturn self._body\n@property\ndef condition(self) -&gt; Union[FunctionCall, Identifier, Literal]:\nreturn self._condition\n</code></pre>"},{"location":"api-reference/ir/yul/leave/","title":"Leave","text":""},{"location":"api-reference/ir/yul/leave/#woke.ast.ir.yul.leave","title":"<code>woke.ast.ir.yul.leave</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/leave/#woke.ast.ir.yul.leave.Leave","title":"<code>Leave</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/leave.py</code> <pre><code>class Leave(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n</code></pre>"},{"location":"api-reference/ir/yul/literal/","title":"Literal","text":""},{"location":"api-reference/ir/yul/literal/#woke.ast.ir.yul.literal","title":"<code>woke.ast.ir.yul.literal</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/literal/#woke.ast.ir.yul.literal.Literal","title":"<code>Literal</code>  <code>class</code>","text":"<p>         Bases: <code>YulAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/literal.py</code> <pre><code>class Literal(YulAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Union[\nAssignment,\nExpressionStatement,\nForLoop,\nIf,\nSwitch,\nVariableDeclaration,\nFunctionCall,\nCase,\n]\n_kind: YulLiteralValueKind\n_type: str\n_value: Optional[str]\n_hex_value: Optional[str]\ndef __init__(self, init: IrInitTuple, literal: YulLiteral, parent: YulAbc):\nsuper().__init__(init, literal, parent)\nself._kind = literal.kind\nself._type = literal.type\nself._value = literal.value\nself._hex_value = literal.hex_value\n@property\ndef parent(\nself,\n) -&gt; Union[\nAssignment,\nExpressionStatement,\nForLoop,\nIf,\nSwitch,\nVariableDeclaration,\nFunctionCall,\nCase,\n]:\nreturn self._parent\n@property\ndef kind(self) -&gt; YulLiteralValueKind:\nreturn self._kind\n@property\ndef type(self) -&gt; str:\nreturn self._type\n@property\ndef value(self) -&gt; Optional[str]:\nreturn self._value\n@property\ndef hex_value(self) -&gt; Optional[str]:\nreturn self._hex_value\n</code></pre>"},{"location":"api-reference/ir/yul/switch/","title":"Switch","text":""},{"location":"api-reference/ir/yul/switch/#woke.ast.ir.yul.switch","title":"<code>woke.ast.ir.yul.switch</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/switch/#woke.ast.ir.yul.switch.Switch","title":"<code>Switch</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/switch.py</code> <pre><code>class Switch(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n_cases: List[Case]\n_expression: Union[FunctionCall, Identifier, Literal]\ndef __init__(self, init: IrInitTuple, switch: YulSwitch, parent: YulAbc):\nsuper().__init__(init, switch, parent)\nif isinstance(switch.expression, YulFunctionCall):\nself._expression = FunctionCall(init, switch.expression, self)\nelif isinstance(switch.expression, YulIdentifier):\nself._expression = Identifier(init, switch.expression, self)\nelif isinstance(switch.expression, YulLiteral):\nself._expression = Literal(init, switch.expression, self)\nelse:\nassert False, f\"Unexpected type: {type(switch.expression)}\"\nself._cases = [Case(init, case, self) for case in switch.cases]\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nyield from self._expression\nfor case_ in self._cases:\nyield from case_\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n@property\ndef cases(self) -&gt; Tuple[Case, ...]:\nreturn tuple(self._cases)\n@property\ndef expression(self) -&gt; Union[FunctionCall, Identifier, Literal]:\nreturn self._expression\n</code></pre>"},{"location":"api-reference/ir/yul/typed-name/","title":"Typed name","text":""},{"location":"api-reference/ir/yul/typed-name/#woke.ast.ir.yul.typed_name","title":"<code>woke.ast.ir.yul.typed_name</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/typed-name/#woke.ast.ir.yul.typed_name.TypedName","title":"<code>TypedName</code>  <code>class</code>","text":"<p>         Bases: <code>YulAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/typed_name.py</code> <pre><code>class TypedName(YulAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Union[FunctionDefinition, VariableDeclaration]\n_name: str\n_type: str\ndef __init__(self, init: IrInitTuple, typed_name: YulTypedName, parent: YulAbc):\nsuper().__init__(init, typed_name, parent)\nself._name = typed_name.name\nself._type = typed_name.type\n@property\ndef parent(self) -&gt; Union[FunctionDefinition, VariableDeclaration]:\nreturn self._parent\n@property\ndef name(self) -&gt; str:\nreturn self._name\n@property\ndef type(self) -&gt; str:\nreturn self._type\n</code></pre>"},{"location":"api-reference/ir/yul/variable-declaration/","title":"Variable declaration","text":""},{"location":"api-reference/ir/yul/variable-declaration/#woke.ast.ir.yul.variable_declaration","title":"<code>woke.ast.ir.yul.variable_declaration</code>  <code>module</code>","text":""},{"location":"api-reference/ir/yul/variable-declaration/#woke.ast.ir.yul.variable_declaration.VariableDeclaration","title":"<code>VariableDeclaration</code>  <code>class</code>","text":"<p>         Bases: <code>YulStatementAbc</code></p> <p>TBD</p> Source code in <code>woke/ast/ir/yul/variable_declaration.py</code> <pre><code>class VariableDeclaration(YulStatementAbc):\n\"\"\"\n    TBD\n    \"\"\"\n_parent: Block\n_variables: List[TypedName]\n_value: Optional[Union[FunctionCall, Identifier, Literal]]\ndef __init__(\nself,\ninit: IrInitTuple,\nvariable_declaration: YulVariableDeclaration,\nparent: YulAbc,\n):\nsuper().__init__(init, variable_declaration, parent)\nself._variables = [\nTypedName(init, variable, self)\nfor variable in variable_declaration.variables\n]\nif variable_declaration.value is None:\nself._value = None\nelif isinstance(variable_declaration.value, YulFunctionCall):\nself._value = FunctionCall(init, variable_declaration.value, self)\nelif isinstance(variable_declaration.value, YulIdentifier):\nself._value = Identifier(init, variable_declaration.value, self)\nelif isinstance(variable_declaration.value, YulLiteral):\nself._value = Literal(init, variable_declaration.value, self)\nelse:\nassert False, f\"Unexpected type: {type(variable_declaration.value)}\"\ndef __iter__(self) -&gt; Iterator[YulAbc]:\nyield self\nfor variable in self._variables:\nyield from variable\nif self._value is not None:\nyield from self._value\n@property\ndef parent(self) -&gt; Block:\nreturn self._parent\n@property\ndef variables(self) -&gt; Tuple[TypedName, ...]:\nreturn tuple(self._variables)\n@property\ndef value(self) -&gt; Optional[Union[FunctionCall, Identifier, Literal]]:\nreturn self._value\n</code></pre>"},{"location":"testing-framework/accounts-and-addresses/","title":"Accounts and addresses","text":"<p>Woke testing framework strictly distinguishes between accounts and addresses. However, in most cases, API functions accept both <code>Account</code> and <code>Address</code> types.</p>"},{"location":"testing-framework/accounts-and-addresses/#addresses","title":"Addresses","text":"<p><code>Address</code> is a 20-byte value encoded as a hex string. It can be constructed from a hex string or an integer:</p> <pre><code>from woke.testing import Address\nAddress(\"0x0000000000000000000000000000000000000000\")\nAddress(0)\n</code></pre> <p>The hex string does not have to be EIP-55 compliant.</p> <p>Addresses can be compared with each other:</p> <pre><code>from woke.testing import Address\nassert Address(1) &gt; Address(0)\n</code></pre>"},{"location":"testing-framework/accounts-and-addresses/#accounts","title":"Accounts","text":"<p><code>Account</code> is an <code>Address</code> bound to a specific <code>Chain</code>. It can be constructed from an <code>Address</code>, a hex string or an integer. Optionally, a chain can be specified, otherwise the <code>default_chain</code> global object is used:</p> <pre><code>from woke.testing import Account, Chain, default_chain\nother_chain = Chain()\nassert Account(0) == Account(0, default_chain)\nassert Account(0) != Account(0, other_chain)\n</code></pre> <p><code>Address</code> and <code>Account</code> instances cannot be compared with each other. <code>Account</code> instances belonging to different chains cannot be compared using the <code>&lt;</code> and <code>&gt;</code> operators.</p> <p>Using accounts belonging to different chains</p> <p>To save users from accidentally using accounts belonging to different chains, Woke testing framework does not accept <code>Account</code> instances belonging to different chains in most API functions. To overcome this limitation, it is possible to use the <code>address</code> property of an <code>Account</code> instance.</p>"},{"location":"testing-framework/accounts-and-addresses/#importing-accounts-and-addresses","title":"Importing accounts and addresses","text":"<p><code>Account</code> and <code>Address</code> instances can be imported from a private key:</p> <pre><code>from woke.testing import Account, Address\nAccount.from_key(\"0x\" + \"a\" * 64)\nAddress.from_key(\"0x\" + \"a\" * 64)\n</code></pre> <p>From a mnemonic:</p> <pre><code>from woke.testing import Account, Address\nAccount.from_mnemonic(\" \".join([\"test\"] * 11 + [\"junk\"]))\nAddress.from_mnemonic(\" \".join([\"test\"] * 11 + [\"junk\"]))\n</code></pre> <p>Or from an alias (see Managing accounts with private keys):</p> <pre><code>from woke.testing import Account, Address\nAccount.from_alias(\"alice\")\nAddress.from_alias(\"alice\")\n</code></pre> <p>It is also possible to create a new account with a random private key:</p> <pre><code>from woke.testing import Account\nAccount.new()\n</code></pre> <p>In all of the above cases, a private key is stored together with the account and can be used to sign transactions or messages.</p>"},{"location":"testing-framework/accounts-and-addresses/#signing-messages","title":"Signing messages","text":"<p><code>Account</code> instances can be used to sign messages. This is only possible if the account has a known private key. The private key must be imported using one of the methods described in the previous section or must be owned by the client (the account must be present in <code>chain.accounts</code>).</p>"},{"location":"testing-framework/accounts-and-addresses/#signing-raw-messages","title":"Signing raw messages","text":"<p>Using <code>account.sign(message)</code> it is possible to sign any message in the form of bytes:</p> <pre><code>from woke.testing import Account\naccount = Account.from_mnemonic(\" \".join([\"test\"] * 11 + [\"junk\"]))\nsignature = account.sign(b\"Hello, world!\")\n</code></pre> <p>The message is signed according to the EIP-191 standard (version <code>0x45</code>).</p>"},{"location":"testing-framework/accounts-and-addresses/#signing-structured-messages","title":"Signing structured messages","text":"<p>Using <code>account.sign_structured(message)</code> it is possible to sign structured messages.</p> <pre><code>from woke.testing import *\nfrom dataclasses import dataclass\n@dataclass\nclass Transfer:\nsender: Address\nrecipient: Address\namount: uint256\naccount = Account.from_mnemonic(\" \".join([\"test\"] * 11 + [\"junk\"]))\nsignature = account.sign_structured(\nTransfer(\nsender=account.address,\nrecipient=Address(1),\namount=10,\n),\ndomain=Eip712Domain(\nname=\"Test\",\nchainId=default_chain.chain_id,\n)\n)\n</code></pre> <p>See EIP-712 for more information.</p>"},{"location":"testing-framework/accounts-and-addresses/#signing-message-hash","title":"Signing message hash","text":"<p>While it is not recommended to sign message hashes directly, it is sometimes necessary. To sign a message hash, use <code>account.sign_hash(message_hash)</code>.</p> <pre><code>from woke.testing import *\naccount = Account.from_mnemonic(\" \".join([\"test\"] * 11 + [\"junk\"]))\nsignature = account.sign_hash(keccak256(b\"Hello, world!\"))\n</code></pre> <p>Note</p> <p><code>account.sign_hash</code> is not available for accounts owned by the client.</p> <p>Warning</p> <p>Always sign a message hash only if you know the original message.</p>"},{"location":"testing-framework/accounts-and-addresses/#assigning-labels","title":"Assigning labels","text":"<p><code>Account</code> instances can be assigned labels. Labels override the default string representation of the account:</p> <pre><code>from woke.testing import Account\naccount = Account(0)\naccount.label = \"ZERO\"\n</code></pre> <p>Setting the label to <code>None</code> removes the label.</p>"},{"location":"testing-framework/accounts-and-addresses/#account-properties","title":"Account properties","text":"<p><code>Account</code> instances have the following properties:</p> Property Description <code>address</code> <code>Address</code> of the account <code>balance</code> balance of the account in Wei <code>chain</code> <code>Chain</code> the account is bound to <code>code</code> code of the account <code>label</code> string label of the account <code>nonce</code> nonce of the account <code>private_key</code> private key of the account (if known) <p>Except for <code>address</code>, <code>chain</code> and <code>private_key</code>, all properties can be assigned to. <code>nonce</code> can only be incremented.</p>"},{"location":"testing-framework/accounts-and-addresses/#low-level-calls-and-transactions","title":"Low-level calls and transactions","text":"<p>Each <code>Account</code> instance has <code>call</code>, <code>transact</code>, <code>estimate</code> and <code>access_list</code> methods that can be used to perform arbitrary requests (see Interacting with contracts).</p> <pre><code>from woke.testing import *\n@default_chain.connect()\ndef test_accounts():\nalice = default_chain.accounts[0]\nbob = default_chain.accounts[1]\nalice.balance = 100\nbob.balance = 0\nbob.transact(value=10, from_=alice)\nassert alice.balance == 90\nassert bob.balance == 10\n</code></pre> <p>The previous example shows how to transfer Wei from one account to another.</p>"},{"location":"testing-framework/accounts-and-addresses/#contract-accounts","title":"Contract accounts","text":"<p>Contract accounts are accounts that have non-empty code. Everything that applies to <code>Account</code> instances also applies to contract accounts. However, contract accounts have additional methods:</p> <ul> <li><code>get_creation_code</code> - returns the code used to deploy the contract, may require addresses of libraries needed by the contract,</li> <li><code>deploy</code> - deploys the contract, requires equivalent arguments as the constructor of the contract in Solidity,</li> <li>other contract-specific methods generated in <code>pytypes</code>, including getters for public state variables.</li> </ul> <pre><code>from pytypes.contracts.Counter import Counter\nassert len(Counter.get_creation_code()) &gt; 0\nprint(Counter.setCount.selector.hex())\n</code></pre> <p>Every method of a contract generated in <code>pytypes</code> has a <code>selector</code> property.</p> <p>Constructing contracts from an address</p> <p>The ability to construct a contract from an address (and an optional <code>Chain</code> instance) can be very useful when interacting with contracts through proxies:</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\nfrom pytypes.openzeppelin.contracts.proxy.ERC1967.ERC1967Proxy import ERC1967Proxy\n@default_chain.connect()\ndef test_proxy():\ndefault_chain.default_tx_account = default_chain.accounts[0]\nimpl = Counter.deploy()\nproxy = ERC1967Proxy.deploy(impl, b\"\")\n# behave as if Counter was deployed at proxy.address\ncounter = Counter(proxy.address)\ncounter.increment()\nassert counter.count() == 1\n</code></pre>"},{"location":"testing-framework/chains-and-blocks/","title":"Chains and blocks","text":"<p>For single chain tests, Woke provides the global <code>default_chain</code> variable. This variable is a <code>Chain</code> object that can be used to change the chain parameters or access the chain data. Other <code>Chain</code> instances can be created, which is useful in Cross-chain testing.</p>"},{"location":"testing-framework/chains-and-blocks/#chain-properties","title":"Chain properties","text":"<p>The <code>Chain</code> object has the following properties:</p> Property Description <code>accounts</code> list of <code>Account</code> objects owned by the client (private keys are known to the client) <code>automine</code> whether to automatically mine blocks <code>blocks</code> property to access the chain blocks <code>block_gas_limit</code> gas limit of the pending block <code>chain_id</code> chain ID <code>chain_interface</code> low-level chain interface useful for debugging and power users <code>client_version</code> client version as reported by the <code>web3_clientVersion</code> JSON-RPC method <code>coinbase</code> coinbase <code>Account</code> <code>connected</code> whether the chain is connected <code>default_access_list_account</code> default <code>Account</code> used for access list creation requests <code>default_call_account</code> default <code>Account</code> used for calls <code>default_estimate_account</code> default <code>Account</code> used for gas estimations <code>default_tx_account</code> default <code>Account</code> used for transactions <code>default_tx_confirmations</code> default number of confirmations (mined blocks) needed before a transaction object is returned <code>default_tx_type</code> default transaction type (0, 1, or 2) used when sending transactions <code>gas_price</code> gas price used for all type 0 and type 1 transactions sent to the chain <code>max_priority_fee_per_gas</code> max priority fee per gas used for all type 2 transactions sent to the chain <code>require_signed_transactions</code> whether to send signed transactions or unsigned transactions <code>txs</code> dictionary of transaction objects indexed by transaction hash (a string starting with <code>0x</code>) <code>tx_callback</code> callback function to be called when a transaction is mined; applies only to <code>return_tx=False</code> transactions <p><code>automine</code>, <code>block_gas_limit</code>, <code>coinbase</code>, <code>default_call_account</code>, <code>default_tx_account</code>, <code>gas_price</code>, and <code>tx_callback</code> can be assigned to.</p>"},{"location":"testing-framework/chains-and-blocks/#chain-methods","title":"Chain methods","text":"<p>The <code>Chain</code> object has the following methods:</p> Method Description <code>change_automine</code> context manager to temporarily change the <code>automine</code> property <code>connect</code> context manager to launch a chain and connect to it or connect to an already running chain <code>mine</code> mine a block with an optional callback function to set the next block timestamp <code>mine_many</code> mine multiple blocks with an optional timestamp delta between blocks <code>reset</code> reset the chain to its initial state <code>revert</code> revert the chain to a previous state given by a snapshot ID <code>set_default_accounts</code> set the default accounts for <code>tx</code>, <code>call</code>, <code>estimate</code>, and <code>access_list</code> requests at once <code>set_min_gas_price</code> set the minimum gas price accepted by the chain <code>set_next_block_base_fee_per_gas</code> set the base fee per gas for the next block <code>set_next_block_timestamp</code> set the timestamp of the next block <code>snapshot</code> take a snapshot of the chain state; return a snapshot ID <code>snapshot_and_revert</code> context manager to take a snapshot and revert to it after the context ends <code>update_accounts</code> update the accounts list <p>It is recommended to use the context managers <code>change_automine</code> and <code>snapshot_and_revert</code> instead of setting the <code>automine</code> property directly or calling <code>snapshot</code> and <code>revert</code> manually.</p> <p>The following example presents the use of <code>Chain</code> methods:</p> <pre><code>from woke.testing import default_chain\ndef test_chain():\n# launch a chain and connect to it\nwith default_chain.connect(), default_chain.snapshot_and_revert():\n# mine a block with the timestamp 1 greater than the previous block\ndefault_chain.mine(lambda x: x + 1)\n</code></pre> <p>All <code>Chain</code> context managers can be used as decorators:</p> <pre><code>from woke.testing import default_chain\n@default_chain.connect()\n@default_chain.snapshot_and_revert()\n@default_chain.change_automine(False)\ndef test_chain():\n# mine a block with the timestamp 1 greater than the previous block\ndefault_chain.mine(lambda x: x + 1)\n</code></pre>"},{"location":"testing-framework/chains-and-blocks/#connect-keyword-arguments","title":"<code>connect</code> keyword arguments","text":"<p>The <code>connect</code> context manager accepts keyword arguments that can override the command line arguments set in configuration files:</p> Keyword argument Description Default value <code>accounts</code> number of accounts to generate <code>None</code> (do not override) <code>chain_id</code> chain ID assigned to the chain <code>None</code> (do not override) <code>fork</code> URL of the chain to fork from <code>None</code> (do not override) <code>hardfork</code> hardfork to use <code>None</code> (do not override) <code>min_gas_price</code> minimum gas price accepted by the chain <code>0</code> <code>block_base_fee_per_gas</code> base fee per gas for the next block <code>0</code> <p>Warning</p> <p><code>connect</code> keyword arguments can only be used when launching a new development chain. Also, it is not possible to set these keyword arguments when working with Hardhat.</p> <pre><code>from woke.testing import default_chain\n@default_chain.connect(\naccounts=15,\nchain_id=1020,\n)\ndef test_chain():\nassert len(default_chain.accounts) == 15\nassert default_chain.chain_id == 1020\n</code></pre>"},{"location":"testing-framework/chains-and-blocks/#accessing-chain-blocks","title":"Accessing chain blocks","text":"<p>The <code>chain.blocks</code> property can be used to access up-to-date chain blocks data. It can be indexed by an integer or string literals <code>latest</code>, <code>pending</code>, <code>earliest</code>, <code>safe</code>, and <code>finalized</code>:</p> <pre><code>from woke.testing import default_chain\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_chain_blocks():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\n# get the block 0\nblock0 = default_chain.blocks[0]\n# block 0 and earliest are the same\nassert block0 == default_chain.blocks[\"earliest\"]\ncounter = Counter.deploy()\n# find the first block with non-zero transactions count\nblock = next(block for block in default_chain.blocks if len(block.txs) &gt; 0)\nassert block.txs[0].return_value == counter\nwith default_chain.change_automine(False):\n# block -1 and latest are the same\nassert default_chain.blocks[-1] == default_chain.blocks[\"latest\"]\ntx = counter.increment(confirmations=0)\n# pending block contains the transaction\nassert tx in default_chain.blocks[\"pending\"].txs\n</code></pre>"},{"location":"testing-framework/chains-and-blocks/#block-properties","title":"Block properties","text":"<p>The following table lists the most important block properties:</p> Property Description <code>chain</code> chain the block belongs to <code>hash</code> block hash <code>number</code> block number <code>parent_hash</code> parent block hash <code>miner</code> miner <code>Account</code> of the block <code>gas_used</code> amount of gas used in the block <code>gas_limit</code> block gas limit <code>timestamp</code> block timestamp <code>txs</code> list of transaction objects in the block sorted by transaction index"},{"location":"testing-framework/coverage-analysis/","title":"Coverage analysis","text":"<p>Woke supports code coverage analysis of both Python test scripts and Solidity contracts.</p>"},{"location":"testing-framework/coverage-analysis/#python-scripts-coverage","title":"Python scripts coverage","text":"<p>In order to measure coverage of Python scripts executed using <code>woke test</code>, the <code>pytest-cov</code> plugin can be used.</p> <pre><code>pip3 install pytest-cov\n</code></pre> <p>To analyze scripts located in the <code>tests</code> directory, run:</p> <pre><code>$ woke test -- --cov=tests\n\n---------- coverage: platform linux, python 3.7.12-final-0 -----------\nName                                 Stmts   Miss  Cover\n--------------------------------------------------------\ntests/__init__.py                        0      0   100%\ntests/test_counter.py                   36      4    89%\ntests/test_counter_fuzz.py              34      0   100%\ntests/test_counter_fuzz_failing.py      23      4    83%\ntests/test_crosschain.py                63      0   100%\n--------------------------------------------------------\nTOTAL                                  156      8    95%\n</code></pre> <p>Note that the <code>--</code> is required to separate the arguments passed to <code>woke</code> from the arguments passed to <code>pytest</code>.</p> <p>Info</p> <p>There is no such option for <code>woke fuzz</code> since it does not use <code>pytest</code> internally.</p>"},{"location":"testing-framework/coverage-analysis/#solidity-contracts-coverage","title":"Solidity contracts coverage","text":"<p>Woke comes with a built-in coverage analysis module that can be activated by passing the <code>--coverage</code> flag and, in the case of <code>woke fuzz</code>, an optional number of processes to collect coverage data from.</p> <pre><code>woke test --coverage\n</code></pre> <p>By passing the <code>--coverage</code> flag to <code>woke fuzz</code> without specifying the number of processes, the coverage analysis is performed for all fuzzing processes. <pre><code>woke fuzz -n 4 --coverage 2\n</code></pre></p> <p>There are some limitations to this coverage analysis:</p> <ul> <li>code coverage can be inaccurate when analyzing a project with the solc optimizer enabled,</li> <li>multiple executions of the same function in the same transaction/call are counted as a single execution,</li> <li><code>call</code> requests (default for <code>pure</code> and <code>view</code> functions) are not included in the coverage analysis with Ganache and Hardhat,</li> <li>code coverage introduces a significant overhead in the execution time of the tests.</li> </ul> <p>By enabling the coverage collection, a <code>woke-coverage.cov</code> file is generated in the current directory. To analyze this file, install Tools for Solidity, a VS Code extension that can be used to visualize the coverage of Solidity contracts directly in the editor. With the extension installed, execute the <code>Tools for Solidity: Show Coverage</code> command to open the coverage report.</p> <p></p> <p>The coverage report is updated automatically when the <code>woke-coverage.cov</code> file is modified. To hide the coverage report, execute the <code>Tools for Solidity: Hide Coverage</code> command.</p> <p>Warning</p> <p>Contents of Solidity source files must not be modified since the last generation of <code>pytypes</code>, otherwise the coverage highlighting may be rendered incorrectly.</p>"},{"location":"testing-framework/cross-chain-testing/","title":"Cross-chain testing","text":"<p>Woke testing framework supports testing multichain solutions. The API remains the same as for single-chain solutions. The only difference is that a <code>Chain</code> instance must be created for each chain. This instance must be passed to all API functions that accept a <code>chain</code> keyword argument.</p> <p><code>chain</code> must be specified in the following cases:</p> <ul> <li>when deploying a contract (e.g. <code>Counter.deploy(chain=chain1)</code>),</li> <li>when creating an <code>Account</code> instance (e.g. <code>Account(random_address(), chain=chain1)</code>),<ul> <li>including contract instances (e.g. <code>IERC20(erc20, chain=chain1)</code>),</li> </ul> </li> <li>with <code>random_account()</code> (e.g. <code>random_account(chain=chain1)</code>).</li> </ul> <p>Cross-chain testing and <code>default_chain</code></p> <p>It is highly recommended not to use the <code>default_chain</code> global variable in cross-chain tests. Leaving it unconnected helps to find bugs in the code when <code>chain</code> was forgotten to be passed to a function.</p> <p>In this case, <code>NotConnectedError: Not connected to a chain</code> is raised.</p> <p>It is not possible to use <code>Account</code> instances bound to different chains than the chain being interacted with. This is done to prevent accidental misuse of accounts.</p> <pre><code>from woke.testing import *\nfrom woke.testing.fuzzing import random_account\nfrom pytypes.contracts.Counter import Counter\nchain1 = Chain()\nchain2 = Chain()\n@chain1.connect()\n@chain2.connect()\ndef test_cross_chain():\nowner = random_account(chain=chain2)\ncounter1 = Counter.deploy(from_=owner, chain=chain1)\n</code></pre> <p>The above code snippet will raise <code>ValueError: from_ account must belong to the chain</code>.</p> <p>To overcome this limitation, it is possible to use <code>Address</code> of the account instead:</p> <pre><code>counter1 = Counter.deploy(from_=owner.address, chain=chain1)\n</code></pre>"},{"location":"testing-framework/cross-chain-testing/#relaying-events","title":"Relaying events","text":"<p>In production, cross-chain solutions usually emit events on a source chain. The events are captured by a relayer and appropriate actions are taken on the other chain.</p> <p>Cross-chain tests have to simulate this behavior. The next code snippet shows an example of how a relay function can be implemented:</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\nchain1 = Chain()\nchain2 = Chain()\ndef relay(other_counter: Counter, events: List):\nfor event in events:\nif isinstance(event, Counter.Incremented):\nother_counter.increment()\nelif isinstance(event, Counter.Decremented):\nother_counter.decrement()\nelif isinstance(event, Counter.CountSet):\nother_counter.setCount(event.count)\n@chain1.connect()\n@chain2.connect()\ndef test_relay():\nchain1.default_tx_account = chain1.accounts[0]\nchain2.default_tx_account = chain2.accounts[0]\ncounter1 = Counter.deploy(chain=chain1)\ncounter2 = Counter.deploy(chain=chain2)\ntx = counter1.increment()\nrelay(counter2, tx.events)\nassert counter2.count() == 1\ntx = counter2.decrement()\nrelay(counter1, tx.events)\nassert counter1.count() == 0\ntx = counter1.setCount(5)\nrelay(counter2, tx.events)\nassert counter2.count() == 5\n</code></pre> <p>A slightly different approach can be to register <code>tx_callback</code> on both chains and implement the relay logic there.</p>"},{"location":"testing-framework/debugging/","title":"Debugging","text":""},{"location":"testing-framework/debugging/#using-python-debugger","title":"Using Python debugger","text":"<p>Both commands <code>woke test</code> and <code>woke fuzz</code> support entering pdb, the Python debugger, when an error occurs. Woke uses an enhanced version of the Python debugger, ipdb, which provides a more user-friendly interface.</p> <p>It is also possible to enter the debugger manually by inserting a <code>breakpoint()</code> statement in the code.</p> <pre><code>from woke.testing import *\n@default_chain.connect()\ndef test_breakpoint():\nbreakpoint()\nblock = default_chain.blocks[0]\n</code></pre> <p>Info</p> <p><code>breakpoint()</code> is not currently supported with <code>woke fuzz</code>.</p> <p>Inside ipdb, any expression can be evaluated by typing it and pressing <code>Enter</code>. This can be used to get the value of a variable, to call a function, including contract functions, or even to deploy a new contract.</p> <p>Useful commands:</p> <ul> <li><code>h</code> or <code>help</code>: show help</li> <li><code>c</code> or <code>continue</code>: continue execution</li> <li><code>n</code> or <code>next</code>: step over the next line</li> <li><code>l</code> or <code>list</code>: show the current line and a few lines around it</li> <li><code>q</code> or <code>quit</code>: quit the debugger</li> <li><code>up</code> or <code>down</code>: move up or down the call stack</li> </ul>"},{"location":"testing-framework/debugging/#call-traces","title":"Call traces","text":"<p>Every transaction object has a <code>call_trace</code> property that visualizes the call stack of the transaction. It can be used to debug failing transactions.</p> <p>External contracts in forking mode</p> <p>When using forking mode (see <code>connect</code> keyword arguments), already present contracts are printed as unknown contracts in call traces. To show contract and function names, configure your API key for a given chain explorer.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\nfrom pytypes.contracts.Gateway import Gateway\n@default_chain.connect()\ndef test_call_trace():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\ngateway = Gateway.deploy()\ncounter = Counter.deploy()\ncounter.addToWhitelist(gateway)\ntx = gateway.execute(\ncounter,\nAbi.encode_call(counter.decrement, []),\nconfirmations=0,\n)\nprint(tx.call_trace)\ntx = gateway.execute(\ncounter,\nAbi.encode_call(counter.increment, []),\n)\nprint(tx.call_trace)\n</code></pre> Woke Gateway.execute('0xe7f1725e77...43e90bb3f0512',\u00a0b'+\\xae\\xce\\xb7')\u2717 \u2514\u2500\u2500\u00a0Counter.decrement()\u2717 Gateway.execute('0xe7f1725e77...43e90bb3f0512',\u00a0b'\\xd0\\x9d\\xe0\\x8a')\u2713 \u2514\u2500\u2500\u00a0Counter.increment()\u2713 \u2514\u2500\u2500\u00a0console.log('Incremented\u00a0count\u00a0to',\u00a01)\u2713[STATICCALL] <p>Info</p> <p>Internal calls are not currently visualized in call traces.</p>"},{"location":"testing-framework/debugging/#console-logs","title":"Console logs","text":"<p>Using the <code>console.sol</code> library from Hardhat may be the easiest way to debug a contract. Logs can be accessed through the <code>console_logs</code> property of a transaction object. Console logs are available even for failed transactions.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_console_logs():\ndefault_chain.tx_callback = lambda tx: print(tx.console_logs)\ndefault_chain.set_default_accounts(default_chain.accounts[0])\ncounter = Counter.deploy()\ncounter.increment()\ncounter.setCount(42)\n</code></pre> <p>Woke-integrated <code>console.sol</code></p> <p>Woke integrates the <code>console.sol</code> library implementing the same functionalities as Hardhat's <code>console.sol</code>. It can serve as a drop-in replacement in case that the tested project is not using Hardhat.</p> <pre><code>import \"woke/console.sol\";\ncontract MyContract {\nfunction myFunction() public view {\nconsole.log(\"Hello world!\");\n}\n}\n</code></pre> <p>Info</p> <p>Accessing transaction <code>console_logs</code> is not currently supported with Hardhat and Ganache.</p>"},{"location":"testing-framework/deployment/","title":"Deployment","text":""},{"location":"testing-framework/deployment/#differences-from-testing","title":"Differences from testing","text":"<p>Most information about testing is applicable to deployment as well. However, there are a few key differences. The behavior depends on whether <code>woke.testing</code> or <code>woke.deployment</code> is imported.</p> <p><code>woke.deployment</code> should be used when interacting with a live chain (testnet or mainnet). <code>woke.testing</code> should be used when interacting with a local development chain (like Anvil, Ganache, or Hardhat).</p> <pre><code># use woke.deployment when interacting with a live chain\nfrom woke.deployment import *\n# use woke.testing when interacting with a local development chain\nfrom woke.testing import *\n</code></pre>"},{"location":"testing-framework/deployment/#chainconnect-keyword-arguments","title":"<code>chain.connect</code> keyword arguments","text":"<p>The context manager <code>chain.connect</code> takes <code>min_gas_price</code> and <code>block_base_fee_per_gas</code> keyword arguments. In testing, these are set to <code>0</code> by default. In deployment, these are set to <code>None</code> by default.</p>"},{"location":"testing-framework/deployment/#required-signed-transactions","title":"Required signed transactions","text":"<p>In testing, transactions are not required to be signed for performance reasons. In deployment, transactions are required to be signed by default. That is, <code>chain.require_signed_transactions</code> is <code>True</code> by default.</p>"},{"location":"testing-framework/deployment/#chainblock_gas_limit","title":"<code>chain.block_gas_limit</code>","text":"<p>In testing, the value of <code>chain.block_gas_limit</code> is cached for performance reasons. In deployment, the value is always fetched from the chain for the current <code>pending</code> block.</p>"},{"location":"testing-framework/deployment/#chaingas_price","title":"<code>chain.gas_price</code>","text":"<p><code>chain.gas_price</code> is a constant value in testing and can be modified by the user. In deployment, <code>chain.gas_price</code> is a value returned by the <code>eth_gasPrice</code> JSON-RPC method.</p>"},{"location":"testing-framework/deployment/#chainmax_priority_fee_per_gas","title":"<code>chain.max_priority_fee_per_gas</code>","text":"<p><code>chain.max_priority_fee_per_gas</code> is a constant value in testing and can be modified by the user. In deployment, <code>chain.max_priority_fee_per_gas</code> is a value returned by the <code>eth_maxPriorityFeePerGas</code> JSON-RPC method.</p>"},{"location":"testing-framework/deployment/#managing-accounts-with-private-keys","title":"Managing accounts with private keys","text":"<p>While it is possible to import accounts from a private key or mnemonic phrase at runtime, it is not recommended. To protect your private keys, it should be encrypted and stored in a file. To do this, use <code>woke accounts</code> CLI commands.</p> <pre><code>$ woke accounts --help\n\n Usage: woke accounts [OPTIONS] COMMAND [ARGS]...                          \n Run Woke accounts manager.                                                \n\u256d\u2500 Options \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 --help      Show this message and exit.                                 \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n\u256d\u2500 Commands \u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256e\n\u2502 export    Export an account's private key.                              \u2502\n\u2502 import    Import an account from a private key or mnemonic.             \u2502\n\u2502 list      List all accounts.                                            \u2502\n\u2502 new       Create a new account.                                         \u2502\n\u2502 remove    Remove an account.                                            \u2502\n\u2570\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u2500\u256f\n</code></pre> <p>Accounts are referenced by their alias, which is a unique identifier, string, defined by the user. Accounts can be imported by their alias in scripts:</p> <pre><code>a = Account.from_alias(\"my-account\")\n</code></pre>"},{"location":"testing-framework/deployment/#writing-deployment-scripts","title":"Writing deployment scripts","text":"<p><code>woke.deployment</code> module can be imported in test files. This can be useful when both interacting with a live chain and pytest features like fixtures are needed. This way, integration tests can be written using the same conventions as unit tests.</p> <p>To distinguish between tests and deployment scripts, it is possible to execute Python scripts using the <code>woke run</code> CLI command. The Python scripts must define a <code>main</code> function, which will be executed when the script is run.</p> <p>When no arguments are passed to <code>woke run</code>, the <code>scripts</code> directory is searched for Python scripts.</p> scripts/deploy.py<pre><code>from woke.deployment import *\nfrom pytypes.contracts.Counter import Counter\nALCHEMY_API_KEY = \"YOUR_ALCHEMY_API_KEY\"\n@default_chain.connect(f\"wss://eth-mainnet.g.alchemy.com/v2/{ALCHEMY_API_KEY}\")\ndef main():\nacc = Account.from_alias(\"deployment\")\ndefault_chain.set_default_accounts(acc)\ncounter = Counter.deploy()\nprint(counter)\ncounter.increment()\nassert counter.count() == 1\n</code></pre> <p>And then run the script:</p> <pre><code>woke run scripts/deploy.py\n</code></pre>"},{"location":"testing-framework/deployment/#supported-chains","title":"Supported chains","text":"<p>The following chains are supported (mainnets and testnets):</p> <ul> <li>Ethereum</li> <li>Binance Smart Chain</li> <li>Polygon</li> <li>Avalanche</li> <li>Arbitrum</li> <li>Polygon zkEVM</li> <li>Optimism</li> <li>Base</li> </ul>"},{"location":"testing-framework/events-and-errors/","title":"Events and errors","text":"<p>Woke testing framework provides a way to test events and errors emitted by the tested contract.</p>"},{"location":"testing-framework/events-and-errors/#events","title":"Events","text":"<p>Every Solidity event definition is translated into a Python dataclass with the same name and attributes as the event parameters.</p> <pre><code>event Transfer(\naddress indexed from,\naddress indexed to,\nuint256 value\n);\n</code></pre> <p>In this case, <code>from</code> is a reserved keyword in Python, so it is renamed to <code>from_</code> in the dataclass.</p> <pre><code>@dataclass\nclass Transfer:\n\"\"\"\n    Attributes:\n        from_ (Address): indexed address\n        to (Address): indexed address\n        value (uint256): uint256\n    \"\"\"\n_abi = {'anonymous': False, 'inputs': [{'indexed': True, 'internalType': 'address', 'name': 'from', 'type': 'address'}, {'indexed': True, 'internalType': 'address', 'name': 'to', 'type': 'address'}, {'indexed': False, 'internalType': 'uint256', 'name': 'value', 'type': 'uint256'}], 'name': 'Transfer', 'type': 'event'}\nselector = b'\\xdd\\xf2R\\xad\\x1b\\xe2\\xc8\\x9bi\\xc2\\xb0h\\xfc7\\x8d\\xaa\\x95+\\xa7\\xf1c\\xc4\\xa1\\x16(\\xf5ZM\\xf5#\\xb3\\xef'\nfrom_: Address\nto: Address\nvalue: uint256\n</code></pre>"},{"location":"testing-framework/events-and-errors/#accessing-events","title":"Accessing events","text":"<p>Events can be accessed using the <code>events</code> property of transaction objects:</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_events():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\ncounter = Counter.deploy()\ntx = counter.increment()\nassert tx.events == [Counter.Incremented()]\n</code></pre> <p>Or in <code>tx_callback</code>:</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\ndef tx_callback(tx: TransactionAbc):\nfor event in tx.events:\nif isinstance(event, Counter.CountSet):\nprint(f\"Count of Counter({tx.to}) was set to {event.count}\")\n@default_chain.connect()\ndef test_events():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\ndefault_chain.tx_callback = tx_callback\ncounter = Counter.deploy()\ncounter.setCount(42)\n</code></pre> <p><code>tx.events</code> may also contain <code>UnknownEvent</code> instances for events that cannot be recognized from the contract ABI.</p> <p>How Solidity events are encoded</p> <p><code>UnknownEvent</code> instances contain the <code>topics</code> and <code>data</code> fields. <code>topics</code> is a list of 32-byte entries where the first entry matches the selector of the event (i.e. Keccak-256 of the event signature). <code>indexed</code> parameters of the event are encoded in the <code>topics[1:]</code> sublist in the same order as they appear in the event definition. Other parameters are ABI-encoded in the <code>data</code> field.</p> <p>Accessing raw events</p> <p>Transaction objects also offer the <code>raw_events</code> property with a list of <code>UnknownEvent</code> instances for all events. Accessing <code>raw_events</code> can be more efficient than accessing <code>events</code>.</p>"},{"location":"testing-framework/events-and-errors/#errors","title":"Errors","text":"<p>Solidity user-defined errors are translated into Python dataclasses and inherit from <code>TransactionRevertedError</code> which inherits from <code>Exception</code>. <code>TransactionRevertedError</code> also has a <code>tx</code> field that contains a transaction object for the transaction that caused the error. The <code>tx</code> field is set to <code>None</code> if the reverted request was not a transaction.</p> <p><code>pytypes</code> for unused errors are not generated.</p> <pre><code>error NotEnoughFunds(\nuint256 requested,\nuint256 available\n);\n</code></pre> <pre><code>@dataclass\nclass NotEnoughFunds(TransactionRevertedError):\n\"\"\"\n    Attributes:\n        requested (uint256): uint256\n        available (uint256): uint256\n    \"\"\"\n_abi = {'inputs': [{'internalType': 'uint256', 'name': 'requested', 'type': 'uint256'}, {'internalType': 'uint256', 'name': 'available', 'type': 'uint256'}], 'name': 'NotEnoughFunds', 'type': 'error'}\nselector = b'\\x8c\\x90Sh'\nrequested: uint256\navailable: uint256\n</code></pre>"},{"location":"testing-framework/events-and-errors/#accessing-errors","title":"Accessing errors","text":"<p>Revert errors are automatically raised in form of exceptions unless a transaction configured to return immediately with <code>confirmations=0</code>.</p> <p>In case of <code>confirmations=0</code>, a revert error can be accessed using the <code>error</code> property of the transaction object. This performs an implicit <code>.wait()</code>. If the transaction did not revert, <code>error</code> is <code>None</code>.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_errors():\ncounter = Counter.deploy(from_=default_chain.accounts[0])\ntry:\ncounter.addToWhitelist(\ndefault_chain.accounts[1],\nfrom_=default_chain.accounts[1],\n)\nassert False, \"Should have reverted\"\nexcept TransactionRevertedError as e:\nassert e == Counter.NotOwner()\ntx = e.tx\n</code></pre> <p>Accessing <code>tx.return_value</code> in case of a revert automatically raises <code>tx.error</code>.</p>"},{"location":"testing-framework/events-and-errors/#internal-error-types","title":"Internal error types","text":"<p>There are two types of internal errors in Solidity:</p> <ul> <li><code>Error(string)</code> - a revert error with a string message, e.g. <code>require(false, \"some error\")</code> or <code>revert(\"some error\")</code>,</li> <li><code>Panic(uint256)</code> - a revert error with a numeric code in case of a failed assertion, division by zero, arithmetic underflow/overflow, etc.</li> </ul> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_errors():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\ncounter = Counter.deploy()\ntry:\ncounter.decrement()\nassert False, \"Should have reverted\"\nexcept TransactionRevertedError as e:\nassert e == Panic(PanicCodeEnum.UNDERFLOW_OVERFLOW)\ntx = e.tx\n</code></pre> <p>The full list of panic codes is available in the <code>PanicCodeEnum</code> enum:</p> <pre><code>class PanicCodeEnum(IntEnum):\nGENERIC = 0\n\"Generic compiler panic\"\nASSERT_FAIL = 1\n\"Assert evaluated to false\"\nUNDERFLOW_OVERFLOW = 0x11\n\"Integer underflow or overflow\"\nDIVISION_MODULO_BY_ZERO = 0x12\n\"Division or modulo by zero\"\nINVALID_CONVERSION_TO_ENUM = 0x21\n\"Too big or negative integer for conversion to enum\"\nACCESS_TO_INCORRECTLY_ENCODED_STORAGE_BYTE_ARRAY = 0x22\n\"Access to incorrectly encoded storage byte array\"\nPOP_EMPTY_ARRAY = 0x31\n\".pop() on empty array\"\nINDEX_ACCESS_OUT_OF_BOUNDS = 0x32\n\"Out-of-bounds or negative index access to fixed-length array\"\nTOO_MUCH_MEMORY_ALLOCATED = 0x41\n\"Too much memory allocated\"\nINVALID_INTERNAL_FUNCTION_CALL = 0x51\n\"Called invalid internal function\"\n</code></pre>"},{"location":"testing-framework/events-and-errors/#helper-functions","title":"Helper functions","text":"<p>Woke offers two helper functions (context managers) to handle errors - <code>must_revert</code> and <code>may_revert</code>. Both functions can accept:</p> <ul> <li>no arguments - any <code>TransactionRevertedError</code> is handled,</li> <li>a single error type - either <code>Error</code>, <code>Panic</code> or a user-defined type from <code>pytypes</code></li> <li>a single error instance - an instance of <code>Error</code>, <code>Panic</code> or a user-defined type from <code>pytypes</code>, e.g. <code>Error(\"some error\")</code> or <code>Panic(PanicCodeEnum.UNDERFLOW_OVERFLOW)</code>,<ul> <li>the error raised by the tested contract must exactly match the provided error instance,</li> </ul> </li> <li>a tuple or list of errors - any mix of error types and error instances.</li> </ul> <pre><code>from woke.testing import *\n# handle any Error(str message) or underflow/overflow\nwith must_revert((Error, Panic(PanicCodeEnum.UNDERFLOW_OVERFLOW))) as e:\n# some code that reverts\npass\nprint(e.value)\n# get the transaction object (if any)\ntx = e.value.tx\n</code></pre> <p><code>e.value</code> contains the error instance that was raised by the tested contract, or <code>None</code> if no error was raised.</p> <p>Tip</p> <p>For ease of use, both context managers also accept <code>str</code> and <code>PanicCodeEnum</code> instances directly, e.g. <pre><code>with must_revert(\"some error\")\n</code></pre> or <pre><code>with must_revert(PanicCodeEnum.UNDERFLOW_OVERFLOW)\n</code></pre></p> <p>However, <code>e.value</code> will always be an instance of <code>Error</code> or <code>Panic</code> in this case.</p>"},{"location":"testing-framework/fuzzing/","title":"Fuzzing","text":"<p>Fuzzing is a technique for testing software that involves providing invalid, unexpected, or random data as inputs to a computer program.</p>"},{"location":"testing-framework/fuzzing/#introduction","title":"Introduction","text":"<p>The Woke testing framework provides a <code>FuzzTest</code> class that can be used to write fuzz tests. A <code>FuzzTest</code> can be run using the <code>run</code> method with two required arguments:</p> <pre><code>class CounterTest(FuzzTest):\n...\nCounterTest().run(sequences_count=10, flows_count=100)\n</code></pre> <p>The first argument specifies the number of test sequences to be executed. A sequence is an independent test case - all connected chains are reset after each sequence. Each sequence consists of a given number of flows. A flow is an atomic test step that is executed in a test sequence.</p> <p>The <code>FuzzTest</code> class provides two properties, <code>sequence_num</code> and <code>flow_num</code>, that can be used to obtain the current sequence and flow numbers, both starting from <code>0</code>.</p>"},{"location":"testing-framework/fuzzing/#flows","title":"Flows","text":"<p>A flow is a single test step that is executed in a test sequence. Flows are defined using the <code>@flow</code> decorator:</p> <pre><code>@flow(precondition=lambda self: self.count &gt; 0)\ndef flow_decrement(self) -&gt; None:\nself.counter.decrement(from_=random_account())\nself.count -= 1\n</code></pre> <p>Flow functions must be defined inside a test class that inherits from <code>FuzzTest</code>.</p> <p>The <code>@flow</code> decorator accepts the following keyword arguments:</p> Argument Description <code>weight</code> weight defining probability of the flow being executed in a test sequence; defaults to <code>100</code> <code>max_times</code> maximum number of times the flow can be executed in a test sequence; defaults to <code>None</code> <code>precondition</code> function that accepts a single argument <code>self</code> and returns a boolean value; the flow is executed only if the precondition is <code>True</code> <p>How flow weights work<p>If a flow has a weight of <code>100</code> and another flow has a weight of <code>50</code>, the first flow will be executed twice as often as the second flow.</p> <pre><code>@flow(weight=100)\ndef flow_1(self) -&gt; None:\n...\n@flow(weight=50)\ndef flow_2(self) -&gt; None:\n...\n</code></pre> <p>That means that the probability of <code>flow_1</code> being executed is <code>100 / (100 + 50) = 2/3</code> and the probability of <code>flow_2</code> being executed is <code>50 / (100 + 50) = 1/3</code>.</p> </p>"},{"location":"testing-framework/fuzzing/#invariants","title":"Invariants","text":"<p>An invariant is a test that is executed after each flow in a test sequence. Invariants are defined using the <code>@invariant</code> decorator:</p> <pre><code>@invariant(period=10)\ndef invariant_count(self) -&gt; None:\nassert self.counter.count() == self.count\n</code></pre> <p>An optional <code>period</code> argument can be passed to the <code>@invariant</code> decorator. If specified, the invariant is executed only after every <code>period</code> flows.</p>"},{"location":"testing-framework/fuzzing/#execution-hooks","title":"Execution hooks","text":"<p>Execution hooks are functions that are executed during the <code>FuzzTest</code> lifecycle. This is the list of all available execution hooks:</p> <ul> <li><code>pre_sequence(self)</code> - executed before each test sequence</li> <li><code>pre_flow(self, flow: Callable)</code> - executed before each flow, accepts the flow function to be executed as an argument</li> <li><code>post_flow(self, flow: Callable)</code> - executed after each flow, accepts the flow function that was executed as an argument</li> <li><code>pre_invariants(self)</code> - executed before each set of invariants</li> <li><code>pre_invariant(self, invariant: Callable)</code> - executed before each invariant, accepts the invariant function to be executed as an argument</li> <li><code>post_invariant(self, invariant: Callable)</code> - executed after each invariant, accepts the invariant function that was executed as an argument</li> <li><code>post_invariants(self)</code> - executed after each set of invariants</li> <li><code>post_sequence(self)</code> - executed after each test sequence</li> </ul> <p>The whole <code>FuzzTest</code> lifecycle is visualized in the following diagram:</p>  Chain snapshots createdpre_sequence() \u26a1sequence_num = 0sequence_num &lt; sequences_countflow_num = 0flow_num &lt;flows_countpost_sequence() \u26a1Chain snapshots restoredpre_flow(flow) \u26a1flow()post_flow(flow) \u26a1falseRun invariants?pre_invariants() \u26a1sequence_num++flow_num++DoneAll invariants executed?truepre_invariant(invariant) \u26a1invariant()post_invariant(invariant) \u26a1post_invariants() \u26a1falsefalsetruetruetruefalse"},{"location":"testing-framework/fuzzing/#example","title":"Example","text":"<p>Putting all of the above together, here is an example of a <code>FuzzTest</code> that tests the <code>Counter</code> contract:</p> <pre><code>from woke.testing import *\nfrom woke.testing.fuzzing import *\nfrom pytypes.contracts.Counter import Counter\nclass CounterTest(FuzzTest):\ncounter: Counter\ncount: int\ndef pre_sequence(self) -&gt; None:\nself.counter = Counter.deploy()\nself.count = 0\n@flow()\ndef flow_increment(self) -&gt; None:\nself.counter.increment()\nself.count += 1\n@flow()\ndef flow_decrement(self) -&gt; None:\nwith may_revert(Panic(PanicCodeEnum.UNDERFLOW_OVERFLOW)) as e:\nself.counter.decrement()\nif e.value is None:\nself.count -= 1\nelse:\nassert self.count == 0\n@invariant(period=10)\ndef invariant_count(self) -&gt; None:\nassert self.counter.count() == self.count\n@default_chain.connect()\ndef test_counter():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\nCounterTest().run(sequences_count=30, flows_count=100)\n</code></pre> <p>The test performs 30 test sequences, each consisting of 100 flows. It tests with two flows of the same probability: <code>flow_increment</code> and <code>flow_decrement</code>. The invariant <code>invariant_count</code> is executed after every 10 flows.</p>"},{"location":"testing-framework/fuzzing/#generating-random-data","title":"Generating random data","text":"<p>There are two ways to generate random data in Woke fuzz tests.</p>"},{"location":"testing-framework/fuzzing/#flow-arguments","title":"Flow arguments","text":"<p>Every flow function can accept additional arguments to the implicit <code>self</code>. These arguments are generated based on the type hints:</p> <pre><code>@flow()\ndef flow_set_count(self, count: uint) -&gt; None:\nself.counter.set_count(count, from_=self.counter.owner())\nself.count = count\n</code></pre> <p>Flow argument types can be any of the following:</p> <ul> <li>integer types ranging from <code>uint8</code> to <code>uint256</code> and from <code>int8</code> to <code>int256</code>, including <code>uint</code> and <code>int</code>,</li> <li>byte types ranging from <code>bytes1</code> to <code>bytes32</code>, including <code>bytes</code> and <code>bytearray</code>,</li> <li><code>List</code>, including <code>List1</code> to <code>List32</code> helper annotations (e.g. <code>List16[uint8]</code>),</li> <li><code>bool</code>,</li> <li><code>str</code>,</li> <li><code>Address</code>, does never generate the zero address,</li> <li>any <code>Enum</code>, including enums generated in <code>pytypes</code>,</li> <li>any <code>dataclass</code>, including dataclasses generated in <code>pytypes</code>.</li> </ul> <p>All flow arguments are generated non-biased, i.e. the probability of generating a value of a given type is the same for all values of that type. For types that have length, the length is generated in the range 0 to 64.</p> <p>For generating fine-tuned random data, it is recommended to use the random functions from the <code>woke.testing.fuzzing</code> module.</p>"},{"location":"testing-framework/fuzzing/#random-functions","title":"Random functions","text":"<p>Woke testing framework provides a set of random functions that can be used to generate random data.</p>"},{"location":"testing-framework/fuzzing/#random_account","title":"random_account()","text":"<p><code>random_account()</code> returns a random account from a given chain. It accepts the following keyword arguments:</p> Argument Description Default value <code>lower_bound</code> lower bound index of <code>chain.accounts</code> to choose from <code>0</code> <code>upper_bound</code> upper bound index of <code>chain.accounts</code> to choose from <code>None</code> (i.e. <code>len(chain.accounts)</code>) <code>predicate</code> predicate that the account must satisfy <code>None</code> (i.e. no predicate) <code>chain</code> chain to choose the account from <code>default_chain</code>"},{"location":"testing-framework/fuzzing/#random_address","title":"random_address()","text":"<p><code>random_address()</code> returns a random address. It accepts the following keyword arguments:</p> Argument Description Default value <code>zero_address_prob</code> probability of generating the zero address <code>0</code>"},{"location":"testing-framework/fuzzing/#random_intmin-max","title":"random_int(min, max)","text":"<p><code>random_int(min, max)</code> returns a random integer in the range <code>min</code> to <code>max</code>. It accepts the following keyword arguments:</p> Argument Description Default value <code>min_prob</code> probability of generating <code>min</code> <code>None</code> (i.e. <code>1 / (max - min + 1))</code> <code>max_prob</code> probability of generating <code>max</code> <code>None</code> (i.e. <code>1 / (max - min + 1))</code> <code>zero_prob</code> probability of generating <code>0</code>, if <code>min</code> &lt; <code>0</code> &lt; <code>max</code> <code>None</code> (i.e. <code>1 / (max - min + 1))</code> <code>edge_values_prob</code> value to use for <code>min_prob</code>, <code>max_prob</code> and <code>zero_prob</code> if not set <code>None</code>"},{"location":"testing-framework/fuzzing/#random_bool","title":"random_bool()","text":"<p><code>random_bool()</code> returns a random boolean value. It accepts the following keyword arguments:</p> Argument Description Default value <code>true_prob</code> probability of generating <code>True</code> <code>0.5</code>"},{"location":"testing-framework/fuzzing/#random_stringmin-max","title":"random_string(min, max)","text":"<p><code>random_string(min, max)</code> returns a random string of length in the range <code>min</code> to <code>max</code>. It accepts the following keyword arguments:</p> Argument Description Default value <code>alphabet</code> alphabet to choose characters from <code>string.printable</code> <code>predicate</code> predicate that the string must satisfy <code>None</code> (i.e. no predicate)"},{"location":"testing-framework/fuzzing/#random_bytesmin-max","title":"random_bytes(min, max)","text":"<p><code>random_bytes(min, max)</code> returns a random byte array of length in the range <code>min</code> to <code>max</code>. If <code>max</code> is not specified, it generates exactly <code>min</code> bytes. It accepts the following keyword arguments:</p> Argument Description Default value <code>predicate</code> predicate that the byte array must satisfy <code>None</code> (i.e. no predicate)"},{"location":"testing-framework/fuzzing/#launching-tests-in-parallel","title":"Launching tests in parallel","text":"<p>Woke testing framework allows running the same test in parallel with different random seeds. Multiprocess tests are launched using the <code>woke fuzz</code> command:</p> <pre><code>woke fuzz tests/test_counter_fuzz.py -n 5\n</code></pre> <p>Info</p> <p>The command <code>woke fuzz</code> does not utilize the <code>pytest</code> framework to collect and execute tests. As a consequence, the <code>pytest</code> features like fixtures are not available. Test functions must start with the <code>test</code> prefix. Test classes are not supported.</p> <p>If a test process encounters an error, the user is prompted whether to debug the test or continue fuzzing. While debugging, other processes are still running in the background.</p> <p>By default, nothing but status of each test is printed to the console. Using the <code>--passive</code> flag, the output of the first process is printed to the console. Standard output and standard error of all processes are redirected to the <code>.woke-logs/fuzz</code> directory.</p> <p>Reproducing a failed test</p> <p>For every process, Woke generates a random seed that is used to initialize the random number generator. The seed is printed to the console and can be used to reproduce the test failure:</p> <pre><code>woke fuzz tests/test_counter_fuzz.py -n 5 -s 62061e838798ad0f\n</code></pre> <p>A random seed can be specified using the <code>-s</code> flag. Multiple <code>-s</code> flags are allowed.</p>"},{"location":"testing-framework/getting-started/","title":"Getting started","text":"<p>This guide explains how to run the first test in Woke development and testing framework.</p> <p>Important</p> <p>Before getting started, make sure to have the latest version of a development chain installed.</p> <p>This is especially important in the case of Anvil, because it is under active development. To install the latest version of Anvil, run the following command:</p> <pre><code>foundryup\n</code></pre>"},{"location":"testing-framework/getting-started/#generating-pytypes","title":"Generating pytypes","text":"<p><code>pytypes</code> are Python-native equivalents of Solidity types. They are generated from Solidity source code and used in tests and deployment scripts to interact with smart contracts.</p> <p>The first step is to generate <code>pytypes</code> by running the following command:</p> <pre><code>woke init pytypes -w\n</code></pre> <p>Configuring compilation</p> <p>Woke uses default configuration options that should work for most projects. However, in some cases, it may be necessary to configure the compilation process. For more information, see the Compilation page.</p> <p>This command creates a <code>pytypes</code> directory in the current working directory. The <code>-w</code> flag tells Woke to watch for changes in the smart contracts and automatically regenerate <code>pytypes</code> when a change is detected.</p> <p>When a compilation error occurs, Woke generates <code>pytypes</code> for the contracts that were successfully compiled. <code>pytypes</code> for the contracts that failed to compile are not generated.</p> <p>Name collisions in <code>pytypes</code></p> <p>In some cases, a name of a Solidity types may be a keyword in Python or otherwise reserved name. In such cases, Woke will append an underscore to the name of the type. For example, <code>class</code> will be renamed to <code>class_</code>.</p> <p>This also applies to overloaded functions. For example, if a contract has a function <code>foo</code> that takes an argument of type <code>uint256</code> and another function <code>foo</code> that takes an argument of type <code>uint8</code>, the generated <code>pytypes</code> will contain two functions <code>foo</code> and <code>foo_</code>.</p>"},{"location":"testing-framework/getting-started/#writing-the-first-test","title":"Writing the first test","text":"<p>Tip</p> <p>Solidity source code for all examples in this guide is available in the Woke repository.</p> <p>To collect and execute tests, Woke uses the pytest framework under the hood. The test files should start with <code>test_</code> or end with <code>_test.py</code> to be collected. It is possible to use all the features of the pytest framework like fixtures.</p> <p>The recommended project structure is as follows:</p> <pre><code>.\n\u251c\u2500\u2500 contracts\n\u2502   \u2514\u2500\u2500 Counter.sol\n\u251c\u2500\u2500 pytypes\n\u251c\u2500\u2500 scripts\n\u2502   \u251c\u2500\u2500 __init__.py\n\u2502   \u2514\u2500\u2500 deploy.py\n\u2514\u2500\u2500 tests\n    \u251c\u2500\u2500 __init__.py\n    \u2514\u2500\u2500 test_counter.py\n</code></pre>"},{"location":"testing-framework/getting-started/#connecting-to-a-chain","title":"Connecting to a chain","text":"<p>In single-chain tests, it is recommended to use the <code>default_chain</code> object that is automatically created by Woke. The <code>connect</code> decorator either launches a new development chain or connects to an existing one, if an argument is specified. It is possible to connect using:</p> <ul> <li>a HTTP connection (e.g. <code>http://localhost:8545</code>),</li> <li>a WebSocket connection (e.g. <code>ws://localhost:8545</code>),</li> <li>an IPC socket (e.g. <code>/tmp/anvil.ipc</code>).</li> </ul> <pre><code>from woke.testing import *\n# launch a new development chain\n@default_chain.connect()\n# or connect to an existing chain\n# @default_chain.connect(\"ws://localhost:8545\")\ndef test_counter():\nprint(default_chain.chain_id)\n</code></pre> <p>To run the test, execute the following command:</p> <pre><code>woke test tests/test_counter.py -d\n</code></pre> <p>The <code>-d</code> flag tells Woke to attach the Python debugger on test failures.</p>"},{"location":"testing-framework/getting-started/#deploying-a-contract","title":"Deploying a contract","text":"<p>Every Solidity source file has its equivalent in the <code>pytypes</code> directory. These directories form a module hierarchy that is similar to the one in the <code>contracts</code> directory. The <code>Counter</code> contract from the previous example is available in the <code>pytypes.contracts.Counter</code> module.</p> <p>Every contract has a <code>deploy</code> method that deploys the contract to the chain. The <code>deploy</code> method accepts the arguments that are required by the contract's constructor. Additionally, it accepts keyword arguments that can be used to configure the transaction that deploys the contract. All keyword arguments are described in the Interacting with contracts section.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_example():\ncounter = Counter.deploy(from_=default_chain.accounts[0])\nprint(counter)\n</code></pre>"},{"location":"testing-framework/getting-started/#interacting-with-a-contract","title":"Interacting with a contract","text":"<p>For every public and external function in Solidity source code, Woke generates a Python method in <code>pytypes</code>. These methods can be used to interact with a deployed contract. Generated methods accept the same arguments as the corresponding Solidity functions. Additional keyword arguments can configure the execution of a function like with the <code>deploy</code> method.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_counter():\nowner = default_chain.accounts[0]\nother = default_chain.accounts[1]\ncounter = Counter.deploy(from_=owner)\ncounter.increment(from_=other)\nassert counter.count() == 1\n# setCount can only be called by the owner\ncounter.setCount(10, from_=owner)\nassert counter.count() == 10\n# this will fail because the sender account is not the owner\nwith must_revert():\ncounter.setCount(20, from_=other)\nassert counter.count() == 10\n</code></pre>"},{"location":"testing-framework/helper-functions/","title":"Helper functions","text":"<p>Woke testing framework provides a set of helper functions to make testing easier.</p>"},{"location":"testing-framework/helper-functions/#abi-encoding-and-decoding","title":"ABI encoding and decoding","text":"<p>The <code>Abi</code> class provides functions to encode and decode data according to the ABI specification.</p>"},{"location":"testing-framework/helper-functions/#abiencode","title":"Abi.encode","text":"<p><code>Abi.encode</code> encodes a list of values given a list of types. It returns <code>bytes</code>:</p> <pre><code>from woke.testing import Abi, Address\nAbi.encode(['uint8', 'address'], [0xff, Address(0)])\n</code></pre>"},{"location":"testing-framework/helper-functions/#abiencode_packed","title":"Abi.encode_packed","text":"<p><code>Abi.encode_packed</code> encodes a list of values given a list of types. It returns <code>bytes</code>:</p> <pre><code>from woke.testing import Abi\nAbi.encode_packed(['bytes', 'string'], [b'abc', 'def'])\n</code></pre>"},{"location":"testing-framework/helper-functions/#abiencode_with_selector","title":"Abi.encode_with_selector","text":"<p><code>Abi.encode_with_selector</code> encodes a list of values and a selector given a list of types and the selector. It returns <code>bytes</code>:</p> <pre><code>from woke.testing import Abi\nfrom pytypes.contracts.Counter import Counter\nAbi.encode_with_selector(Counter.setCount.selector, ['uint256'], [0xff])\n</code></pre>"},{"location":"testing-framework/helper-functions/#abiencode_with_signature","title":"Abi.encode_with_signature","text":"<p><code>Abi.encode_with_signature</code> encodes a list of values and a selector given a list of types and a signature. It returns <code>bytes</code>:</p> <pre><code>from woke.testing import Abi\nAbi.encode_with_signature(\"setCount(uint256)\", ['uint256'], [0xff])\n</code></pre> <p>Warning</p> <p>The signature string must conform to the ABI specification. The common mistakes are:</p> <ul> <li><code>uint</code> or <code>int</code> used instead of <code>uint256</code> or <code>int256</code>,</li> <li>return type specified,</li> <li>spaces in the signature string.</li> </ul>"},{"location":"testing-framework/helper-functions/#abiencode_call","title":"Abi.encode_call","text":"<p><code>Abi.encode_call</code> encodes a list of values and a selector given a reference to a function. It returns <code>bytes</code>:</p> <pre><code>from woke.testing import Abi\nfrom pytypes.contracts.Counter import Counter\nAbi.encode_call(Counter.setCount, [0xff])\n</code></pre>"},{"location":"testing-framework/helper-functions/#abidecode","title":"Abi.decode","text":"<p><code>Abi.decode</code> decodes a <code>bytes</code> object given a list of types. It returns a list of values:</p> <pre><code>from woke.testing import Abi\nAbi.decode(['uint8', 'address'], b'\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\xff\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00')\n</code></pre>"},{"location":"testing-framework/helper-functions/#keccak-256","title":"Keccak-256","text":"<p>The <code>keccak256</code> function computes the Keccak-256 hash of a <code>bytes</code> object:</p> <pre><code>from woke.testing import keccak256\nkeccak256(b'abc')\n</code></pre>"},{"location":"testing-framework/helper-functions/#computing-create-and-create2-address","title":"Computing <code>CREATE</code> and <code>CREATE2</code> address","text":"<p>In some cases, it may be useful to compute the address of a contract before it is deployed. Woke testing framework provides three functions to do so.</p>"},{"location":"testing-framework/helper-functions/#get_create_address","title":"get_create_address","text":"<p><code>get_create_address</code> computes the address of a contract deployed in a transaction or in a contract using the <code>CREATE</code> opcode. It accepts a deployer (<code>Account</code>, <code>Address</code> or a hex string address) and its nonce.</p> <pre><code>from woke.testing import Account, get_create_address\ndeployer = Account(1)\nget_create_address(deployer, deployer.nonce)\n</code></pre>"},{"location":"testing-framework/helper-functions/#get_create2_address_from_code","title":"get_create2_address_from_code","text":"<p><code>get_create2_address_from_code</code> computes the address of a contract deployed using the <code>CREATE2</code> opcode. It accepts a deployer (<code>Account</code>, <code>Address</code> or a hex string address), a salt and the contract creation code.</p> <pre><code>from woke.testing import Account, get_create2_address_from_code\nfrom woke.testing.fuzzing import random_bytes\nfrom pytypes.contracts.Counter import Counter\nget_create2_address_from_code(\nAccount(1),\nrandom_bytes(32),\nCounter.get_creation_code()\n)\n</code></pre>"},{"location":"testing-framework/helper-functions/#get_create2_address_from_hash","title":"get_create2_address_from_hash","text":"<p><code>get_create2_address_from_hash</code> computes the address of a contract deployed using the <code>CREATE2</code> opcode. It accepts a deployer (<code>Account</code>, <code>Address</code> or a hex string address), a salt and the hash of the contract creation code.</p> <pre><code>from woke.testing import Account, get_create2_address_from_hash, keccak256\nfrom woke.testing.fuzzing import random_bytes\nfrom pytypes.contracts.Counter import Counter\nget_create2_address_from_hash(\nAccount(1),\nrandom_bytes(32),\nkeccak256(Counter.get_creation_code())\n)\n</code></pre>"},{"location":"testing-framework/helper-functions/#get-logic-contract-from-proxy","title":"Get logic contract from proxy","text":"<p><code>get_logic_contract</code> returns the logic contract <code>Account</code> from a proxy <code>Account</code>. If the input account is not a proxy, it returns the input account.</p> <pre><code>from woke.testing import Account, get_logic_contract\nusdc_proxy = Account(\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\")\nusdc_logic = get_logic_contract(usdc_proxy)\n</code></pre>"},{"location":"testing-framework/helper-functions/#read-write-storage-variable","title":"Read &amp; write storage variable","text":"<p><code>read_storage_variable</code> and <code>write_storage_variable</code> read and write storage variables of a contract. They accept a contract <code>Account</code> and a variable name. Reading and writing whole arrays, structs and mappings currently is not supported. Instead, the <code>keys</code> argument must be used to provide a list of all keys (array and mapping indices, struct member names) needed to access the variable.</p> <p>If the provided contract is a proxy, the variable definition is searched in the logic contract and the proxy storage is used. This behavior can be overridden by setting the <code>storage_layout_contract</code> argument. In this case, the variable definition is searched in the provided <code>storage_layout_contract</code>.</p> <pre><code>from woke.testing import Account, Address, read_storage_variable, write_storage_variable\nusdc_proxy = Account(\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\")\nwrite_storage_variable(usdc_proxy, \"balances\", 1000, keys=[Address(1)])\nassert read_storage_variable(usdc_proxy, \"balances\", keys=[Address(1)]) == 1000\n</code></pre>"},{"location":"testing-framework/helper-functions/#erc-20-mint-and-burn","title":"ERC-20 mint and burn","text":"<p><code>mint_erc20</code> and <code>burn_erc20</code> mint and burn ERC-20 tokens. They detect the <code>totalSupply</code> and <code>balances</code> variables using heuristics and may not work for all contracts. Optionally, <code>balance_slot</code> and <code>total_supply_slot</code> arguments can be used to specify the storage slot where the balance of the given account and the total supply are stored.</p> <pre><code>from woke.testing import Account, mint_erc20, burn_erc20\nfrom pytypes.contracts.IERC20 import IERC20\nusdc_proxy = IERC20(\"0xA0b86991c6218b36c1d19D4a2e9Eb0cE3606eB48\")\nburn_erc20(usdc_proxy, Account(1), usdc_proxy.balanceOf(Account(1)))\nmint_erc20(usdc_proxy, Account(1), 1000)\nassert usdc_proxy.balanceOf(Account(1)) == 1000\n</code></pre>"},{"location":"testing-framework/helper-functions/#decorators","title":"Decorators","text":""},{"location":"testing-framework/helper-functions/#on_revert","title":"on_revert","text":"<p><code>on_revert</code> is a decorator that simplifies handling of revert exceptions. It accepts a callback function that will be called if the decorated function reverts.</p> <pre><code>from woke.testing import *\ndef revert_handler(e: TransactionRevertedError):\nif e.tx is not None:\nprint(e.tx.call_trace)\nprint(e.tx.console_logs)\n@default_chain.connect()\n@on_revert(revert_handler)\ndef test_reverts():\n...\n</code></pre>"},{"location":"testing-framework/interacting-with-contracts/","title":"Interacting with contracts","text":"<p>Contracts can be interacted with either using methods generated in <code>pytypes</code> or using low-level methods.</p>"},{"location":"testing-framework/interacting-with-contracts/#request-types","title":"Request types","text":"<p>There are 4 low-level methods that represent different request types:</p> <ul> <li><code>tx</code> - a request that sends a transaction (even if the function being called does not modify the blockchain state),</li> <li><code>call</code> - a request that returns the return value of the function being called, does not modify the blockchain state (even if the function being called modifies the blockchain state),</li> <li><code>estimate</code> - a request that returns an estimated amount of gas needed to perform the transaction,</li> <li><code>access_list</code> - a request that returns an access list (addresses and storage keys, see EIP-2930) and an estimated amount of gas needed to perform the transaction when the access list is used.</li> </ul> <p>The low-level methods are named <code>.transact()</code>, <code>.call()</code>, <code>.estimate()</code>, and <code>.access_list()</code> respectively. Each request type has its default account used when no <code>from_</code> argument is provided. The default accounts are properties of the <code>Chain</code> object:</p> <ul> <li><code>chain.default_tx_account</code> for <code>tx</code> request type, <code>None</code> by default,</li> <li><code>chain.default_call_account</code> for <code>call</code> request type, set to <code>chain.accounts[0]</code> by default,</li> <li><code>chain.default_estimate_account</code> for <code>estimate</code> request type, <code>None</code> by default,</li> <li><code>chain.default_access_list_account</code> for <code>access_list</code> request type, <code>None</code> by default.</li> </ul> <p>The default accounts can be changed by assigning a new value to the corresponding property or by using the <code>set_default_accounts()</code> method.</p> <pre><code>from woke.testing import *\n@default_chain.connect()\ndef test_accounts():\n# assign each default account manually\ndefault_chain.default_tx_account = default_chain.accounts[0]\n# default_chain.default_call_account is already set to default_chain.accounts[0]\ndefault_chain.default_call_account = default_chain.accounts[0]\ndefault_chain.default_estimate_account = default_chain.accounts[0]\ndefault_chain.default_access_list_account = default_chain.accounts[0]\n# or assign all default accounts at once\ndefault_chain.set_default_accounts(default_chain.accounts[0])\n</code></pre> <p>Note</p> <p>It is recommended to set <code>default_estimate_account</code> and <code>default_access_list_account</code> to the same account as <code>default_tx_account</code> to ensure that the returned gas estimate is accurate.</p> <p>In <code>pytypes</code>, the default request type is <code>tx</code> for non-pure non-view functions and <code>call</code> for pure and view functions.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_accounts():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\ncounter = Counter.deploy()\n# performs a call\ncount = counter.count()\n# sends a transaction\ntx = counter.increment()\n</code></pre> <p>The request type can be changed using the <code>request_type</code> flag.</p> <pre><code># does not increment the counter\nret_val = counter.increment(request_type=\"call\")\n# \"tx\" request type is the default for non-pure non-view functions\ntx = counter.increment(request_type=\"tx\")\n# amount of gas needed to send as a transaction\ngas_estimate = counter.increment(request_type=\"estimate\")\n# access list and amount of gas needed to send as a transaction\naccess_list, gas_estimate = counter.increment(request_type=\"access_list\")\n</code></pre> <p>The <code>call</code> request type used on the <code>.deploy()</code> method returns runtime code of the contract that would be deployed if the method was called with <code>tx</code> request type.</p> <pre><code># does not deploy the contract\nruntime_code = Counter.deploy(request_type=\"call\")\n# deploys the contract and returns the contract instance, the default behavior\ncounter = Counter.deploy(request_type=\"tx\")\n# deploys the contract and returns the transaction object\ntx = Counter.deploy(request_type=\"tx\", return_tx=True)\n# amount of gas needed to deploy the contract\ngas_estimate = Counter.deploy(request_type=\"estimate\")\n# access list and amount of gas needed to deploy the contract\naccess_list, gas_estimate = Counter.deploy(request_type=\"access_list\")\n</code></pre> <p>Warning</p> <p>The <code>call</code> request type does not currently work for <code>deploy</code> methods with Anvil. It always returns empty bytes.</p>"},{"location":"testing-framework/interacting-with-contracts/#keyword-arguments","title":"Keyword arguments","text":"<p>Both methods generated in <code>pytypes</code> and low-level methods accept the following keyword arguments common for all request types:</p> Argument Description <code>from_</code> <code>Account</code> or <code>Address</code> used as a sender of a transaction/call. If not provided, the default account for the request type will be used. <code>value</code> Amount of Ether to be sent. Can be either an <code>int</code> in Wei or a string with a unit (e.g. <code>\"1 ether\"</code>). <code>gas_limit</code> Maximum amount of gas that can be consumed by the transaction. <code>gas_price</code> Gas price to be used for type 0 and type 1 transactions. Can be either an <code>int</code> in Wei or a string with a unit (e.g. <code>\"10 gwei\"</code>). <code>max_fee_per_gas</code> Maximum fee per gas to be used for type 2 transactions. Can be either an <code>int</code> in Wei or a string with a unit (e.g. <code>\"10 gwei\"</code>). <code>max_priority_fee_per_gas</code> Maximum priority fee per gas to be used for type 2 transactions. Can be either an <code>int</code> in Wei or a string with a unit (e.g. <code>\"10 gwei\"</code>). <code>access_list</code> Access list to be used for type 1 and type 2 transactions. See EIP-2930 for more information. <code>type</code> Transaction type to be used. Can be either <code>0</code>, <code>1</code>, or <code>2</code>. <p>Low-level methods also accept the <code>data</code> keyword argument (of type <code>bytes</code> or <code>bytearray</code>) that can be used to specify the data to be sent to a contract.</p> <p>Encoding data for low-level calls and transactions</p> <p>To prepare the <code>data</code> payload, the <code>Abi</code> helper class can be used. It offers the same ABI encoding functions as the <code>abi</code> global object in Solidity.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_low_level_transact():\ndefault_chain.default_tx_account = default_chain.accounts[0]\ncounter = Counter.deploy()\n# execute counter.setCount(100) using a low-level transaction\ncounter.transact(data=Abi.encode_call(Counter.setCount, [100]))\nassert counter.count() == 100\n</code></pre> <p>Methods generated in <code>pytypes</code> accept the <code>to</code> keyword argument (of type <code>Account</code>, <code>Address</code> or hex-encoded string address) that can be used to override the address of the contract being called.</p> <p>Calling contracts through a proxy</p> <p>Using the <code>to</code> keyword argument can be useful when a contract should be called through a proxy contract.</p> <pre><code>contract.initialize(owner, to=proxy)\n</code></pre>"},{"location":"testing-framework/interacting-with-contracts/#tx-request-type","title":"<code>tx</code> request type","text":"<p>The <code>tx</code> request type is used to send a transaction. It accepts one more keyword argument, <code>confirmations</code>, that can be used to specify the number of blocks that should be mined before a transaction object is returned. Setting <code>confirmations</code> to <code>0</code> returns a transaction object immediately after the transaction is sent.</p> <p>Sending transactions from any account</p> <p>The <code>from_</code> argument can be used to send transactions from any account (including contract) or address. However, this may come at a cost of decreased performance (see Performance considerations).</p> <p>When sending transactions from an account with code (contract), the contract behaves as if it had no code during the execution of the transaction!</p>"},{"location":"testing-framework/interacting-with-contracts/#call-request-type","title":"<code>call</code> request type","text":"<p>The <code>call</code> request type is used to execute a call. It accepts one more keyword argument, <code>block</code>, that can be used to specify the number of the block to be used as a context for the call. The default value is <code>latest</code> which means that the call will be executed in the context of the latest block.</p>"},{"location":"testing-framework/interacting-with-contracts/#estimate-request-type","title":"<code>estimate</code> request type","text":"<p>The <code>estimate</code> request type is used to estimate the amount of gas needed to execute a transaction. It accepts one more keyword argument, <code>block</code>, that can be used to specify the number of the block to be used as a context for the estimation. The default value is <code>pending</code> which means that the estimation will be executed in the context of the pending block.</p>"},{"location":"testing-framework/interacting-with-contracts/#access_list-request-type","title":"<code>access_list</code> request type","text":"<p>The <code>access_list</code> request type is used to estimate the access list and the amount of gas needed to execute a transaction when using the returned access list. It accepts one more keyword argument, <code>block</code>, that can be used to specify the number of the block to be used as a context for the estimation. The default value is <code>pending</code> which means that the estimation will be executed in the context of the pending block.</p>"},{"location":"testing-framework/migrating-from-ape-and-brownie/","title":"Migrating from Ape &amp; Brownie","text":""},{"location":"testing-framework/migrating-from-ape-and-brownie/#importing-contracts","title":"Importing contracts","text":"<p>In Woke, contract types must be imported from <code>pytypes</code>, a directory generated using:</p> <pre><code>woke init pytypes\n</code></pre> <p>An optional <code>-w</code> flag can be used to generate <code>pytypes</code> in a watch mode.</p> <p>If there is a <code>Counter</code> contract in <code>contracts/Counter.sol</code>, then the following import statement can be used:</p> <pre><code>from pytypes.contracts.Counter import Counter\n</code></pre> <p>A contract named <code>ERC1967Proxy</code> in <code>node_modules/@openzeppelin/contracts/proxy/ERC1967/ERC1967Proxy.sol</code> can be imported using:</p> <pre><code>from pytypes.node_modules.openzeppelin.contracts.proxy.ERC1967.ERC1967Proxy import ERC1967Proxy\n</code></pre>"},{"location":"testing-framework/migrating-from-ape-and-brownie/#accessing-accounts","title":"Accessing accounts","text":"<p>In Woke, accounts are a property of a chain. With the default chain instance named <code>default_chain</code>:</p> <pre><code>from woke.testing import *\n@default_chain.connect()\ndef test_accounts():\nprint(default_chain.accounts)\n</code></pre>"},{"location":"testing-framework/migrating-from-ape-and-brownie/#configuring-networks","title":"Configuring networks","text":"<p>Woke does not support configuring networks in configuration files. Instead, a chain instance can be created:</p> <ul> <li>without a URI (<code>@default_chain.connect()</code>), which will launch a new development chain,</li> <li>with a URI (<code>@default_chain.connect(\"http://localhost:8545\")</code>), which will connect to an existing chain.</li> </ul> <p>A development chain executable and its arguments can be configured in <code>woke.toml</code> in the project root:</p> woke.toml<pre><code>[testing]\ncmd = \"anvil\"  # other options: \"hardhat\", \"ganache\"\n[testing.anvil]\ncmd_args = \"--prune-history 100 --transaction-block-keeper 10 --steps-tracing --silent\"\n</code></pre> <p>Commonly used parameters can be set as keyword arguments in <code>@default_chain.connect()</code>:</p> <pre><code>@default_chain.connect(\naccounts=20,  # number of accounts to generate\nchain_id=1337,  # chain ID\nfork=\"https://eth-mainnet.alchemyapi.io/v2/...@12345678\",  # fork from a block\nhardfork=\"london\",  # hardfork to use\n)\n</code></pre>"},{"location":"testing-framework/migrating-from-ape-and-brownie/#events-and-user-defined-errors","title":"Events and user-defined errors","text":"<p>Events and user-defined errors are generated in <code>pytypes</code> in a form of dataclasses.</p> <p>If there is an event named <code>Incremented</code> and error named <code>NotOwner</code> in <code>contracts/Counter.sol</code>, then the following can be used to test the contract:</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_counter():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\ncounter = Counter.deploy()\ntx = counter.increment()\nassert Counter.Incremented() in tx.events\nacc = default_chain.accounts[1]\nwith must_revert(Counter.NotOwner()):\ncounter.addToWhitelist(acc, from_=acc)\n</code></pre>"},{"location":"testing-framework/migrating-from-ape-and-brownie/#transaction-parameters","title":"Transaction parameters","text":"<p>Like in Ape, Woke uses keyword arguments to specify transaction parameters. A transaction sender can be specified using <code>from_</code>:</p> <pre><code># Ape\ncounter.increment(sender=acc)\n# Brownie\ncounter.increment({'from': acc})\n# Woke\ncounter.increment(from_=acc)\n</code></pre>"},{"location":"testing-framework/migrating-from-ape-and-brownie/#expecting-reverts","title":"Expecting reverts","text":"<p>Woke uses <code>may_revert</code> and <code>must_revert</code> context managers to expect reverts:</p> <pre><code># Ape\nwith ape.reverts(r\"b'NH{q\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x00\\x11'\"):\ncounter.decrement()\n# Brownie\nwith brownie.reverts(\"Integer overflow\"):\ncounter.decrement()\n# Woke\nwith must_revert(Panic(PanicCodeEnum.UNDERFLOW_OVERFLOW)):\ncounter.decrement()\n</code></pre>"},{"location":"testing-framework/migrating-from-ape-and-brownie/#multi-chain-testing","title":"Multi-chain testing","text":"<p>Woke does not use context managers to change the current chain interface. Instead, the <code>chain</code> keyword argument can be passed when deploying a contract:</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\nchain1 = Chain()\nchain2 = Chain()\n@chain1.connect()\n@chain2.connect()\ndef test_counter():\ncounter1 = Counter.deploy(from_=chain1.accounts[0], chain=chain1)\ncounter2 = Counter.deploy(from_=chain2.accounts[0], chain=chain2)\n</code></pre>"},{"location":"testing-framework/migrating-from-woke-2/","title":"Migrating from Woke 2.x","text":"<p>Woke 3.x introduces a new deployment module, which gives ability to write deployment scripts in Python. In order to achieve maximum consistency between the deployment and testing modules, a few breaking changes were introduced. This document describes the changes and how to migrate from Woke 2.x to Woke 3.x.</p>"},{"location":"testing-framework/migrating-from-woke-2/#return-value-of-transaction-calls","title":"Return value of transaction calls","text":"<p>In Woke 2.x, the return value of a transaction call was a return value of a function called in the transaction. Using the <code>return_tx=True</code> flag, it was possible to return the transaction object itself. With <code>return_tx=True</code>, a transaction object was returned immediately after the transaction was sent. As a consequence, when using <code>return_tx=True</code>:</p> <ul> <li>the transaction revert exception was not automatically raised,</li> <li><code>chain.tx_callback</code> was not called for the transaction,</li> <li>accessing some transaction fields performed implicit <code>.wait()</code>.</li> </ul> <p>With Woke 3.x, the return value of a transaction call is always a transaction object. Furthermore, the transaction object is returned only after the transaction is mined (unless overridden with <code>confirmations=0</code>). The return value of the <code>.deploy()</code> method is still the contract object. To get the transaction object from the <code>.deploy()</code> method, use the <code>return_tx=True</code> flag. The <code>return_tx</code> flag is no longer supported for other transaction calls.</p> <p>To get the return value of a transaction call: <pre><code># Woke 2.x\nret_val = counter.increment()\n# Woke 3.x\nret_val = counter.increment().return_value\n</code></pre></p> <p>To get the transaction object immediately without waiting for the transaction to be mined: <pre><code># Woke 2.x\ntx = counter.increment(return_tx=True)\n# Woke 3.x\ntx = counter.increment(confirmations=0)\n</code></pre></p> <p>To get the transaction object after the transaction is mined: <pre><code># Woke 2.x\n# tx_callback is not called\n# revert exception is not raised\ntx = counter.increment(return_tx=True)\ntx.wait()\n# Woke 3.x\n# tx_callback is called\n# revert exception is raised if the transaction reverts\ntx = counter.increment()\n</code></pre></p> <p>The <code>.deploy()</code> method behaves the same in Woke 2.x and Woke 3.x: <pre><code># Woke 2.x\ncounter = Counter.deploy()\n# Woke 3.x\ncounter = Counter.deploy()\n</code></pre></p>"},{"location":"testing-framework/migrating-from-woke-2/#default-transaction-type","title":"Default transaction type","text":"<p>Woke 2.x supported only legacy (type 0) transactions. With Woke 3.x, all transaction types are supported and the default transaction type is the latest transaction type supported by the chain (types are prioritized in the following order: 2, 1, 0).</p> <p>To achieve the same behavior as in Woke 2.x, set <code>type=0</code> in all transaction calls:</p> <pre><code>counter.increment(type=0)\n</code></pre> <p>or use:</p> <pre><code>default_chain.default_tx_type = 0\n</code></pre> <p>to set the default transaction type for the chain.</p>"},{"location":"testing-framework/migrating-from-woke-2/#deployment_code-renamed-to-get_creation_code","title":"<code>deployment_code()</code> renamed to <code>get_creation_code()</code>","text":"<p><code>ContractType.deployment_code()</code> was renamed to <code>ContractType.get_creation_code()</code> in Woke 3.x:</p> <pre><code># Woke 2.x\ncode = Counter.deployment_code()\n# Woke 3.x\ncode = Counter.get_creation_code()\n</code></pre>"},{"location":"testing-framework/overview/","title":"Development and testing framework","text":"<p>Woke development and testing framework is a Python-based framework for testing and deploying Solidity smart contracts. It utilizes <code>pytypes</code>, Python equivalents of Solidity types, to simplify writing scripts and easily discover typing errors.</p>"},{"location":"testing-framework/overview/#features","title":"Features","text":"<ul> <li>auto-completions when writing tests and deployment scripts thanks to <code>pytypes</code></li> <li>type checking for all types generated in <code>pytypes</code></li> <li>property-based fuzzer leveraging multiprocessing to maximize the amount of inputs tested</li> <li>cross-chain testing support</li> <li>integrated Python debugger (ipdb) attached on test failures</li> <li>call traces and <code>console.log</code> support for easier debugging</li> <li>deployment scripts support</li> <li>better performance than other Python or JavaScript frameworks</li> </ul> <p>The currently supported development chains are:</p> <ul> <li>Anvil (recommended)</li> <li>Ganache</li> <li>Hardhat</li> </ul>"},{"location":"testing-framework/performance-considerations/","title":"Performance considerations","text":"<p>Woke testing framework is designed to be fast and efficient. However, there are some things to keep in mind to achieve the best performance.</p> <ol> <li>Always prefer to use Anvil whenever possible.</li> <li>Always prefer WebSockets connection over HTTP connection.</li> <li>Avoid accessing transaction events (<code>tx.events</code>) unless necessary. Consider using <code>tx.raw_events</code> instead.</li> <li>Avoid using accounts other than the pre-generated ones (<code>chain.accounts</code>) in <code>from_</code> parameters. If you need more accounts than the default number, change the Woke configuration file or launch the development chain with a higher number of accounts and connect to it.</li> <li>Minimize usage of call traces (<code>tx.call_trace</code>) and console logs (<code>tx.console_logs</code>). These features are useful for debugging, but may slow down the test execution.</li> </ol>"},{"location":"testing-framework/performance-considerations/#profiling-tests","title":"Profiling tests","text":"<p>Every Woke command has a <code>--profile</code> flag that can be used to profile the test execution. The profiling results are saved into the <code>woke.prof</code> file.</p> <pre><code>woke --profile test tests/test_counter.py\n</code></pre> <p>Warning</p> <p>It is important to specify the <code>--profile</code> flag before the <code>test</code> command.</p> <p>It is not recommended to profile the <code>woke fuzz</code> command because it uses multiprocessing.</p> <p>Woke uses cProfile dump_stats method to save the profiling results.</p> <p>Analyzing <code>woke.prof</code></p> <p>gprof2dot is a great tool for visualizing the profiling results. Together with Graphviz, it can be used to generate a call graph of the test execution.</p> <pre><code>gprof2dot -f pstats woke.prof | dot -Tsvg -o woke.prof.svg\n</code></pre>"},{"location":"testing-framework/transaction-objects/","title":"Transaction objects","text":"<p>When sending a transaction, a transaction object is returned. This object can be used to access the transaction's properties and wait for it to be mined (if <code>confirmations=0</code> set). Accessing some of the transaction object's properties also performs an implicit <code>wait()</code>.</p> <p>A <code>tx_callback</code> can be registered on a <code>Chain</code> instance. The callback receives a single argument, the transaction object. This can be used to process all transactions in a single place.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\ndef tx_callback(tx: TransactionAbc):\nprint(tx.console_logs)\n@default_chain.connect()\ndef test_callback():\ndefault_chain.tx_callback = tx_callback\ncounter = Counter.deploy(from_=default_chain.accounts[0])\ncounter.increment(from_=default_chain.accounts[0])\n</code></pre> <p>Warning</p> <p><code>tx_callback</code> is not invoked for transactions with <code>confirmations=0</code>!</p>"},{"location":"testing-framework/transaction-objects/#transaction-properties","title":"Transaction properties","text":"<p>Every transaction object has the following properties:</p> Property Description Note <code>block</code> <code>Block</code> the transaction was mined in performs implicit <code>wait()</code> <code>call_trace</code> <code>CallTrace</code> instance representing the call trace of the transaction performs implicit <code>wait()</code> <code>chain</code> <code>Chain</code> the transaction was sent to <code>console_logs</code> list of <code>console.log</code> calls made by the transaction performs implicit <code>wait()</code> <code>cumulative_gas_used</code> gas consumed by this and all previous transactions in the same block performs implicit <code>wait()</code> <code>data</code> data sent in the transaction <code>effective_gas_price</code> effective gas price of the transaction performs implicit <code>wait()</code> <code>error</code> native (<code>pytypes</code>) revert error, <code>None</code> if the transaction succeeded performs implicit <code>wait()</code> <code>events</code> list of native (<code>pytypes</code>) events emitted by the transaction performs implicit <code>wait()</code> <code>from_</code> <code>Account</code> the transaction was sent from <code>gas_limit</code> gas limit specified in the transaction <code>gas_used</code> gas used by the transaction performs implicit <code>wait()</code> <code>nonce</code> nonce specified in the transaction <code>r</code> <code>r</code> part of the ECDSA signature performs implicit <code>wait()</code> <code>raw_error</code> <code>UnknownTransactionRevertedError</code> instance, <code>None</code> if the transaction succeeded performs implicit <code>wait()</code> <code>raw_events</code> list of <code>UnknownEvent</code> instances emitted by the transaction performs implicit <code>wait()</code> <code>raw_return_value</code> raw return value of the transaction; <code>Account</code> for contract deployment, <code>bytearray</code> otherwise performs implicit <code>wait()</code>, raises <code>error</code> if the transaction failed <code>return_value</code> return value of the transaction performs implicit <code>wait()</code>, raises <code>error</code> if the transaction failed <code>s</code> <code>s</code> part of the ECDSA signature performs implicit <code>wait()</code> <code>status</code> status of the transaction, <code>1</code> for success, <code>0</code> for failure, <code>-1</code> for pending <code>to</code> <code>Account</code> the transaction was sent to <code>tx_hash</code> string hash of the transaction <code>tx_index</code> index of the transaction in the block performs implicit <code>wait()</code> <code>type</code> type of the transaction, <code>0</code> for legacy, <code>1</code> for EIP-2930, <code>2</code> for EIP-1559 <code>value</code> amount of Wei sent in the transaction <p>Legacy transactions (type <code>0</code>) have the following additional properties:</p> Property Description Note <code>gas_price</code> gas price specified in the transaction <code>v</code> ECDSA signature recovery ID <p>EIP-2930 transactions (type <code>1</code>) have the following additional properties:</p> Property Description Note <code>access_list</code> access list of the transaction (see EIP-2930) <code>chain_id</code> chain ID of the transaction <code>gas_price</code> gas price specified in the transaction <code>y_parity</code> <code>y</code> parity of the ECDSA signature <p>EIP-1559 transactions (type <code>2</code>) have the following additional properties:</p> Property Description Note <code>access_list</code> access list of the transaction (see EIP-2930) <code>chain_id</code> chain ID of the transaction <code>max_fee_per_gas</code> maximum fee per gas specified in the transaction (see EIP-1559) <code>max_priority_fee_per_gas</code> maximum priority fee per gas specified in the transaction (see EIP-1559) <code>y_parity</code> <code>y</code> parity of the ECDSA signature"},{"location":"testing-framework/transaction-objects/#multiple-transactions-in-a-single-block","title":"Multiple transactions in a single block","text":"<p>It is possible to send multiple transactions in a way that they are mined in the same block. This can be achieved in the following steps:</p> <ol> <li>Disable <code>automine</code> on the <code>Chain</code> instance</li> <li>Send any number of transactions with <code>confirmations=0</code> and <code>gas_limit=\"auto\"</code></li> <li>Re-enable <code>automine</code></li> <li>Call <code>.mine()</code> on the <code>Chain</code> instance</li> <li>Wait for the block to be mined</li> </ol> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Counter import Counter\n@default_chain.connect()\ndef test_multiple_txs():\ndefault_chain.set_default_accounts(default_chain.accounts[0])\ncounter = Counter.deploy()\n# temporarily disable automine\nwith default_chain.change_automine(False):\ntx1 = counter.increment(confirmations=0, gas_limit=\"auto\")\ntx2 = counter.increment(confirmations=0, gas_limit=\"auto\")\ntx3 = counter.increment(confirmations=0, gas_limit=\"auto\")\ndefault_chain.mine()\nassert tx1.block == tx2.block == tx3.block\n</code></pre> <p>Changing <code>automine</code></p> <p>While it is possible to change the <code>automine</code> property of a <code>Chain</code> instance manually, it is not recommended. In a case when a test connects to an existing chain and an exception is raised before <code>automine</code> is re-enabled, the chain will be left in <code>automine</code> disabled state. This can be overcome by using the <code>change_automine</code> context manager.</p>"},{"location":"testing-framework/troubleshooting/","title":"Troubleshooting","text":""},{"location":"testing-framework/troubleshooting/#unknowntransactionrevertederrordatab","title":"<code>UnknownTransactionRevertedError(data=b'')</code>","text":"<p>In many different cases, a development chain or compiler auto-generated code does not provide any useful information about the revert reason. This section describes the most common cases and how to debug them.</p>"},{"location":"testing-framework/troubleshooting/#abi-decoding-error","title":"ABI decoding error","text":"<p>Failed ABI decoding reverts without reason data. The decoding can be explicit (e.g. <code>abi.decode(data, (uint256))</code>) or implicit when performing an external call, for example:</p> <pre><code>contract Reverting {\nuint256 public immutable initialTotalSupply;\nconstructor(address token) {\ninitialTotalSupply = IERC20(token).totalSupply();\n}\n}\n</code></pre> <p>To debug the latter case, print a call trace of the failing transaction. The trace should contain the failing call in a malformed way.</p> <pre><code>from woke.testing import *\nfrom pytypes.contracts.Reverting import Reverting\ndef revert_handler(e: TransactionRevertedError):\nif e.tx is not None:\nprint(e.tx.call_trace)\n@default_chain.connect()\n@on_revert(revert_handler)\ndef test_reverting():\na = default_chain.accounts[0]\nr = Reverting.deploy(\nAddress(\"0x9a6A6920008318b3556702b5115680E048c2c8dB\"),\nfrom_=a\n)\n</code></pre> Woke Reverting.&lt;constructor&gt;('0x9a6a6920008318b3556702b5115680e048c2c8db')\u2717[CREATE] \u2514\u2500\u2500\u00a0Unknown(0x9a6a6920008318b3556702b5115680e048c2c8db).&lt;???&gt;(b'\\x18\\x16\\r\\xdd')\u2713[STATICCALL]"},{"location":"testing-framework/troubleshooting/#contract-code-size-limit","title":"Contract code size limit","text":"<p>The Spurious Dragon hard fork introduced a limit on the size of a contract. The limit is 24,576 bytes of bytecode. Due to the limit, a deployment transaction may fail with the <code>UnknownTransactionRevertedError</code> error without any reason data. In this case, the transaction call trace does not contain any red cross, but the transaction itself still fails.</p> <p>To debug this error, compile the project and search for a warning message similar to the following:</p> <pre><code>Warning: Contract code size exceeds 24576 bytes (a limit introduced in Spurious Dragon). This contract may not be deployable on mainnet.\nConsider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n</code></pre>"},{"location":"testing-framework/troubleshooting/#invalid-opcode","title":"Invalid opcode","text":"<p>When EVM encounters an invalid opcode, it reverts without any reason data. Under normal circumstances, an invalid opcode should never be encountered unless explicitly triggered by the contract code.</p> <p>However, the <code>PUSH0</code> opcode may behave as invalid if the chain is not configured for the Shanghai hard fork or later. To debug this issue, try to set a different pre-Shanghai EVM version in the Woke config file.</p> <pre><code>[compiler.solc]\nevm_version = \"paris\"\n</code></pre>"},{"location":"testing-framework/troubleshooting/#websockettimeoutexception","title":"<code>WebSocketTimeoutException</code>","text":""},{"location":"testing-framework/troubleshooting/#insufficient-timeout-configured","title":"Insufficient timeout configured","text":"<p>Occasionally, the default timeout may be insufficient, especially when performing complex transactions or when fork testing.</p> <p>To work around this issue, increase the timeout in the Woke config file.</p> <pre><code>[testing]\ntimeout = 60\n</code></pre>"},{"location":"testing-framework/troubleshooting/#test-freezes-without-timeout-error","title":"Test freezes without timeout error","text":""},{"location":"testing-framework/troubleshooting/#contract-initcode-size-limit","title":"Contract initcode size limit","text":"<p>Due to faulty implementations of development chains, a test may freeze without any error message. Especially, a timeout error is not raised. The reason may be that the transaction is trying to deploy a contract with initcode larger than the limit introduced in the Shanghai hard fork.</p> <p>To debug this issue, compile the project and search for a warning message similar to the following:</p> <pre><code>Warning: Contract initcode size is 151670 bytes and exceeds 49152 bytes (a limit introduced in Shanghai).\nThis contract may not be deployable on Mainnet. Consider enabling the optimizer (with a low \"runs\" value!), turning off revert strings, or using libraries.\n</code></pre>"}]}