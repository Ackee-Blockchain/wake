{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Woke # Woke is a Python-based development and testing framework for Solidity. Features # vulnerability detectors LSP server property-based fuzzer Installation # Woke requires Python 3.7 or higher. Using pip # Warning Woke has been moved from abch-woke PyPI package to woke . pip3 install woke The property-based fuzzer can be installed as an extra dependency. Due to the dependency on eth-brownie , it is recommended to install it into a virtual environment . pip3 install woke [ fuzzer ]","title":"Installation"},{"location":"#woke","text":"Woke is a Python-based development and testing framework for Solidity.","title":"Woke"},{"location":"#features","text":"vulnerability detectors LSP server property-based fuzzer","title":"Features"},{"location":"#installation","text":"Woke requires Python 3.7 or higher.","title":"Installation"},{"location":"#using-pip","text":"Warning Woke has been moved from abch-woke PyPI package to woke . pip3 install woke The property-based fuzzer can be installed as an extra dependency. Due to the dependency on eth-brownie , it is recommended to install it into a virtual environment . pip3 install woke [ fuzzer ]","title":"Using pip"},{"location":"configuration/","text":"Configuration # Woke can be configured using optional configuration files. The global configuration file is located in: $HOME/.config/Woke/config.toml on Linux/MacOS, %USERPROFILE%\\Woke\\config.toml on Windows. Additionally, the configuration file for each project can be located in {PROJECT_PATH}/woke.toml . Attention Configuration options loaded from TOML files affect only the behavior of the Woke command-line tool. LSP configuration options are loaded from LSP clients using the standard interface . Subconfigs # Any configuration file can include additional configuration files (subconfigs). These subconfigs are loaded after the original configuration file in the specified order. Subconfig configuration values override the values of the parent configuration file. Example woke.toml subconfigs = [ \"loaded_next.toml\" , \"../relative.toml\" , \"/tmp/absolute.toml\" , \"loaded_last.toml\" ] Configuration options # The resolution order for each configuration option is: default value, value in the global configuration file, value in the project configuration file. Example woke.toml subconfigs = [ \"./config1.toml\" , \"config2.toml\" ] [compiler.solc] evm_version = \"london\" include_paths = [ \"node_modules\" , \"lib\" ] remappings = [ \"@openzeppelin/=node_modules/@openzeppelin/\" ] target_version = \"0.8.10\" via_IR = true [compiler.solc.optimizer] enabled = true runs = 1000 compiler.solc namespace # {CWD} in the following table represents the current working directory (i.e. the directory from which the woke command is being executed). Option Description Default value allow_paths Allow paths passed to the solc executable [] evm_version EVM version as specified by the Solidity docs \"\" (let the compiler decide) ignore_paths Files in these paths are not compiled unless imported from other non-ignored files [{CWD}/.woke-build, {CWD}/node_modules] include_paths Paths (along with {CWD} ) where files from non-relative imports are searched [{CWD}/node_modules] remappings Compiler remappings as specified by the Solidity docs [] target_version Target solc version used to compile the project \"\" (use the latest version for each compilation unit) via_IR Compile the code via the Yul intermediate language (see the Solidity docs ) \"\" (let the compiler decide) Info The include_paths option is the preferred way to handle imports of libraries. Remappings should be used only when include_paths cannot be used (e.g. when the import path differs from the system path of the imported file). compiler.solc.optimizer namespace # Option Description Default value enabled Compile the project with solc optimizations enabled. Leaving this unset disables most of the available optimizations. Setting this to false disables all optimizations for Solidity <0.8.6 and has the same behavior as leaving this unset for Solidity >=0.8.6. \"\" (unset) runs Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage. 200 generator.control_flow_graph namespace # Related to the woke.generate.control_flow_graph LSP command. Option Description Default value direction Graph direction TB vscode_urls Attach VS Code URLs to the graph nodes true generator.inheritance_graph namespace # Related to the woke.generate.inheritance_graph LSP command. Option Description Default value direction Graph direction BT vscode_urls Attach VS Code URLs to the graph nodes true generator.inheritance_graph_full namespace # Related to the woke.generate.inheritance_graph_full LSP command. Option Description Default value direction Graph direction BT vscode_urls Attach VS Code URLs to the graph nodes true generator.linearized_inheritance_graph namespace # Related to the woke.generate.linearized_inheritance_graph LSP command. Option Description Default value direction Graph direction LR vscode_urls Attach VS Code URLs to the graph nodes true lsp.code_lens namespace # Option Description Default value enable Enable LSP code lens language feature. true lsp.detectors namespace # Option Description Default value enable Enable vulnerability detectors in the LSP server. true lsp.find_references namespace # Configuration options specific to the LSP Find references request. Option Description Default value include_declarations Also include declarations in Find references request results. false","title":"Configuration"},{"location":"configuration/#configuration","text":"Woke can be configured using optional configuration files. The global configuration file is located in: $HOME/.config/Woke/config.toml on Linux/MacOS, %USERPROFILE%\\Woke\\config.toml on Windows. Additionally, the configuration file for each project can be located in {PROJECT_PATH}/woke.toml . Attention Configuration options loaded from TOML files affect only the behavior of the Woke command-line tool. LSP configuration options are loaded from LSP clients using the standard interface .","title":"Configuration"},{"location":"configuration/#subconfigs","text":"Any configuration file can include additional configuration files (subconfigs). These subconfigs are loaded after the original configuration file in the specified order. Subconfig configuration values override the values of the parent configuration file. Example woke.toml subconfigs = [ \"loaded_next.toml\" , \"../relative.toml\" , \"/tmp/absolute.toml\" , \"loaded_last.toml\" ]","title":"Subconfigs"},{"location":"configuration/#configuration-options","text":"The resolution order for each configuration option is: default value, value in the global configuration file, value in the project configuration file. Example woke.toml subconfigs = [ \"./config1.toml\" , \"config2.toml\" ] [compiler.solc] evm_version = \"london\" include_paths = [ \"node_modules\" , \"lib\" ] remappings = [ \"@openzeppelin/=node_modules/@openzeppelin/\" ] target_version = \"0.8.10\" via_IR = true [compiler.solc.optimizer] enabled = true runs = 1000","title":"Configuration options"},{"location":"configuration/#compilersolc-namespace","text":"{CWD} in the following table represents the current working directory (i.e. the directory from which the woke command is being executed). Option Description Default value allow_paths Allow paths passed to the solc executable [] evm_version EVM version as specified by the Solidity docs \"\" (let the compiler decide) ignore_paths Files in these paths are not compiled unless imported from other non-ignored files [{CWD}/.woke-build, {CWD}/node_modules] include_paths Paths (along with {CWD} ) where files from non-relative imports are searched [{CWD}/node_modules] remappings Compiler remappings as specified by the Solidity docs [] target_version Target solc version used to compile the project \"\" (use the latest version for each compilation unit) via_IR Compile the code via the Yul intermediate language (see the Solidity docs ) \"\" (let the compiler decide) Info The include_paths option is the preferred way to handle imports of libraries. Remappings should be used only when include_paths cannot be used (e.g. when the import path differs from the system path of the imported file).","title":"compiler.solc namespace"},{"location":"configuration/#compilersolcoptimizer-namespace","text":"Option Description Default value enabled Compile the project with solc optimizations enabled. Leaving this unset disables most of the available optimizations. Setting this to false disables all optimizations for Solidity <0.8.6 and has the same behavior as leaving this unset for Solidity >=0.8.6. \"\" (unset) runs Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage. 200","title":"compiler.solc.optimizer namespace"},{"location":"configuration/#generatorcontrol_flow_graph-namespace","text":"Related to the woke.generate.control_flow_graph LSP command. Option Description Default value direction Graph direction TB vscode_urls Attach VS Code URLs to the graph nodes true","title":"generator.control_flow_graph namespace"},{"location":"configuration/#generatorinheritance_graph-namespace","text":"Related to the woke.generate.inheritance_graph LSP command. Option Description Default value direction Graph direction BT vscode_urls Attach VS Code URLs to the graph nodes true","title":"generator.inheritance_graph namespace"},{"location":"configuration/#generatorinheritance_graph_full-namespace","text":"Related to the woke.generate.inheritance_graph_full LSP command. Option Description Default value direction Graph direction BT vscode_urls Attach VS Code URLs to the graph nodes true","title":"generator.inheritance_graph_full namespace"},{"location":"configuration/#generatorlinearized_inheritance_graph-namespace","text":"Related to the woke.generate.linearized_inheritance_graph LSP command. Option Description Default value direction Graph direction LR vscode_urls Attach VS Code URLs to the graph nodes true","title":"generator.linearized_inheritance_graph namespace"},{"location":"configuration/#lspcode_lens-namespace","text":"Option Description Default value enable Enable LSP code lens language feature. true","title":"lsp.code_lens namespace"},{"location":"configuration/#lspdetectors-namespace","text":"Option Description Default value enable Enable vulnerability detectors in the LSP server. true","title":"lsp.detectors namespace"},{"location":"configuration/#lspfind_references-namespace","text":"Configuration options specific to the LSP Find references request. Option Description Default value include_declarations Also include declarations in Find references request results. false","title":"lsp.find_references namespace"},{"location":"contributing/","text":"Contributing # Creating a virtual environment # Using virtualenvwrapper # mkvirtualenv woke Using venv # python3 -m venv env source env/bin/activate Installation # pip install -e \".[fuzzer,tests,dev]\" Pyright, our static type checker, is distributed through npm: npm i -g pyright Git hooks # For Unix-like platforms, we provide up git hooks to help with development. After cloning, execute. chmod +x ./setup-githooks.sh ./setup-githooks.sh Git hooks automatically run these commands when you commit: pytest tests -m \"not slow\" when the WOKE_HOOKS_RUN_ALL_TESTS environment variable is not set ( pytest tests is run otherwise) pyright on Python files being committed black on Python files being committed isort on Python files being committed mkdocs build --strict to make sure the documentation does not contain errors Any unstaged changes and untracked files are stashed before running the git pre-commit hook. After the commit is made, the stashed changes are popped from the stash. If this leads to a merge conflict, the stashed changes are left at the top of the stash.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#creating-a-virtual-environment","text":"","title":"Creating a virtual environment"},{"location":"contributing/#using-virtualenvwrapper","text":"mkvirtualenv woke","title":"Using virtualenvwrapper"},{"location":"contributing/#using-venv","text":"python3 -m venv env source env/bin/activate","title":"Using venv"},{"location":"contributing/#installation","text":"pip install -e \".[fuzzer,tests,dev]\" Pyright, our static type checker, is distributed through npm: npm i -g pyright","title":"Installation"},{"location":"contributing/#git-hooks","text":"For Unix-like platforms, we provide up git hooks to help with development. After cloning, execute. chmod +x ./setup-githooks.sh ./setup-githooks.sh Git hooks automatically run these commands when you commit: pytest tests -m \"not slow\" when the WOKE_HOOKS_RUN_ALL_TESTS environment variable is not set ( pytest tests is run otherwise) pyright on Python files being committed black on Python files being committed isort on Python files being committed mkdocs build --strict to make sure the documentation does not contain errors Any unstaged changes and untracked files are stashed before running the git pre-commit hook. After the commit is made, the stashed changes are popped from the stash. If this leads to a merge conflict, the stashed changes are left at the top of the stash.","title":"Git hooks"},{"location":"detectors/","text":"Vulnerability detectors # Detectors can be run using: woke detect Or with specified files and directories: woke detect contracts/MyContract.sol tests Example woke detect output","title":"Detectors"},{"location":"detectors/#vulnerability-detectors","text":"Detectors can be run using: woke detect Or with specified files and directories: woke detect contracts/MyContract.sol tests Example woke detect output","title":"Vulnerability detectors"},{"location":"fuzzer/","text":"Woke fuzzer # Woke fuzzer is a property-based fuzzer for Solidity smart contracts that allows testers to write their fuzz tests in Python. Installation # Warning Woke fuzzer uses eth-brownie package. For this reason, it is recommended to install Woke fuzzer into a virtual environment . It may be also needed to create a brownie-config.yaml configuration file so that Brownie can compile the project. Woke fuzzer is an optional feature of Woke and can be installed with pip: pip install woke [ fuzzer ] Getting started # To get started, run the following command inside the project directory: woke init fuzz This command creates pytypes directory, generates smart contract's Python bindings and also copies an example file test_example.py into tests directory. Apart from having useful comments, this example file showcases basic structure of Woke fuzzer's fuzz tests which consists of: TestingSequence classes with methods decorated as Flows and Invariants that are used for fuzz testing and an __init__ method which is used for TestingSequence class setup and can also deploy contracts, test_* methods that run Woke fuzzer's Campaign with the TestingSequence class. Tip All of these can also be separated into multiple files, see a verbose directory structure . TestingSequence and Campaign # TestingSequence is a tester defined class that specifies Flows and Invariants that will be later used for fuzz testing and it is also used to set up any prerequisites such as contract deployment or instance attributes later used in tests (contract owner, etc.) The Campaign class is a Woke fuzzer class that is responsible for the actual sequence generation and Flows and Invariants execution from TestingSequence . The number of generated sequences and Flows must be specified as arguments of the run function. The development chain network gets reverted between the sequences. In the example below, the contract is deployed and the Campaign is run with 1000 sequences consisting of 400 flows. import brownie from pytypes import VotingContractType from woke.fuzzer import Campaign from woke.fuzzer.random import random_account class TestingSequence : def __init ( self , contract : VotingContractType ): self . owner = random_account () self . contract = contract . deploy ({ \"from\" : self . owner }) self . subjects = {} # flows and invariants also go here def test_campaign ( voting_contract : VotingContractType ): for _ in range ( 1 ): brownie . accounts . add () campaign = Campaign ( lambda : TestingSequence ( VotingContractType )) campaign . run ( 1000 , 400 ) The number of execution times for a Flow per sequence can be tuned using decorators . Flows # A Flow is a test method with @flow decorator that uses the fuzzed smart contract and specifies where Woke fuzzer should insert randomly generated data. import brownie from woke.fuzzer.decorators import flow from woke.fuzzer.random import random_account , random_string ... @flow def flow_add_subject ( self ): brownie . accounts . add () subject_name = random_string ( 0 , 10 ) subject_account = random_account ( predicate = lambda a : a != self . owner and a not in self . subjects ) if len ( subject_name ) == 0 or subject_account in self . subjects : with brownie . reverts (): self . contract . addSubject ( subject_name , { \"from\" : subject_account }) else : self . contract . addSubject ( subject_name , { \"from\" : subject_account }) self . subjects [ subject_account ] = ( subject_name , 0 ) A sequence of these Flows is generated and executed by the Campaign class. brownie.reverts is used when a transaction is expected to revert. Should a contract fail to revert the transaction, it will be reported as a bug by the fuzzer. Invariants # Woke fuzzer is a property-based fuzzer, and as such, it allows testers to define Invariant methods with @invariant decorator. These Invariant methods check for correctness of certain properties in deployed fuzzed smart contracts after every Flow execution. from woke.fuzzer.decorators import invariant from woke.fuzzer.random import random_account ... @invariant def invariant_subjects ( self ): anyone = random_account () subjects = self . contract . getSubjects ({ \"from\" : anyone }) assert len ( subjects ) == len ( self . subjects ) for subject in subjects : anyone = random_account () subj = self . contract . getSubject ( subject , { \"from\" : anyone }) assert self . subjects [ subject ][ 0 ] == subj [ \"name\" ] assert self . subjects [ subject ][ 1 ] == subj [ \"votes\" ] Should any of the asserts in Invariant method fail, it will be reported as a bug by the fuzzer. Generating pseudo-random data # Woke fuzzer has several built-in methods for generating pseudo-random data: random_account chooses a random account from existing brownie accounts, random_int generates random integer but with custom (increased) probabilities for min , max and 0 , random_bool picks True/False randomly, random_string can construct a random string of given min and max length, random_bytes generates a sequence of random bytes with given min and max length. Some of the methods mentioned above also have other optional parameters such as predicates that can be used to further restrict which values will be generated, see source code for full specification. Running the fuzzer # After writing Flows and Invariants , Woke fuzzer can be run with all fuzz test files using: woke fuzz Or with specified fuzz test files: woke fuzz ./tests/test_token.py Info Woke fuzzer runs with multiple processes by default . Be sure to check out woke fuzz --help for optional CLI arguments . Checking out the progress # While fuzzing, the progress is reported in the console stating how many processes are still running. More verbose logs are stored in .woke-logs/fuzz directory, specifically the latest one for the last fuzzing campaign. Tip We recommend using less -r to view the log files because they are ANSI code coloured. What to do when Woke fuzzer finds a bug # When Woke fuzzer finds a bug, it will print out a standard Python traceback and ask if a debugger should be attached. With the debugger not being attached, the current process is stopped but the rest of the processes continue fuzzing. The bug can be later checked out in execution logs the same way as when checking out the progress . With the debugger attached, IPython debugger instance is created which allows exploring the state of the fuzzing instance and development chain. Decorators # Apart from the @flow and @invariant that define type of the test method there are also decorators that can be used to tune Flow selection in a generated sequence: @weight(x) - specifies weight that will be used when generating a sequence with default weight being 100. Say flow1 has weight 100 and flow2 has weight 200, flow2 will have ~ \\(\\frac{2}{3}\\) of the executions and flow1 only ~ \\(\\frac{1}{3}\\) , @max_times(x) - specifies maximum times a Flow will be called in one generated sequence, @ignore - instructs Woke fuzzer to ignore the decorated Flow or Invariant , useful for testing and debugging. Optional CLI arguments # $ woke fuzz --help Usage: woke fuzz [OPTIONS] [PATHS]... Run Woke fuzzer. Options: -n, --process-count INTEGER Number of processes to create for fuzzing. -s, --seed TEXT Random seeds --passive Print one process output into console, run other in background. --network TEXT Choose brownie dev chain. Default is 'development' for ganache --help Show this message and exit. Fuzzing with multiple processes # By default, Woke fuzzer performs fuzzing with a number of processes equal to the number of CPU cores. -n can be used to specify the number of processes. Development chain # ganache-cli is used as a default command to spawn a local dev chain for each process. It's important to have ports 8545 to (8545 + # of processes) free and bindable. Woke fuzzer uses dev chain configuration from Brownie so other development chains such as anvil or hardhat can be selected with --network option, but make sure that Brownie actually fully supports the dev chain. Random seed selection # To make fuzzing reproducible, it's possible to specify a seed used when generating random data with -s . With multiple seeds specified, each seed is assigned to a different process and the remaining seeds are generated randomly. Passive mode # For debugging purposes, it's possible to run Woke fuzzer in passive mode using the --passive option. In this mode, Woke fuzzer will print out the output of the process #0 to the console. Python bindings # To make working with contracts a bit easier, Woke fuzzer generates Python bindings from smart contract's ABI into the pytypes directory of the project. Recommended directory structure # For bigger projects, we recommend splitting up contract setup, Flow definition and test_*.py files. project/ \u251c\u2500\u2500 contracts/ \u2502 \u251c\u2500\u2500 Token.sol \u2502 \u2514\u2500\u2500 Amm.sol \u2514\u2500\u2500 tests/ \u251c\u2500\u2500 token \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2514\u2500\u2500 flows.py \u251c\u2500\u2500 amm \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2514\u2500\u2500 flows.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_token.py \u2514\u2500\u2500 test_amm.py","title":"Fuzzer"},{"location":"fuzzer/#woke-fuzzer","text":"Woke fuzzer is a property-based fuzzer for Solidity smart contracts that allows testers to write their fuzz tests in Python.","title":"Woke fuzzer"},{"location":"fuzzer/#installation","text":"Warning Woke fuzzer uses eth-brownie package. For this reason, it is recommended to install Woke fuzzer into a virtual environment . It may be also needed to create a brownie-config.yaml configuration file so that Brownie can compile the project. Woke fuzzer is an optional feature of Woke and can be installed with pip: pip install woke [ fuzzer ]","title":"Installation"},{"location":"fuzzer/#getting-started","text":"To get started, run the following command inside the project directory: woke init fuzz This command creates pytypes directory, generates smart contract's Python bindings and also copies an example file test_example.py into tests directory. Apart from having useful comments, this example file showcases basic structure of Woke fuzzer's fuzz tests which consists of: TestingSequence classes with methods decorated as Flows and Invariants that are used for fuzz testing and an __init__ method which is used for TestingSequence class setup and can also deploy contracts, test_* methods that run Woke fuzzer's Campaign with the TestingSequence class. Tip All of these can also be separated into multiple files, see a verbose directory structure .","title":"Getting started"},{"location":"fuzzer/#testingsequence-and-campaign","text":"TestingSequence is a tester defined class that specifies Flows and Invariants that will be later used for fuzz testing and it is also used to set up any prerequisites such as contract deployment or instance attributes later used in tests (contract owner, etc.) The Campaign class is a Woke fuzzer class that is responsible for the actual sequence generation and Flows and Invariants execution from TestingSequence . The number of generated sequences and Flows must be specified as arguments of the run function. The development chain network gets reverted between the sequences. In the example below, the contract is deployed and the Campaign is run with 1000 sequences consisting of 400 flows. import brownie from pytypes import VotingContractType from woke.fuzzer import Campaign from woke.fuzzer.random import random_account class TestingSequence : def __init ( self , contract : VotingContractType ): self . owner = random_account () self . contract = contract . deploy ({ \"from\" : self . owner }) self . subjects = {} # flows and invariants also go here def test_campaign ( voting_contract : VotingContractType ): for _ in range ( 1 ): brownie . accounts . add () campaign = Campaign ( lambda : TestingSequence ( VotingContractType )) campaign . run ( 1000 , 400 ) The number of execution times for a Flow per sequence can be tuned using decorators .","title":"TestingSequence and Campaign"},{"location":"fuzzer/#flows","text":"A Flow is a test method with @flow decorator that uses the fuzzed smart contract and specifies where Woke fuzzer should insert randomly generated data. import brownie from woke.fuzzer.decorators import flow from woke.fuzzer.random import random_account , random_string ... @flow def flow_add_subject ( self ): brownie . accounts . add () subject_name = random_string ( 0 , 10 ) subject_account = random_account ( predicate = lambda a : a != self . owner and a not in self . subjects ) if len ( subject_name ) == 0 or subject_account in self . subjects : with brownie . reverts (): self . contract . addSubject ( subject_name , { \"from\" : subject_account }) else : self . contract . addSubject ( subject_name , { \"from\" : subject_account }) self . subjects [ subject_account ] = ( subject_name , 0 ) A sequence of these Flows is generated and executed by the Campaign class. brownie.reverts is used when a transaction is expected to revert. Should a contract fail to revert the transaction, it will be reported as a bug by the fuzzer.","title":"Flows"},{"location":"fuzzer/#invariants","text":"Woke fuzzer is a property-based fuzzer, and as such, it allows testers to define Invariant methods with @invariant decorator. These Invariant methods check for correctness of certain properties in deployed fuzzed smart contracts after every Flow execution. from woke.fuzzer.decorators import invariant from woke.fuzzer.random import random_account ... @invariant def invariant_subjects ( self ): anyone = random_account () subjects = self . contract . getSubjects ({ \"from\" : anyone }) assert len ( subjects ) == len ( self . subjects ) for subject in subjects : anyone = random_account () subj = self . contract . getSubject ( subject , { \"from\" : anyone }) assert self . subjects [ subject ][ 0 ] == subj [ \"name\" ] assert self . subjects [ subject ][ 1 ] == subj [ \"votes\" ] Should any of the asserts in Invariant method fail, it will be reported as a bug by the fuzzer.","title":"Invariants"},{"location":"fuzzer/#generating-pseudo-random-data","text":"Woke fuzzer has several built-in methods for generating pseudo-random data: random_account chooses a random account from existing brownie accounts, random_int generates random integer but with custom (increased) probabilities for min , max and 0 , random_bool picks True/False randomly, random_string can construct a random string of given min and max length, random_bytes generates a sequence of random bytes with given min and max length. Some of the methods mentioned above also have other optional parameters such as predicates that can be used to further restrict which values will be generated, see source code for full specification.","title":"Generating pseudo-random data"},{"location":"fuzzer/#running-the-fuzzer","text":"After writing Flows and Invariants , Woke fuzzer can be run with all fuzz test files using: woke fuzz Or with specified fuzz test files: woke fuzz ./tests/test_token.py Info Woke fuzzer runs with multiple processes by default . Be sure to check out woke fuzz --help for optional CLI arguments .","title":"Running the fuzzer"},{"location":"fuzzer/#checking-out-the-progress","text":"While fuzzing, the progress is reported in the console stating how many processes are still running. More verbose logs are stored in .woke-logs/fuzz directory, specifically the latest one for the last fuzzing campaign. Tip We recommend using less -r to view the log files because they are ANSI code coloured.","title":"Checking out the progress"},{"location":"fuzzer/#what-to-do-when-woke-fuzzer-finds-a-bug","text":"When Woke fuzzer finds a bug, it will print out a standard Python traceback and ask if a debugger should be attached. With the debugger not being attached, the current process is stopped but the rest of the processes continue fuzzing. The bug can be later checked out in execution logs the same way as when checking out the progress . With the debugger attached, IPython debugger instance is created which allows exploring the state of the fuzzing instance and development chain.","title":"What to do when Woke fuzzer finds a bug"},{"location":"fuzzer/#decorators","text":"Apart from the @flow and @invariant that define type of the test method there are also decorators that can be used to tune Flow selection in a generated sequence: @weight(x) - specifies weight that will be used when generating a sequence with default weight being 100. Say flow1 has weight 100 and flow2 has weight 200, flow2 will have ~ \\(\\frac{2}{3}\\) of the executions and flow1 only ~ \\(\\frac{1}{3}\\) , @max_times(x) - specifies maximum times a Flow will be called in one generated sequence, @ignore - instructs Woke fuzzer to ignore the decorated Flow or Invariant , useful for testing and debugging.","title":"Decorators"},{"location":"fuzzer/#optional-cli-arguments","text":"$ woke fuzz --help Usage: woke fuzz [OPTIONS] [PATHS]... Run Woke fuzzer. Options: -n, --process-count INTEGER Number of processes to create for fuzzing. -s, --seed TEXT Random seeds --passive Print one process output into console, run other in background. --network TEXT Choose brownie dev chain. Default is 'development' for ganache --help Show this message and exit.","title":"Optional CLI arguments"},{"location":"fuzzer/#fuzzing-with-multiple-processes","text":"By default, Woke fuzzer performs fuzzing with a number of processes equal to the number of CPU cores. -n can be used to specify the number of processes.","title":"Fuzzing with multiple processes"},{"location":"fuzzer/#development-chain","text":"ganache-cli is used as a default command to spawn a local dev chain for each process. It's important to have ports 8545 to (8545 + # of processes) free and bindable. Woke fuzzer uses dev chain configuration from Brownie so other development chains such as anvil or hardhat can be selected with --network option, but make sure that Brownie actually fully supports the dev chain.","title":"Development chain"},{"location":"fuzzer/#random-seed-selection","text":"To make fuzzing reproducible, it's possible to specify a seed used when generating random data with -s . With multiple seeds specified, each seed is assigned to a different process and the remaining seeds are generated randomly.","title":"Random seed selection"},{"location":"fuzzer/#passive-mode","text":"For debugging purposes, it's possible to run Woke fuzzer in passive mode using the --passive option. In this mode, Woke fuzzer will print out the output of the process #0 to the console.","title":"Passive mode"},{"location":"fuzzer/#python-bindings","text":"To make working with contracts a bit easier, Woke fuzzer generates Python bindings from smart contract's ABI into the pytypes directory of the project.","title":"Python bindings"},{"location":"fuzzer/#recommended-directory-structure","text":"For bigger projects, we recommend splitting up contract setup, Flow definition and test_*.py files. project/ \u251c\u2500\u2500 contracts/ \u2502 \u251c\u2500\u2500 Token.sol \u2502 \u2514\u2500\u2500 Amm.sol \u2514\u2500\u2500 tests/ \u251c\u2500\u2500 token \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2514\u2500\u2500 flows.py \u251c\u2500\u2500 amm \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2514\u2500\u2500 flows.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_token.py \u2514\u2500\u2500 test_amm.py","title":"Recommended directory structure"},{"location":"language-server/","text":"Solidity LSP server # Woke implements an LSP server for Solidity. The only currently supported communication channel is TCP. Woke LSP server can be run using: woke lsp Or with an optional --port argument: woke lsp --port 1234 Info Multi-root workspaces are not currently supported. Projects using Woke LSP server # VS Code Extension Configuration options # Server configuration options are loaded using the standard interface from LSP clients. The process of setting the configuration options is client specific. Configuration changes are handled by the server, and the project is recompiled if the compilation options change. The full list of supported configuration options can be found in the configuration section. Warning Configuration options are not loaded from woke.toml files by the LSP server. Supported commands # Woke LSP server implements the command execution provider as specified by the LSP specification . The following commands are supported: Command Arguments Description woke.lsp.force_recompile Force recompile the opened project/files. Useful after modifying files outside the IDE (e.g. after installing npm packages). woke.generate.control_flow_graph 0 : URI of the document containing the function 1 : canonical name of the function Generate a control flow graph for the given function or modifier. Returns the source code of the graph in Graphviz (DOT) format. woke.generate.inheritance_graph 0 : URI of the document containing the contract 1 : name of the contract Generate an inheritance graph for the given contract. Returns the source code of the graph in Graphviz (DOT) format. woke.generate.inheritance_graph_full Generate an inheritance graph for the whole project. A workspace must be opened. Returns the source code of the graph in Graphviz (DOT) format. woke.generate.linearized_inheritance_graph 0 : URI of the document containing the contract 1 : name of the contract Generate a linearized inheritance graph for the given contract. Returns the source code of the graph in Graphviz (DOT) format. Features # Go to definition # Go to type definition # Go to implementation # Finds implementations of an unimplemented function or modifier. Find references # Type hierarchy # Also works for virtual functions. Document links # Hover # Includes links to documentation for OpenZeppelin contracts. Code lens # Number of references is shown above each declaration. Document symbols # Diagnostics # Together with compiler errors, diagnostics also include results from Woke vulnerability detectors. Rename # Debugging # Woke LSP server can be debugged using: woke --debug lsp","title":"LSP server"},{"location":"language-server/#solidity-lsp-server","text":"Woke implements an LSP server for Solidity. The only currently supported communication channel is TCP. Woke LSP server can be run using: woke lsp Or with an optional --port argument: woke lsp --port 1234 Info Multi-root workspaces are not currently supported.","title":"Solidity LSP server"},{"location":"language-server/#projects-using-woke-lsp-server","text":"VS Code Extension","title":"Projects using Woke LSP server"},{"location":"language-server/#configuration-options","text":"Server configuration options are loaded using the standard interface from LSP clients. The process of setting the configuration options is client specific. Configuration changes are handled by the server, and the project is recompiled if the compilation options change. The full list of supported configuration options can be found in the configuration section. Warning Configuration options are not loaded from woke.toml files by the LSP server.","title":"Configuration options"},{"location":"language-server/#supported-commands","text":"Woke LSP server implements the command execution provider as specified by the LSP specification . The following commands are supported: Command Arguments Description woke.lsp.force_recompile Force recompile the opened project/files. Useful after modifying files outside the IDE (e.g. after installing npm packages). woke.generate.control_flow_graph 0 : URI of the document containing the function 1 : canonical name of the function Generate a control flow graph for the given function or modifier. Returns the source code of the graph in Graphviz (DOT) format. woke.generate.inheritance_graph 0 : URI of the document containing the contract 1 : name of the contract Generate an inheritance graph for the given contract. Returns the source code of the graph in Graphviz (DOT) format. woke.generate.inheritance_graph_full Generate an inheritance graph for the whole project. A workspace must be opened. Returns the source code of the graph in Graphviz (DOT) format. woke.generate.linearized_inheritance_graph 0 : URI of the document containing the contract 1 : name of the contract Generate a linearized inheritance graph for the given contract. Returns the source code of the graph in Graphviz (DOT) format.","title":"Supported commands"},{"location":"language-server/#features","text":"","title":"Features"},{"location":"language-server/#go-to-definition","text":"","title":"Go to definition"},{"location":"language-server/#go-to-type-definition","text":"","title":"Go to type definition"},{"location":"language-server/#go-to-implementation","text":"Finds implementations of an unimplemented function or modifier.","title":"Go to implementation"},{"location":"language-server/#find-references","text":"","title":"Find references"},{"location":"language-server/#type-hierarchy","text":"Also works for virtual functions.","title":"Type hierarchy"},{"location":"language-server/#document-links","text":"","title":"Document links"},{"location":"language-server/#hover","text":"Includes links to documentation for OpenZeppelin contracts.","title":"Hover"},{"location":"language-server/#code-lens","text":"Number of references is shown above each declaration.","title":"Code lens"},{"location":"language-server/#document-symbols","text":"","title":"Document symbols"},{"location":"language-server/#diagnostics","text":"Together with compiler errors, diagnostics also include results from Woke vulnerability detectors.","title":"Diagnostics"},{"location":"language-server/#rename","text":"","title":"Rename"},{"location":"language-server/#debugging","text":"Woke LSP server can be debugged using: woke --debug lsp","title":"Debugging"},{"location":"solc-version-manager/","text":"Solc Version Manager (SVM) # Woke implements Solc Version Manager (SVM) to manage multiple installations of the solc compiler. Compiler versions are located in: $HOME/.config/Woke/compilers on Linux/MacOS, %USERPROFILE%\\Woke\\compilers on Windows. The chosen version of solc is available under the woke-solc executable which acts as a wrapper for the solc executable. Example $ woke-solc --version solc, the solidity compiler commandline interface Version: 0.8.15+commit.e14f2714.Linux.g++ Info solc binaries are downloaded from the Solidity repository which limits the minimum version of solc that can be installed. Commands # All the listed commands are available under the woke svm subcommand (e.g. woke svm list ). Command Description Options install Install the target version of solc . A version range may be provided which results into installation of the latest version matching the range (i.e. woke svm install 0.7 installs the version 0.7.6 ). --force reinstall the version even if already installed. list List installed versions of solc . --all list all available versions instead. remove Remove the target installed version of solc . --ignore-missing do not raise an exception if the target version is not installed. switch Change the selected version of solc to the target version. use Change the selected version of solc to the target version and install it if not already installed. A version range may be provided resulting into installation of the latest version matching the range. --force reinstall the version even if already installed.","title":"Solc Version Manager"},{"location":"solc-version-manager/#solc-version-manager-svm","text":"Woke implements Solc Version Manager (SVM) to manage multiple installations of the solc compiler. Compiler versions are located in: $HOME/.config/Woke/compilers on Linux/MacOS, %USERPROFILE%\\Woke\\compilers on Windows. The chosen version of solc is available under the woke-solc executable which acts as a wrapper for the solc executable. Example $ woke-solc --version solc, the solidity compiler commandline interface Version: 0.8.15+commit.e14f2714.Linux.g++ Info solc binaries are downloaded from the Solidity repository which limits the minimum version of solc that can be installed.","title":"Solc Version Manager (SVM)"},{"location":"solc-version-manager/#commands","text":"All the listed commands are available under the woke svm subcommand (e.g. woke svm list ). Command Description Options install Install the target version of solc . A version range may be provided which results into installation of the latest version matching the range (i.e. woke svm install 0.7 installs the version 0.7.6 ). --force reinstall the version even if already installed. list List installed versions of solc . --all list all available versions instead. remove Remove the target installed version of solc . --ignore-missing do not raise an exception if the target version is not installed. switch Change the selected version of solc to the target version. use Change the selected version of solc to the target version and install it if not already installed. A version range may be provided resulting into installation of the latest version matching the range. --force reinstall the version even if already installed.","title":"Commands"},{"location":"api-reference/ir/abc/","text":"woke.ast.ir.abc.IrAbc class # Bases: ABC Base class for all IR nodes. Defines attributes and methods that are common to all Solidity and Yul IR nodes. IR model is built on top of the AST (Abstract Syntax Tree) output of the solc compiler . Each IR node is associated with a source code location in a source file . This means that each IR node has a corresponding (typically non-empty) Solidity or Yul source code . Info Yul IR nodes can have empty source code. In the case of Solidity IR nodes, this should not happen. Source code in woke/ast/ir/abc.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 class IrAbc ( ABC ): \"\"\" Base class for all IR nodes. Defines attributes and methods that are common to all Solidity and Yul IR nodes. IR model is built on top of the AST (Abstract Syntax Tree) output of the [solc compiler](https://docs.soliditylang.org/en/latest/using-the-compiler.html). Each IR node is associated with a [source code location][woke.ast.ir.abc.IrAbc.byte_location] in a [source file][woke.ast.ir.abc.IrAbc.file]. This means that each IR node has a corresponding (typically non-empty) Solidity or Yul [source code][woke.ast.ir.abc.IrAbc.source]. !!! info Yul IR nodes can have empty source code. In the case of Solidity IR nodes, this should not happen. \"\"\" _file : Path _source : bytes _ast_node : SolcOrYulNode _version_ranges : SolidityVersionRanges _parent : Optional [ IrAbc ] _depth : int _cu_hash : bytes _reference_resolver : ReferenceResolver def __init__ ( self , init : IrInitTuple , solc_node : SolcOrYulNode , parent : Optional [ IrAbc ] ): self . _file = init . file self . _ast_node = solc_node self . _version_ranges = init . cu . versions self . _parent = parent if self . _parent is not None : self . _depth = self . _parent . ast_tree_depth + 1 else : self . _depth = 0 self . _cu_hash = init . cu . hash self . _reference_resolver = init . reference_resolver source_start = solc_node . src . byte_offset source_end = source_start + solc_node . src . byte_length self . _source = init . source [ source_start : source_end ] if source_start != source_end : init . interval_tree [ source_start : source_end ] = self def __iter__ ( self ) -> Iterator [ IrAbc ]: \"\"\" Yields: Self and (recursively) all child IR nodes. \"\"\" yield self @property @abstractmethod def parent ( self ) -> Optional [ IrAbc ]: \"\"\" The parent node of this node. Can only be `None` for the root ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) node. Returns: Parent node of this node. \"\"\" ... @property def file ( self ) -> Path : \"\"\" The absolute path to the source file that contains this IR node. For a given IR node, all child and parent nodes have the same file path. Returns: Absolute path to the file containing this node. \"\"\" return self . _file @property @abstractmethod def ast_node ( self ) -> SolcOrYulNode : ... @property def cu_hash ( self ) -> bytes : return self . _cu_hash @property def version_ranges ( self ) -> SolidityVersionRanges : \"\"\" !!! example ```python if \"0.8.0\" in node.version_ranges: print(\"The given file can be compiled with solc 0.8.0\") ``` Returns: Object listing all `solc` versions that can be used to compile the file containing this node. \"\"\" return self . _version_ranges @property def ast_tree_depth ( self ) -> int : \"\"\" The depth of this node in the AST tree. The root node ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) of each file has depth 0. Direct child nodes of a `node` have depth `{node}.ast_tree_depth + 1`. !!! tip Woke uses [interval trees](https://github.com/chaimleib/intervaltree) to get a list of all IR nodes at a given byte offset in a given file. This property can be used to sort these nodes by their depth in the AST tree and (for example) to choose the most nested one. Returns: Depth of this node in the AST tree, starting from 0. \"\"\" return self . _depth @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" The start and end byte offsets of this node in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset. `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`. The byte location of a child node is typically a subrange of the byte location of its parent node. !!! info This is not true for [Structured documentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation], where documentation strings must be located before a declaration. Returns: Tuple of the start and end byte offsets of this node in the source file. \"\"\" return ( self . _ast_node . src . byte_offset , self . _ast_node . src . byte_offset + self . _ast_node . src . byte_length , ) @property def source ( self ) -> str : \"\"\" UTF-8 decoded source code from the [source file][woke.ast.ir.abc.IrAbc.file] at the [byte offset][woke.ast.ir.abc.IrAbc.byte_location] of this node. Returns: Solidity or Yul source code corresponding to this node. \"\"\" return self . _source . decode ( \"utf-8\" ) __iter__ () # Yields: Type Description Iterator [ IrAbc ] Self and (recursively) all child IR nodes. Source code in woke/ast/ir/abc.py 56 57 58 59 60 61 def __iter__ ( self ) -> Iterator [ IrAbc ]: \"\"\" Yields: Self and (recursively) all child IR nodes. \"\"\" yield self ast_tree_depth () property # The depth of this node in the AST tree. The root node ( Source unit ) of each file has depth 0. Direct child nodes of a node have depth {node}.ast_tree_depth + 1 . Tip Woke uses interval trees to get a list of all IR nodes at a given byte offset in a given file. This property can be used to sort these nodes by their depth in the AST tree and (for example) to choose the most nested one. Returns: Type Description int Depth of this node in the AST tree, starting from 0. Source code in woke/ast/ir/abc.py 105 106 107 108 109 110 111 112 113 114 115 116 117 @property def ast_tree_depth ( self ) -> int : \"\"\" The depth of this node in the AST tree. The root node ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) of each file has depth 0. Direct child nodes of a `node` have depth `{node}.ast_tree_depth + 1`. !!! tip Woke uses [interval trees](https://github.com/chaimleib/intervaltree) to get a list of all IR nodes at a given byte offset in a given file. This property can be used to sort these nodes by their depth in the AST tree and (for example) to choose the most nested one. Returns: Depth of this node in the AST tree, starting from 0. \"\"\" return self . _depth byte_location () property # The start and end byte offsets of this node in the source file. {node}.byte_location[0] is the start byte offset, {node}.byte_location[1] is the end byte offset. {node}.byte_location[1] is always greater than or equal to {node}.byte_location[0] . The byte location of a child node is typically a subrange of the byte location of its parent node. Info This is not true for Structured documentation , where documentation strings must be located before a declaration. Returns: Type Description Tuple [ int , int ] Tuple of the start and end byte offsets of this node in the source file. Source code in woke/ast/ir/abc.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" The start and end byte offsets of this node in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset. `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`. The byte location of a child node is typically a subrange of the byte location of its parent node. !!! info This is not true for [Structured documentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation], where documentation strings must be located before a declaration. Returns: Tuple of the start and end byte offsets of this node in the source file. \"\"\" return ( self . _ast_node . src . byte_offset , self . _ast_node . src . byte_offset + self . _ast_node . src . byte_length , ) file () property # The absolute path to the source file that contains this IR node. For a given IR node, all child and parent nodes have the same file path. Returns: Type Description Path Absolute path to the file containing this node. Source code in woke/ast/ir/abc.py 74 75 76 77 78 79 80 81 @property def file ( self ) -> Path : \"\"\" The absolute path to the source file that contains this IR node. For a given IR node, all child and parent nodes have the same file path. Returns: Absolute path to the file containing this node. \"\"\" return self . _file parent () abstractmethod property # The parent node of this node. Can only be None for the root ( Source unit ) node. Returns: Type Description Optional [ IrAbc ] Parent node of this node. Source code in woke/ast/ir/abc.py 63 64 65 66 67 68 69 70 71 72 @property @abstractmethod def parent ( self ) -> Optional [ IrAbc ]: \"\"\" The parent node of this node. Can only be `None` for the root ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) node. Returns: Parent node of this node. \"\"\" ... source () property # UTF-8 decoded source code from the source file at the byte offset of this node. Returns: Type Description str Solidity or Yul source code corresponding to this node. Source code in woke/ast/ir/abc.py 139 140 141 142 143 144 145 146 @property def source ( self ) -> str : \"\"\" UTF-8 decoded source code from the [source file][woke.ast.ir.abc.IrAbc.file] at the [byte offset][woke.ast.ir.abc.IrAbc.byte_location] of this node. Returns: Solidity or Yul source code corresponding to this node. \"\"\" return self . _source . decode ( \"utf-8\" ) version_ranges () property # Example if \"0.8.0\" in node . version_ranges : print ( \"The given file can be compiled with solc 0.8.0\" ) Returns: Type Description SolidityVersionRanges Object listing all solc versions that can be used to compile the file containing this node. Source code in woke/ast/ir/abc.py 92 93 94 95 96 97 98 99 100 101 102 103 @property def version_ranges ( self ) -> SolidityVersionRanges : \"\"\" !!! example ```python if \"0.8.0\" in node.version_ranges: print(\"The given file can be compiled with solc 0.8.0\") ``` Returns: Object listing all `solc` versions that can be used to compile the file containing this node. \"\"\" return self . _version_ranges woke.ast.ir.abc.SolidityAbc class # Bases: IrAbc , ABC Abstract base class for all Solidity IR nodes. Source code in woke/ast/ir/abc.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 class SolidityAbc ( IrAbc , ABC ): \"\"\" Abstract base class for all Solidity IR nodes. \"\"\" _ast_node : SolcNode def __init__ ( self , init : IrInitTuple , solc_node : SolcNode , parent : Optional [ SolidityAbc ] ): super () . __init__ ( init , solc_node , parent ) self . _reference_resolver . register_node ( self , solc_node . id , self . _cu_hash ) @property def ast_node ( self ) -> SolcNode : return self . _ast_node @property def ast_node_id ( self ) -> int : return self . _ast_node . id woke.ast.ir.yul.abc.YulAbc class # Bases: IrAbc , ABC Abstract base class for all Yul IR nodes. Source code in woke/ast/ir/yul/abc.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class YulAbc ( IrAbc , ABC ): \"\"\" Abstract base class for all Yul IR nodes. \"\"\" _ast_node : YulNode def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self @property def ast_node ( self ) -> YulNode : return self . _ast_node @property # @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set () # TODO woke.ast.ir.declaration.abc.DeclarationAbc class # Bases: SolidityAbc , ABC Abstract base class for all Solidity declarations. Source code in woke/ast/ir/declaration/abc.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 class DeclarationAbc ( SolidityAbc , ABC ): \"\"\" Abstract base class for all Solidity declarations. \"\"\" _name : str _name_location : Optional [ Tuple [ int , int ]] _references : Set [ Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]] def __init__ ( self , init : IrInitTuple , solc_node : SolcDeclarationUnion , parent : SolidityAbc ): super () . __init__ ( init , solc_node , parent ) self . _name = solc_node . name if solc_node . name_location is None or solc_node . name_location . byte_offset < 0 : self . _name_location = None else : self . _name_location = ( solc_node . name_location . byte_offset , solc_node . name_location . byte_offset + solc_node . name_location . byte_length , ) self . _references = set () def register_reference ( self , reference : Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]): self . _references . add ( reference ) def unregister_reference ( self , reference : Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]): self . _references . remove ( reference ) def get_all_references ( self , include_declarations : bool ) -> Iterator [ Union [ DeclarationAbc , Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]]]: if include_declarations : yield self yield from self . references @abstractmethod def _parse_name_location ( self ) -> Tuple [ int , int ]: ... @property def name ( self ) -> str : \"\"\" Returns: User-defined name of the declared object. \"\"\" return self . _name @property @abstractmethod def canonical_name ( self ) -> str : \"\"\" !!! example `ContractName.StructName.FieldName` in the case of the `FieldName` [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declaration in the following example: ```solidity contract ContractName { struct StructName { uint FieldName; } } ``` Returns: Canonical name of the declared object. \"\"\" ... @property @abstractmethod def declaration_string ( self ) -> str : \"\"\" Declaration string that can be used for example in LSP hover. Does not include the declaration body, if any. Does not need to match the actual declaration string in the source code (may use a different order of keywords, for example). !!! example `:::solidity function foo(uint a, uint b) public payable virtual onlyOwner returns (uint)` of the [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration in the following example: ```solidity function foo(uint a, uint b) public onlyOwner virtual payable returns( uint ) { return a + b; } ``` Returns: String representation of the declaration. \"\"\" ... @property def name_location ( self ) -> Tuple [ int , int ]: \"\"\" Similar to [byte_location][woke.ast.ir.abc.IrAbc.byte_location], but returns the location of the declaration name in the source code. Returns: Tuple of the start and end byte offsets of the declaration name in the source code. \"\"\" if self . _name_location is None : self . _name_location = self . _parse_name_location () return self . _name_location @property def references ( self ) -> FrozenSet [ Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]]: \"\"\" Returns: Set of all IR nodes referencing to this declaration. \"\"\" return frozenset ( self . _references ) canonical_name () abstractmethod property # Example ContractName.StructName.FieldName in the case of the FieldName VariableDeclaration declaration in the following example: contract ContractName { struct StructName { uint FieldName ; } } Returns: Type Description str Canonical name of the declared object. Source code in woke/ast/ir/declaration/abc.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 @property @abstractmethod def canonical_name ( self ) -> str : \"\"\" !!! example `ContractName.StructName.FieldName` in the case of the `FieldName` [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declaration in the following example: ```solidity contract ContractName { struct StructName { uint FieldName; } } ``` Returns: Canonical name of the declared object. \"\"\" ... declaration_string () abstractmethod property # Declaration string that can be used for example in LSP hover. Does not include the declaration body, if any. Does not need to match the actual declaration string in the source code (may use a different order of keywords, for example). Example function foo ( uint a , uint b ) public payable virtual onlyOwner returns ( uint ) of the FunctionDefinition declaration in the following example: function foo ( uint a , uint b ) public onlyOwner virtual payable returns ( uint ) { return a + b ; } Returns: Type Description str String representation of the declaration. Source code in woke/ast/ir/declaration/abc.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 @property @abstractmethod def declaration_string ( self ) -> str : \"\"\" Declaration string that can be used for example in LSP hover. Does not include the declaration body, if any. Does not need to match the actual declaration string in the source code (may use a different order of keywords, for example). !!! example `:::solidity function foo(uint a, uint b) public payable virtual onlyOwner returns (uint)` of the [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration in the following example: ```solidity function foo(uint a, uint b) public onlyOwner virtual payable returns( uint ) { return a + b; } ``` Returns: String representation of the declaration. \"\"\" ... name () property # Returns: Type Description str User-defined name of the declared object. Source code in woke/ast/ir/declaration/abc.py 81 82 83 84 85 86 87 @property def name ( self ) -> str : \"\"\" Returns: User-defined name of the declared object. \"\"\" return self . _name name_location () property # Similar to byte_location , but returns the location of the declaration name in the source code. Returns: Type Description Tuple [ int , int ] Tuple of the start and end byte offsets of the declaration name in the source code. Source code in woke/ast/ir/declaration/abc.py 125 126 127 128 129 130 131 132 133 134 @property def name_location ( self ) -> Tuple [ int , int ]: \"\"\" Similar to [byte_location][woke.ast.ir.abc.IrAbc.byte_location], but returns the location of the declaration name in the source code. Returns: Tuple of the start and end byte offsets of the declaration name in the source code. \"\"\" if self . _name_location is None : self . _name_location = self . _parse_name_location () return self . _name_location references () property # Returns: Type Description FrozenSet [ Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]] Set of all IR nodes referencing to this declaration. Source code in woke/ast/ir/declaration/abc.py 136 137 138 139 140 141 142 @property def references ( self ) -> FrozenSet [ Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]]: \"\"\" Returns: Set of all IR nodes referencing to this declaration. \"\"\" return frozenset ( self . _references ) woke.ast.ir.expression.abc.ExpressionAbc class # Bases: SolidityAbc , ABC Abstract base class for all IR expression nodes. Something that has a value. Source code in woke/ast/ir/expression/abc.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 class ExpressionAbc ( SolidityAbc , ABC ): \"\"\" Abstract base class for all IR expression nodes. > Something that has a value. \"\"\" _type_descriptions : TypeDescriptionsModel def __init__ ( self , init : IrInitTuple , expression : SolcExpressionUnion , parent : SolidityAbc ): super () . __init__ ( init , expression , parent ) self . _type_descriptions = expression . type_descriptions @staticmethod def from_ast ( init : IrInitTuple , expression : SolcExpressionUnion , parent : SolidityAbc ) -> \"ExpressionAbc\" : from .assignment import Assignment from .binary_operation import BinaryOperation from .conditional import Conditional from .elementary_type_name_expression import ElementaryTypeNameExpression from .function_call import FunctionCall from .function_call_options import FunctionCallOptions from .identifier import Identifier from .index_access import IndexAccess from .index_range_access import IndexRangeAccess from .literal import Literal from .member_access import MemberAccess from .new_expression import NewExpression from .tuple_expression import TupleExpression from .unary_operation import UnaryOperation if isinstance ( expression , SolcAssignment ): return Assignment ( init , expression , parent ) elif isinstance ( expression , SolcBinaryOperation ): return BinaryOperation ( init , expression , parent ) elif isinstance ( expression , SolcConditional ): return Conditional ( init , expression , parent ) elif isinstance ( expression , SolcElementaryTypeNameExpression ): return ElementaryTypeNameExpression ( init , expression , parent ) elif isinstance ( expression , SolcFunctionCall ): return FunctionCall ( init , expression , parent ) elif isinstance ( expression , SolcFunctionCallOptions ): return FunctionCallOptions ( init , expression , parent ) elif isinstance ( expression , SolcIdentifier ): return Identifier ( init , expression , parent ) elif isinstance ( expression , SolcIndexAccess ): return IndexAccess ( init , expression , parent ) elif isinstance ( expression , SolcIndexRangeAccess ): return IndexRangeAccess ( init , expression , parent ) elif isinstance ( expression , SolcLiteral ): return Literal ( init , expression , parent ) elif isinstance ( expression , SolcMemberAccess ): return MemberAccess ( init , expression , parent ) elif isinstance ( expression , SolcNewExpression ): return NewExpression ( init , expression , parent ) elif isinstance ( expression , SolcTupleExpression ): return TupleExpression ( init , expression , parent ) elif isinstance ( expression , SolcUnaryOperation ): return UnaryOperation ( init , expression , parent ) @property @lru_cache ( maxsize = 2048 ) def type ( self ) -> Optional [ TypeAbc ]: \"\"\" Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective]. !!! example `Ownable` in the following example has no type information: ```solidity import { Ownable } from './Ownable.sol'; ``` Returns: Type of the expression. \"\"\" if self . _type_descriptions . type_identifier is None : return None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 ), f \"Failed to parse type_identifier: { self . _type_descriptions . type_identifier } \" return ret @property def type_string ( self ) -> Optional [ str ]: \"\"\" !!! example `:::solidity function (uint256,uint256) returns (uint256)` in the case of the `foo` [Identifier][woke.ast.ir.expression.identifier.Identifier] in the `:::solidity foo(1, 2)` expression for the following function: ```solidity function foo(uint a, uint b) public onlyOwner payable virtual onlyOwner returns(uint) { return a + b; } ``` Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective]. !!! example `Ownable` in the following example has no type information: ```solidity import { Ownable } from './Ownable.sol'; ``` Returns: User-friendly string describing the expression type. \"\"\" return self . _type_descriptions . type_string @property @abstractmethod def is_ref_to_state_variable ( self ) -> bool : \"\"\" In many cases it may be useful to know if an [Assignment][woke.ast.ir.expression.assignment.Assignment] to an expression modifies a state variable or not. This may not be straightforward to determine, e.g. if the expression is a [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] or [IndexAccess][woke.ast.ir.expression.index_access.IndexAccess] to a state variable. Returns: `True` if the expression (possibly) is a reference to a state variable. \"\"\" ... @property @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: \"\"\" Returns: Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified. \"\"\" ... is_ref_to_state_variable () abstractmethod property # In many cases it may be useful to know if an Assignment to an expression modifies a state variable or not. This may not be straightforward to determine, e.g. if the expression is a MemberAccess or IndexAccess to a state variable. Returns: Type Description bool True if the expression (possibly) is a reference to a state variable. Source code in woke/ast/ir/expression/abc.py 142 143 144 145 146 147 148 149 150 151 @property @abstractmethod def is_ref_to_state_variable ( self ) -> bool : \"\"\" In many cases it may be useful to know if an [Assignment][woke.ast.ir.expression.assignment.Assignment] to an expression modifies a state variable or not. This may not be straightforward to determine, e.g. if the expression is a [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] or [IndexAccess][woke.ast.ir.expression.index_access.IndexAccess] to a state variable. Returns: `True` if the expression (possibly) is a reference to a state variable. \"\"\" ... modifies_state () abstractmethod property # Returns: Type Description Set [ Tuple [ IrAbc , ModifiesStateFlag ]] Set of child IR nodes (including self ) that modify the blockchain state and flags describing how the state is modified. Source code in woke/ast/ir/expression/abc.py 153 154 155 156 157 158 159 160 @property @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: \"\"\" Returns: Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified. \"\"\" ... type () cached property # Can be None in case of an Identifier in an ImportDirective . Example Ownable in the following example has no type information: import { Ownable } from './Ownable.sol' ; Returns: Type Description Optional [ TypeAbc ] Type of the expression. Source code in woke/ast/ir/expression/abc.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @property @lru_cache ( maxsize = 2048 ) def type ( self ) -> Optional [ TypeAbc ]: \"\"\" Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective]. !!! example `Ownable` in the following example has no type information: ```solidity import { Ownable } from './Ownable.sol'; ``` Returns: Type of the expression. \"\"\" if self . _type_descriptions . type_identifier is None : return None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 ), f \"Failed to parse type_identifier: { self . _type_descriptions . type_identifier } \" return ret type_string () property # Example function ( uint256 , uint256 ) returns ( uint256 ) in the case of the foo Identifier in the foo ( 1 , 2 ) expression for the following function: function foo ( uint a , uint b ) public onlyOwner payable virtual onlyOwner returns ( uint ) { return a + b ; } Can be None in case of an Identifier in an ImportDirective . Example Ownable in the following example has no type information: import { Ownable } from './Ownable.sol' ; Returns: Type Description Optional [ str ] User-friendly string describing the expression type. Source code in woke/ast/ir/expression/abc.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @property def type_string ( self ) -> Optional [ str ]: \"\"\" !!! example `:::solidity function (uint256,uint256) returns (uint256)` in the case of the `foo` [Identifier][woke.ast.ir.expression.identifier.Identifier] in the `:::solidity foo(1, 2)` expression for the following function: ```solidity function foo(uint a, uint b) public onlyOwner payable virtual onlyOwner returns(uint) { return a + b; } ``` Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective]. !!! example `Ownable` in the following example has no type information: ```solidity import { Ownable } from './Ownable.sol'; ``` Returns: User-friendly string describing the expression type. \"\"\" return self . _type_descriptions . type_string woke.ast.ir.statement.abc.StatementAbc class # Bases: SolidityAbc , ABC Abstract base class for all Solidity statements. Source code in woke/ast/ir/statement/abc.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 class StatementAbc ( SolidityAbc , ABC ): \"\"\" Abstract base class for all Solidity statements. \"\"\" _documentation : Optional [ str ] def __init__ ( self , init : IrInitTuple , statement : SolcStatementUnion , parent : SolidityAbc ): super () . __init__ ( init , statement , parent ) self . _documentation = statement . documentation @staticmethod def from_ast ( init : IrInitTuple , statement : SolcStatementUnion , parent : SolidityAbc ) -> \"StatementAbc\" : from .block import Block from .break_statement import Break from .continue_statement import Continue from .do_while_statement import DoWhileStatement from .emit_statement import EmitStatement from .expression_statement import ExpressionStatement from .for_statement import ForStatement from .if_statement import IfStatement from .inline_assembly import InlineAssembly from .placeholder_statement import PlaceholderStatement from .return_statement import Return from .revert_statement import RevertStatement from .try_statement import TryStatement from .unchecked_block import UncheckedBlock from .variable_declaration_statement import VariableDeclarationStatement from .while_statement import WhileStatement if isinstance ( statement , SolcBlock ): return Block ( init , statement , parent ) elif isinstance ( statement , SolcBreak ): return Break ( init , statement , parent ) elif isinstance ( statement , SolcContinue ): return Continue ( init , statement , parent ) elif isinstance ( statement , SolcDoWhileStatement ): return DoWhileStatement ( init , statement , parent ) elif isinstance ( statement , SolcEmitStatement ): return EmitStatement ( init , statement , parent ) elif isinstance ( statement , SolcExpressionStatement ): return ExpressionStatement ( init , statement , parent ) elif isinstance ( statement , SolcForStatement ): return ForStatement ( init , statement , parent ) elif isinstance ( statement , SolcIfStatement ): return IfStatement ( init , statement , parent ) elif isinstance ( statement , SolcInlineAssembly ): return InlineAssembly ( init , statement , parent ) elif isinstance ( statement , SolcPlaceholderStatement ): return PlaceholderStatement ( init , statement , parent ) elif isinstance ( statement , SolcReturn ): return Return ( init , statement , parent ) elif isinstance ( statement , SolcRevertStatement ): return RevertStatement ( init , statement , parent ) elif isinstance ( statement , SolcTryStatement ): return TryStatement ( init , statement , parent ) elif isinstance ( statement , SolcUncheckedBlock ): return UncheckedBlock ( init , statement , parent ) elif isinstance ( statement , SolcVariableDeclarationStatement ): return VariableDeclarationStatement ( init , statement , parent ) elif isinstance ( statement , SolcWhileStatement ): return WhileStatement ( init , statement , parent ) assert False , f \"Unknown statement type: { type ( statement ) } \" @property @abstractmethod def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent node of the statement. \"\"\" ... @property @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: \"\"\" Returns: Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified. \"\"\" ... def statements_iter ( self ) -> Iterator [ StatementAbc ]: \"\"\" Yields: Child statements of the statement (recursively) including `self`. \"\"\" yield self @property def documentation ( self ) -> Optional [ str ]: \"\"\" Statement documentation strings should be placed above the statement. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation documentation () property # Statement documentation strings should be placed above the statement. Returns: Type Description Optional [ str ] NatSpec documentation string, if any. Source code in woke/ast/ir/statement/abc.py 145 146 147 148 149 150 151 152 @property def documentation ( self ) -> Optional [ str ]: \"\"\" Statement documentation strings should be placed above the statement. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation modifies_state () abstractmethod property # Returns: Type Description Set [ Tuple [ IrAbc , ModifiesStateFlag ]] Set of child IR nodes (including self ) that modify the blockchain state and flags describing how the state is modified. Source code in woke/ast/ir/statement/abc.py 129 130 131 132 133 134 135 136 @property @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: \"\"\" Returns: Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified. \"\"\" ... parent () abstractmethod property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause ] Parent node of the statement. Source code in woke/ast/ir/statement/abc.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 @property @abstractmethod def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent node of the statement. \"\"\" ... statements_iter () # Yields: Type Description Iterator [ StatementAbc ] Child statements of the statement (recursively) including self . Source code in woke/ast/ir/statement/abc.py 138 139 140 141 142 143 def statements_iter ( self ) -> Iterator [ StatementAbc ]: \"\"\" Yields: Child statements of the statement (recursively) including `self`. \"\"\" yield self woke.ast.ir.type_name.abc.TypeNameAbc class # Bases: SolidityAbc , ABC Abstract base class for all IR type name nodes. Source code in woke/ast/ir/type_name/abc.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 class TypeNameAbc ( SolidityAbc , ABC ): \"\"\" Abstract base class for all IR type name nodes. \"\"\" _type_descriptions : TypeDescriptionsModel def __init__ ( self , init : IrInitTuple , type_name : SolcTypeNameUnion , parent : SolidityAbc ): super () . __init__ ( init , type_name , parent ) self . _type_descriptions = type_name . type_descriptions @staticmethod def from_ast ( init : IrInitTuple , type_name : SolcTypeNameUnion , parent : SolidityAbc ) -> TypeNameAbc : from .array_type_name import ArrayTypeName from .elementary_type_name import ElementaryTypeName from .function_type_name import FunctionTypeName from .mapping import Mapping from .user_defined_type_name import UserDefinedTypeName if isinstance ( type_name , SolcArrayTypeName ): return ArrayTypeName ( init , type_name , parent ) elif isinstance ( type_name , SolcElementaryTypeName ): return ElementaryTypeName ( init , type_name , parent ) elif isinstance ( type_name , SolcFunctionTypeName ): return FunctionTypeName ( init , type_name , parent ) elif isinstance ( type_name , SolcMapping ): return Mapping ( init , type_name , parent ) elif isinstance ( type_name , SolcUserDefinedTypeName ): return UserDefinedTypeName ( init , type_name , parent ) @property @abstractmethod def parent ( self , ) -> Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping , ]: \"\"\" Returns: Parent node of the type name. \"\"\" ... @property @lru_cache ( maxsize = 2048 ) def type ( self , ) -> Union [ Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract , ]: \"\"\" Returns: Type of the type name. \"\"\" assert self . _type_descriptions . type_identifier is not None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 and ret is not None ), f \"Failed to parse type identifier: { self . _type_descriptions . type_identifier } \" assert isinstance ( ret , ( Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract , ), ) return ret @property def type_string ( self ) -> str : \"\"\" !!! example `:::solidity mapping(uint256 => int24[])` in the case of the `:::solidity mapping(uint => int24[])` type name in the following declaration: ```solidity mapping(uint => int24[]) map; ``` Returns: User-friendly string describing the type name type. \"\"\" assert self . _type_descriptions . type_string is not None return self . _type_descriptions . type_string parent () abstractmethod property # Returns: Type Description Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] Parent node of the type name. Source code in woke/ast/ir/type_name/abc.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 @property @abstractmethod def parent ( self , ) -> Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping , ]: \"\"\" Returns: Parent node of the type name. \"\"\" ... type () cached property # Returns: Type Description Union [ Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract ] Type of the type name. Source code in woke/ast/ir/type_name/abc.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 @property @lru_cache ( maxsize = 2048 ) def type ( self , ) -> Union [ Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract , ]: \"\"\" Returns: Type of the type name. \"\"\" assert self . _type_descriptions . type_identifier is not None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 and ret is not None ), f \"Failed to parse type identifier: { self . _type_descriptions . type_identifier } \" assert isinstance ( ret , ( Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract , ), ) return ret type_string () property # Example mapping ( uint256 => int24 []) in the case of the mapping ( uint => int24 []) type name in the following declaration: mapping ( uint => int24 []) map ; Returns: Type Description str User-friendly string describing the type name type. Source code in woke/ast/ir/type_name/abc.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 @property def type_string ( self ) -> str : \"\"\" !!! example `:::solidity mapping(uint256 => int24[])` in the case of the `:::solidity mapping(uint => int24[])` type name in the following declaration: ```solidity mapping(uint => int24[]) map; ``` Returns: User-friendly string describing the type name type. \"\"\" assert self . _type_descriptions . type_string is not None return self . _type_descriptions . type_string","title":"Abc"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc","text":"Bases: ABC Base class for all IR nodes. Defines attributes and methods that are common to all Solidity and Yul IR nodes. IR model is built on top of the AST (Abstract Syntax Tree) output of the solc compiler . Each IR node is associated with a source code location in a source file . This means that each IR node has a corresponding (typically non-empty) Solidity or Yul source code . Info Yul IR nodes can have empty source code. In the case of Solidity IR nodes, this should not happen. Source code in woke/ast/ir/abc.py 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 class IrAbc ( ABC ): \"\"\" Base class for all IR nodes. Defines attributes and methods that are common to all Solidity and Yul IR nodes. IR model is built on top of the AST (Abstract Syntax Tree) output of the [solc compiler](https://docs.soliditylang.org/en/latest/using-the-compiler.html). Each IR node is associated with a [source code location][woke.ast.ir.abc.IrAbc.byte_location] in a [source file][woke.ast.ir.abc.IrAbc.file]. This means that each IR node has a corresponding (typically non-empty) Solidity or Yul [source code][woke.ast.ir.abc.IrAbc.source]. !!! info Yul IR nodes can have empty source code. In the case of Solidity IR nodes, this should not happen. \"\"\" _file : Path _source : bytes _ast_node : SolcOrYulNode _version_ranges : SolidityVersionRanges _parent : Optional [ IrAbc ] _depth : int _cu_hash : bytes _reference_resolver : ReferenceResolver def __init__ ( self , init : IrInitTuple , solc_node : SolcOrYulNode , parent : Optional [ IrAbc ] ): self . _file = init . file self . _ast_node = solc_node self . _version_ranges = init . cu . versions self . _parent = parent if self . _parent is not None : self . _depth = self . _parent . ast_tree_depth + 1 else : self . _depth = 0 self . _cu_hash = init . cu . hash self . _reference_resolver = init . reference_resolver source_start = solc_node . src . byte_offset source_end = source_start + solc_node . src . byte_length self . _source = init . source [ source_start : source_end ] if source_start != source_end : init . interval_tree [ source_start : source_end ] = self def __iter__ ( self ) -> Iterator [ IrAbc ]: \"\"\" Yields: Self and (recursively) all child IR nodes. \"\"\" yield self @property @abstractmethod def parent ( self ) -> Optional [ IrAbc ]: \"\"\" The parent node of this node. Can only be `None` for the root ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) node. Returns: Parent node of this node. \"\"\" ... @property def file ( self ) -> Path : \"\"\" The absolute path to the source file that contains this IR node. For a given IR node, all child and parent nodes have the same file path. Returns: Absolute path to the file containing this node. \"\"\" return self . _file @property @abstractmethod def ast_node ( self ) -> SolcOrYulNode : ... @property def cu_hash ( self ) -> bytes : return self . _cu_hash @property def version_ranges ( self ) -> SolidityVersionRanges : \"\"\" !!! example ```python if \"0.8.0\" in node.version_ranges: print(\"The given file can be compiled with solc 0.8.0\") ``` Returns: Object listing all `solc` versions that can be used to compile the file containing this node. \"\"\" return self . _version_ranges @property def ast_tree_depth ( self ) -> int : \"\"\" The depth of this node in the AST tree. The root node ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) of each file has depth 0. Direct child nodes of a `node` have depth `{node}.ast_tree_depth + 1`. !!! tip Woke uses [interval trees](https://github.com/chaimleib/intervaltree) to get a list of all IR nodes at a given byte offset in a given file. This property can be used to sort these nodes by their depth in the AST tree and (for example) to choose the most nested one. Returns: Depth of this node in the AST tree, starting from 0. \"\"\" return self . _depth @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" The start and end byte offsets of this node in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset. `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`. The byte location of a child node is typically a subrange of the byte location of its parent node. !!! info This is not true for [Structured documentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation], where documentation strings must be located before a declaration. Returns: Tuple of the start and end byte offsets of this node in the source file. \"\"\" return ( self . _ast_node . src . byte_offset , self . _ast_node . src . byte_offset + self . _ast_node . src . byte_length , ) @property def source ( self ) -> str : \"\"\" UTF-8 decoded source code from the [source file][woke.ast.ir.abc.IrAbc.file] at the [byte offset][woke.ast.ir.abc.IrAbc.byte_location] of this node. Returns: Solidity or Yul source code corresponding to this node. \"\"\" return self . _source . decode ( \"utf-8\" )","title":"IrAbc"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.__iter__","text":"Yields: Type Description Iterator [ IrAbc ] Self and (recursively) all child IR nodes. Source code in woke/ast/ir/abc.py 56 57 58 59 60 61 def __iter__ ( self ) -> Iterator [ IrAbc ]: \"\"\" Yields: Self and (recursively) all child IR nodes. \"\"\" yield self","title":"__iter__()"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.ast_tree_depth","text":"The depth of this node in the AST tree. The root node ( Source unit ) of each file has depth 0. Direct child nodes of a node have depth {node}.ast_tree_depth + 1 . Tip Woke uses interval trees to get a list of all IR nodes at a given byte offset in a given file. This property can be used to sort these nodes by their depth in the AST tree and (for example) to choose the most nested one. Returns: Type Description int Depth of this node in the AST tree, starting from 0. Source code in woke/ast/ir/abc.py 105 106 107 108 109 110 111 112 113 114 115 116 117 @property def ast_tree_depth ( self ) -> int : \"\"\" The depth of this node in the AST tree. The root node ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) of each file has depth 0. Direct child nodes of a `node` have depth `{node}.ast_tree_depth + 1`. !!! tip Woke uses [interval trees](https://github.com/chaimleib/intervaltree) to get a list of all IR nodes at a given byte offset in a given file. This property can be used to sort these nodes by their depth in the AST tree and (for example) to choose the most nested one. Returns: Depth of this node in the AST tree, starting from 0. \"\"\" return self . _depth","title":"ast_tree_depth()"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.byte_location","text":"The start and end byte offsets of this node in the source file. {node}.byte_location[0] is the start byte offset, {node}.byte_location[1] is the end byte offset. {node}.byte_location[1] is always greater than or equal to {node}.byte_location[0] . The byte location of a child node is typically a subrange of the byte location of its parent node. Info This is not true for Structured documentation , where documentation strings must be located before a declaration. Returns: Type Description Tuple [ int , int ] Tuple of the start and end byte offsets of this node in the source file. Source code in woke/ast/ir/abc.py 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" The start and end byte offsets of this node in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset. `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`. The byte location of a child node is typically a subrange of the byte location of its parent node. !!! info This is not true for [Structured documentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation], where documentation strings must be located before a declaration. Returns: Tuple of the start and end byte offsets of this node in the source file. \"\"\" return ( self . _ast_node . src . byte_offset , self . _ast_node . src . byte_offset + self . _ast_node . src . byte_length , )","title":"byte_location()"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.file","text":"The absolute path to the source file that contains this IR node. For a given IR node, all child and parent nodes have the same file path. Returns: Type Description Path Absolute path to the file containing this node. Source code in woke/ast/ir/abc.py 74 75 76 77 78 79 80 81 @property def file ( self ) -> Path : \"\"\" The absolute path to the source file that contains this IR node. For a given IR node, all child and parent nodes have the same file path. Returns: Absolute path to the file containing this node. \"\"\" return self . _file","title":"file()"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.parent","text":"The parent node of this node. Can only be None for the root ( Source unit ) node. Returns: Type Description Optional [ IrAbc ] Parent node of this node. Source code in woke/ast/ir/abc.py 63 64 65 66 67 68 69 70 71 72 @property @abstractmethod def parent ( self ) -> Optional [ IrAbc ]: \"\"\" The parent node of this node. Can only be `None` for the root ([Source unit][woke.ast.ir.meta.source_unit.SourceUnit]) node. Returns: Parent node of this node. \"\"\" ...","title":"parent()"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.source","text":"UTF-8 decoded source code from the source file at the byte offset of this node. Returns: Type Description str Solidity or Yul source code corresponding to this node. Source code in woke/ast/ir/abc.py 139 140 141 142 143 144 145 146 @property def source ( self ) -> str : \"\"\" UTF-8 decoded source code from the [source file][woke.ast.ir.abc.IrAbc.file] at the [byte offset][woke.ast.ir.abc.IrAbc.byte_location] of this node. Returns: Solidity or Yul source code corresponding to this node. \"\"\" return self . _source . decode ( \"utf-8\" )","title":"source()"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.IrAbc.version_ranges","text":"Example if \"0.8.0\" in node . version_ranges : print ( \"The given file can be compiled with solc 0.8.0\" ) Returns: Type Description SolidityVersionRanges Object listing all solc versions that can be used to compile the file containing this node. Source code in woke/ast/ir/abc.py 92 93 94 95 96 97 98 99 100 101 102 103 @property def version_ranges ( self ) -> SolidityVersionRanges : \"\"\" !!! example ```python if \"0.8.0\" in node.version_ranges: print(\"The given file can be compiled with solc 0.8.0\") ``` Returns: Object listing all `solc` versions that can be used to compile the file containing this node. \"\"\" return self . _version_ranges","title":"version_ranges()"},{"location":"api-reference/ir/abc/#woke.ast.ir.abc.SolidityAbc","text":"Bases: IrAbc , ABC Abstract base class for all Solidity IR nodes. Source code in woke/ast/ir/abc.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 class SolidityAbc ( IrAbc , ABC ): \"\"\" Abstract base class for all Solidity IR nodes. \"\"\" _ast_node : SolcNode def __init__ ( self , init : IrInitTuple , solc_node : SolcNode , parent : Optional [ SolidityAbc ] ): super () . __init__ ( init , solc_node , parent ) self . _reference_resolver . register_node ( self , solc_node . id , self . _cu_hash ) @property def ast_node ( self ) -> SolcNode : return self . _ast_node @property def ast_node_id ( self ) -> int : return self . _ast_node . id","title":"SolidityAbc"},{"location":"api-reference/ir/abc/#woke.ast.ir.yul.abc.YulAbc","text":"Bases: IrAbc , ABC Abstract base class for all Yul IR nodes. Source code in woke/ast/ir/yul/abc.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 class YulAbc ( IrAbc , ABC ): \"\"\" Abstract base class for all Yul IR nodes. \"\"\" _ast_node : YulNode def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self @property def ast_node ( self ) -> YulNode : return self . _ast_node @property # @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set () # TODO","title":"YulAbc"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc","text":"Bases: SolidityAbc , ABC Abstract base class for all Solidity declarations. Source code in woke/ast/ir/declaration/abc.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 class DeclarationAbc ( SolidityAbc , ABC ): \"\"\" Abstract base class for all Solidity declarations. \"\"\" _name : str _name_location : Optional [ Tuple [ int , int ]] _references : Set [ Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]] def __init__ ( self , init : IrInitTuple , solc_node : SolcDeclarationUnion , parent : SolidityAbc ): super () . __init__ ( init , solc_node , parent ) self . _name = solc_node . name if solc_node . name_location is None or solc_node . name_location . byte_offset < 0 : self . _name_location = None else : self . _name_location = ( solc_node . name_location . byte_offset , solc_node . name_location . byte_offset + solc_node . name_location . byte_length , ) self . _references = set () def register_reference ( self , reference : Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]): self . _references . add ( reference ) def unregister_reference ( self , reference : Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]): self . _references . remove ( reference ) def get_all_references ( self , include_declarations : bool ) -> Iterator [ Union [ DeclarationAbc , Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]]]: if include_declarations : yield self yield from self . references @abstractmethod def _parse_name_location ( self ) -> Tuple [ int , int ]: ... @property def name ( self ) -> str : \"\"\" Returns: User-defined name of the declared object. \"\"\" return self . _name @property @abstractmethod def canonical_name ( self ) -> str : \"\"\" !!! example `ContractName.StructName.FieldName` in the case of the `FieldName` [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declaration in the following example: ```solidity contract ContractName { struct StructName { uint FieldName; } } ``` Returns: Canonical name of the declared object. \"\"\" ... @property @abstractmethod def declaration_string ( self ) -> str : \"\"\" Declaration string that can be used for example in LSP hover. Does not include the declaration body, if any. Does not need to match the actual declaration string in the source code (may use a different order of keywords, for example). !!! example `:::solidity function foo(uint a, uint b) public payable virtual onlyOwner returns (uint)` of the [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration in the following example: ```solidity function foo(uint a, uint b) public onlyOwner virtual payable returns( uint ) { return a + b; } ``` Returns: String representation of the declaration. \"\"\" ... @property def name_location ( self ) -> Tuple [ int , int ]: \"\"\" Similar to [byte_location][woke.ast.ir.abc.IrAbc.byte_location], but returns the location of the declaration name in the source code. Returns: Tuple of the start and end byte offsets of the declaration name in the source code. \"\"\" if self . _name_location is None : self . _name_location = self . _parse_name_location () return self . _name_location @property def references ( self ) -> FrozenSet [ Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]]: \"\"\" Returns: Set of all IR nodes referencing to this declaration. \"\"\" return frozenset ( self . _references )","title":"DeclarationAbc"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.canonical_name","text":"Example ContractName.StructName.FieldName in the case of the FieldName VariableDeclaration declaration in the following example: contract ContractName { struct StructName { uint FieldName ; } } Returns: Type Description str Canonical name of the declared object. Source code in woke/ast/ir/declaration/abc.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 @property @abstractmethod def canonical_name ( self ) -> str : \"\"\" !!! example `ContractName.StructName.FieldName` in the case of the `FieldName` [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declaration in the following example: ```solidity contract ContractName { struct StructName { uint FieldName; } } ``` Returns: Canonical name of the declared object. \"\"\" ...","title":"canonical_name()"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.declaration_string","text":"Declaration string that can be used for example in LSP hover. Does not include the declaration body, if any. Does not need to match the actual declaration string in the source code (may use a different order of keywords, for example). Example function foo ( uint a , uint b ) public payable virtual onlyOwner returns ( uint ) of the FunctionDefinition declaration in the following example: function foo ( uint a , uint b ) public onlyOwner virtual payable returns ( uint ) { return a + b ; } Returns: Type Description str String representation of the declaration. Source code in woke/ast/ir/declaration/abc.py 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 @property @abstractmethod def declaration_string ( self ) -> str : \"\"\" Declaration string that can be used for example in LSP hover. Does not include the declaration body, if any. Does not need to match the actual declaration string in the source code (may use a different order of keywords, for example). !!! example `:::solidity function foo(uint a, uint b) public payable virtual onlyOwner returns (uint)` of the [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration in the following example: ```solidity function foo(uint a, uint b) public onlyOwner virtual payable returns( uint ) { return a + b; } ``` Returns: String representation of the declaration. \"\"\" ...","title":"declaration_string()"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.name","text":"Returns: Type Description str User-defined name of the declared object. Source code in woke/ast/ir/declaration/abc.py 81 82 83 84 85 86 87 @property def name ( self ) -> str : \"\"\" Returns: User-defined name of the declared object. \"\"\" return self . _name","title":"name()"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.name_location","text":"Similar to byte_location , but returns the location of the declaration name in the source code. Returns: Type Description Tuple [ int , int ] Tuple of the start and end byte offsets of the declaration name in the source code. Source code in woke/ast/ir/declaration/abc.py 125 126 127 128 129 130 131 132 133 134 @property def name_location ( self ) -> Tuple [ int , int ]: \"\"\" Similar to [byte_location][woke.ast.ir.abc.IrAbc.byte_location], but returns the location of the declaration name in the source code. Returns: Tuple of the start and end byte offsets of the declaration name in the source code. \"\"\" if self . _name_location is None : self . _name_location = self . _parse_name_location () return self . _name_location","title":"name_location()"},{"location":"api-reference/ir/abc/#woke.ast.ir.declaration.abc.DeclarationAbc.references","text":"Returns: Type Description FrozenSet [ Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]] Set of all IR nodes referencing to this declaration. Source code in woke/ast/ir/declaration/abc.py 136 137 138 139 140 141 142 @property def references ( self ) -> FrozenSet [ Union [ Identifier , IdentifierPathPart , MemberAccess , ExternalReference ]]: \"\"\" Returns: Set of all IR nodes referencing to this declaration. \"\"\" return frozenset ( self . _references )","title":"references()"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc","text":"Bases: SolidityAbc , ABC Abstract base class for all IR expression nodes. Something that has a value. Source code in woke/ast/ir/expression/abc.py 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 class ExpressionAbc ( SolidityAbc , ABC ): \"\"\" Abstract base class for all IR expression nodes. > Something that has a value. \"\"\" _type_descriptions : TypeDescriptionsModel def __init__ ( self , init : IrInitTuple , expression : SolcExpressionUnion , parent : SolidityAbc ): super () . __init__ ( init , expression , parent ) self . _type_descriptions = expression . type_descriptions @staticmethod def from_ast ( init : IrInitTuple , expression : SolcExpressionUnion , parent : SolidityAbc ) -> \"ExpressionAbc\" : from .assignment import Assignment from .binary_operation import BinaryOperation from .conditional import Conditional from .elementary_type_name_expression import ElementaryTypeNameExpression from .function_call import FunctionCall from .function_call_options import FunctionCallOptions from .identifier import Identifier from .index_access import IndexAccess from .index_range_access import IndexRangeAccess from .literal import Literal from .member_access import MemberAccess from .new_expression import NewExpression from .tuple_expression import TupleExpression from .unary_operation import UnaryOperation if isinstance ( expression , SolcAssignment ): return Assignment ( init , expression , parent ) elif isinstance ( expression , SolcBinaryOperation ): return BinaryOperation ( init , expression , parent ) elif isinstance ( expression , SolcConditional ): return Conditional ( init , expression , parent ) elif isinstance ( expression , SolcElementaryTypeNameExpression ): return ElementaryTypeNameExpression ( init , expression , parent ) elif isinstance ( expression , SolcFunctionCall ): return FunctionCall ( init , expression , parent ) elif isinstance ( expression , SolcFunctionCallOptions ): return FunctionCallOptions ( init , expression , parent ) elif isinstance ( expression , SolcIdentifier ): return Identifier ( init , expression , parent ) elif isinstance ( expression , SolcIndexAccess ): return IndexAccess ( init , expression , parent ) elif isinstance ( expression , SolcIndexRangeAccess ): return IndexRangeAccess ( init , expression , parent ) elif isinstance ( expression , SolcLiteral ): return Literal ( init , expression , parent ) elif isinstance ( expression , SolcMemberAccess ): return MemberAccess ( init , expression , parent ) elif isinstance ( expression , SolcNewExpression ): return NewExpression ( init , expression , parent ) elif isinstance ( expression , SolcTupleExpression ): return TupleExpression ( init , expression , parent ) elif isinstance ( expression , SolcUnaryOperation ): return UnaryOperation ( init , expression , parent ) @property @lru_cache ( maxsize = 2048 ) def type ( self ) -> Optional [ TypeAbc ]: \"\"\" Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective]. !!! example `Ownable` in the following example has no type information: ```solidity import { Ownable } from './Ownable.sol'; ``` Returns: Type of the expression. \"\"\" if self . _type_descriptions . type_identifier is None : return None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 ), f \"Failed to parse type_identifier: { self . _type_descriptions . type_identifier } \" return ret @property def type_string ( self ) -> Optional [ str ]: \"\"\" !!! example `:::solidity function (uint256,uint256) returns (uint256)` in the case of the `foo` [Identifier][woke.ast.ir.expression.identifier.Identifier] in the `:::solidity foo(1, 2)` expression for the following function: ```solidity function foo(uint a, uint b) public onlyOwner payable virtual onlyOwner returns(uint) { return a + b; } ``` Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective]. !!! example `Ownable` in the following example has no type information: ```solidity import { Ownable } from './Ownable.sol'; ``` Returns: User-friendly string describing the expression type. \"\"\" return self . _type_descriptions . type_string @property @abstractmethod def is_ref_to_state_variable ( self ) -> bool : \"\"\" In many cases it may be useful to know if an [Assignment][woke.ast.ir.expression.assignment.Assignment] to an expression modifies a state variable or not. This may not be straightforward to determine, e.g. if the expression is a [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] or [IndexAccess][woke.ast.ir.expression.index_access.IndexAccess] to a state variable. Returns: `True` if the expression (possibly) is a reference to a state variable. \"\"\" ... @property @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: \"\"\" Returns: Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified. \"\"\" ...","title":"ExpressionAbc"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc.is_ref_to_state_variable","text":"In many cases it may be useful to know if an Assignment to an expression modifies a state variable or not. This may not be straightforward to determine, e.g. if the expression is a MemberAccess or IndexAccess to a state variable. Returns: Type Description bool True if the expression (possibly) is a reference to a state variable. Source code in woke/ast/ir/expression/abc.py 142 143 144 145 146 147 148 149 150 151 @property @abstractmethod def is_ref_to_state_variable ( self ) -> bool : \"\"\" In many cases it may be useful to know if an [Assignment][woke.ast.ir.expression.assignment.Assignment] to an expression modifies a state variable or not. This may not be straightforward to determine, e.g. if the expression is a [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] or [IndexAccess][woke.ast.ir.expression.index_access.IndexAccess] to a state variable. Returns: `True` if the expression (possibly) is a reference to a state variable. \"\"\" ...","title":"is_ref_to_state_variable()"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc.modifies_state","text":"Returns: Type Description Set [ Tuple [ IrAbc , ModifiesStateFlag ]] Set of child IR nodes (including self ) that modify the blockchain state and flags describing how the state is modified. Source code in woke/ast/ir/expression/abc.py 153 154 155 156 157 158 159 160 @property @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: \"\"\" Returns: Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified. \"\"\" ...","title":"modifies_state()"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc.type","text":"Can be None in case of an Identifier in an ImportDirective . Example Ownable in the following example has no type information: import { Ownable } from './Ownable.sol' ; Returns: Type Description Optional [ TypeAbc ] Type of the expression. Source code in woke/ast/ir/expression/abc.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 @property @lru_cache ( maxsize = 2048 ) def type ( self ) -> Optional [ TypeAbc ]: \"\"\" Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective]. !!! example `Ownable` in the following example has no type information: ```solidity import { Ownable } from './Ownable.sol'; ``` Returns: Type of the expression. \"\"\" if self . _type_descriptions . type_identifier is None : return None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 ), f \"Failed to parse type_identifier: { self . _type_descriptions . type_identifier } \" return ret","title":"type()"},{"location":"api-reference/ir/abc/#woke.ast.ir.expression.abc.ExpressionAbc.type_string","text":"Example function ( uint256 , uint256 ) returns ( uint256 ) in the case of the foo Identifier in the foo ( 1 , 2 ) expression for the following function: function foo ( uint a , uint b ) public onlyOwner payable virtual onlyOwner returns ( uint ) { return a + b ; } Can be None in case of an Identifier in an ImportDirective . Example Ownable in the following example has no type information: import { Ownable } from './Ownable.sol' ; Returns: Type Description Optional [ str ] User-friendly string describing the expression type. Source code in woke/ast/ir/expression/abc.py 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @property def type_string ( self ) -> Optional [ str ]: \"\"\" !!! example `:::solidity function (uint256,uint256) returns (uint256)` in the case of the `foo` [Identifier][woke.ast.ir.expression.identifier.Identifier] in the `:::solidity foo(1, 2)` expression for the following function: ```solidity function foo(uint a, uint b) public onlyOwner payable virtual onlyOwner returns(uint) { return a + b; } ``` Can be `None` in case of an [Identifier][woke.ast.ir.expression.identifier.Identifier] in an [ImportDirective][woke.ast.ir.meta.import_directive.ImportDirective]. !!! example `Ownable` in the following example has no type information: ```solidity import { Ownable } from './Ownable.sol'; ``` Returns: User-friendly string describing the expression type. \"\"\" return self . _type_descriptions . type_string","title":"type_string()"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc","text":"Bases: SolidityAbc , ABC Abstract base class for all Solidity statements. Source code in woke/ast/ir/statement/abc.py 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 class StatementAbc ( SolidityAbc , ABC ): \"\"\" Abstract base class for all Solidity statements. \"\"\" _documentation : Optional [ str ] def __init__ ( self , init : IrInitTuple , statement : SolcStatementUnion , parent : SolidityAbc ): super () . __init__ ( init , statement , parent ) self . _documentation = statement . documentation @staticmethod def from_ast ( init : IrInitTuple , statement : SolcStatementUnion , parent : SolidityAbc ) -> \"StatementAbc\" : from .block import Block from .break_statement import Break from .continue_statement import Continue from .do_while_statement import DoWhileStatement from .emit_statement import EmitStatement from .expression_statement import ExpressionStatement from .for_statement import ForStatement from .if_statement import IfStatement from .inline_assembly import InlineAssembly from .placeholder_statement import PlaceholderStatement from .return_statement import Return from .revert_statement import RevertStatement from .try_statement import TryStatement from .unchecked_block import UncheckedBlock from .variable_declaration_statement import VariableDeclarationStatement from .while_statement import WhileStatement if isinstance ( statement , SolcBlock ): return Block ( init , statement , parent ) elif isinstance ( statement , SolcBreak ): return Break ( init , statement , parent ) elif isinstance ( statement , SolcContinue ): return Continue ( init , statement , parent ) elif isinstance ( statement , SolcDoWhileStatement ): return DoWhileStatement ( init , statement , parent ) elif isinstance ( statement , SolcEmitStatement ): return EmitStatement ( init , statement , parent ) elif isinstance ( statement , SolcExpressionStatement ): return ExpressionStatement ( init , statement , parent ) elif isinstance ( statement , SolcForStatement ): return ForStatement ( init , statement , parent ) elif isinstance ( statement , SolcIfStatement ): return IfStatement ( init , statement , parent ) elif isinstance ( statement , SolcInlineAssembly ): return InlineAssembly ( init , statement , parent ) elif isinstance ( statement , SolcPlaceholderStatement ): return PlaceholderStatement ( init , statement , parent ) elif isinstance ( statement , SolcReturn ): return Return ( init , statement , parent ) elif isinstance ( statement , SolcRevertStatement ): return RevertStatement ( init , statement , parent ) elif isinstance ( statement , SolcTryStatement ): return TryStatement ( init , statement , parent ) elif isinstance ( statement , SolcUncheckedBlock ): return UncheckedBlock ( init , statement , parent ) elif isinstance ( statement , SolcVariableDeclarationStatement ): return VariableDeclarationStatement ( init , statement , parent ) elif isinstance ( statement , SolcWhileStatement ): return WhileStatement ( init , statement , parent ) assert False , f \"Unknown statement type: { type ( statement ) } \" @property @abstractmethod def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent node of the statement. \"\"\" ... @property @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: \"\"\" Returns: Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified. \"\"\" ... def statements_iter ( self ) -> Iterator [ StatementAbc ]: \"\"\" Yields: Child statements of the statement (recursively) including `self`. \"\"\" yield self @property def documentation ( self ) -> Optional [ str ]: \"\"\" Statement documentation strings should be placed above the statement. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation","title":"StatementAbc"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc.documentation","text":"Statement documentation strings should be placed above the statement. Returns: Type Description Optional [ str ] NatSpec documentation string, if any. Source code in woke/ast/ir/statement/abc.py 145 146 147 148 149 150 151 152 @property def documentation ( self ) -> Optional [ str ]: \"\"\" Statement documentation strings should be placed above the statement. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation","title":"documentation()"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc.modifies_state","text":"Returns: Type Description Set [ Tuple [ IrAbc , ModifiesStateFlag ]] Set of child IR nodes (including self ) that modify the blockchain state and flags describing how the state is modified. Source code in woke/ast/ir/statement/abc.py 129 130 131 132 133 134 135 136 @property @abstractmethod def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: \"\"\" Returns: Set of child IR nodes (including `self`) that modify the blockchain state and flags describing how the state is modified. \"\"\" ...","title":"modifies_state()"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause ] Parent node of the statement. Source code in woke/ast/ir/statement/abc.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 @property @abstractmethod def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent node of the statement. \"\"\" ...","title":"parent()"},{"location":"api-reference/ir/abc/#woke.ast.ir.statement.abc.StatementAbc.statements_iter","text":"Yields: Type Description Iterator [ StatementAbc ] Child statements of the statement (recursively) including self . Source code in woke/ast/ir/statement/abc.py 138 139 140 141 142 143 def statements_iter ( self ) -> Iterator [ StatementAbc ]: \"\"\" Yields: Child statements of the statement (recursively) including `self`. \"\"\" yield self","title":"statements_iter()"},{"location":"api-reference/ir/abc/#woke.ast.ir.type_name.abc.TypeNameAbc","text":"Bases: SolidityAbc , ABC Abstract base class for all IR type name nodes. Source code in woke/ast/ir/type_name/abc.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 class TypeNameAbc ( SolidityAbc , ABC ): \"\"\" Abstract base class for all IR type name nodes. \"\"\" _type_descriptions : TypeDescriptionsModel def __init__ ( self , init : IrInitTuple , type_name : SolcTypeNameUnion , parent : SolidityAbc ): super () . __init__ ( init , type_name , parent ) self . _type_descriptions = type_name . type_descriptions @staticmethod def from_ast ( init : IrInitTuple , type_name : SolcTypeNameUnion , parent : SolidityAbc ) -> TypeNameAbc : from .array_type_name import ArrayTypeName from .elementary_type_name import ElementaryTypeName from .function_type_name import FunctionTypeName from .mapping import Mapping from .user_defined_type_name import UserDefinedTypeName if isinstance ( type_name , SolcArrayTypeName ): return ArrayTypeName ( init , type_name , parent ) elif isinstance ( type_name , SolcElementaryTypeName ): return ElementaryTypeName ( init , type_name , parent ) elif isinstance ( type_name , SolcFunctionTypeName ): return FunctionTypeName ( init , type_name , parent ) elif isinstance ( type_name , SolcMapping ): return Mapping ( init , type_name , parent ) elif isinstance ( type_name , SolcUserDefinedTypeName ): return UserDefinedTypeName ( init , type_name , parent ) @property @abstractmethod def parent ( self , ) -> Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping , ]: \"\"\" Returns: Parent node of the type name. \"\"\" ... @property @lru_cache ( maxsize = 2048 ) def type ( self , ) -> Union [ Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract , ]: \"\"\" Returns: Type of the type name. \"\"\" assert self . _type_descriptions . type_identifier is not None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 and ret is not None ), f \"Failed to parse type identifier: { self . _type_descriptions . type_identifier } \" assert isinstance ( ret , ( Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract , ), ) return ret @property def type_string ( self ) -> str : \"\"\" !!! example `:::solidity mapping(uint256 => int24[])` in the case of the `:::solidity mapping(uint => int24[])` type name in the following declaration: ```solidity mapping(uint => int24[]) map; ``` Returns: User-friendly string describing the type name type. \"\"\" assert self . _type_descriptions . type_string is not None return self . _type_descriptions . type_string","title":"TypeNameAbc"},{"location":"api-reference/ir/abc/#woke.ast.ir.type_name.abc.TypeNameAbc.parent","text":"Returns: Type Description Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] Parent node of the type name. Source code in woke/ast/ir/type_name/abc.py 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 @property @abstractmethod def parent ( self , ) -> Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping , ]: \"\"\" Returns: Parent node of the type name. \"\"\" ...","title":"parent()"},{"location":"api-reference/ir/abc/#woke.ast.ir.type_name.abc.TypeNameAbc.type","text":"Returns: Type Description Union [ Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract ] Type of the type name. Source code in woke/ast/ir/type_name/abc.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 @property @lru_cache ( maxsize = 2048 ) def type ( self , ) -> Union [ Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract , ]: \"\"\" Returns: Type of the type name. \"\"\" assert self . _type_descriptions . type_identifier is not None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 and ret is not None ), f \"Failed to parse type identifier: { self . _type_descriptions . type_identifier } \" assert isinstance ( ret , ( Array , Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type , Function , Mapping , Struct , Enum , Contract , ), ) return ret","title":"type()"},{"location":"api-reference/ir/abc/#woke.ast.ir.type_name.abc.TypeNameAbc.type_string","text":"Example mapping ( uint256 => int24 []) in the case of the mapping ( uint => int24 []) type name in the following declaration: mapping ( uint => int24 []) map ; Returns: Type Description str User-friendly string describing the type name type. Source code in woke/ast/ir/type_name/abc.py 166 167 168 169 170 171 172 173 174 175 176 177 178 179 @property def type_string ( self ) -> str : \"\"\" !!! example `:::solidity mapping(uint256 => int24[])` in the case of the `:::solidity mapping(uint => int24[])` type name in the following declaration: ```solidity mapping(uint => int24[]) map; ``` Returns: User-friendly string describing the type name type. \"\"\" assert self . _type_descriptions . type_string is not None return self . _type_descriptions . type_string","title":"type_string()"},{"location":"api-reference/ir/enums/","text":"woke.ast.enums module # AssignmentOperator class # Bases: str , enum . Enum Assignment operator used in an Assignment expression. Source code in woke/ast/enums.py 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 class AssignmentOperator ( str , enum . Enum ): \"\"\" Assignment operator used in an [Assignment][woke.ast.ir.expression.assignment.Assignment] expression. \"\"\" EQUALS = r \"=\" PLUS_EQUALS = r \"+=\" MINUS_EQUALS = r \"-=\" TIMES_EQUALS = r \"*=\" DIVIDE_EQUALS = r \"/=\" MODULO_EQUALS = r \"%=\" OR_EQUALS = r \"|=\" AND_EQUALS = r \"&=\" XOR_EQUALS = r \"^=\" RIGHT_SHIFT_EQUALS = r \">>=\" LEFT_SHIFT_EQUALS = r \"<<=\" AND_EQUALS = '&=' class-attribute # DIVIDE_EQUALS = '/=' class-attribute # EQUALS = '=' class-attribute # LEFT_SHIFT_EQUALS = '<<=' class-attribute # MINUS_EQUALS = '-=' class-attribute # MODULO_EQUALS = '%=' class-attribute # OR_EQUALS = '|=' class-attribute # PLUS_EQUALS = '+=' class-attribute # RIGHT_SHIFT_EQUALS = '>>=' class-attribute # TIMES_EQUALS = '*=' class-attribute # XOR_EQUALS = '^=' class-attribute # BinaryOpOperator class # Bases: str , enum . Enum Binary operation operator used in a BinaryOperation expression. Source code in woke/ast/enums.py 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 class BinaryOpOperator ( str , enum . Enum ): \"\"\" Binary operation operator used in a [BinaryOperation][woke.ast.ir.expression.binary_operation.BinaryOperation] expression. \"\"\" PLUS = r \"+\" MINUS = r \"-\" TIMES = r \"*\" DIVIDE = r \"/\" MODULO = r \"%\" EXP = r \"**\" BOOLEAN_AND = r \"&&\" BOOLEAN_OR = r \"||\" NEQ = r \"!=\" EQ = r \"==\" LT = r \"<\" LTE = r \"<=\" GT = r \">\" GTE = r \">=\" XOR = r \"^\" BITWISE_AND = r \"&\" BITWISE_OR = r \"|\" LEFT_SHIFT = r \"<<\" RIGHT_SHIFT = r \">>\" BITWISE_AND = '&' class-attribute # BITWISE_OR = '|' class-attribute # BOOLEAN_AND = '&&' class-attribute # BOOLEAN_OR = '||' class-attribute # DIVIDE = '/' class-attribute # EQ = '==' class-attribute # EXP = '**' class-attribute # GT = '>' class-attribute # GTE = '>=' class-attribute # LEFT_SHIFT = '<<' class-attribute # LT = '<' class-attribute # LTE = '<=' class-attribute # MINUS = '-' class-attribute # MODULO = '%' class-attribute # NEQ = '!=' class-attribute # PLUS = '+' class-attribute # RIGHT_SHIFT = '>>' class-attribute # TIMES = '*' class-attribute # XOR = '^' class-attribute # ContractKind class # Bases: str , enum . Enum Kind of a ContractDefinition declaration node. Source code in woke/ast/enums.py 96 97 98 99 100 101 102 103 class ContractKind ( str , enum . Enum ): \"\"\" Kind of a [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] declaration node. \"\"\" CONTRACT = \"contract\" INTERFACE = \"interface\" LIBRARY = \"library\" CONTRACT = 'contract' class-attribute # INTERFACE = 'interface' class-attribute # LIBRARY = 'library' class-attribute # DataLocation class # Bases: str , enum . Enum Data location of a VariableDeclaration node. It also specifies the data location of the following types: Array , Bytes , String , Struct . Source code in woke/ast/enums.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 class DataLocation ( str , enum . Enum ): \"\"\" Data location of a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] node. It also specifies the data location of the following types: - [Array][woke.ast.types.Array], - [Bytes][woke.ast.types.Bytes], - [String][woke.ast.types.String], - [Struct][woke.ast.types.Struct]. \"\"\" CALLDATA = \"calldata\" DEFAULT = \"default\" \"\"\" Set only in [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] nodes when the data location is not specified (and the compiler even does not allow it). \"\"\" MEMORY = \"memory\" STORAGE = \"storage\" CALLDATA = 'calldata' class-attribute # DEFAULT = 'default' class-attribute # Set only in VariableDeclaration nodes when the data location is not specified (and the compiler even does not allow it). MEMORY = 'memory' class-attribute # STORAGE = 'storage' class-attribute # FunctionCallKind class # Bases: str , enum . Enum Kind of a FunctionCall expression node. Source code in woke/ast/enums.py 197 198 199 200 201 202 203 204 205 206 207 class FunctionCallKind ( str , enum . Enum ): \"\"\" Kind of a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] expression node. \"\"\" FUNCTION_CALL = \"functionCall\" \"\"\" Represents also an error call, event call and [NewExpression][woke.ast.ir.expression.new_expression.NewExpression] call. \"\"\" TYPE_CONVERSION = \"typeConversion\" STRUCT_CONSTRUCTOR_CALL = \"structConstructorCall\" FUNCTION_CALL = 'functionCall' class-attribute # Represents also an error call, event call and NewExpression call. STRUCT_CONSTRUCTOR_CALL = 'structConstructorCall' class-attribute # TYPE_CONVERSION = 'typeConversion' class-attribute # FunctionKind class # Bases: str , enum . Enum Kind of a FunctionDefinition declaration node. Source code in woke/ast/enums.py 118 119 120 121 122 123 124 125 126 127 128 129 130 class FunctionKind ( str , enum . Enum ): \"\"\" Kind of a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration node. \"\"\" FUNCTION = \"function\" RECEIVE = \"receive\" CONSTRUCTOR = \"constructor\" FALLBACK = \"fallback\" FREE_FUNCTION = \"freeFunction\" \"\"\" Function defined outside of a contract. \"\"\" CONSTRUCTOR = 'constructor' class-attribute # FALLBACK = 'fallback' class-attribute # FREE_FUNCTION = 'freeFunction' class-attribute # Function defined outside of a contract. FUNCTION = 'function' class-attribute # RECEIVE = 'receive' class-attribute # FunctionTypeKind class # Bases: str , enum . Enum Kind of a Function type. Source code in woke/ast/enums.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 class FunctionTypeKind ( str , enum . Enum ): \"\"\" Kind of a [Function][woke.ast.types.Function] type. \"\"\" DECLARATION = \"declaration\" INTERNAL = \"internal\" EXTERNAL = \"external\" DELEGATE_CALL = \"delegatecall\" BARE_CALL = \"barecall\" BARE_CALL_CODE = \"barecallcode\" BARE_DELEGATE_CALL = \"baredelegatecall\" BARE_STATIC_CALL = \"barestaticcall\" CREATION = \"creation\" SEND = \"send\" TRANSFER = \"transfer\" KECCAK256 = \"keccak256\" SELFDESTRUCT = \"selfdestruct\" REVERT = \"revert\" EC_RECOVER = \"ecrecover\" SHA256 = \"sha256\" RIPEMD160 = \"ripemd160\" LOG0 = \"log0\" LOG1 = \"log1\" LOG2 = \"log2\" LOG3 = \"log3\" LOG4 = \"log4\" GAS_LEFT = \"gasleft\" EVENT = \"event\" ERROR = \"error\" WRAP = \"wrap\" UNWRAP = \"unwrap\" SET_GAS = \"setgas\" SET_VALUE = \"setvalue\" BLOCK_HASH = \"blockhash\" ADD_MOD = \"addmod\" MUL_MOD = \"mulmod\" ARRAY_PUSH = \"arraypush\" ARRAY_POP = \"arraypop\" BYTE_ARRAY_PUSH = \"bytearraypush\" BYTES_CONCAT = \"bytesconcat\" STRING_CONCAT = \"stringconcat\" OBJECT_CREATION = \"objectcreation\" ASSERT = \"assert\" REQUIRE = \"require\" ABI_ENCODE = \"abiencode\" ABI_ENCODE_PACKED = \"abiencodepacked\" ABI_ENCODE_WITH_SELECTOR = \"abiencodewithselector\" ABI_ENCODE_CALL = \"abiencodecall\" ABI_ENCODE_WITH_SIGNATURE = \"abiencodewithsignature\" ABI_DECODE = \"abidecode\" META_TYPE = \"metatype\" ABI_DECODE = 'abidecode' class-attribute # ABI_ENCODE = 'abiencode' class-attribute # ABI_ENCODE_CALL = 'abiencodecall' class-attribute # ABI_ENCODE_PACKED = 'abiencodepacked' class-attribute # ABI_ENCODE_WITH_SELECTOR = 'abiencodewithselector' class-attribute # ABI_ENCODE_WITH_SIGNATURE = 'abiencodewithsignature' class-attribute # ADD_MOD = 'addmod' class-attribute # ARRAY_POP = 'arraypop' class-attribute # ARRAY_PUSH = 'arraypush' class-attribute # ASSERT = 'assert' class-attribute # BARE_CALL = 'barecall' class-attribute # BARE_CALL_CODE = 'barecallcode' class-attribute # BARE_DELEGATE_CALL = 'baredelegatecall' class-attribute # BARE_STATIC_CALL = 'barestaticcall' class-attribute # BLOCK_HASH = 'blockhash' class-attribute # BYTES_CONCAT = 'bytesconcat' class-attribute # BYTE_ARRAY_PUSH = 'bytearraypush' class-attribute # CREATION = 'creation' class-attribute # DECLARATION = 'declaration' class-attribute # DELEGATE_CALL = 'delegatecall' class-attribute # EC_RECOVER = 'ecrecover' class-attribute # ERROR = 'error' class-attribute # EVENT = 'event' class-attribute # EXTERNAL = 'external' class-attribute # GAS_LEFT = 'gasleft' class-attribute # INTERNAL = 'internal' class-attribute # KECCAK256 = 'keccak256' class-attribute # LOG0 = 'log0' class-attribute # LOG1 = 'log1' class-attribute # LOG2 = 'log2' class-attribute # LOG3 = 'log3' class-attribute # LOG4 = 'log4' class-attribute # META_TYPE = 'metatype' class-attribute # MUL_MOD = 'mulmod' class-attribute # OBJECT_CREATION = 'objectcreation' class-attribute # REQUIRE = 'require' class-attribute # REVERT = 'revert' class-attribute # RIPEMD160 = 'ripemd160' class-attribute # SELFDESTRUCT = 'selfdestruct' class-attribute # SEND = 'send' class-attribute # SET_GAS = 'setgas' class-attribute # SET_VALUE = 'setvalue' class-attribute # SHA256 = 'sha256' class-attribute # STRING_CONCAT = 'stringconcat' class-attribute # TRANSFER = 'transfer' class-attribute # UNWRAP = 'unwrap' class-attribute # WRAP = 'wrap' class-attribute # GlobalSymbolsEnum class # Bases: enum . IntEnum Global symbols of the Solidity language. Symbols with identifiers from -1 to -99 are codified by the compiler and can only be referenced by Identifier nodes. Other symbols are not officially codified by the compiler, but Woke also defines identifiers for them. These symbols can only be referenced by MemberAccess nodes. See the Solidity docs for (an incomplete) list of global symbols and their descriptions. Source code in woke/ast/enums.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 class GlobalSymbolsEnum ( enum . IntEnum ): \"\"\" Global symbols of the Solidity language. Symbols with identifiers from `-1` to `-99` are codified by the compiler and can only be referenced by [Identifier][woke.ast.ir.expression.identifier.Identifier] nodes. Other symbols are not officially codified by the compiler, but Woke also defines identifiers for them. These symbols can only be referenced by [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] nodes. See the [Solidity docs](https://docs.soliditylang.org/en/latest/units-and-global-variables.html#special-variables-and-functions) for (an incomplete) list of global symbols and their descriptions. \"\"\" ABI = - 1 ADDMOD = - 2 ASSERT = - 3 BLOCK = - 4 BLOCKHASH = - 5 ECRECOVER = - 6 GASLEFT = - 7 KECCAK256 = - 8 MSG = - 15 MULMOD = - 16 NOW = - 17 REQUIRE = - 18 REVERT = - 19 RIPEMD160 = - 20 SELFDESTRUCT = - 21 SHA256 = - 22 SHA3 = - 23 SUICIDE = - 24 SUPER = - 25 TX = - 26 TYPE = - 27 THIS = - 28 BLOCK_BASEFEE = - 100 BLOCK_CHAINID = - 101 BLOCK_COINBASE = - 102 BLOCK_DIFFICULTY = - 103 BLOCK_GASLIMIT = - 104 BLOCK_NUMBER = - 105 BLOCK_TIMESTAMP = - 106 MSG_DATA = - 200 MSG_SENDER = - 201 MSG_SIG = - 202 MSG_VALUE = - 203 TX_GASPRICE = - 300 TX_ORIGIN = - 301 ABI_DECODE = - 400 ABI_ENCODE = - 401 ABI_ENCODE_PACKED = - 402 ABI_ENCODE_WITH_SELECTOR = - 403 ABI_ENCODE_WITH_SIGNATURE = - 404 ABI_ENCODE_CALL = - 405 BYTES_CONCAT = - 500 BYTES_LENGTH = - 501 BYTES_PUSH = - 502 STRING_CONCAT = - 600 ADDRESS_BALANCE = - 700 ADDRESS_CODE = - 701 ADDRESS_CODEHASH = - 702 ADDRESS_TRANSFER = - 703 ADDRESS_SEND = - 704 ADDRESS_CALL = - 705 ADDRESS_DELEGATECALL = - 706 ADDRESS_STATICCALL = - 707 # available for contracts and interfaces TYPE_NAME = - 800 TYPE_CREATION_CODE = - 801 TYPE_RUNTIME_CODE = - 802 # available for interfaces only TYPE_INTERFACE_ID = - 803 # available for integers TYPE_MIN = - 804 TYPE_MAX = - 805 ARRAY_LENGTH = - 900 ARRAY_PUSH = - 901 ARRAY_POP = - 902 FUNCTION_SELECTOR = - 1000 FUNCTION_VALUE = - 1001 FUNCTION_GAS = - 1002 FUNCTION_ADDRESS = - 1003 USER_DEFINED_VALUE_TYPE_WRAP = - 1100 USER_DEFINED_VALUE_TYPE_UNWRAP = - 1101 ABI = - 1 class-attribute # ABI_DECODE = - 400 class-attribute # ABI_ENCODE = - 401 class-attribute # ABI_ENCODE_CALL = - 405 class-attribute # ABI_ENCODE_PACKED = - 402 class-attribute # ABI_ENCODE_WITH_SELECTOR = - 403 class-attribute # ABI_ENCODE_WITH_SIGNATURE = - 404 class-attribute # ADDMOD = - 2 class-attribute # ADDRESS_BALANCE = - 700 class-attribute # ADDRESS_CALL = - 705 class-attribute # ADDRESS_CODE = - 701 class-attribute # ADDRESS_CODEHASH = - 702 class-attribute # ADDRESS_DELEGATECALL = - 706 class-attribute # ADDRESS_SEND = - 704 class-attribute # ADDRESS_STATICCALL = - 707 class-attribute # ADDRESS_TRANSFER = - 703 class-attribute # ARRAY_LENGTH = - 900 class-attribute # ARRAY_POP = - 902 class-attribute # ARRAY_PUSH = - 901 class-attribute # ASSERT = - 3 class-attribute # BLOCK = - 4 class-attribute # BLOCKHASH = - 5 class-attribute # BLOCK_BASEFEE = - 100 class-attribute # BLOCK_CHAINID = - 101 class-attribute # BLOCK_COINBASE = - 102 class-attribute # BLOCK_DIFFICULTY = - 103 class-attribute # BLOCK_GASLIMIT = - 104 class-attribute # BLOCK_NUMBER = - 105 class-attribute # BLOCK_TIMESTAMP = - 106 class-attribute # BYTES_CONCAT = - 500 class-attribute # BYTES_LENGTH = - 501 class-attribute # BYTES_PUSH = - 502 class-attribute # ECRECOVER = - 6 class-attribute # FUNCTION_ADDRESS = - 1003 class-attribute # FUNCTION_GAS = - 1002 class-attribute # FUNCTION_SELECTOR = - 1000 class-attribute # FUNCTION_VALUE = - 1001 class-attribute # GASLEFT = - 7 class-attribute # KECCAK256 = - 8 class-attribute # MSG = - 15 class-attribute # MSG_DATA = - 200 class-attribute # MSG_SENDER = - 201 class-attribute # MSG_SIG = - 202 class-attribute # MSG_VALUE = - 203 class-attribute # MULMOD = - 16 class-attribute # NOW = - 17 class-attribute # REQUIRE = - 18 class-attribute # REVERT = - 19 class-attribute # RIPEMD160 = - 20 class-attribute # SELFDESTRUCT = - 21 class-attribute # SHA256 = - 22 class-attribute # SHA3 = - 23 class-attribute # STRING_CONCAT = - 600 class-attribute # SUICIDE = - 24 class-attribute # SUPER = - 25 class-attribute # THIS = - 28 class-attribute # TX = - 26 class-attribute # TX_GASPRICE = - 300 class-attribute # TX_ORIGIN = - 301 class-attribute # TYPE = - 27 class-attribute # TYPE_CREATION_CODE = - 801 class-attribute # TYPE_INTERFACE_ID = - 803 class-attribute # TYPE_MAX = - 805 class-attribute # TYPE_MIN = - 804 class-attribute # TYPE_NAME = - 800 class-attribute # TYPE_RUNTIME_CODE = - 802 class-attribute # USER_DEFINED_VALUE_TYPE_UNWRAP = - 1101 class-attribute # USER_DEFINED_VALUE_TYPE_WRAP = - 1100 class-attribute # InlineAssemblyEvmVersion class # Bases: str , enum . Enum Source code in woke/ast/enums.py 290 291 292 293 294 295 296 297 298 299 class InlineAssemblyEvmVersion ( str , enum . Enum ): HOMESTEAD = \"homestead\" TANGERINE_WHISTLE = \"tangerineWhistle\" SPURIOUS_DRAGON = \"spuriousDragon\" BYZANTIUM = \"byzantium\" CONSTANTINOPLE = \"constantinople\" PETERSBURG = \"petersburg\" ISTANBUL = \"istanbul\" BERLIN = \"berlin\" LONDON = \"london\" BERLIN = 'berlin' class-attribute # BYZANTIUM = 'byzantium' class-attribute # CONSTANTINOPLE = 'constantinople' class-attribute # HOMESTEAD = 'homestead' class-attribute # ISTANBUL = 'istanbul' class-attribute # LONDON = 'london' class-attribute # PETERSBURG = 'petersburg' class-attribute # SPURIOUS_DRAGON = 'spuriousDragon' class-attribute # TANGERINE_WHISTLE = 'tangerineWhistle' class-attribute # InlineAssemblyFlag class # Bases: str , enum . Enum Source code in woke/ast/enums.py 310 311 class InlineAssemblyFlag ( str , enum . Enum ): MEMORY_SAFE = \"memory-safe\" MEMORY_SAFE = 'memory-safe' class-attribute # InlineAssemblySuffix class # Bases: str , enum . Enum Source code in woke/ast/enums.py 302 303 304 305 306 307 class InlineAssemblySuffix ( str , enum . Enum ): SLOT = \"slot\" OFFSET = \"offset\" LENGTH = \"length\" ADDRESS = \"address\" SELECTOR = \"selector\" ADDRESS = 'address' class-attribute # LENGTH = 'length' class-attribute # OFFSET = 'offset' class-attribute # SELECTOR = 'selector' class-attribute # SLOT = 'slot' class-attribute # LiteralKind class # Bases: str , enum . Enum Kind of a Literal expression node. Source code in woke/ast/enums.py 174 175 176 177 178 179 180 181 182 183 class LiteralKind ( str , enum . Enum ): \"\"\" Kind of a [Literal][woke.ast.ir.expression.literal.Literal] expression node. \"\"\" BOOL = \"bool\" NUMBER = \"number\" STRING = \"string\" HEX_STRING = \"hexString\" UNICODE_STRING = \"unicodeString\" BOOL = 'bool' class-attribute # HEX_STRING = 'hexString' class-attribute # NUMBER = 'number' class-attribute # STRING = 'string' class-attribute # UNICODE_STRING = 'unicodeString' class-attribute # MagicTypeKind class # Bases: str , enum . Enum Kind of a Magic type. Source code in woke/ast/enums.py 392 393 394 395 396 397 398 399 400 401 class MagicTypeKind ( str , enum . Enum ): \"\"\" Kind of a [Magic][woke.ast.types.Magic] type. \"\"\" BLOCK = \"block\" MESSAGE = \"message\" TRANSACTION = \"transaction\" ABI = \"abi\" META_TYPE = \"meta_type\" ABI = 'abi' class-attribute # BLOCK = 'block' class-attribute # MESSAGE = 'message' class-attribute # META_TYPE = 'meta_type' class-attribute # TRANSACTION = 'transaction' class-attribute # ModifierInvocationKind class # Bases: str , enum . Enum Kind of a ModifierInvocation meta node. Source code in woke/ast/enums.py 164 165 166 167 168 169 170 class ModifierInvocationKind ( str , enum . Enum ): \"\"\" Kind of a [ModifierInvocation][woke.ast.ir.meta.modifier_invocation.ModifierInvocation] meta node. \"\"\" MODIFIER_INVOCATION = \"modifierInvocation\" BASE_CONSTRUCTOR_SPECIFIER = \"baseConstructorSpecifier\" BASE_CONSTRUCTOR_SPECIFIER = 'baseConstructorSpecifier' class-attribute # MODIFIER_INVOCATION = 'modifierInvocation' class-attribute # ModifiesStateFlag class # Bases: enum . IntFlag Flag enum describing how an expression ( ExpressionAbc ) or statement ( StatementAbc ) modifies the blockchain state. Source code in woke/ast/enums.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 class ModifiesStateFlag ( enum . IntFlag ): \"\"\" Flag enum describing how an expression ([ExpressionAbc][woke.ast.ir.expression.abc.ExpressionAbc]) or statement ([StatementAbc][woke.ast.ir.statement.abc.StatementAbc]) modifies the blockchain state. \"\"\" MODIFIES_STATE_VAR = 1 EMITS = 2 SENDS_ETHER = 4 DEPLOYS_CONTRACT = 8 SELFDESTRUCTS = 16 PERFORMS_CALL = 32 PERFORMS_DELEGATECALL = 64 CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION = 128 CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION = 256 def __repr__ ( self ): if self . value == 0 : return f \" { self . __class__ . __name__ } (0)\" flags = [ f for f in self . __class__ if f in self ] return \" | \" . join ( f . name or \"\" for f in flags ) __str__ = __repr__ CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION = 128 class-attribute # CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION = 256 class-attribute # DEPLOYS_CONTRACT = 8 class-attribute # EMITS = 2 class-attribute # MODIFIES_STATE_VAR = 1 class-attribute # PERFORMS_CALL = 32 class-attribute # PERFORMS_DELEGATECALL = 64 class-attribute # SELFDESTRUCTS = 16 class-attribute # SENDS_ETHER = 4 class-attribute # Mutability class # Bases: str , enum . Enum Mutability of a VariableDeclaration declaration node. Source code in woke/ast/enums.py 107 108 109 110 111 112 113 114 class Mutability ( str , enum . Enum ): \"\"\" Mutability of a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declaration node. \"\"\" MUTABLE = \"mutable\" IMMUTABLE = \"immutable\" CONSTANT = \"constant\" CONSTANT = 'constant' class-attribute # IMMUTABLE = 'immutable' class-attribute # MUTABLE = 'mutable' class-attribute # StateMutability class # Bases: str , enum . Enum State mutability of: Function type, FunctionDefinition declaration, ElementaryTypeName and FunctionTypeName type names. In the case of ElementaryTypeName , the state mutability is specified only for the address type and can be either NONPAYABLE or PAYABLE . Source code in woke/ast/enums.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 class StateMutability ( str , enum . Enum ): \"\"\" State mutability of: - [Function][woke.ast.types.Function] type, - [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration, - [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName] and [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] type names. In the case of [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName], the state mutability is specified only for the `address` type and can be either [NONPAYABLE][woke.ast.enums.StateMutability.NONPAYABLE] or [PAYABLE][woke.ast.enums.StateMutability.PAYABLE]. \"\"\" PAYABLE = \"payable\" PURE = \"pure\" NONPAYABLE = \"nonpayable\" VIEW = \"view\" NONPAYABLE = 'nonpayable' class-attribute # PAYABLE = 'payable' class-attribute # PURE = 'pure' class-attribute # VIEW = 'view' class-attribute # UnaryOpOperator class # Bases: str , enum . Enum Unary operation operator used in an UnaryOperation expression. Source code in woke/ast/enums.py 232 233 234 235 236 237 238 239 240 241 242 class UnaryOpOperator ( str , enum . Enum ): \"\"\" Unary operation operator used in an [UnaryOperation][woke.ast.ir.expression.unary_operation.UnaryOperation] expression. \"\"\" PLUS_PLUS = r \"++\" MINUS_MINUS = r \"--\" MINUS = r \"-\" NOT = r \"!\" TILDE = r \"~\" DELETE = \"delete\" DELETE = 'delete' class-attribute # MINUS = '-' class-attribute # MINUS_MINUS = '--' class-attribute # NOT = '!' class-attribute # PLUS_PLUS = '++' class-attribute # TILDE = '~' class-attribute # Visibility class # Bases: str , enum . Enum Visibility of: FunctionTypeName type name, FunctionDefinition , ModifierDefinition , StructDefinition and VariableDeclaration declarations. Source code in woke/ast/enums.py 133 134 135 136 137 138 139 140 141 142 143 144 class Visibility ( str , enum . Enum ): \"\"\" Visibility of: - [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] type name, - [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition], [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition], [StructDefinition][woke.ast.ir.declaration.struct_definition.StructDefinition] and [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declarations. \"\"\" EXTERNAL = \"external\" PUBLIC = \"public\" INTERNAL = \"internal\" PRIVATE = \"private\" EXTERNAL = 'external' class-attribute # INTERNAL = 'internal' class-attribute # PRIVATE = 'private' class-attribute # PUBLIC = 'public' class-attribute # YulLiteralValueKind class # Bases: str , enum . Enum Kind of a Yul Literal node. Source code in woke/ast/enums.py 186 187 188 189 190 191 192 193 class YulLiteralValueKind ( str , enum . Enum ): \"\"\" Kind of a Yul [Literal][woke.ast.ir.yul.literal.Literal] node. \"\"\" NUMBER = \"number\" STRING = \"string\" BOOL = \"bool\" BOOL = 'bool' class-attribute # NUMBER = 'number' class-attribute # STRING = 'string' class-attribute #","title":"Enums"},{"location":"api-reference/ir/enums/#woke.ast.enums","text":"","title":"enums"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator","text":"Bases: str , enum . Enum Assignment operator used in an Assignment expression. Source code in woke/ast/enums.py 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 class AssignmentOperator ( str , enum . Enum ): \"\"\" Assignment operator used in an [Assignment][woke.ast.ir.expression.assignment.Assignment] expression. \"\"\" EQUALS = r \"=\" PLUS_EQUALS = r \"+=\" MINUS_EQUALS = r \"-=\" TIMES_EQUALS = r \"*=\" DIVIDE_EQUALS = r \"/=\" MODULO_EQUALS = r \"%=\" OR_EQUALS = r \"|=\" AND_EQUALS = r \"&=\" XOR_EQUALS = r \"^=\" RIGHT_SHIFT_EQUALS = r \">>=\" LEFT_SHIFT_EQUALS = r \"<<=\"","title":"AssignmentOperator"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.AND_EQUALS","text":"","title":"AND_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.DIVIDE_EQUALS","text":"","title":"DIVIDE_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.EQUALS","text":"","title":"EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.LEFT_SHIFT_EQUALS","text":"","title":"LEFT_SHIFT_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.MINUS_EQUALS","text":"","title":"MINUS_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.MODULO_EQUALS","text":"","title":"MODULO_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.OR_EQUALS","text":"","title":"OR_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.PLUS_EQUALS","text":"","title":"PLUS_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.RIGHT_SHIFT_EQUALS","text":"","title":"RIGHT_SHIFT_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.TIMES_EQUALS","text":"","title":"TIMES_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.AssignmentOperator.XOR_EQUALS","text":"","title":"XOR_EQUALS"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator","text":"Bases: str , enum . Enum Binary operation operator used in a BinaryOperation expression. Source code in woke/ast/enums.py 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 class BinaryOpOperator ( str , enum . Enum ): \"\"\" Binary operation operator used in a [BinaryOperation][woke.ast.ir.expression.binary_operation.BinaryOperation] expression. \"\"\" PLUS = r \"+\" MINUS = r \"-\" TIMES = r \"*\" DIVIDE = r \"/\" MODULO = r \"%\" EXP = r \"**\" BOOLEAN_AND = r \"&&\" BOOLEAN_OR = r \"||\" NEQ = r \"!=\" EQ = r \"==\" LT = r \"<\" LTE = r \"<=\" GT = r \">\" GTE = r \">=\" XOR = r \"^\" BITWISE_AND = r \"&\" BITWISE_OR = r \"|\" LEFT_SHIFT = r \"<<\" RIGHT_SHIFT = r \">>\"","title":"BinaryOpOperator"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.BITWISE_AND","text":"","title":"BITWISE_AND"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.BITWISE_OR","text":"","title":"BITWISE_OR"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.BOOLEAN_AND","text":"","title":"BOOLEAN_AND"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.BOOLEAN_OR","text":"","title":"BOOLEAN_OR"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.DIVIDE","text":"","title":"DIVIDE"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.EQ","text":"","title":"EQ"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.EXP","text":"","title":"EXP"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.GT","text":"","title":"GT"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.GTE","text":"","title":"GTE"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.LEFT_SHIFT","text":"","title":"LEFT_SHIFT"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.LT","text":"","title":"LT"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.LTE","text":"","title":"LTE"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.MINUS","text":"","title":"MINUS"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.MODULO","text":"","title":"MODULO"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.NEQ","text":"","title":"NEQ"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.PLUS","text":"","title":"PLUS"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.RIGHT_SHIFT","text":"","title":"RIGHT_SHIFT"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.TIMES","text":"","title":"TIMES"},{"location":"api-reference/ir/enums/#woke.ast.enums.BinaryOpOperator.XOR","text":"","title":"XOR"},{"location":"api-reference/ir/enums/#woke.ast.enums.ContractKind","text":"Bases: str , enum . Enum Kind of a ContractDefinition declaration node. Source code in woke/ast/enums.py 96 97 98 99 100 101 102 103 class ContractKind ( str , enum . Enum ): \"\"\" Kind of a [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] declaration node. \"\"\" CONTRACT = \"contract\" INTERFACE = \"interface\" LIBRARY = \"library\"","title":"ContractKind"},{"location":"api-reference/ir/enums/#woke.ast.enums.ContractKind.CONTRACT","text":"","title":"CONTRACT"},{"location":"api-reference/ir/enums/#woke.ast.enums.ContractKind.INTERFACE","text":"","title":"INTERFACE"},{"location":"api-reference/ir/enums/#woke.ast.enums.ContractKind.LIBRARY","text":"","title":"LIBRARY"},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation","text":"Bases: str , enum . Enum Data location of a VariableDeclaration node. It also specifies the data location of the following types: Array , Bytes , String , Struct . Source code in woke/ast/enums.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 class DataLocation ( str , enum . Enum ): \"\"\" Data location of a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] node. It also specifies the data location of the following types: - [Array][woke.ast.types.Array], - [Bytes][woke.ast.types.Bytes], - [String][woke.ast.types.String], - [Struct][woke.ast.types.Struct]. \"\"\" CALLDATA = \"calldata\" DEFAULT = \"default\" \"\"\" Set only in [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] nodes when the data location is not specified (and the compiler even does not allow it). \"\"\" MEMORY = \"memory\" STORAGE = \"storage\"","title":"DataLocation"},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation.CALLDATA","text":"","title":"CALLDATA"},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation.DEFAULT","text":"Set only in VariableDeclaration nodes when the data location is not specified (and the compiler even does not allow it).","title":"DEFAULT"},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation.MEMORY","text":"","title":"MEMORY"},{"location":"api-reference/ir/enums/#woke.ast.enums.DataLocation.STORAGE","text":"","title":"STORAGE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionCallKind","text":"Bases: str , enum . Enum Kind of a FunctionCall expression node. Source code in woke/ast/enums.py 197 198 199 200 201 202 203 204 205 206 207 class FunctionCallKind ( str , enum . Enum ): \"\"\" Kind of a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] expression node. \"\"\" FUNCTION_CALL = \"functionCall\" \"\"\" Represents also an error call, event call and [NewExpression][woke.ast.ir.expression.new_expression.NewExpression] call. \"\"\" TYPE_CONVERSION = \"typeConversion\" STRUCT_CONSTRUCTOR_CALL = \"structConstructorCall\"","title":"FunctionCallKind"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionCallKind.FUNCTION_CALL","text":"Represents also an error call, event call and NewExpression call.","title":"FUNCTION_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionCallKind.STRUCT_CONSTRUCTOR_CALL","text":"","title":"STRUCT_CONSTRUCTOR_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionCallKind.TYPE_CONVERSION","text":"","title":"TYPE_CONVERSION"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind","text":"Bases: str , enum . Enum Kind of a FunctionDefinition declaration node. Source code in woke/ast/enums.py 118 119 120 121 122 123 124 125 126 127 128 129 130 class FunctionKind ( str , enum . Enum ): \"\"\" Kind of a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration node. \"\"\" FUNCTION = \"function\" RECEIVE = \"receive\" CONSTRUCTOR = \"constructor\" FALLBACK = \"fallback\" FREE_FUNCTION = \"freeFunction\" \"\"\" Function defined outside of a contract. \"\"\"","title":"FunctionKind"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.CONSTRUCTOR","text":"","title":"CONSTRUCTOR"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.FALLBACK","text":"","title":"FALLBACK"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.FREE_FUNCTION","text":"Function defined outside of a contract.","title":"FREE_FUNCTION"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.FUNCTION","text":"","title":"FUNCTION"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionKind.RECEIVE","text":"","title":"RECEIVE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind","text":"Bases: str , enum . Enum Kind of a Function type. Source code in woke/ast/enums.py 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 class FunctionTypeKind ( str , enum . Enum ): \"\"\" Kind of a [Function][woke.ast.types.Function] type. \"\"\" DECLARATION = \"declaration\" INTERNAL = \"internal\" EXTERNAL = \"external\" DELEGATE_CALL = \"delegatecall\" BARE_CALL = \"barecall\" BARE_CALL_CODE = \"barecallcode\" BARE_DELEGATE_CALL = \"baredelegatecall\" BARE_STATIC_CALL = \"barestaticcall\" CREATION = \"creation\" SEND = \"send\" TRANSFER = \"transfer\" KECCAK256 = \"keccak256\" SELFDESTRUCT = \"selfdestruct\" REVERT = \"revert\" EC_RECOVER = \"ecrecover\" SHA256 = \"sha256\" RIPEMD160 = \"ripemd160\" LOG0 = \"log0\" LOG1 = \"log1\" LOG2 = \"log2\" LOG3 = \"log3\" LOG4 = \"log4\" GAS_LEFT = \"gasleft\" EVENT = \"event\" ERROR = \"error\" WRAP = \"wrap\" UNWRAP = \"unwrap\" SET_GAS = \"setgas\" SET_VALUE = \"setvalue\" BLOCK_HASH = \"blockhash\" ADD_MOD = \"addmod\" MUL_MOD = \"mulmod\" ARRAY_PUSH = \"arraypush\" ARRAY_POP = \"arraypop\" BYTE_ARRAY_PUSH = \"bytearraypush\" BYTES_CONCAT = \"bytesconcat\" STRING_CONCAT = \"stringconcat\" OBJECT_CREATION = \"objectcreation\" ASSERT = \"assert\" REQUIRE = \"require\" ABI_ENCODE = \"abiencode\" ABI_ENCODE_PACKED = \"abiencodepacked\" ABI_ENCODE_WITH_SELECTOR = \"abiencodewithselector\" ABI_ENCODE_CALL = \"abiencodecall\" ABI_ENCODE_WITH_SIGNATURE = \"abiencodewithsignature\" ABI_DECODE = \"abidecode\" META_TYPE = \"metatype\"","title":"FunctionTypeKind"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_DECODE","text":"","title":"ABI_DECODE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE","text":"","title":"ABI_ENCODE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE_CALL","text":"","title":"ABI_ENCODE_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE_PACKED","text":"","title":"ABI_ENCODE_PACKED"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE_WITH_SELECTOR","text":"","title":"ABI_ENCODE_WITH_SELECTOR"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ABI_ENCODE_WITH_SIGNATURE","text":"","title":"ABI_ENCODE_WITH_SIGNATURE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ADD_MOD","text":"","title":"ADD_MOD"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ARRAY_POP","text":"","title":"ARRAY_POP"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ARRAY_PUSH","text":"","title":"ARRAY_PUSH"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ASSERT","text":"","title":"ASSERT"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BARE_CALL","text":"","title":"BARE_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BARE_CALL_CODE","text":"","title":"BARE_CALL_CODE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BARE_DELEGATE_CALL","text":"","title":"BARE_DELEGATE_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BARE_STATIC_CALL","text":"","title":"BARE_STATIC_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BLOCK_HASH","text":"","title":"BLOCK_HASH"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BYTES_CONCAT","text":"","title":"BYTES_CONCAT"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.BYTE_ARRAY_PUSH","text":"","title":"BYTE_ARRAY_PUSH"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.CREATION","text":"","title":"CREATION"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.DECLARATION","text":"","title":"DECLARATION"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.DELEGATE_CALL","text":"","title":"DELEGATE_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.EC_RECOVER","text":"","title":"EC_RECOVER"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.ERROR","text":"","title":"ERROR"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.EVENT","text":"","title":"EVENT"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.EXTERNAL","text":"","title":"EXTERNAL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.GAS_LEFT","text":"","title":"GAS_LEFT"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.INTERNAL","text":"","title":"INTERNAL"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.KECCAK256","text":"","title":"KECCAK256"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG0","text":"","title":"LOG0"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG1","text":"","title":"LOG1"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG2","text":"","title":"LOG2"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG3","text":"","title":"LOG3"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.LOG4","text":"","title":"LOG4"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.META_TYPE","text":"","title":"META_TYPE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.MUL_MOD","text":"","title":"MUL_MOD"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.OBJECT_CREATION","text":"","title":"OBJECT_CREATION"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.REQUIRE","text":"","title":"REQUIRE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.REVERT","text":"","title":"REVERT"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.RIPEMD160","text":"","title":"RIPEMD160"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SELFDESTRUCT","text":"","title":"SELFDESTRUCT"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SEND","text":"","title":"SEND"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SET_GAS","text":"","title":"SET_GAS"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SET_VALUE","text":"","title":"SET_VALUE"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.SHA256","text":"","title":"SHA256"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.STRING_CONCAT","text":"","title":"STRING_CONCAT"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.TRANSFER","text":"","title":"TRANSFER"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.UNWRAP","text":"","title":"UNWRAP"},{"location":"api-reference/ir/enums/#woke.ast.enums.FunctionTypeKind.WRAP","text":"","title":"WRAP"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum","text":"Bases: enum . IntEnum Global symbols of the Solidity language. Symbols with identifiers from -1 to -99 are codified by the compiler and can only be referenced by Identifier nodes. Other symbols are not officially codified by the compiler, but Woke also defines identifiers for them. These symbols can only be referenced by MemberAccess nodes. See the Solidity docs for (an incomplete) list of global symbols and their descriptions. Source code in woke/ast/enums.py 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 class GlobalSymbolsEnum ( enum . IntEnum ): \"\"\" Global symbols of the Solidity language. Symbols with identifiers from `-1` to `-99` are codified by the compiler and can only be referenced by [Identifier][woke.ast.ir.expression.identifier.Identifier] nodes. Other symbols are not officially codified by the compiler, but Woke also defines identifiers for them. These symbols can only be referenced by [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] nodes. See the [Solidity docs](https://docs.soliditylang.org/en/latest/units-and-global-variables.html#special-variables-and-functions) for (an incomplete) list of global symbols and their descriptions. \"\"\" ABI = - 1 ADDMOD = - 2 ASSERT = - 3 BLOCK = - 4 BLOCKHASH = - 5 ECRECOVER = - 6 GASLEFT = - 7 KECCAK256 = - 8 MSG = - 15 MULMOD = - 16 NOW = - 17 REQUIRE = - 18 REVERT = - 19 RIPEMD160 = - 20 SELFDESTRUCT = - 21 SHA256 = - 22 SHA3 = - 23 SUICIDE = - 24 SUPER = - 25 TX = - 26 TYPE = - 27 THIS = - 28 BLOCK_BASEFEE = - 100 BLOCK_CHAINID = - 101 BLOCK_COINBASE = - 102 BLOCK_DIFFICULTY = - 103 BLOCK_GASLIMIT = - 104 BLOCK_NUMBER = - 105 BLOCK_TIMESTAMP = - 106 MSG_DATA = - 200 MSG_SENDER = - 201 MSG_SIG = - 202 MSG_VALUE = - 203 TX_GASPRICE = - 300 TX_ORIGIN = - 301 ABI_DECODE = - 400 ABI_ENCODE = - 401 ABI_ENCODE_PACKED = - 402 ABI_ENCODE_WITH_SELECTOR = - 403 ABI_ENCODE_WITH_SIGNATURE = - 404 ABI_ENCODE_CALL = - 405 BYTES_CONCAT = - 500 BYTES_LENGTH = - 501 BYTES_PUSH = - 502 STRING_CONCAT = - 600 ADDRESS_BALANCE = - 700 ADDRESS_CODE = - 701 ADDRESS_CODEHASH = - 702 ADDRESS_TRANSFER = - 703 ADDRESS_SEND = - 704 ADDRESS_CALL = - 705 ADDRESS_DELEGATECALL = - 706 ADDRESS_STATICCALL = - 707 # available for contracts and interfaces TYPE_NAME = - 800 TYPE_CREATION_CODE = - 801 TYPE_RUNTIME_CODE = - 802 # available for interfaces only TYPE_INTERFACE_ID = - 803 # available for integers TYPE_MIN = - 804 TYPE_MAX = - 805 ARRAY_LENGTH = - 900 ARRAY_PUSH = - 901 ARRAY_POP = - 902 FUNCTION_SELECTOR = - 1000 FUNCTION_VALUE = - 1001 FUNCTION_GAS = - 1002 FUNCTION_ADDRESS = - 1003 USER_DEFINED_VALUE_TYPE_WRAP = - 1100 USER_DEFINED_VALUE_TYPE_UNWRAP = - 1101","title":"GlobalSymbolsEnum"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI","text":"","title":"ABI"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_DECODE","text":"","title":"ABI_DECODE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE","text":"","title":"ABI_ENCODE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE_CALL","text":"","title":"ABI_ENCODE_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE_PACKED","text":"","title":"ABI_ENCODE_PACKED"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE_WITH_SELECTOR","text":"","title":"ABI_ENCODE_WITH_SELECTOR"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ABI_ENCODE_WITH_SIGNATURE","text":"","title":"ABI_ENCODE_WITH_SIGNATURE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDMOD","text":"","title":"ADDMOD"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_BALANCE","text":"","title":"ADDRESS_BALANCE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_CALL","text":"","title":"ADDRESS_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_CODE","text":"","title":"ADDRESS_CODE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_CODEHASH","text":"","title":"ADDRESS_CODEHASH"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_DELEGATECALL","text":"","title":"ADDRESS_DELEGATECALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_SEND","text":"","title":"ADDRESS_SEND"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_STATICCALL","text":"","title":"ADDRESS_STATICCALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ADDRESS_TRANSFER","text":"","title":"ADDRESS_TRANSFER"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ARRAY_LENGTH","text":"","title":"ARRAY_LENGTH"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ARRAY_POP","text":"","title":"ARRAY_POP"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ARRAY_PUSH","text":"","title":"ARRAY_PUSH"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ASSERT","text":"","title":"ASSERT"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK","text":"","title":"BLOCK"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCKHASH","text":"","title":"BLOCKHASH"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_BASEFEE","text":"","title":"BLOCK_BASEFEE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_CHAINID","text":"","title":"BLOCK_CHAINID"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_COINBASE","text":"","title":"BLOCK_COINBASE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_DIFFICULTY","text":"","title":"BLOCK_DIFFICULTY"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_GASLIMIT","text":"","title":"BLOCK_GASLIMIT"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_NUMBER","text":"","title":"BLOCK_NUMBER"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BLOCK_TIMESTAMP","text":"","title":"BLOCK_TIMESTAMP"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BYTES_CONCAT","text":"","title":"BYTES_CONCAT"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BYTES_LENGTH","text":"","title":"BYTES_LENGTH"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.BYTES_PUSH","text":"","title":"BYTES_PUSH"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.ECRECOVER","text":"","title":"ECRECOVER"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.FUNCTION_ADDRESS","text":"","title":"FUNCTION_ADDRESS"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.FUNCTION_GAS","text":"","title":"FUNCTION_GAS"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.FUNCTION_SELECTOR","text":"","title":"FUNCTION_SELECTOR"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.FUNCTION_VALUE","text":"","title":"FUNCTION_VALUE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.GASLEFT","text":"","title":"GASLEFT"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.KECCAK256","text":"","title":"KECCAK256"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG","text":"","title":"MSG"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG_DATA","text":"","title":"MSG_DATA"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG_SENDER","text":"","title":"MSG_SENDER"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG_SIG","text":"","title":"MSG_SIG"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MSG_VALUE","text":"","title":"MSG_VALUE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.MULMOD","text":"","title":"MULMOD"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.NOW","text":"","title":"NOW"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.REQUIRE","text":"","title":"REQUIRE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.REVERT","text":"","title":"REVERT"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.RIPEMD160","text":"","title":"RIPEMD160"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SELFDESTRUCT","text":"","title":"SELFDESTRUCT"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SHA256","text":"","title":"SHA256"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SHA3","text":"","title":"SHA3"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.STRING_CONCAT","text":"","title":"STRING_CONCAT"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SUICIDE","text":"","title":"SUICIDE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.SUPER","text":"","title":"SUPER"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.THIS","text":"","title":"THIS"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TX","text":"","title":"TX"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TX_GASPRICE","text":"","title":"TX_GASPRICE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TX_ORIGIN","text":"","title":"TX_ORIGIN"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE","text":"","title":"TYPE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_CREATION_CODE","text":"","title":"TYPE_CREATION_CODE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_INTERFACE_ID","text":"","title":"TYPE_INTERFACE_ID"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_MAX","text":"","title":"TYPE_MAX"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_MIN","text":"","title":"TYPE_MIN"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_NAME","text":"","title":"TYPE_NAME"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.TYPE_RUNTIME_CODE","text":"","title":"TYPE_RUNTIME_CODE"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.USER_DEFINED_VALUE_TYPE_UNWRAP","text":"","title":"USER_DEFINED_VALUE_TYPE_UNWRAP"},{"location":"api-reference/ir/enums/#woke.ast.enums.GlobalSymbolsEnum.USER_DEFINED_VALUE_TYPE_WRAP","text":"","title":"USER_DEFINED_VALUE_TYPE_WRAP"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion","text":"Bases: str , enum . Enum Source code in woke/ast/enums.py 290 291 292 293 294 295 296 297 298 299 class InlineAssemblyEvmVersion ( str , enum . Enum ): HOMESTEAD = \"homestead\" TANGERINE_WHISTLE = \"tangerineWhistle\" SPURIOUS_DRAGON = \"spuriousDragon\" BYZANTIUM = \"byzantium\" CONSTANTINOPLE = \"constantinople\" PETERSBURG = \"petersburg\" ISTANBUL = \"istanbul\" BERLIN = \"berlin\" LONDON = \"london\"","title":"InlineAssemblyEvmVersion"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.BERLIN","text":"","title":"BERLIN"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.BYZANTIUM","text":"","title":"BYZANTIUM"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.CONSTANTINOPLE","text":"","title":"CONSTANTINOPLE"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.HOMESTEAD","text":"","title":"HOMESTEAD"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.ISTANBUL","text":"","title":"ISTANBUL"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.LONDON","text":"","title":"LONDON"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.PETERSBURG","text":"","title":"PETERSBURG"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.SPURIOUS_DRAGON","text":"","title":"SPURIOUS_DRAGON"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyEvmVersion.TANGERINE_WHISTLE","text":"","title":"TANGERINE_WHISTLE"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyFlag","text":"Bases: str , enum . Enum Source code in woke/ast/enums.py 310 311 class InlineAssemblyFlag ( str , enum . Enum ): MEMORY_SAFE = \"memory-safe\"","title":"InlineAssemblyFlag"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblyFlag.MEMORY_SAFE","text":"","title":"MEMORY_SAFE"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix","text":"Bases: str , enum . Enum Source code in woke/ast/enums.py 302 303 304 305 306 307 class InlineAssemblySuffix ( str , enum . Enum ): SLOT = \"slot\" OFFSET = \"offset\" LENGTH = \"length\" ADDRESS = \"address\" SELECTOR = \"selector\"","title":"InlineAssemblySuffix"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.ADDRESS","text":"","title":"ADDRESS"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.LENGTH","text":"","title":"LENGTH"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.OFFSET","text":"","title":"OFFSET"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.SELECTOR","text":"","title":"SELECTOR"},{"location":"api-reference/ir/enums/#woke.ast.enums.InlineAssemblySuffix.SLOT","text":"","title":"SLOT"},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind","text":"Bases: str , enum . Enum Kind of a Literal expression node. Source code in woke/ast/enums.py 174 175 176 177 178 179 180 181 182 183 class LiteralKind ( str , enum . Enum ): \"\"\" Kind of a [Literal][woke.ast.ir.expression.literal.Literal] expression node. \"\"\" BOOL = \"bool\" NUMBER = \"number\" STRING = \"string\" HEX_STRING = \"hexString\" UNICODE_STRING = \"unicodeString\"","title":"LiteralKind"},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.BOOL","text":"","title":"BOOL"},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.HEX_STRING","text":"","title":"HEX_STRING"},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.NUMBER","text":"","title":"NUMBER"},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.STRING","text":"","title":"STRING"},{"location":"api-reference/ir/enums/#woke.ast.enums.LiteralKind.UNICODE_STRING","text":"","title":"UNICODE_STRING"},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind","text":"Bases: str , enum . Enum Kind of a Magic type. Source code in woke/ast/enums.py 392 393 394 395 396 397 398 399 400 401 class MagicTypeKind ( str , enum . Enum ): \"\"\" Kind of a [Magic][woke.ast.types.Magic] type. \"\"\" BLOCK = \"block\" MESSAGE = \"message\" TRANSACTION = \"transaction\" ABI = \"abi\" META_TYPE = \"meta_type\"","title":"MagicTypeKind"},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.ABI","text":"","title":"ABI"},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.BLOCK","text":"","title":"BLOCK"},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.MESSAGE","text":"","title":"MESSAGE"},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.META_TYPE","text":"","title":"META_TYPE"},{"location":"api-reference/ir/enums/#woke.ast.enums.MagicTypeKind.TRANSACTION","text":"","title":"TRANSACTION"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifierInvocationKind","text":"Bases: str , enum . Enum Kind of a ModifierInvocation meta node. Source code in woke/ast/enums.py 164 165 166 167 168 169 170 class ModifierInvocationKind ( str , enum . Enum ): \"\"\" Kind of a [ModifierInvocation][woke.ast.ir.meta.modifier_invocation.ModifierInvocation] meta node. \"\"\" MODIFIER_INVOCATION = \"modifierInvocation\" BASE_CONSTRUCTOR_SPECIFIER = \"baseConstructorSpecifier\"","title":"ModifierInvocationKind"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER","text":"","title":"BASE_CONSTRUCTOR_SPECIFIER"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION","text":"","title":"MODIFIER_INVOCATION"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag","text":"Bases: enum . IntFlag Flag enum describing how an expression ( ExpressionAbc ) or statement ( StatementAbc ) modifies the blockchain state. Source code in woke/ast/enums.py 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 class ModifiesStateFlag ( enum . IntFlag ): \"\"\" Flag enum describing how an expression ([ExpressionAbc][woke.ast.ir.expression.abc.ExpressionAbc]) or statement ([StatementAbc][woke.ast.ir.statement.abc.StatementAbc]) modifies the blockchain state. \"\"\" MODIFIES_STATE_VAR = 1 EMITS = 2 SENDS_ETHER = 4 DEPLOYS_CONTRACT = 8 SELFDESTRUCTS = 16 PERFORMS_CALL = 32 PERFORMS_DELEGATECALL = 64 CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION = 128 CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION = 256 def __repr__ ( self ): if self . value == 0 : return f \" { self . __class__ . __name__ } (0)\" flags = [ f for f in self . __class__ if f in self ] return \" | \" . join ( f . name or \"\" for f in flags ) __str__ = __repr__","title":"ModifiesStateFlag"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION","text":"","title":"CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION","text":"","title":"CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.DEPLOYS_CONTRACT","text":"","title":"DEPLOYS_CONTRACT"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.EMITS","text":"","title":"EMITS"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.MODIFIES_STATE_VAR","text":"","title":"MODIFIES_STATE_VAR"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.PERFORMS_CALL","text":"","title":"PERFORMS_CALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.PERFORMS_DELEGATECALL","text":"","title":"PERFORMS_DELEGATECALL"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.SELFDESTRUCTS","text":"","title":"SELFDESTRUCTS"},{"location":"api-reference/ir/enums/#woke.ast.enums.ModifiesStateFlag.SENDS_ETHER","text":"","title":"SENDS_ETHER"},{"location":"api-reference/ir/enums/#woke.ast.enums.Mutability","text":"Bases: str , enum . Enum Mutability of a VariableDeclaration declaration node. Source code in woke/ast/enums.py 107 108 109 110 111 112 113 114 class Mutability ( str , enum . Enum ): \"\"\" Mutability of a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declaration node. \"\"\" MUTABLE = \"mutable\" IMMUTABLE = \"immutable\" CONSTANT = \"constant\"","title":"Mutability"},{"location":"api-reference/ir/enums/#woke.ast.enums.Mutability.CONSTANT","text":"","title":"CONSTANT"},{"location":"api-reference/ir/enums/#woke.ast.enums.Mutability.IMMUTABLE","text":"","title":"IMMUTABLE"},{"location":"api-reference/ir/enums/#woke.ast.enums.Mutability.MUTABLE","text":"","title":"MUTABLE"},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability","text":"Bases: str , enum . Enum State mutability of: Function type, FunctionDefinition declaration, ElementaryTypeName and FunctionTypeName type names. In the case of ElementaryTypeName , the state mutability is specified only for the address type and can be either NONPAYABLE or PAYABLE . Source code in woke/ast/enums.py 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 class StateMutability ( str , enum . Enum ): \"\"\" State mutability of: - [Function][woke.ast.types.Function] type, - [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] declaration, - [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName] and [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] type names. In the case of [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName], the state mutability is specified only for the `address` type and can be either [NONPAYABLE][woke.ast.enums.StateMutability.NONPAYABLE] or [PAYABLE][woke.ast.enums.StateMutability.PAYABLE]. \"\"\" PAYABLE = \"payable\" PURE = \"pure\" NONPAYABLE = \"nonpayable\" VIEW = \"view\"","title":"StateMutability"},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability.NONPAYABLE","text":"","title":"NONPAYABLE"},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability.PAYABLE","text":"","title":"PAYABLE"},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability.PURE","text":"","title":"PURE"},{"location":"api-reference/ir/enums/#woke.ast.enums.StateMutability.VIEW","text":"","title":"VIEW"},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator","text":"Bases: str , enum . Enum Unary operation operator used in an UnaryOperation expression. Source code in woke/ast/enums.py 232 233 234 235 236 237 238 239 240 241 242 class UnaryOpOperator ( str , enum . Enum ): \"\"\" Unary operation operator used in an [UnaryOperation][woke.ast.ir.expression.unary_operation.UnaryOperation] expression. \"\"\" PLUS_PLUS = r \"++\" MINUS_MINUS = r \"--\" MINUS = r \"-\" NOT = r \"!\" TILDE = r \"~\" DELETE = \"delete\"","title":"UnaryOpOperator"},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.DELETE","text":"","title":"DELETE"},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.MINUS","text":"","title":"MINUS"},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.MINUS_MINUS","text":"","title":"MINUS_MINUS"},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.NOT","text":"","title":"NOT"},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.PLUS_PLUS","text":"","title":"PLUS_PLUS"},{"location":"api-reference/ir/enums/#woke.ast.enums.UnaryOpOperator.TILDE","text":"","title":"TILDE"},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility","text":"Bases: str , enum . Enum Visibility of: FunctionTypeName type name, FunctionDefinition , ModifierDefinition , StructDefinition and VariableDeclaration declarations. Source code in woke/ast/enums.py 133 134 135 136 137 138 139 140 141 142 143 144 class Visibility ( str , enum . Enum ): \"\"\" Visibility of: - [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] type name, - [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition], [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition], [StructDefinition][woke.ast.ir.declaration.struct_definition.StructDefinition] and [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] declarations. \"\"\" EXTERNAL = \"external\" PUBLIC = \"public\" INTERNAL = \"internal\" PRIVATE = \"private\"","title":"Visibility"},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility.EXTERNAL","text":"","title":"EXTERNAL"},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility.INTERNAL","text":"","title":"INTERNAL"},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility.PRIVATE","text":"","title":"PRIVATE"},{"location":"api-reference/ir/enums/#woke.ast.enums.Visibility.PUBLIC","text":"","title":"PUBLIC"},{"location":"api-reference/ir/enums/#woke.ast.enums.YulLiteralValueKind","text":"Bases: str , enum . Enum Kind of a Yul Literal node. Source code in woke/ast/enums.py 186 187 188 189 190 191 192 193 class YulLiteralValueKind ( str , enum . Enum ): \"\"\" Kind of a Yul [Literal][woke.ast.ir.yul.literal.Literal] node. \"\"\" NUMBER = \"number\" STRING = \"string\" BOOL = \"bool\"","title":"YulLiteralValueKind"},{"location":"api-reference/ir/enums/#woke.ast.enums.YulLiteralValueKind.BOOL","text":"","title":"BOOL"},{"location":"api-reference/ir/enums/#woke.ast.enums.YulLiteralValueKind.NUMBER","text":"","title":"NUMBER"},{"location":"api-reference/ir/enums/#woke.ast.enums.YulLiteralValueKind.STRING","text":"","title":"STRING"},{"location":"api-reference/ir/types/","text":"Types represent the type of an expression ( ExpressionAbc ), type name ( TypeNameAbc ) and VariableDeclaration . woke.ast.types module # TypeAbc class # Bases: ABC Abstract base class for all types. Source code in woke/ast/types.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class TypeAbc ( ABC ): \"\"\" Abstract base class for all types. \"\"\" @classmethod def from_type_identifier ( cls , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ) -> typ . Optional [ \"TypeAbc\" ]: if type_identifier . startswith ( \"t_address\" ): return Address ( type_identifier ) elif type_identifier . startswith ( \"t_bool\" ): return Bool ( type_identifier ) elif type_identifier . startswith ( \"t_int\" ): return Int ( type_identifier ) elif type_identifier . startswith ( \"t_uint\" ): return UInt ( type_identifier ) elif type_identifier . startswith ( \"t_stringliteral_\" ): return StringLiteral ( type_identifier ) elif type_identifier . startswith ( \"t_string_\" ): return String ( type_identifier ) elif type_identifier . startswith ( \"t_bytes_\" ): return Bytes ( type_identifier ) # must go after t_bytes_ !! elif type_identifier . startswith ( \"t_bytes\" ): return FixedBytes ( type_identifier ) elif type_identifier . startswith ( \"t_function\" ): return Function ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_tuple\" ): return Tuple ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_type\" ): return Type ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_rational\" ): return Rational ( type_identifier ) elif type_identifier . startswith ( \"t_modifier\" ): return Modifier ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_array\" ): return Array ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_mapping\" ): return Mapping ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_contract\" ) or type_identifier . startswith ( \"t_super\" ): return Contract ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_struct\" ): return Struct ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_enum\" ): return Enum ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_magic\" ): return Magic ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_userDefinedValueType\" ): return UserDefinedValueType ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_module\" ): return Module ( type_identifier ) elif type_identifier . startswith ( \"t_fixed\" ): return Fixed ( type_identifier ) elif type_identifier . startswith ( \"t_ufixed\" ): return UFixed ( type_identifier ) else : return None Address class # Bases: TypeAbc Address type. Source code in woke/ast/types.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 class Address ( TypeAbc ): \"\"\" Address type. \"\"\" __is_payable : bool def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_address\" ) if type_identifier . startswith ( \"_payable\" ): type_identifier . read ( \"_payable\" ) self . __is_payable = True else : self . __is_payable = False @property def is_payable ( self ) -> bool : \"\"\" Returns: `True` if the address is payable, `False` otherwise. \"\"\" return self . __is_payable is_payable () property # Returns: Type Description bool True if the address is payable, False otherwise. Source code in woke/ast/types.py 150 151 152 153 154 155 156 @property def is_payable ( self ) -> bool : \"\"\" Returns: `True` if the address is payable, `False` otherwise. \"\"\" return self . __is_payable Bool class # Bases: TypeAbc Boolean type. Source code in woke/ast/types.py 159 160 161 162 163 164 class Bool ( TypeAbc ): \"\"\" Boolean type. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_bool\" ) IntAbc class # Bases: TypeAbc Base class for Int and UInt types. Source code in woke/ast/types.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 class IntAbc ( TypeAbc ): \"\"\" Base class for [Int][woke.ast.types.Int] and [UInt][woke.ast.types.UInt] types. \"\"\" _bits_count : int @property def bits_count ( self ) -> int : \"\"\" Can only be a multiple of 8, with a minimum of 8 and a maximum of 256. Returns: Number of bits used to represent this integer. \"\"\" return self . _bits_count bits_count () property # Can only be a multiple of 8, with a minimum of 8 and a maximum of 256. Returns: Type Description int Number of bits used to represent this integer. Source code in woke/ast/types.py 173 174 175 176 177 178 179 180 @property def bits_count ( self ) -> int : \"\"\" Can only be a multiple of 8, with a minimum of 8 and a maximum of 256. Returns: Number of bits used to represent this integer. \"\"\" return self . _bits_count Int class # Bases: IntAbc Signed integer type. Source code in woke/ast/types.py 183 184 185 186 187 188 189 190 191 192 193 194 class Int ( IntAbc ): \"\"\" Signed integer type. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_int\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None number = match . group ( \"number\" ) type_identifier . read ( number ) self . _bits_count = int ( number ) UInt class # Bases: IntAbc Unsigned integer type. Source code in woke/ast/types.py 197 198 199 200 201 202 203 204 205 206 207 208 class UInt ( IntAbc ): \"\"\" Unsigned integer type. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_uint\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None number = match . group ( \"number\" ) type_identifier . read ( number ) self . _bits_count = int ( number ) FixedAbc class # Bases: TypeAbc Base class for Fixed and UFixed types. Info Currently not fully implemented in Solidity. Source code in woke/ast/types.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 class FixedAbc ( TypeAbc ): \"\"\" Base class for [Fixed][woke.ast.types.Fixed] and [UFixed][woke.ast.types.UFixed] types. !!! info Currently not fully implemented in Solidity. \"\"\" _total_bits : int _fractional_digits : int @property def total_bits ( self ) -> int : \"\"\" Returns: Total number of bits used to represent this fixed point number. \"\"\" return self . _total_bits @property def fractional_digits ( self ) -> int : \"\"\" Returns: Number of decimal places available. \"\"\" return self . _fractional_digits total_bits () property # Returns: Type Description int Total number of bits used to represent this fixed point number. Source code in woke/ast/types.py 220 221 222 223 224 225 226 @property def total_bits ( self ) -> int : \"\"\" Returns: Total number of bits used to represent this fixed point number. \"\"\" return self . _total_bits fractional_digits () property # Returns: Type Description int Number of decimal places available. Source code in woke/ast/types.py 228 229 230 231 232 233 234 @property def fractional_digits ( self ) -> int : \"\"\" Returns: Number of decimal places available. \"\"\" return self . _fractional_digits Fixed class # Bases: FixedAbc Signed fixed-point number type as specified by the Solidity docs . Info Currently not fully implemented in Solidity. Source code in woke/ast/types.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 class Fixed ( FixedAbc ): \"\"\" Signed fixed-point number type as specified by the [Solidity docs](https://docs.soliditylang.org/en/latest/types.html?highlight=fixed#fixed-point-numbers). !!! info Currently not fully implemented in Solidity. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_fixed\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None total_bits = match . group ( \"number\" ) type_identifier . read ( total_bits ) self . _total_bits = int ( total_bits ) type_identifier . read ( \"x\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None fractional_digits = match . group ( \"number\" ) type_identifier . read ( fractional_digits ) self . _fractional_digits = int ( fractional_digits ) UFixed class # Bases: FixedAbc Unsigned fixed point number type as specified by the Solidity docs . Info Currently not fully implemented in Solidity. Source code in woke/ast/types.py 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 class UFixed ( FixedAbc ): \"\"\" Unsigned fixed point number type as specified by the [Solidity docs](https://docs.soliditylang.org/en/latest/types.html?highlight=ufixed#fixed-point-numbers). !!! info Currently not fully implemented in Solidity. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_ufixed\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None total_bits = match . group ( \"number\" ) type_identifier . read ( total_bits ) self . _total_bits = int ( total_bits ) type_identifier . read ( \"x\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None fractional_digits = match . group ( \"number\" ) type_identifier . read ( fractional_digits ) self . _fractional_digits = int ( fractional_digits ) StringLiteral class # Bases: TypeAbc String literal type. Warning This expression is of the StringLiteral type: \"Hello, world!\" However, this expression is of the String type and contains a child expression of the StringLiteral type: string ( \"Hello, world!\" ) Source code in woke/ast/types.py 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 class StringLiteral ( TypeAbc ): \"\"\" String literal type. !!! warning This expression is of the [StringLiteral][woke.ast.types.StringLiteral] type: ```solidity \"Hello, world!\" ``` However, this expression is of the [String][woke.ast.types.String] type and contains a child expression of the [StringLiteral][woke.ast.types.StringLiteral] type: ```solidity string(\"Hello, world!\") ``` \"\"\" __keccak256_hash : bytes def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_stringliteral_\" ) match = HEX_RE . match ( type_identifier . data ) assert match is not None hex = match . group ( \"hex\" ) type_identifier . read ( hex ) self . __keccak256_hash = bytes . fromhex ( hex ) @property def keccak256_hash ( self ) -> bytes : \"\"\" Returns: Keccak256 hash of the string literal. \"\"\" return self . __keccak256_hash keccak256_hash () property # Returns: Type Description bytes Keccak256 hash of the string literal. Source code in woke/ast/types.py 307 308 309 310 311 312 313 @property def keccak256_hash ( self ) -> bytes : \"\"\" Returns: Keccak256 hash of the string literal. \"\"\" return self . __keccak256_hash String class # Bases: TypeAbc String type. Source code in woke/ast/types.py 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 class String ( TypeAbc ): \"\"\" String type. \"\"\" __data_location : DataLocation __is_pointer : bool __is_slice : bool def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_string\" ) if type_identifier . startswith ( \"_storage\" ): self . __data_location = DataLocation . STORAGE type_identifier . read ( \"_storage\" ) elif type_identifier . startswith ( \"_memory\" ): self . __data_location = DataLocation . MEMORY type_identifier . read ( \"_memory\" ) elif type_identifier . startswith ( \"_calldata\" ): self . __data_location = DataLocation . CALLDATA type_identifier . read ( \"_calldata\" ) else : assert False , f \"Unexpected string type data location { type_identifier } \" if type_identifier . startswith ( \"_ptr\" ): self . __is_pointer = True type_identifier . read ( \"_ptr\" ) else : self . __is_pointer = False if type_identifier . startswith ( \"_slice\" ): self . __is_slice = True type_identifier . read ( \"_slice\" ) else : self . __is_slice = False @property def data_location ( self ) -> DataLocation : \"\"\" Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE] Returns: Data location of the string expression. \"\"\" return self . __data_location @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the string expression is a pointer to storage. \"\"\" return self . __is_pointer @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(string calldata s) public pure { s[0:5]; // s[0:5] is a string slice } ``` Returns: Whether this is a slice of a string expression. \"\"\" return self . __is_slice data_location () property # Can be either CALLDATA , MEMORY or STORAGE Returns: Type Description DataLocation Data location of the string expression. Source code in woke/ast/types.py 350 351 352 353 354 355 356 357 @property def data_location ( self ) -> DataLocation : \"\"\" Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE] Returns: Data location of the string expression. \"\"\" return self . __data_location is_pointer () property # Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than STORAGE , this always returns True because assignments never change the contents of the original value. Returns: Type Description bool Whether the string expression is a pointer to storage. Source code in woke/ast/types.py 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the string expression is a pointer to storage. \"\"\" return self . __is_pointer is_slice () property # Example function foo ( string calldata s ) public pure { s [ 0 : 5 ]; // s[0:5] is a string slice } Returns: Type Description bool Whether this is a slice of a string expression. Source code in woke/ast/types.py 375 376 377 378 379 380 381 382 383 384 385 386 387 @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(string calldata s) public pure { s[0:5]; // s[0:5] is a string slice } ``` Returns: Whether this is a slice of a string expression. \"\"\" return self . __is_slice Bytes class # Bases: TypeAbc Bytes type. Source code in woke/ast/types.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 class Bytes ( TypeAbc ): \"\"\" Bytes type. \"\"\" __data_location : DataLocation __is_pointer : bool __is_slice : bool def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_bytes\" ) if type_identifier . startswith ( \"_storage\" ): self . __data_location = DataLocation . STORAGE type_identifier . read ( \"_storage\" ) elif type_identifier . startswith ( \"_memory\" ): self . __data_location = DataLocation . MEMORY type_identifier . read ( \"_memory\" ) elif type_identifier . startswith ( \"_calldata\" ): self . __data_location = DataLocation . CALLDATA type_identifier . read ( \"_calldata\" ) else : assert False , f \"Unexpected string type data location { type_identifier } \" if type_identifier . startswith ( \"_ptr\" ): self . __is_pointer = True type_identifier . read ( \"_ptr\" ) else : self . __is_pointer = False if type_identifier . startswith ( \"_slice\" ): self . __is_slice = True type_identifier . read ( \"_slice\" ) else : self . __is_slice = False @property def data_location ( self ) -> DataLocation : \"\"\" Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE] Returns: Data location of the bytes expression. \"\"\" return self . __data_location @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the bytes expression is a pointer to storage. \"\"\" return self . __is_pointer @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(bytes calldata b) public pure { b[0:5]; // s[0:5] is a bytes slice } ``` Returns: Whether this is a slice of a bytes expression. \"\"\" return self . __is_slice data_location () property # Can be either CALLDATA , MEMORY or STORAGE Returns: Type Description DataLocation Data location of the bytes expression. Source code in woke/ast/types.py 424 425 426 427 428 429 430 431 @property def data_location ( self ) -> DataLocation : \"\"\" Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE] Returns: Data location of the bytes expression. \"\"\" return self . __data_location is_pointer () property # Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than STORAGE , this always returns True because assignments never change the contents of the original value. Returns: Type Description bool Whether the bytes expression is a pointer to storage. Source code in woke/ast/types.py 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the bytes expression is a pointer to storage. \"\"\" return self . __is_pointer is_slice () property # Example function foo ( bytes calldata b ) public pure { b [ 0 : 5 ]; // s[0:5] is a bytes slice } Returns: Type Description bool Whether this is a slice of a bytes expression. Source code in woke/ast/types.py 449 450 451 452 453 454 455 456 457 458 459 460 461 @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(bytes calldata b) public pure { b[0:5]; // s[0:5] is a bytes slice } ``` Returns: Whether this is a slice of a bytes expression. \"\"\" return self . __is_slice FixedBytes class # Bases: TypeAbc Fixed-size byte array type. Source code in woke/ast/types.py 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 class FixedBytes ( TypeAbc ): \"\"\" Fixed-size byte array type. \"\"\" __bytes_count : int def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_bytes\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None number = match . group ( \"number\" ) type_identifier . read ( number ) self . __bytes_count = int ( number ) @property def bytes_count ( self ) -> int : \"\"\" Is at least 1 and at most 32. Returns: Number of bytes used to represent this fixed-size byte array. \"\"\" return self . __bytes_count bytes_count () property # Is at least 1 and at most 32. Returns: Type Description int Number of bytes used to represent this fixed-size byte array. Source code in woke/ast/types.py 478 479 480 481 482 483 484 485 @property def bytes_count ( self ) -> int : \"\"\" Is at least 1 and at most 32. Returns: Number of bytes used to represent this fixed-size byte array. \"\"\" return self . __bytes_count Function class # Bases: TypeAbc Function type. Warning Given the following function: function foo ( uint a , uint b ) public pure returns ( uint , uint ) { return ( a + b , a - b ); } and the following call: foo ( 1 , 2 ); the type of foo is Function , but the type of foo ( 1 , 2 ) is Tuple . Source code in woke/ast/types.pyclass Function ( TypeAbc ): \"\"\" Function type. !!! warning Given the following function: ```solidity function foo(uint a, uint b) public pure returns(uint, uint) { return (a + b, a - b); } ``` and the following call: ```solidity foo(1, 2); ``` the type of `foo` is [Function][woke.ast.types.Function], but the type of `:::solidity foo(1, 2)` is [Tuple][woke.ast.types.Tuple]. \"\"\" __kind : FunctionTypeKind __state_mutability : StateMutability __parameters : typ . Tuple [ TypeAbc , ... ] __return_parameters : typ . Tuple [ TypeAbc , ... ] __gas_set : bool __value_set : bool __salt_set : bool __bound_to : typ . Optional [ typ . Tuple [ TypeAbc , ... ]] def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_function_\" ) matched = [] for kind in FunctionTypeKind : if type_identifier . startswith ( kind ): matched . append ( kind ) assert len ( matched ) >= 1 , f \"Unexpected function kind { type_identifier } \" self . __kind = FunctionTypeKind ( max ( matched , key = len )) type_identifier . read ( self . __kind ) if type_identifier . startswith ( \"_payable\" ): self . __state_mutability = StateMutability . PAYABLE type_identifier . read ( \"_payable\" ) elif type_identifier . startswith ( \"_pure\" ): self . __state_mutability = StateMutability . PURE type_identifier . read ( \"_pure\" ) elif type_identifier . startswith ( \"_nonpayable\" ): self . __state_mutability = StateMutability . NONPAYABLE type_identifier . read ( \"_nonpayable\" ) elif type_identifier . startswith ( \"_view\" ): self . __state_mutability = StateMutability . VIEW type_identifier . read ( \"_view\" ) else : assert False , f \"Unexpected function state mutability { type_identifier } \" parameters = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert not any ( param is None for param in parameters ) self . __parameters = parameters # type: ignore type_identifier . read ( \"returns\" ) return_parameters = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert not any ( param is None for param in return_parameters ) self . __return_parameters = return_parameters # type: ignore if type_identifier . startswith ( \"gas\" ): self . __gas_set = True type_identifier . read ( \"gas\" ) else : self . __gas_set = False if type_identifier . startswith ( \"value\" ): self . __value_set = True type_identifier . read ( \"value\" ) else : self . __value_set = False if type_identifier . startswith ( \"salt\" ): self . __salt_set = True type_identifier . read ( \"salt\" ) else : self . __salt_set = False if type_identifier . startswith ( \"bound_to\" ): type_identifier . read ( \"bound_to\" ) bound_to = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert not any ( param is None for param in bound_to ) self . __bound_to = bound_to # type: ignore else : self . __bound_to = None @property def kind ( self ) -> FunctionTypeKind : \"\"\" Returns: Kind of the function type. \"\"\" return self . __kind @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function type. \"\"\" return self . __state_mutability @property def parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the parameters of the function type. \"\"\" return self . __parameters @property def return_parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the return parameters of the function type. \"\"\" return self . __return_parameters @property def gas_set ( self ) -> bool : \"\"\" !!! example In the case of the old syntax (deprecated), the `gas` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `gas_set` set to `True`. ```solidity foo.gas(10)(1, 2); ``` In the case of the new syntax, the `{gas: 10}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `gas_set` set to `True`. ```solidity foo{gas: 10}(1, 2); ``` Returns: `True` if the gas is set in the function type. \"\"\" return self . __gas_set @property def value_set ( self ) -> bool : \"\"\" !!! example In the case of the old syntax (deprecated), the `value` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `value_set` set to `True`. ```solidity foo.value(1)(1, 2); ``` In the case of the new syntax, the `{value: 1}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `value_set` set to `True`. ```solidity foo{value: 1}(1, 2); ``` Returns: `True` if the value is set in the function type. \"\"\" return self . __value_set @property def salt_set ( self ) -> bool : \"\"\" !!! example In the following example, the `{salt: salt}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `salt_set` set to `True`. ```solidity new Foo{salt: salt}(); ``` Returns: `True` if the salt is set in the function type. \"\"\" return self . __salt_set @property def bound_to ( self ) -> typ . Optional [ typ . Tuple [ TypeAbc , ... ]]: \"\"\" A function type can be bound to a type using the [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective] or internally in the case of a Solidity global symbol. !!! example In the following example, the `add` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is bound to the [UInt][woke.ast.types.UInt] type. ```solidity linenums=\"1\" function add(uint a, uint b) pure returns (uint) { return a + b; } using {add} for uint; contract Foo { function bar(uint x) public pure returns(uint) { return x.add(1); } } ``` In this example, the `push` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is bound to the [Array][woke.ast.types.Array] type. ```solidity arr.push(1); ``` Returns: Type to which the function is bound to. \"\"\" return self . __bound_to kind () property # Returns: Type Description FunctionTypeKind Kind of the function type. Source code in woke/ast/types.py 581 582 583 584 585 586 587 @property def kind ( self ) -> FunctionTypeKind : \"\"\" Returns: Kind of the function type. \"\"\" return self . __kind state_mutability () property # Returns: Type Description StateMutability State mutability of the function type. Source code in woke/ast/types.py 589 590 591 592 593 594 595 @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function type. \"\"\" return self . __state_mutability parameters () property # Returns: Type Description typ . Tuple [ TypeAbc , ...] Expression types of the parameters of the function type. Source code in woke/ast/types.py 597 598 599 600 601 602 603 @property def parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the parameters of the function type. \"\"\" return self . __parameters return_parameters () property # Returns: Type Description typ . Tuple [ TypeAbc , ...] Expression types of the return parameters of the function type. Source code in woke/ast/types.py 605 606 607 608 609 610 611 @property def return_parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the return parameters of the function type. \"\"\" return self . __return_parameters gas_set () property # Example In the case of the old syntax (deprecated), the gas MemberAccess expression is of the Function type which returns a Function with gas_set set to True . foo . gas ( 10 )( 1 , 2 ); In the case of the new syntax, the {gas: 10} FunctionCallOptions expression is of the Function type with gas_set set to True . foo { gas : 10 }( 1 , 2 ); Returns: Type Description bool True if the gas is set in the function type. Source code in woke/ast/types.py 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 @property def gas_set ( self ) -> bool : \"\"\" !!! example In the case of the old syntax (deprecated), the `gas` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `gas_set` set to `True`. ```solidity foo.gas(10)(1, 2); ``` In the case of the new syntax, the `{gas: 10}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `gas_set` set to `True`. ```solidity foo{gas: 10}(1, 2); ``` Returns: `True` if the gas is set in the function type. \"\"\" return self . __gas_set value_set () property # Example In the case of the old syntax (deprecated), the value MemberAccess expression is of the Function type which returns a Function with value_set set to True . foo . value ( 1 )( 1 , 2 ); In the case of the new syntax, the {value: 1} FunctionCallOptions expression is of the Function type with value_set set to True . foo { value : 1 }( 1 , 2 ); Returns: Type Description bool True if the value is set in the function type. Source code in woke/ast/types.py 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 @property def value_set ( self ) -> bool : \"\"\" !!! example In the case of the old syntax (deprecated), the `value` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `value_set` set to `True`. ```solidity foo.value(1)(1, 2); ``` In the case of the new syntax, the `{value: 1}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `value_set` set to `True`. ```solidity foo{value: 1}(1, 2); ``` Returns: `True` if the value is set in the function type. \"\"\" return self . __value_set salt_set () property # Example In the following example, the {salt: salt} FunctionCallOptions expression is of the Function type with salt_set set to True . new Foo { salt : salt }(); Returns: Type Description bool True if the salt is set in the function type. Source code in woke/ast/types.py 649 650 651 652 653 654 655 656 657 658 659 660 @property def salt_set ( self ) -> bool : \"\"\" !!! example In the following example, the `{salt: salt}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `salt_set` set to `True`. ```solidity new Foo{salt: salt}(); ``` Returns: `True` if the salt is set in the function type. \"\"\" return self . __salt_set bound_to () property # A function type can be bound to a type using the UsingForDirective or internally in the case of a Solidity global symbol. Example In the following example, the add MemberAccess expression on line 9 is of the Function type and is bound to the UInt type. 1 2 3 4 5 6 7 8 9 10 11 function add ( uint a , uint b ) pure returns ( uint ) { return a + b ; } using { add } for uint ; contract Foo { function bar ( uint x ) public pure returns ( uint ) { return x . add ( 1 ); } } In this example, the push MemberAccess expression on line 9 is of the Function type and is bound to the Array type. arr . push ( 1 ); Returns: Type Description typ . Optional [ typ . Tuple [ TypeAbc , ...]] Type to which the function is bound to. Source code in woke/ast/types.py 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 @property def bound_to ( self ) -> typ . Optional [ typ . Tuple [ TypeAbc , ... ]]: \"\"\" A function type can be bound to a type using the [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective] or internally in the case of a Solidity global symbol. !!! example In the following example, the `add` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is bound to the [UInt][woke.ast.types.UInt] type. ```solidity linenums=\"1\" function add(uint a, uint b) pure returns (uint) { return a + b; } using {add} for uint; contract Foo { function bar(uint x) public pure returns(uint) { return x.add(1); } } ``` In this example, the `push` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is bound to the [Array][woke.ast.types.Array] type. ```solidity arr.push(1); ``` Returns: Type to which the function is bound to. \"\"\" return self . __bound_to Tuple class # Bases: TypeAbc Tuple type. Source code in woke/ast/types.py 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 class Tuple ( TypeAbc ): \"\"\" Tuple type. \"\"\" __components : typ . Tuple [ typ . Optional [ TypeAbc ], ... ] def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_tuple\" ) self . __components = _parse_list ( type_identifier , reference_resolver , cu_hash ) @property def components ( self ) -> typ . Tuple [ typ . Optional [ TypeAbc ], ... ]: \"\"\" A component type can be `None` in the case of a tuple with a missing component. !!! example In the following example, the `(success, )` expression is of the [Tuple][woke.ast.types.Tuple] type with the components of the type [Bool][woke.ast.types.Bool] and `None`. ```solidity bool success; (success, ) = address(addr).call{value: 1}(\"\"); ``` Returns: Expression types of the components of the tuple type. \"\"\" return self . __components components () property # A component type can be None in the case of a tuple with a missing component. Example In the following example, the (success, ) expression is of the Tuple type with the components of the type Bool and None . bool success ; ( success , ) = address ( addr ). call { value : 1 }( \"\" ); Returns: Type Description typ . Tuple [ typ . Optional [ TypeAbc ], ...] Expression types of the components of the tuple type. Source code in woke/ast/types.py 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 @property def components ( self ) -> typ . Tuple [ typ . Optional [ TypeAbc ], ... ]: \"\"\" A component type can be `None` in the case of a tuple with a missing component. !!! example In the following example, the `(success, )` expression is of the [Tuple][woke.ast.types.Tuple] type with the components of the type [Bool][woke.ast.types.Bool] and `None`. ```solidity bool success; (success, ) = address(addr).call{value: 1}(\"\"); ``` Returns: Expression types of the components of the tuple type. \"\"\" return self . __components Type class # Bases: TypeAbc Type type. As opposed to other types, this type describes the type of a type, not the type of an instance of a type. Source code in woke/ast/types.py 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 class Type ( TypeAbc ): \"\"\" Type type. As opposed to other types, this type describes the type of a type, not the type of an instance of a type. \"\"\" __actual_type : TypeAbc def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_type\" ) actual_type = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert len ( actual_type ) == 1 and actual_type [ 0 ] is not None self . __actual_type = actual_type [ 0 ] @property def actual_type ( self ) -> TypeAbc : \"\"\" !!! example `payable` in the following example is of the [Type][woke.ast.types.Type] type with the [Address][woke.ast.types.Address] actual type. ```solidity payable(addr); ``` `super` in the following example is of the [Type][woke.ast.types.Type] type with the [Contract][woke.ast.types.Contract] actual type. ```solidity super.foo(); ``` `string` in the following example is of the [Type][woke.ast.types.Type] type with the [String][woke.ast.types.String] actual type. ```solidity string.concat(\"foo\", \"bar\"); ``` `Foo` in the following example on line 4 is of the [Type][woke.ast.types.Type] type with the [Enum][woke.ast.types.Enum] actual type. ```solidity linenums=\"1\" enum Foo { A, B } function bar() pure returns (Foo) { return Foo.A; } ``` Returns: Actual type of the type type. \"\"\" return self . __actual_type actual_type () property # Example payable in the following example is of the Type type with the Address actual type. payable ( addr ); super in the following example is of the Type type with the Contract actual type. super . foo (); string in the following example is of the Type type with the String actual type. string . concat ( \"foo\" , \"bar\" ); Foo in the following example on line 4 is of the Type type with the Enum actual type. 1 2 3 4 5 enum Foo { A , B } function bar () pure returns ( Foo ) { return Foo . A ; } Returns: Type Description TypeAbc Actual type of the type type. Source code in woke/ast/types.py 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 @property def actual_type ( self ) -> TypeAbc : \"\"\" !!! example `payable` in the following example is of the [Type][woke.ast.types.Type] type with the [Address][woke.ast.types.Address] actual type. ```solidity payable(addr); ``` `super` in the following example is of the [Type][woke.ast.types.Type] type with the [Contract][woke.ast.types.Contract] actual type. ```solidity super.foo(); ``` `string` in the following example is of the [Type][woke.ast.types.Type] type with the [String][woke.ast.types.String] actual type. ```solidity string.concat(\"foo\", \"bar\"); ``` `Foo` in the following example on line 4 is of the [Type][woke.ast.types.Type] type with the [Enum][woke.ast.types.Enum] actual type. ```solidity linenums=\"1\" enum Foo { A, B } function bar() pure returns (Foo) { return Foo.A; } ``` Returns: Actual type of the type type. \"\"\" return self . __actual_type Rational class # Bases: TypeAbc Rational type. Represents the type of constants or expressions with constants. Example 1 , 0x1234 , 1 e18 , 1 * 2 / 3 are all of the Rational type. Source code in woke/ast/types.py 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 class Rational ( TypeAbc ): \"\"\" Rational type. Represents the type of constants or expressions with constants. !!! example `:::solidity 1`, `:::solidity 0x1234`, `:::solidity 1e18`, `:::solidity 1 * 2 / 3` are all of the [Rational][woke.ast.types.Rational] type. \"\"\" __numerator : int __denominator : int def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_rational_\" ) if type_identifier . startswith ( \"minus_\" ): type_identifier . read ( \"minus_\" ) self . __numerator = - 1 else : self . __numerator = 1 match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid rational\" number = match . group ( \"number\" ) type_identifier . read ( number ) self . __numerator *= int ( number ) type_identifier . read ( \"_by_\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid rational\" number = match . group ( \"number\" ) type_identifier . read ( number ) self . __denominator = int ( number ) @property def numerator ( self ) -> int : \"\"\" If the rational is negative, the numerator will be negative. Returns: Numerator of the rational number. \"\"\" return self . __numerator @property def denominator ( self ) -> int : \"\"\" Returns: Denominator of the rational number. \"\"\" return self . __denominator numerator () property # If the rational is negative, the numerator will be negative. Returns: Type Description int Numerator of the rational number. Source code in woke/ast/types.py 809 810 811 812 813 814 815 816 @property def numerator ( self ) -> int : \"\"\" If the rational is negative, the numerator will be negative. Returns: Numerator of the rational number. \"\"\" return self . __numerator denominator () property # Returns: Type Description int Denominator of the rational number. Source code in woke/ast/types.py 818 819 820 821 822 823 824 @property def denominator ( self ) -> int : \"\"\" Returns: Denominator of the rational number. \"\"\" return self . __denominator Modifier class # Bases: TypeAbc Modifier type. Source code in woke/ast/types.py 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 class Modifier ( TypeAbc ): \"\"\" Modifier type. \"\"\" __parameters : typ . Tuple [ TypeAbc , ... ] def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_modifier\" ) parameters = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert not any ( param is None for param in parameters ) self . __parameters = parameters # type: ignore @property def parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the parameters of the modifier. \"\"\" return self . __parameters parameters () property # Returns: Type Description typ . Tuple [ TypeAbc , ...] Expression types of the parameters of the modifier. Source code in woke/ast/types.py 844 845 846 847 848 849 850 @property def parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the parameters of the modifier. \"\"\" return self . __parameters Array class # Bases: TypeAbc Array type. Source code in woke/ast/types.py 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 class Array ( TypeAbc ): \"\"\" Array type. \"\"\" __base_type : TypeAbc __length : typ . Optional [ int ] __data_location : DataLocation __is_pointer : bool __is_slice : bool def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_array\" ) base_type = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert ( len ( base_type ) == 1 and base_type [ 0 ] is not None ), f \"Unexpected array base type { type_identifier } \" self . __base_type = base_type [ 0 ] if type_identifier . startswith ( \"dyn\" ): self . __length = None type_identifier . read ( \"dyn\" ) else : match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid array length\" self . __length = int ( match . group ( \"number\" )) type_identifier . read ( match . group ( \"number\" )) if type_identifier . startswith ( \"_storage\" ): self . __data_location = DataLocation . STORAGE type_identifier . read ( \"_storage\" ) elif type_identifier . startswith ( \"_memory\" ): self . __data_location = DataLocation . MEMORY type_identifier . read ( \"_memory\" ) elif type_identifier . startswith ( \"_calldata\" ): self . __data_location = DataLocation . CALLDATA type_identifier . read ( \"_calldata\" ) else : assert False , f \"Unexpected array type data location { type_identifier } \" if type_identifier . startswith ( \"_ptr\" ): self . __is_pointer = True type_identifier . read ( \"_ptr\" ) else : self . __is_pointer = False if type_identifier . startswith ( \"_slice\" ): self . __is_slice = True type_identifier . read ( \"_slice\" ) else : self . __is_slice = False @property def base_type ( self ) -> TypeAbc : \"\"\" Returns: Base type of the array. \"\"\" return self . __base_type @property def length ( self ) -> typ . Optional [ int ]: \"\"\" Returns: Length of the array. `None` if the array is dynamic (not fixed size). \"\"\" return self . __length @property def data_location ( self ) -> DataLocation : \"\"\" Returns: Data location of the array. \"\"\" return self . __data_location @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the array expression is a pointer to storage. \"\"\" return self . __is_pointer @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(uint[] calldata arr) public pure { arr[0:5]; // arr[0:5] is an array slice } ``` Returns: Whether this is a slice of an array expression. \"\"\" return self . __is_slice base_type () property # Returns: Type Description TypeAbc Base type of the array. Source code in woke/ast/types.py 909 910 911 912 913 914 915 @property def base_type ( self ) -> TypeAbc : \"\"\" Returns: Base type of the array. \"\"\" return self . __base_type length () property # Returns: Type Description typ . Optional [ int ] Length of the array. None if the array is dynamic (not fixed size). Source code in woke/ast/types.py 917 918 919 920 921 922 923 @property def length ( self ) -> typ . Optional [ int ]: \"\"\" Returns: Length of the array. `None` if the array is dynamic (not fixed size). \"\"\" return self . __length data_location () property # Returns: Type Description DataLocation Data location of the array. Source code in woke/ast/types.py 925 926 927 928 929 930 931 @property def data_location ( self ) -> DataLocation : \"\"\" Returns: Data location of the array. \"\"\" return self . __data_location is_pointer () property # Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than STORAGE , this always returns True because assignments never change the contents of the original value. Returns: Type Description bool Whether the array expression is a pointer to storage. Source code in woke/ast/types.py 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the array expression is a pointer to storage. \"\"\" return self . __is_pointer is_slice () property # Example function foo ( uint [] calldata arr ) public pure { arr [ 0 : 5 ]; // arr[0:5] is an array slice } Returns: Type Description bool Whether this is a slice of an array expression. Source code in woke/ast/types.py 949 950 951 952 953 954 955 956 957 958 959 960 961 @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(uint[] calldata arr) public pure { arr[0:5]; // arr[0:5] is an array slice } ``` Returns: Whether this is a slice of an array expression. \"\"\" return self . __is_slice Mapping class # Bases: TypeAbc Mapping type. Source code in woke/ast/types.py 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 class Mapping ( TypeAbc ): \"\"\" Mapping type. \"\"\" __key_type : TypeAbc __value_type : TypeAbc def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_mapping\" ) key_value = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert len ( key_value ) == 2 , f \" { type_identifier } is not a valid mapping\" assert key_value [ 0 ] is not None , f \" { type_identifier } is not a valid mapping\" assert key_value [ 1 ] is not None , f \" { type_identifier } is not a valid mapping\" self . __key_type = key_value [ 0 ] self . __value_type = key_value [ 1 ] @property def key_type ( self ) -> TypeAbc : \"\"\" Returns: Key type of the mapping. \"\"\" return self . __key_type @property def value_type ( self ) -> TypeAbc : \"\"\" Returns: Value type of the mapping. \"\"\" return self . __value_type key_type () property # Returns: Type Description TypeAbc Key type of the mapping. Source code in woke/ast/types.py 985 986 987 988 989 990 991 @property def key_type ( self ) -> TypeAbc : \"\"\" Returns: Key type of the mapping. \"\"\" return self . __key_type value_type () property # Returns: Type Description TypeAbc Value type of the mapping. Source code in woke/ast/types.py 993 994 995 996 997 998 999 @property def value_type ( self ) -> TypeAbc : \"\"\" Returns: Value type of the mapping. \"\"\" return self . __value_type Contract class # Bases: TypeAbc Source code in woke/ast/types.py 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 class Contract ( TypeAbc ): __is_super : bool __name : str __ast_id : AstNodeId __reference_resolver : ReferenceResolver __cu_hash : bytes def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): if type_identifier . startswith ( \"t_contract\" ): self . __is_super = False type_identifier . read ( \"t_contract\" ) elif type_identifier . startswith ( \"t_super\" ): self . __is_super = True type_identifier . read ( \"t_super\" ) else : assert False , f \"Unexpected contract type { type_identifier } \" self . __name = _parse_user_identifier ( type_identifier ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid contract\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) self . __reference_resolver = reference_resolver self . __cu_hash = cu_hash @property def is_super ( self ) -> bool : \"\"\" !!! warning Until 0.7.6, the `super` keyword ([Identifier][woke.ast.ir.expression.identifier.Identifier]) was of the [Contract][woke.ast.types.Contract] type with `is_super` set to `True`. Since 0.8.0, the `super` keyword is of the [Type][woke.ast.types.Type] type with [Contract][woke.ast.types.Contract] as the `actual_type` and `is_super` set to `True`. !!! warning When this is `True`, the `name` and `ir_node` properties refer to the current contract, not the base contract. !!! example The `name` and `ir_node` properties of the [Contract][woke.ast.types.Contract] type of the `super` expression in the following example refer to the `Foo` contract, not the `Bar` contract. ```solidity contract Foo is Bar { function foo() public { super.foo(); } } ``` Returns: `True` if the expression is the `super` keyword. \"\"\" return self . __is_super @property def name ( self ) -> str : \"\"\" Returns: Name of the contract. \"\"\" return self . __name @property def ir_node ( self ) -> ContractDefinition : \"\"\" Returns: Contract definition IR node. \"\"\" from woke.ast.ir.declaration.contract_definition import ContractDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , ContractDefinition ) return node is_super () property # Warning Until 0.7.6, the super keyword ( Identifier ) was of the Contract type with is_super set to True . Since 0.8.0, the super keyword is of the Type type with Contract as the actual_type and is_super set to True . Warning When this is True , the name and ir_node properties refer to the current contract, not the base contract. Example The name and ir_node properties of the Contract type of the super expression in the following example refer to the Foo contract, not the Bar contract. contract Foo is Bar { function foo () public { super . foo (); } } Returns: Type Description bool True if the expression is the super keyword. Source code in woke/ast/types.py 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 @property def is_super ( self ) -> bool : \"\"\" !!! warning Until 0.7.6, the `super` keyword ([Identifier][woke.ast.ir.expression.identifier.Identifier]) was of the [Contract][woke.ast.types.Contract] type with `is_super` set to `True`. Since 0.8.0, the `super` keyword is of the [Type][woke.ast.types.Type] type with [Contract][woke.ast.types.Contract] as the `actual_type` and `is_super` set to `True`. !!! warning When this is `True`, the `name` and `ir_node` properties refer to the current contract, not the base contract. !!! example The `name` and `ir_node` properties of the [Contract][woke.ast.types.Contract] type of the `super` expression in the following example refer to the `Foo` contract, not the `Bar` contract. ```solidity contract Foo is Bar { function foo() public { super.foo(); } } ``` Returns: `True` if the expression is the `super` keyword. \"\"\" return self . __is_super name () property # Returns: Type Description str Name of the contract. Source code in woke/ast/types.py 1058 1059 1060 1061 1062 1063 1064 @property def name ( self ) -> str : \"\"\" Returns: Name of the contract. \"\"\" return self . __name ir_node () property # Returns: Type Description ContractDefinition Contract definition IR node. Source code in woke/ast/types.py 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 @property def ir_node ( self ) -> ContractDefinition : \"\"\" Returns: Contract definition IR node. \"\"\" from woke.ast.ir.declaration.contract_definition import ContractDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , ContractDefinition ) return node Struct class # Bases: TypeAbc Struct type. Source code in woke/ast/types.py 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 class Struct ( TypeAbc ): \"\"\" Struct type. \"\"\" __name : str __ast_id : AstNodeId __data_location : DataLocation __is_pointer : bool __reference_resolver : ReferenceResolver __cu_hash : bytes def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_struct\" ) self . __name = _parse_user_identifier ( type_identifier ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid struct\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) if type_identifier . startswith ( \"_storage\" ): self . __data_location = DataLocation . STORAGE type_identifier . read ( \"_storage\" ) elif type_identifier . startswith ( \"_memory\" ): self . __data_location = DataLocation . MEMORY type_identifier . read ( \"_memory\" ) elif type_identifier . startswith ( \"_calldata\" ): self . __data_location = DataLocation . CALLDATA type_identifier . read ( \"_calldata\" ) else : assert False , f \"Unexpected array type data location { type_identifier } \" if type_identifier . startswith ( \"_ptr\" ): self . __is_pointer = True type_identifier . read ( \"_ptr\" ) else : self . __is_pointer = False self . __reference_resolver = reference_resolver self . __cu_hash = cu_hash @property def name ( self ) -> str : \"\"\" Returns: Name of the struct. \"\"\" return self . __name @property def data_location ( self ) -> DataLocation : \"\"\" Returns: Data location of the struct. \"\"\" return self . __data_location @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the struct expression is a pointer to storage. \"\"\" return self . __is_pointer @property def ir_node ( self ) -> StructDefinition : \"\"\" Returns: Struct definition IR node. \"\"\" from woke.ast.ir.declaration.struct_definition import StructDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , StructDefinition ) return node name () property # Returns: Type Description str Name of the struct. Source code in woke/ast/types.py 1125 1126 1127 1128 1129 1130 1131 @property def name ( self ) -> str : \"\"\" Returns: Name of the struct. \"\"\" return self . __name data_location () property # Returns: Type Description DataLocation Data location of the struct. Source code in woke/ast/types.py 1133 1134 1135 1136 1137 1138 1139 @property def data_location ( self ) -> DataLocation : \"\"\" Returns: Data location of the struct. \"\"\" return self . __data_location is_pointer () property # Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than STORAGE , this always returns True because assignments never change the contents of the original value. Returns: Type Description bool Whether the struct expression is a pointer to storage. Source code in woke/ast/types.py 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the struct expression is a pointer to storage. \"\"\" return self . __is_pointer ir_node () property # Returns: Type Description StructDefinition Struct definition IR node. Source code in woke/ast/types.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 @property def ir_node ( self ) -> StructDefinition : \"\"\" Returns: Struct definition IR node. \"\"\" from woke.ast.ir.declaration.struct_definition import StructDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , StructDefinition ) return node Enum class # Bases: TypeAbc Enum type. Warning Enum values are of the Enum type and enums are of the Type type with Enum as the actual_type . Source code in woke/ast/types.py 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 class Enum ( TypeAbc ): \"\"\" Enum type. !!! warning Enum values are of the [Enum][woke.ast.types.Enum] type and enums are of the [Type][woke.ast.types.Type] type with [Enum][woke.ast.types.Enum] as the [actual_type][woke.ast.types.Type.actual_type]. \"\"\" __name : str __ast_id : AstNodeId __reference_resolver : ReferenceResolver __cu_hash : bytes def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_enum\" ) self . __name = _parse_user_identifier ( type_identifier ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid enum\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) self . __reference_resolver = reference_resolver self . __cu_hash = cu_hash @property def name ( self ) -> str : \"\"\" Returns: Name of the enum. \"\"\" return self . __name @property def ir_node ( self ) -> EnumDefinition : \"\"\" Returns: Enum definition IR node. \"\"\" from woke.ast.ir.declaration.enum_definition import EnumDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , EnumDefinition ) return node name () property # Returns: Type Description str Name of the enum. Source code in woke/ast/types.py 1199 1200 1201 1202 1203 1204 1205 @property def name ( self ) -> str : \"\"\" Returns: Name of the enum. \"\"\" return self . __name ir_node () property # Returns: Type Description EnumDefinition Enum definition IR node. Source code in woke/ast/types.py 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 @property def ir_node ( self ) -> EnumDefinition : \"\"\" Returns: Enum definition IR node. \"\"\" from woke.ast.ir.declaration.enum_definition import EnumDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , EnumDefinition ) return node Magic class # Bases: TypeAbc Magic type represents Solidity language built-in objects. Source code in woke/ast/types.py 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 class Magic ( TypeAbc ): \"\"\" Magic type represents Solidity language built-in objects. \"\"\" __kind : MagicTypeKind __meta_argument_type : typ . Optional [ TypeAbc ] def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_magic_\" ) matched = False for kind in MagicTypeKind : if type_identifier . startswith ( kind ): self . __kind = MagicTypeKind ( kind ) type_identifier . read ( kind ) matched = True break assert matched , f \"Unexpected magic kind { type_identifier } \" if self . __kind == MagicTypeKind . META_TYPE : type_identifier . read ( \"_\" ) meta_argument_type = TypeAbc . from_type_identifier ( type_identifier , reference_resolver , cu_hash ) assert meta_argument_type is not None self . __meta_argument_type = meta_argument_type else : self . __meta_argument_type = None @property def kind ( self ) -> MagicTypeKind : \"\"\" Returns: Kind of the magic type. \"\"\" return self . __kind @property def meta_argument_type ( self ) -> typ . Optional [ TypeAbc ]: \"\"\" Is only set for [MagicTypeKind.META_TYPE][woke.ast.enums.MagicTypeKind.META_TYPE] kind. !!! example [Contract][woke.ast.types.Contract] in `:::solidity type(IERC20)`, [UInt][woke.ast.types.UInt] in `:::solidity type(uint)`. Returns: Type of the meta expression argument. \"\"\" return self . __meta_argument_type kind () property # Returns: Type Description MagicTypeKind Kind of the magic type. Source code in woke/ast/types.py 1254 1255 1256 1257 1258 1259 1260 @property def kind ( self ) -> MagicTypeKind : \"\"\" Returns: Kind of the magic type. \"\"\" return self . __kind meta_argument_type () property # Is only set for MagicTypeKind.META_TYPE kind. Example Contract in type ( IERC20 ) , UInt in type ( uint ) . Returns: Type Description typ . Optional [ TypeAbc ] Type of the meta expression argument. Source code in woke/ast/types.py 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 @property def meta_argument_type ( self ) -> typ . Optional [ TypeAbc ]: \"\"\" Is only set for [MagicTypeKind.META_TYPE][woke.ast.enums.MagicTypeKind.META_TYPE] kind. !!! example [Contract][woke.ast.types.Contract] in `:::solidity type(IERC20)`, [UInt][woke.ast.types.UInt] in `:::solidity type(uint)`. Returns: Type of the meta expression argument. \"\"\" return self . __meta_argument_type UserDefinedValueType class # Bases: TypeAbc Source code in woke/ast/types.py 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 class UserDefinedValueType ( TypeAbc ): __name : str __ast_id : AstNodeId __reference_resolver : ReferenceResolver __cu_hash : bytes def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_userDefinedValueType\" ) self . __name = _parse_user_identifier ( type_identifier ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid enum\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) self . __reference_resolver = reference_resolver self . __cu_hash = cu_hash @property def name ( self ) -> str : \"\"\" Returns: Name of the user defined value type. \"\"\" return self . __name @property def ir_node ( self ) -> UserDefinedValueTypeDefinition : \"\"\" Returns: User defined value type definition IR node. \"\"\" from woke.ast.ir.declaration.user_defined_value_type_definition import ( UserDefinedValueTypeDefinition , ) node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , UserDefinedValueTypeDefinition ) return node name () property # Returns: Type Description str Name of the user defined value type. Source code in woke/ast/types.py 1298 1299 1300 1301 1302 1303 1304 @property def name ( self ) -> str : \"\"\" Returns: Name of the user defined value type. \"\"\" return self . __name ir_node () property # Returns: Type Description UserDefinedValueTypeDefinition User defined value type definition IR node. Source code in woke/ast/types.py 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 @property def ir_node ( self ) -> UserDefinedValueTypeDefinition : \"\"\" Returns: User defined value type definition IR node. \"\"\" from woke.ast.ir.declaration.user_defined_value_type_definition import ( UserDefinedValueTypeDefinition , ) node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , UserDefinedValueTypeDefinition ) return node Module class # Bases: TypeAbc Module type. Note It is probably currently not possible to create an expression of this type. Source code in woke/ast/types.py 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 class Module ( TypeAbc ): \"\"\" Module type. !!! note It is probably currently not possible to create an expression of this type. \"\"\" __source_unit_id : int def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_module_\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid module\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) self . __source_unit_id = int ( match . group ( \"number\" ))","title":"Types"},{"location":"api-reference/ir/types/#woke.ast.types","text":"","title":"types"},{"location":"api-reference/ir/types/#woke.ast.types.TypeAbc","text":"Bases: ABC Abstract base class for all types. Source code in woke/ast/types.py 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 class TypeAbc ( ABC ): \"\"\" Abstract base class for all types. \"\"\" @classmethod def from_type_identifier ( cls , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ) -> typ . Optional [ \"TypeAbc\" ]: if type_identifier . startswith ( \"t_address\" ): return Address ( type_identifier ) elif type_identifier . startswith ( \"t_bool\" ): return Bool ( type_identifier ) elif type_identifier . startswith ( \"t_int\" ): return Int ( type_identifier ) elif type_identifier . startswith ( \"t_uint\" ): return UInt ( type_identifier ) elif type_identifier . startswith ( \"t_stringliteral_\" ): return StringLiteral ( type_identifier ) elif type_identifier . startswith ( \"t_string_\" ): return String ( type_identifier ) elif type_identifier . startswith ( \"t_bytes_\" ): return Bytes ( type_identifier ) # must go after t_bytes_ !! elif type_identifier . startswith ( \"t_bytes\" ): return FixedBytes ( type_identifier ) elif type_identifier . startswith ( \"t_function\" ): return Function ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_tuple\" ): return Tuple ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_type\" ): return Type ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_rational\" ): return Rational ( type_identifier ) elif type_identifier . startswith ( \"t_modifier\" ): return Modifier ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_array\" ): return Array ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_mapping\" ): return Mapping ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_contract\" ) or type_identifier . startswith ( \"t_super\" ): return Contract ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_struct\" ): return Struct ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_enum\" ): return Enum ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_magic\" ): return Magic ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_userDefinedValueType\" ): return UserDefinedValueType ( type_identifier , reference_resolver , cu_hash ) elif type_identifier . startswith ( \"t_module\" ): return Module ( type_identifier ) elif type_identifier . startswith ( \"t_fixed\" ): return Fixed ( type_identifier ) elif type_identifier . startswith ( \"t_ufixed\" ): return UFixed ( type_identifier ) else : return None","title":"TypeAbc"},{"location":"api-reference/ir/types/#woke.ast.types.Address","text":"Bases: TypeAbc Address type. Source code in woke/ast/types.py 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 class Address ( TypeAbc ): \"\"\" Address type. \"\"\" __is_payable : bool def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_address\" ) if type_identifier . startswith ( \"_payable\" ): type_identifier . read ( \"_payable\" ) self . __is_payable = True else : self . __is_payable = False @property def is_payable ( self ) -> bool : \"\"\" Returns: `True` if the address is payable, `False` otherwise. \"\"\" return self . __is_payable","title":"Address"},{"location":"api-reference/ir/types/#woke.ast.types.Address.is_payable","text":"Returns: Type Description bool True if the address is payable, False otherwise. Source code in woke/ast/types.py 150 151 152 153 154 155 156 @property def is_payable ( self ) -> bool : \"\"\" Returns: `True` if the address is payable, `False` otherwise. \"\"\" return self . __is_payable","title":"is_payable()"},{"location":"api-reference/ir/types/#woke.ast.types.Bool","text":"Bases: TypeAbc Boolean type. Source code in woke/ast/types.py 159 160 161 162 163 164 class Bool ( TypeAbc ): \"\"\" Boolean type. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_bool\" )","title":"Bool"},{"location":"api-reference/ir/types/#woke.ast.types.IntAbc","text":"Bases: TypeAbc Base class for Int and UInt types. Source code in woke/ast/types.py 167 168 169 170 171 172 173 174 175 176 177 178 179 180 class IntAbc ( TypeAbc ): \"\"\" Base class for [Int][woke.ast.types.Int] and [UInt][woke.ast.types.UInt] types. \"\"\" _bits_count : int @property def bits_count ( self ) -> int : \"\"\" Can only be a multiple of 8, with a minimum of 8 and a maximum of 256. Returns: Number of bits used to represent this integer. \"\"\" return self . _bits_count","title":"IntAbc"},{"location":"api-reference/ir/types/#woke.ast.types.IntAbc.bits_count","text":"Can only be a multiple of 8, with a minimum of 8 and a maximum of 256. Returns: Type Description int Number of bits used to represent this integer. Source code in woke/ast/types.py 173 174 175 176 177 178 179 180 @property def bits_count ( self ) -> int : \"\"\" Can only be a multiple of 8, with a minimum of 8 and a maximum of 256. Returns: Number of bits used to represent this integer. \"\"\" return self . _bits_count","title":"bits_count()"},{"location":"api-reference/ir/types/#woke.ast.types.Int","text":"Bases: IntAbc Signed integer type. Source code in woke/ast/types.py 183 184 185 186 187 188 189 190 191 192 193 194 class Int ( IntAbc ): \"\"\" Signed integer type. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_int\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None number = match . group ( \"number\" ) type_identifier . read ( number ) self . _bits_count = int ( number )","title":"Int"},{"location":"api-reference/ir/types/#woke.ast.types.UInt","text":"Bases: IntAbc Unsigned integer type. Source code in woke/ast/types.py 197 198 199 200 201 202 203 204 205 206 207 208 class UInt ( IntAbc ): \"\"\" Unsigned integer type. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_uint\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None number = match . group ( \"number\" ) type_identifier . read ( number ) self . _bits_count = int ( number )","title":"UInt"},{"location":"api-reference/ir/types/#woke.ast.types.FixedAbc","text":"Bases: TypeAbc Base class for Fixed and UFixed types. Info Currently not fully implemented in Solidity. Source code in woke/ast/types.py 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 class FixedAbc ( TypeAbc ): \"\"\" Base class for [Fixed][woke.ast.types.Fixed] and [UFixed][woke.ast.types.UFixed] types. !!! info Currently not fully implemented in Solidity. \"\"\" _total_bits : int _fractional_digits : int @property def total_bits ( self ) -> int : \"\"\" Returns: Total number of bits used to represent this fixed point number. \"\"\" return self . _total_bits @property def fractional_digits ( self ) -> int : \"\"\" Returns: Number of decimal places available. \"\"\" return self . _fractional_digits","title":"FixedAbc"},{"location":"api-reference/ir/types/#woke.ast.types.FixedAbc.total_bits","text":"Returns: Type Description int Total number of bits used to represent this fixed point number. Source code in woke/ast/types.py 220 221 222 223 224 225 226 @property def total_bits ( self ) -> int : \"\"\" Returns: Total number of bits used to represent this fixed point number. \"\"\" return self . _total_bits","title":"total_bits()"},{"location":"api-reference/ir/types/#woke.ast.types.FixedAbc.fractional_digits","text":"Returns: Type Description int Number of decimal places available. Source code in woke/ast/types.py 228 229 230 231 232 233 234 @property def fractional_digits ( self ) -> int : \"\"\" Returns: Number of decimal places available. \"\"\" return self . _fractional_digits","title":"fractional_digits()"},{"location":"api-reference/ir/types/#woke.ast.types.Fixed","text":"Bases: FixedAbc Signed fixed-point number type as specified by the Solidity docs . Info Currently not fully implemented in Solidity. Source code in woke/ast/types.py 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 class Fixed ( FixedAbc ): \"\"\" Signed fixed-point number type as specified by the [Solidity docs](https://docs.soliditylang.org/en/latest/types.html?highlight=fixed#fixed-point-numbers). !!! info Currently not fully implemented in Solidity. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_fixed\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None total_bits = match . group ( \"number\" ) type_identifier . read ( total_bits ) self . _total_bits = int ( total_bits ) type_identifier . read ( \"x\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None fractional_digits = match . group ( \"number\" ) type_identifier . read ( fractional_digits ) self . _fractional_digits = int ( fractional_digits )","title":"Fixed"},{"location":"api-reference/ir/types/#woke.ast.types.UFixed","text":"Bases: FixedAbc Unsigned fixed point number type as specified by the Solidity docs . Info Currently not fully implemented in Solidity. Source code in woke/ast/types.py 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 class UFixed ( FixedAbc ): \"\"\" Unsigned fixed point number type as specified by the [Solidity docs](https://docs.soliditylang.org/en/latest/types.html?highlight=ufixed#fixed-point-numbers). !!! info Currently not fully implemented in Solidity. \"\"\" def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_ufixed\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None total_bits = match . group ( \"number\" ) type_identifier . read ( total_bits ) self . _total_bits = int ( total_bits ) type_identifier . read ( \"x\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None fractional_digits = match . group ( \"number\" ) type_identifier . read ( fractional_digits ) self . _fractional_digits = int ( fractional_digits )","title":"UFixed"},{"location":"api-reference/ir/types/#woke.ast.types.StringLiteral","text":"Bases: TypeAbc String literal type. Warning This expression is of the StringLiteral type: \"Hello, world!\" However, this expression is of the String type and contains a child expression of the StringLiteral type: string ( \"Hello, world!\" ) Source code in woke/ast/types.py 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 class StringLiteral ( TypeAbc ): \"\"\" String literal type. !!! warning This expression is of the [StringLiteral][woke.ast.types.StringLiteral] type: ```solidity \"Hello, world!\" ``` However, this expression is of the [String][woke.ast.types.String] type and contains a child expression of the [StringLiteral][woke.ast.types.StringLiteral] type: ```solidity string(\"Hello, world!\") ``` \"\"\" __keccak256_hash : bytes def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_stringliteral_\" ) match = HEX_RE . match ( type_identifier . data ) assert match is not None hex = match . group ( \"hex\" ) type_identifier . read ( hex ) self . __keccak256_hash = bytes . fromhex ( hex ) @property def keccak256_hash ( self ) -> bytes : \"\"\" Returns: Keccak256 hash of the string literal. \"\"\" return self . __keccak256_hash","title":"StringLiteral"},{"location":"api-reference/ir/types/#woke.ast.types.StringLiteral.keccak256_hash","text":"Returns: Type Description bytes Keccak256 hash of the string literal. Source code in woke/ast/types.py 307 308 309 310 311 312 313 @property def keccak256_hash ( self ) -> bytes : \"\"\" Returns: Keccak256 hash of the string literal. \"\"\" return self . __keccak256_hash","title":"keccak256_hash()"},{"location":"api-reference/ir/types/#woke.ast.types.String","text":"Bases: TypeAbc String type. Source code in woke/ast/types.py 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 class String ( TypeAbc ): \"\"\" String type. \"\"\" __data_location : DataLocation __is_pointer : bool __is_slice : bool def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_string\" ) if type_identifier . startswith ( \"_storage\" ): self . __data_location = DataLocation . STORAGE type_identifier . read ( \"_storage\" ) elif type_identifier . startswith ( \"_memory\" ): self . __data_location = DataLocation . MEMORY type_identifier . read ( \"_memory\" ) elif type_identifier . startswith ( \"_calldata\" ): self . __data_location = DataLocation . CALLDATA type_identifier . read ( \"_calldata\" ) else : assert False , f \"Unexpected string type data location { type_identifier } \" if type_identifier . startswith ( \"_ptr\" ): self . __is_pointer = True type_identifier . read ( \"_ptr\" ) else : self . __is_pointer = False if type_identifier . startswith ( \"_slice\" ): self . __is_slice = True type_identifier . read ( \"_slice\" ) else : self . __is_slice = False @property def data_location ( self ) -> DataLocation : \"\"\" Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE] Returns: Data location of the string expression. \"\"\" return self . __data_location @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the string expression is a pointer to storage. \"\"\" return self . __is_pointer @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(string calldata s) public pure { s[0:5]; // s[0:5] is a string slice } ``` Returns: Whether this is a slice of a string expression. \"\"\" return self . __is_slice","title":"String"},{"location":"api-reference/ir/types/#woke.ast.types.String.data_location","text":"Can be either CALLDATA , MEMORY or STORAGE Returns: Type Description DataLocation Data location of the string expression. Source code in woke/ast/types.py 350 351 352 353 354 355 356 357 @property def data_location ( self ) -> DataLocation : \"\"\" Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE] Returns: Data location of the string expression. \"\"\" return self . __data_location","title":"data_location()"},{"location":"api-reference/ir/types/#woke.ast.types.String.is_pointer","text":"Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than STORAGE , this always returns True because assignments never change the contents of the original value. Returns: Type Description bool Whether the string expression is a pointer to storage. Source code in woke/ast/types.py 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the string expression is a pointer to storage. \"\"\" return self . __is_pointer","title":"is_pointer()"},{"location":"api-reference/ir/types/#woke.ast.types.String.is_slice","text":"Example function foo ( string calldata s ) public pure { s [ 0 : 5 ]; // s[0:5] is a string slice } Returns: Type Description bool Whether this is a slice of a string expression. Source code in woke/ast/types.py 375 376 377 378 379 380 381 382 383 384 385 386 387 @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(string calldata s) public pure { s[0:5]; // s[0:5] is a string slice } ``` Returns: Whether this is a slice of a string expression. \"\"\" return self . __is_slice","title":"is_slice()"},{"location":"api-reference/ir/types/#woke.ast.types.Bytes","text":"Bases: TypeAbc Bytes type. Source code in woke/ast/types.py 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 class Bytes ( TypeAbc ): \"\"\" Bytes type. \"\"\" __data_location : DataLocation __is_pointer : bool __is_slice : bool def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_bytes\" ) if type_identifier . startswith ( \"_storage\" ): self . __data_location = DataLocation . STORAGE type_identifier . read ( \"_storage\" ) elif type_identifier . startswith ( \"_memory\" ): self . __data_location = DataLocation . MEMORY type_identifier . read ( \"_memory\" ) elif type_identifier . startswith ( \"_calldata\" ): self . __data_location = DataLocation . CALLDATA type_identifier . read ( \"_calldata\" ) else : assert False , f \"Unexpected string type data location { type_identifier } \" if type_identifier . startswith ( \"_ptr\" ): self . __is_pointer = True type_identifier . read ( \"_ptr\" ) else : self . __is_pointer = False if type_identifier . startswith ( \"_slice\" ): self . __is_slice = True type_identifier . read ( \"_slice\" ) else : self . __is_slice = False @property def data_location ( self ) -> DataLocation : \"\"\" Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE] Returns: Data location of the bytes expression. \"\"\" return self . __data_location @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the bytes expression is a pointer to storage. \"\"\" return self . __is_pointer @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(bytes calldata b) public pure { b[0:5]; // s[0:5] is a bytes slice } ``` Returns: Whether this is a slice of a bytes expression. \"\"\" return self . __is_slice","title":"Bytes"},{"location":"api-reference/ir/types/#woke.ast.types.Bytes.data_location","text":"Can be either CALLDATA , MEMORY or STORAGE Returns: Type Description DataLocation Data location of the bytes expression. Source code in woke/ast/types.py 424 425 426 427 428 429 430 431 @property def data_location ( self ) -> DataLocation : \"\"\" Can be either [CALLDATA][woke.ast.enums.DataLocation.CALLDATA], [MEMORY][woke.ast.enums.DataLocation.MEMORY] or [STORAGE][woke.ast.enums.DataLocation.STORAGE] Returns: Data location of the bytes expression. \"\"\" return self . __data_location","title":"data_location()"},{"location":"api-reference/ir/types/#woke.ast.types.Bytes.is_pointer","text":"Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than STORAGE , this always returns True because assignments never change the contents of the original value. Returns: Type Description bool Whether the bytes expression is a pointer to storage. Source code in woke/ast/types.py 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the bytes expression is a pointer to storage. \"\"\" return self . __is_pointer","title":"is_pointer()"},{"location":"api-reference/ir/types/#woke.ast.types.Bytes.is_slice","text":"Example function foo ( bytes calldata b ) public pure { b [ 0 : 5 ]; // s[0:5] is a bytes slice } Returns: Type Description bool Whether this is a slice of a bytes expression. Source code in woke/ast/types.py 449 450 451 452 453 454 455 456 457 458 459 460 461 @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(bytes calldata b) public pure { b[0:5]; // s[0:5] is a bytes slice } ``` Returns: Whether this is a slice of a bytes expression. \"\"\" return self . __is_slice","title":"is_slice()"},{"location":"api-reference/ir/types/#woke.ast.types.FixedBytes","text":"Bases: TypeAbc Fixed-size byte array type. Source code in woke/ast/types.py 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 class FixedBytes ( TypeAbc ): \"\"\" Fixed-size byte array type. \"\"\" __bytes_count : int def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_bytes\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None number = match . group ( \"number\" ) type_identifier . read ( number ) self . __bytes_count = int ( number ) @property def bytes_count ( self ) -> int : \"\"\" Is at least 1 and at most 32. Returns: Number of bytes used to represent this fixed-size byte array. \"\"\" return self . __bytes_count","title":"FixedBytes"},{"location":"api-reference/ir/types/#woke.ast.types.FixedBytes.bytes_count","text":"Is at least 1 and at most 32. Returns: Type Description int Number of bytes used to represent this fixed-size byte array. Source code in woke/ast/types.py 478 479 480 481 482 483 484 485 @property def bytes_count ( self ) -> int : \"\"\" Is at least 1 and at most 32. Returns: Number of bytes used to represent this fixed-size byte array. \"\"\" return self . __bytes_count","title":"bytes_count()"},{"location":"api-reference/ir/types/#woke.ast.types.Function","text":"Bases: TypeAbc Function type. Warning Given the following function: function foo ( uint a , uint b ) public pure returns ( uint , uint ) { return ( a + b , a - b ); } and the following call: foo ( 1 , 2 ); the type of foo is Function , but the type of foo ( 1 , 2 ) is Tuple . Source code in woke/ast/types.pyclass Function ( TypeAbc ): \"\"\" Function type. !!! warning Given the following function: ```solidity function foo(uint a, uint b) public pure returns(uint, uint) { return (a + b, a - b); } ``` and the following call: ```solidity foo(1, 2); ``` the type of `foo` is [Function][woke.ast.types.Function], but the type of `:::solidity foo(1, 2)` is [Tuple][woke.ast.types.Tuple]. \"\"\" __kind : FunctionTypeKind __state_mutability : StateMutability __parameters : typ . Tuple [ TypeAbc , ... ] __return_parameters : typ . Tuple [ TypeAbc , ... ] __gas_set : bool __value_set : bool __salt_set : bool __bound_to : typ . Optional [ typ . Tuple [ TypeAbc , ... ]] def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_function_\" ) matched = [] for kind in FunctionTypeKind : if type_identifier . startswith ( kind ): matched . append ( kind ) assert len ( matched ) >= 1 , f \"Unexpected function kind { type_identifier } \" self . __kind = FunctionTypeKind ( max ( matched , key = len )) type_identifier . read ( self . __kind ) if type_identifier . startswith ( \"_payable\" ): self . __state_mutability = StateMutability . PAYABLE type_identifier . read ( \"_payable\" ) elif type_identifier . startswith ( \"_pure\" ): self . __state_mutability = StateMutability . PURE type_identifier . read ( \"_pure\" ) elif type_identifier . startswith ( \"_nonpayable\" ): self . __state_mutability = StateMutability . NONPAYABLE type_identifier . read ( \"_nonpayable\" ) elif type_identifier . startswith ( \"_view\" ): self . __state_mutability = StateMutability . VIEW type_identifier . read ( \"_view\" ) else : assert False , f \"Unexpected function state mutability { type_identifier } \" parameters = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert not any ( param is None for param in parameters ) self . __parameters = parameters # type: ignore type_identifier . read ( \"returns\" ) return_parameters = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert not any ( param is None for param in return_parameters ) self . __return_parameters = return_parameters # type: ignore if type_identifier . startswith ( \"gas\" ): self . __gas_set = True type_identifier . read ( \"gas\" ) else : self . __gas_set = False if type_identifier . startswith ( \"value\" ): self . __value_set = True type_identifier . read ( \"value\" ) else : self . __value_set = False if type_identifier . startswith ( \"salt\" ): self . __salt_set = True type_identifier . read ( \"salt\" ) else : self . __salt_set = False if type_identifier . startswith ( \"bound_to\" ): type_identifier . read ( \"bound_to\" ) bound_to = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert not any ( param is None for param in bound_to ) self . __bound_to = bound_to # type: ignore else : self . __bound_to = None @property def kind ( self ) -> FunctionTypeKind : \"\"\" Returns: Kind of the function type. \"\"\" return self . __kind @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function type. \"\"\" return self . __state_mutability @property def parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the parameters of the function type. \"\"\" return self . __parameters @property def return_parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the return parameters of the function type. \"\"\" return self . __return_parameters @property def gas_set ( self ) -> bool : \"\"\" !!! example In the case of the old syntax (deprecated), the `gas` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `gas_set` set to `True`. ```solidity foo.gas(10)(1, 2); ``` In the case of the new syntax, the `{gas: 10}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `gas_set` set to `True`. ```solidity foo{gas: 10}(1, 2); ``` Returns: `True` if the gas is set in the function type. \"\"\" return self . __gas_set @property def value_set ( self ) -> bool : \"\"\" !!! example In the case of the old syntax (deprecated), the `value` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `value_set` set to `True`. ```solidity foo.value(1)(1, 2); ``` In the case of the new syntax, the `{value: 1}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `value_set` set to `True`. ```solidity foo{value: 1}(1, 2); ``` Returns: `True` if the value is set in the function type. \"\"\" return self . __value_set @property def salt_set ( self ) -> bool : \"\"\" !!! example In the following example, the `{salt: salt}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `salt_set` set to `True`. ```solidity new Foo{salt: salt}(); ``` Returns: `True` if the salt is set in the function type. \"\"\" return self . __salt_set @property def bound_to ( self ) -> typ . Optional [ typ . Tuple [ TypeAbc , ... ]]: \"\"\" A function type can be bound to a type using the [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective] or internally in the case of a Solidity global symbol. !!! example In the following example, the `add` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is bound to the [UInt][woke.ast.types.UInt] type. ```solidity linenums=\"1\" function add(uint a, uint b) pure returns (uint) { return a + b; } using {add} for uint; contract Foo { function bar(uint x) public pure returns(uint) { return x.add(1); } } ``` In this example, the `push` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is bound to the [Array][woke.ast.types.Array] type. ```solidity arr.push(1); ``` Returns: Type to which the function is bound to. \"\"\" return self . __bound_to","title":"Function"},{"location":"api-reference/ir/types/#woke.ast.types.Function.kind","text":"Returns: Type Description FunctionTypeKind Kind of the function type. Source code in woke/ast/types.py 581 582 583 584 585 586 587 @property def kind ( self ) -> FunctionTypeKind : \"\"\" Returns: Kind of the function type. \"\"\" return self . __kind","title":"kind()"},{"location":"api-reference/ir/types/#woke.ast.types.Function.state_mutability","text":"Returns: Type Description StateMutability State mutability of the function type. Source code in woke/ast/types.py 589 590 591 592 593 594 595 @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function type. \"\"\" return self . __state_mutability","title":"state_mutability()"},{"location":"api-reference/ir/types/#woke.ast.types.Function.parameters","text":"Returns: Type Description typ . Tuple [ TypeAbc , ...] Expression types of the parameters of the function type. Source code in woke/ast/types.py 597 598 599 600 601 602 603 @property def parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the parameters of the function type. \"\"\" return self . __parameters","title":"parameters()"},{"location":"api-reference/ir/types/#woke.ast.types.Function.return_parameters","text":"Returns: Type Description typ . Tuple [ TypeAbc , ...] Expression types of the return parameters of the function type. Source code in woke/ast/types.py 605 606 607 608 609 610 611 @property def return_parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the return parameters of the function type. \"\"\" return self . __return_parameters","title":"return_parameters()"},{"location":"api-reference/ir/types/#woke.ast.types.Function.gas_set","text":"Example In the case of the old syntax (deprecated), the gas MemberAccess expression is of the Function type which returns a Function with gas_set set to True . foo . gas ( 10 )( 1 , 2 ); In the case of the new syntax, the {gas: 10} FunctionCallOptions expression is of the Function type with gas_set set to True . foo { gas : 10 }( 1 , 2 ); Returns: Type Description bool True if the gas is set in the function type. Source code in woke/ast/types.py 613 614 615 616 617 618 619 620 621 622 623 624 625 626 627 628 629 @property def gas_set ( self ) -> bool : \"\"\" !!! example In the case of the old syntax (deprecated), the `gas` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `gas_set` set to `True`. ```solidity foo.gas(10)(1, 2); ``` In the case of the new syntax, the `{gas: 10}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `gas_set` set to `True`. ```solidity foo{gas: 10}(1, 2); ``` Returns: `True` if the gas is set in the function type. \"\"\" return self . __gas_set","title":"gas_set()"},{"location":"api-reference/ir/types/#woke.ast.types.Function.value_set","text":"Example In the case of the old syntax (deprecated), the value MemberAccess expression is of the Function type which returns a Function with value_set set to True . foo . value ( 1 )( 1 , 2 ); In the case of the new syntax, the {value: 1} FunctionCallOptions expression is of the Function type with value_set set to True . foo { value : 1 }( 1 , 2 ); Returns: Type Description bool True if the value is set in the function type. Source code in woke/ast/types.py 631 632 633 634 635 636 637 638 639 640 641 642 643 644 645 646 647 @property def value_set ( self ) -> bool : \"\"\" !!! example In the case of the old syntax (deprecated), the `value` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression is of the [Function][woke.ast.types.Function] type which returns a [Function][woke.ast.types.Function] with `value_set` set to `True`. ```solidity foo.value(1)(1, 2); ``` In the case of the new syntax, the `{value: 1}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `value_set` set to `True`. ```solidity foo{value: 1}(1, 2); ``` Returns: `True` if the value is set in the function type. \"\"\" return self . __value_set","title":"value_set()"},{"location":"api-reference/ir/types/#woke.ast.types.Function.salt_set","text":"Example In the following example, the {salt: salt} FunctionCallOptions expression is of the Function type with salt_set set to True . new Foo { salt : salt }(); Returns: Type Description bool True if the salt is set in the function type. Source code in woke/ast/types.py 649 650 651 652 653 654 655 656 657 658 659 660 @property def salt_set ( self ) -> bool : \"\"\" !!! example In the following example, the `{salt: salt}` [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions] expression is of the [Function][woke.ast.types.Function] type with `salt_set` set to `True`. ```solidity new Foo{salt: salt}(); ``` Returns: `True` if the salt is set in the function type. \"\"\" return self . __salt_set","title":"salt_set()"},{"location":"api-reference/ir/types/#woke.ast.types.Function.bound_to","text":"A function type can be bound to a type using the UsingForDirective or internally in the case of a Solidity global symbol. Example In the following example, the add MemberAccess expression on line 9 is of the Function type and is bound to the UInt type. 1 2 3 4 5 6 7 8 9 10 11 function add ( uint a , uint b ) pure returns ( uint ) { return a + b ; } using { add } for uint ; contract Foo { function bar ( uint x ) public pure returns ( uint ) { return x . add ( 1 ); } } In this example, the push MemberAccess expression on line 9 is of the Function type and is bound to the Array type. arr . push ( 1 ); Returns: Type Description typ . Optional [ typ . Tuple [ TypeAbc , ...]] Type to which the function is bound to. Source code in woke/ast/types.py 662 663 664 665 666 667 668 669 670 671 672 673 674 675 676 677 678 679 680 681 682 683 684 685 686 687 688 689 690 @property def bound_to ( self ) -> typ . Optional [ typ . Tuple [ TypeAbc , ... ]]: \"\"\" A function type can be bound to a type using the [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective] or internally in the case of a Solidity global symbol. !!! example In the following example, the `add` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is bound to the [UInt][woke.ast.types.UInt] type. ```solidity linenums=\"1\" function add(uint a, uint b) pure returns (uint) { return a + b; } using {add} for uint; contract Foo { function bar(uint x) public pure returns(uint) { return x.add(1); } } ``` In this example, the `push` [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess] expression on line 9 is of the [Function][woke.ast.types.Function] type and is bound to the [Array][woke.ast.types.Array] type. ```solidity arr.push(1); ``` Returns: Type to which the function is bound to. \"\"\" return self . __bound_to","title":"bound_to()"},{"location":"api-reference/ir/types/#woke.ast.types.Tuple","text":"Bases: TypeAbc Tuple type. Source code in woke/ast/types.py 693 694 695 696 697 698 699 700 701 702 703 704 705 706 707 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 class Tuple ( TypeAbc ): \"\"\" Tuple type. \"\"\" __components : typ . Tuple [ typ . Optional [ TypeAbc ], ... ] def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_tuple\" ) self . __components = _parse_list ( type_identifier , reference_resolver , cu_hash ) @property def components ( self ) -> typ . Tuple [ typ . Optional [ TypeAbc ], ... ]: \"\"\" A component type can be `None` in the case of a tuple with a missing component. !!! example In the following example, the `(success, )` expression is of the [Tuple][woke.ast.types.Tuple] type with the components of the type [Bool][woke.ast.types.Bool] and `None`. ```solidity bool success; (success, ) = address(addr).call{value: 1}(\"\"); ``` Returns: Expression types of the components of the tuple type. \"\"\" return self . __components","title":"Tuple"},{"location":"api-reference/ir/types/#woke.ast.types.Tuple.components","text":"A component type can be None in the case of a tuple with a missing component. Example In the following example, the (success, ) expression is of the Tuple type with the components of the type Bool and None . bool success ; ( success , ) = address ( addr ). call { value : 1 }( \"\" ); Returns: Type Description typ . Tuple [ typ . Optional [ TypeAbc ], ...] Expression types of the components of the tuple type. Source code in woke/ast/types.py 708 709 710 711 712 713 714 715 716 717 718 719 720 721 722 @property def components ( self ) -> typ . Tuple [ typ . Optional [ TypeAbc ], ... ]: \"\"\" A component type can be `None` in the case of a tuple with a missing component. !!! example In the following example, the `(success, )` expression is of the [Tuple][woke.ast.types.Tuple] type with the components of the type [Bool][woke.ast.types.Bool] and `None`. ```solidity bool success; (success, ) = address(addr).call{value: 1}(\"\"); ``` Returns: Expression types of the components of the tuple type. \"\"\" return self . __components","title":"components()"},{"location":"api-reference/ir/types/#woke.ast.types.Type","text":"Bases: TypeAbc Type type. As opposed to other types, this type describes the type of a type, not the type of an instance of a type. Source code in woke/ast/types.py 725 726 727 728 729 730 731 732 733 734 735 736 737 738 739 740 741 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 class Type ( TypeAbc ): \"\"\" Type type. As opposed to other types, this type describes the type of a type, not the type of an instance of a type. \"\"\" __actual_type : TypeAbc def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_type\" ) actual_type = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert len ( actual_type ) == 1 and actual_type [ 0 ] is not None self . __actual_type = actual_type [ 0 ] @property def actual_type ( self ) -> TypeAbc : \"\"\" !!! example `payable` in the following example is of the [Type][woke.ast.types.Type] type with the [Address][woke.ast.types.Address] actual type. ```solidity payable(addr); ``` `super` in the following example is of the [Type][woke.ast.types.Type] type with the [Contract][woke.ast.types.Contract] actual type. ```solidity super.foo(); ``` `string` in the following example is of the [Type][woke.ast.types.Type] type with the [String][woke.ast.types.String] actual type. ```solidity string.concat(\"foo\", \"bar\"); ``` `Foo` in the following example on line 4 is of the [Type][woke.ast.types.Type] type with the [Enum][woke.ast.types.Enum] actual type. ```solidity linenums=\"1\" enum Foo { A, B } function bar() pure returns (Foo) { return Foo.A; } ``` Returns: Actual type of the type type. \"\"\" return self . __actual_type","title":"Type"},{"location":"api-reference/ir/types/#woke.ast.types.Type.actual_type","text":"Example payable in the following example is of the Type type with the Address actual type. payable ( addr ); super in the following example is of the Type type with the Contract actual type. super . foo (); string in the following example is of the Type type with the String actual type. string . concat ( \"foo\" , \"bar\" ); Foo in the following example on line 4 is of the Type type with the Enum actual type. 1 2 3 4 5 enum Foo { A , B } function bar () pure returns ( Foo ) { return Foo . A ; } Returns: Type Description TypeAbc Actual type of the type type. Source code in woke/ast/types.py 742 743 744 745 746 747 748 749 750 751 752 753 754 755 756 757 758 759 760 761 762 763 764 765 766 767 768 769 770 771 772 773 @property def actual_type ( self ) -> TypeAbc : \"\"\" !!! example `payable` in the following example is of the [Type][woke.ast.types.Type] type with the [Address][woke.ast.types.Address] actual type. ```solidity payable(addr); ``` `super` in the following example is of the [Type][woke.ast.types.Type] type with the [Contract][woke.ast.types.Contract] actual type. ```solidity super.foo(); ``` `string` in the following example is of the [Type][woke.ast.types.Type] type with the [String][woke.ast.types.String] actual type. ```solidity string.concat(\"foo\", \"bar\"); ``` `Foo` in the following example on line 4 is of the [Type][woke.ast.types.Type] type with the [Enum][woke.ast.types.Enum] actual type. ```solidity linenums=\"1\" enum Foo { A, B } function bar() pure returns (Foo) { return Foo.A; } ``` Returns: Actual type of the type type. \"\"\" return self . __actual_type","title":"actual_type()"},{"location":"api-reference/ir/types/#woke.ast.types.Rational","text":"Bases: TypeAbc Rational type. Represents the type of constants or expressions with constants. Example 1 , 0x1234 , 1 e18 , 1 * 2 / 3 are all of the Rational type. Source code in woke/ast/types.py 776 777 778 779 780 781 782 783 784 785 786 787 788 789 790 791 792 793 794 795 796 797 798 799 800 801 802 803 804 805 806 807 808 809 810 811 812 813 814 815 816 817 818 819 820 821 822 823 824 class Rational ( TypeAbc ): \"\"\" Rational type. Represents the type of constants or expressions with constants. !!! example `:::solidity 1`, `:::solidity 0x1234`, `:::solidity 1e18`, `:::solidity 1 * 2 / 3` are all of the [Rational][woke.ast.types.Rational] type. \"\"\" __numerator : int __denominator : int def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_rational_\" ) if type_identifier . startswith ( \"minus_\" ): type_identifier . read ( \"minus_\" ) self . __numerator = - 1 else : self . __numerator = 1 match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid rational\" number = match . group ( \"number\" ) type_identifier . read ( number ) self . __numerator *= int ( number ) type_identifier . read ( \"_by_\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid rational\" number = match . group ( \"number\" ) type_identifier . read ( number ) self . __denominator = int ( number ) @property def numerator ( self ) -> int : \"\"\" If the rational is negative, the numerator will be negative. Returns: Numerator of the rational number. \"\"\" return self . __numerator @property def denominator ( self ) -> int : \"\"\" Returns: Denominator of the rational number. \"\"\" return self . __denominator","title":"Rational"},{"location":"api-reference/ir/types/#woke.ast.types.Rational.numerator","text":"If the rational is negative, the numerator will be negative. Returns: Type Description int Numerator of the rational number. Source code in woke/ast/types.py 809 810 811 812 813 814 815 816 @property def numerator ( self ) -> int : \"\"\" If the rational is negative, the numerator will be negative. Returns: Numerator of the rational number. \"\"\" return self . __numerator","title":"numerator()"},{"location":"api-reference/ir/types/#woke.ast.types.Rational.denominator","text":"Returns: Type Description int Denominator of the rational number. Source code in woke/ast/types.py 818 819 820 821 822 823 824 @property def denominator ( self ) -> int : \"\"\" Returns: Denominator of the rational number. \"\"\" return self . __denominator","title":"denominator()"},{"location":"api-reference/ir/types/#woke.ast.types.Modifier","text":"Bases: TypeAbc Modifier type. Source code in woke/ast/types.py 827 828 829 830 831 832 833 834 835 836 837 838 839 840 841 842 843 844 845 846 847 848 849 850 class Modifier ( TypeAbc ): \"\"\" Modifier type. \"\"\" __parameters : typ . Tuple [ TypeAbc , ... ] def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_modifier\" ) parameters = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert not any ( param is None for param in parameters ) self . __parameters = parameters # type: ignore @property def parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the parameters of the modifier. \"\"\" return self . __parameters","title":"Modifier"},{"location":"api-reference/ir/types/#woke.ast.types.Modifier.parameters","text":"Returns: Type Description typ . Tuple [ TypeAbc , ...] Expression types of the parameters of the modifier. Source code in woke/ast/types.py 844 845 846 847 848 849 850 @property def parameters ( self ) -> typ . Tuple [ TypeAbc , ... ]: \"\"\" Returns: Expression types of the parameters of the modifier. \"\"\" return self . __parameters","title":"parameters()"},{"location":"api-reference/ir/types/#woke.ast.types.Array","text":"Bases: TypeAbc Array type. Source code in woke/ast/types.py 853 854 855 856 857 858 859 860 861 862 863 864 865 866 867 868 869 870 871 872 873 874 875 876 877 878 879 880 881 882 883 884 885 886 887 888 889 890 891 892 893 894 895 896 897 898 899 900 901 902 903 904 905 906 907 908 909 910 911 912 913 914 915 916 917 918 919 920 921 922 923 924 925 926 927 928 929 930 931 932 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 948 949 950 951 952 953 954 955 956 957 958 959 960 961 class Array ( TypeAbc ): \"\"\" Array type. \"\"\" __base_type : TypeAbc __length : typ . Optional [ int ] __data_location : DataLocation __is_pointer : bool __is_slice : bool def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_array\" ) base_type = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert ( len ( base_type ) == 1 and base_type [ 0 ] is not None ), f \"Unexpected array base type { type_identifier } \" self . __base_type = base_type [ 0 ] if type_identifier . startswith ( \"dyn\" ): self . __length = None type_identifier . read ( \"dyn\" ) else : match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid array length\" self . __length = int ( match . group ( \"number\" )) type_identifier . read ( match . group ( \"number\" )) if type_identifier . startswith ( \"_storage\" ): self . __data_location = DataLocation . STORAGE type_identifier . read ( \"_storage\" ) elif type_identifier . startswith ( \"_memory\" ): self . __data_location = DataLocation . MEMORY type_identifier . read ( \"_memory\" ) elif type_identifier . startswith ( \"_calldata\" ): self . __data_location = DataLocation . CALLDATA type_identifier . read ( \"_calldata\" ) else : assert False , f \"Unexpected array type data location { type_identifier } \" if type_identifier . startswith ( \"_ptr\" ): self . __is_pointer = True type_identifier . read ( \"_ptr\" ) else : self . __is_pointer = False if type_identifier . startswith ( \"_slice\" ): self . __is_slice = True type_identifier . read ( \"_slice\" ) else : self . __is_slice = False @property def base_type ( self ) -> TypeAbc : \"\"\" Returns: Base type of the array. \"\"\" return self . __base_type @property def length ( self ) -> typ . Optional [ int ]: \"\"\" Returns: Length of the array. `None` if the array is dynamic (not fixed size). \"\"\" return self . __length @property def data_location ( self ) -> DataLocation : \"\"\" Returns: Data location of the array. \"\"\" return self . __data_location @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the array expression is a pointer to storage. \"\"\" return self . __is_pointer @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(uint[] calldata arr) public pure { arr[0:5]; // arr[0:5] is an array slice } ``` Returns: Whether this is a slice of an array expression. \"\"\" return self . __is_slice","title":"Array"},{"location":"api-reference/ir/types/#woke.ast.types.Array.base_type","text":"Returns: Type Description TypeAbc Base type of the array. Source code in woke/ast/types.py 909 910 911 912 913 914 915 @property def base_type ( self ) -> TypeAbc : \"\"\" Returns: Base type of the array. \"\"\" return self . __base_type","title":"base_type()"},{"location":"api-reference/ir/types/#woke.ast.types.Array.length","text":"Returns: Type Description typ . Optional [ int ] Length of the array. None if the array is dynamic (not fixed size). Source code in woke/ast/types.py 917 918 919 920 921 922 923 @property def length ( self ) -> typ . Optional [ int ]: \"\"\" Returns: Length of the array. `None` if the array is dynamic (not fixed size). \"\"\" return self . __length","title":"length()"},{"location":"api-reference/ir/types/#woke.ast.types.Array.data_location","text":"Returns: Type Description DataLocation Data location of the array. Source code in woke/ast/types.py 925 926 927 928 929 930 931 @property def data_location ( self ) -> DataLocation : \"\"\" Returns: Data location of the array. \"\"\" return self . __data_location","title":"data_location()"},{"location":"api-reference/ir/types/#woke.ast.types.Array.is_pointer","text":"Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than STORAGE , this always returns True because assignments never change the contents of the original value. Returns: Type Description bool Whether the array expression is a pointer to storage. Source code in woke/ast/types.py 933 934 935 936 937 938 939 940 941 942 943 944 945 946 947 @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the array expression is a pointer to storage. \"\"\" return self . __is_pointer","title":"is_pointer()"},{"location":"api-reference/ir/types/#woke.ast.types.Array.is_slice","text":"Example function foo ( uint [] calldata arr ) public pure { arr [ 0 : 5 ]; // arr[0:5] is an array slice } Returns: Type Description bool Whether this is a slice of an array expression. Source code in woke/ast/types.py 949 950 951 952 953 954 955 956 957 958 959 960 961 @property def is_slice ( self ) -> bool : \"\"\" !!! example ```solidity function foo(uint[] calldata arr) public pure { arr[0:5]; // arr[0:5] is an array slice } ``` Returns: Whether this is a slice of an array expression. \"\"\" return self . __is_slice","title":"is_slice()"},{"location":"api-reference/ir/types/#woke.ast.types.Mapping","text":"Bases: TypeAbc Mapping type. Source code in woke/ast/types.py 964 965 966 967 968 969 970 971 972 973 974 975 976 977 978 979 980 981 982 983 984 985 986 987 988 989 990 991 992 993 994 995 996 997 998 999 class Mapping ( TypeAbc ): \"\"\" Mapping type. \"\"\" __key_type : TypeAbc __value_type : TypeAbc def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_mapping\" ) key_value = _parse_list ( type_identifier , reference_resolver , cu_hash ) assert len ( key_value ) == 2 , f \" { type_identifier } is not a valid mapping\" assert key_value [ 0 ] is not None , f \" { type_identifier } is not a valid mapping\" assert key_value [ 1 ] is not None , f \" { type_identifier } is not a valid mapping\" self . __key_type = key_value [ 0 ] self . __value_type = key_value [ 1 ] @property def key_type ( self ) -> TypeAbc : \"\"\" Returns: Key type of the mapping. \"\"\" return self . __key_type @property def value_type ( self ) -> TypeAbc : \"\"\" Returns: Value type of the mapping. \"\"\" return self . __value_type","title":"Mapping"},{"location":"api-reference/ir/types/#woke.ast.types.Mapping.key_type","text":"Returns: Type Description TypeAbc Key type of the mapping. Source code in woke/ast/types.py 985 986 987 988 989 990 991 @property def key_type ( self ) -> TypeAbc : \"\"\" Returns: Key type of the mapping. \"\"\" return self . __key_type","title":"key_type()"},{"location":"api-reference/ir/types/#woke.ast.types.Mapping.value_type","text":"Returns: Type Description TypeAbc Value type of the mapping. Source code in woke/ast/types.py 993 994 995 996 997 998 999 @property def value_type ( self ) -> TypeAbc : \"\"\" Returns: Value type of the mapping. \"\"\" return self . __value_type","title":"value_type()"},{"location":"api-reference/ir/types/#woke.ast.types.Contract","text":"Bases: TypeAbc Source code in woke/ast/types.py 1002 1003 1004 1005 1006 1007 1008 1009 1010 1011 1012 1013 1014 1015 1016 1017 1018 1019 1020 1021 1022 1023 1024 1025 1026 1027 1028 1029 1030 1031 1032 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 1057 1058 1059 1060 1061 1062 1063 1064 1065 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 class Contract ( TypeAbc ): __is_super : bool __name : str __ast_id : AstNodeId __reference_resolver : ReferenceResolver __cu_hash : bytes def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): if type_identifier . startswith ( \"t_contract\" ): self . __is_super = False type_identifier . read ( \"t_contract\" ) elif type_identifier . startswith ( \"t_super\" ): self . __is_super = True type_identifier . read ( \"t_super\" ) else : assert False , f \"Unexpected contract type { type_identifier } \" self . __name = _parse_user_identifier ( type_identifier ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid contract\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) self . __reference_resolver = reference_resolver self . __cu_hash = cu_hash @property def is_super ( self ) -> bool : \"\"\" !!! warning Until 0.7.6, the `super` keyword ([Identifier][woke.ast.ir.expression.identifier.Identifier]) was of the [Contract][woke.ast.types.Contract] type with `is_super` set to `True`. Since 0.8.0, the `super` keyword is of the [Type][woke.ast.types.Type] type with [Contract][woke.ast.types.Contract] as the `actual_type` and `is_super` set to `True`. !!! warning When this is `True`, the `name` and `ir_node` properties refer to the current contract, not the base contract. !!! example The `name` and `ir_node` properties of the [Contract][woke.ast.types.Contract] type of the `super` expression in the following example refer to the `Foo` contract, not the `Bar` contract. ```solidity contract Foo is Bar { function foo() public { super.foo(); } } ``` Returns: `True` if the expression is the `super` keyword. \"\"\" return self . __is_super @property def name ( self ) -> str : \"\"\" Returns: Name of the contract. \"\"\" return self . __name @property def ir_node ( self ) -> ContractDefinition : \"\"\" Returns: Contract definition IR node. \"\"\" from woke.ast.ir.declaration.contract_definition import ContractDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , ContractDefinition ) return node","title":"Contract"},{"location":"api-reference/ir/types/#woke.ast.types.Contract.is_super","text":"Warning Until 0.7.6, the super keyword ( Identifier ) was of the Contract type with is_super set to True . Since 0.8.0, the super keyword is of the Type type with Contract as the actual_type and is_super set to True . Warning When this is True , the name and ir_node properties refer to the current contract, not the base contract. Example The name and ir_node properties of the Contract type of the super expression in the following example refer to the Foo contract, not the Bar contract. contract Foo is Bar { function foo () public { super . foo (); } } Returns: Type Description bool True if the expression is the super keyword. Source code in woke/ast/types.py 1033 1034 1035 1036 1037 1038 1039 1040 1041 1042 1043 1044 1045 1046 1047 1048 1049 1050 1051 1052 1053 1054 1055 1056 @property def is_super ( self ) -> bool : \"\"\" !!! warning Until 0.7.6, the `super` keyword ([Identifier][woke.ast.ir.expression.identifier.Identifier]) was of the [Contract][woke.ast.types.Contract] type with `is_super` set to `True`. Since 0.8.0, the `super` keyword is of the [Type][woke.ast.types.Type] type with [Contract][woke.ast.types.Contract] as the `actual_type` and `is_super` set to `True`. !!! warning When this is `True`, the `name` and `ir_node` properties refer to the current contract, not the base contract. !!! example The `name` and `ir_node` properties of the [Contract][woke.ast.types.Contract] type of the `super` expression in the following example refer to the `Foo` contract, not the `Bar` contract. ```solidity contract Foo is Bar { function foo() public { super.foo(); } } ``` Returns: `True` if the expression is the `super` keyword. \"\"\" return self . __is_super","title":"is_super()"},{"location":"api-reference/ir/types/#woke.ast.types.Contract.name","text":"Returns: Type Description str Name of the contract. Source code in woke/ast/types.py 1058 1059 1060 1061 1062 1063 1064 @property def name ( self ) -> str : \"\"\" Returns: Name of the contract. \"\"\" return self . __name","title":"name()"},{"location":"api-reference/ir/types/#woke.ast.types.Contract.ir_node","text":"Returns: Type Description ContractDefinition Contract definition IR node. Source code in woke/ast/types.py 1066 1067 1068 1069 1070 1071 1072 1073 1074 1075 1076 @property def ir_node ( self ) -> ContractDefinition : \"\"\" Returns: Contract definition IR node. \"\"\" from woke.ast.ir.declaration.contract_definition import ContractDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , ContractDefinition ) return node","title":"ir_node()"},{"location":"api-reference/ir/types/#woke.ast.types.Struct","text":"Bases: TypeAbc Struct type. Source code in woke/ast/types.py 1079 1080 1081 1082 1083 1084 1085 1086 1087 1088 1089 1090 1091 1092 1093 1094 1095 1096 1097 1098 1099 1100 1101 1102 1103 1104 1105 1106 1107 1108 1109 1110 1111 1112 1113 1114 1115 1116 1117 1118 1119 1120 1121 1122 1123 1124 1125 1126 1127 1128 1129 1130 1131 1132 1133 1134 1135 1136 1137 1138 1139 1140 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 1156 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 class Struct ( TypeAbc ): \"\"\" Struct type. \"\"\" __name : str __ast_id : AstNodeId __data_location : DataLocation __is_pointer : bool __reference_resolver : ReferenceResolver __cu_hash : bytes def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_struct\" ) self . __name = _parse_user_identifier ( type_identifier ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid struct\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) if type_identifier . startswith ( \"_storage\" ): self . __data_location = DataLocation . STORAGE type_identifier . read ( \"_storage\" ) elif type_identifier . startswith ( \"_memory\" ): self . __data_location = DataLocation . MEMORY type_identifier . read ( \"_memory\" ) elif type_identifier . startswith ( \"_calldata\" ): self . __data_location = DataLocation . CALLDATA type_identifier . read ( \"_calldata\" ) else : assert False , f \"Unexpected array type data location { type_identifier } \" if type_identifier . startswith ( \"_ptr\" ): self . __is_pointer = True type_identifier . read ( \"_ptr\" ) else : self . __is_pointer = False self . __reference_resolver = reference_resolver self . __cu_hash = cu_hash @property def name ( self ) -> str : \"\"\" Returns: Name of the struct. \"\"\" return self . __name @property def data_location ( self ) -> DataLocation : \"\"\" Returns: Data location of the struct. \"\"\" return self . __data_location @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the struct expression is a pointer to storage. \"\"\" return self . __is_pointer @property def ir_node ( self ) -> StructDefinition : \"\"\" Returns: Struct definition IR node. \"\"\" from woke.ast.ir.declaration.struct_definition import StructDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , StructDefinition ) return node","title":"Struct"},{"location":"api-reference/ir/types/#woke.ast.types.Struct.name","text":"Returns: Type Description str Name of the struct. Source code in woke/ast/types.py 1125 1126 1127 1128 1129 1130 1131 @property def name ( self ) -> str : \"\"\" Returns: Name of the struct. \"\"\" return self . __name","title":"name()"},{"location":"api-reference/ir/types/#woke.ast.types.Struct.data_location","text":"Returns: Type Description DataLocation Data location of the struct. Source code in woke/ast/types.py 1133 1134 1135 1136 1137 1138 1139 @property def data_location ( self ) -> DataLocation : \"\"\" Returns: Data location of the struct. \"\"\" return self . __data_location","title":"data_location()"},{"location":"api-reference/ir/types/#woke.ast.types.Struct.is_pointer","text":"Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than STORAGE , this always returns True because assignments never change the contents of the original value. Returns: Type Description bool Whether the struct expression is a pointer to storage. Source code in woke/ast/types.py 1141 1142 1143 1144 1145 1146 1147 1148 1149 1150 1151 1152 1153 1154 1155 @property def is_pointer ( self ) -> bool : \"\"\" Storage references can be pointers or bound references. In general, local variables are of pointer type, state variables are bound references. Assignments to pointers or deleting them will not modify storage (that will only change the pointer). Assignment from non-storage objects to a variable of storage pointer type is not possible. For anything other than [STORAGE][woke.ast.enums.DataLocation.STORAGE], this always returns `True` because assignments never change the contents of the original value. Returns: Whether the struct expression is a pointer to storage. \"\"\" return self . __is_pointer","title":"is_pointer()"},{"location":"api-reference/ir/types/#woke.ast.types.Struct.ir_node","text":"Returns: Type Description StructDefinition Struct definition IR node. Source code in woke/ast/types.py 1157 1158 1159 1160 1161 1162 1163 1164 1165 1166 1167 @property def ir_node ( self ) -> StructDefinition : \"\"\" Returns: Struct definition IR node. \"\"\" from woke.ast.ir.declaration.struct_definition import StructDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , StructDefinition ) return node","title":"ir_node()"},{"location":"api-reference/ir/types/#woke.ast.types.Enum","text":"Bases: TypeAbc Enum type. Warning Enum values are of the Enum type and enums are of the Type type with Enum as the actual_type . Source code in woke/ast/types.py 1170 1171 1172 1173 1174 1175 1176 1177 1178 1179 1180 1181 1182 1183 1184 1185 1186 1187 1188 1189 1190 1191 1192 1193 1194 1195 1196 1197 1198 1199 1200 1201 1202 1203 1204 1205 1206 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 class Enum ( TypeAbc ): \"\"\" Enum type. !!! warning Enum values are of the [Enum][woke.ast.types.Enum] type and enums are of the [Type][woke.ast.types.Type] type with [Enum][woke.ast.types.Enum] as the [actual_type][woke.ast.types.Type.actual_type]. \"\"\" __name : str __ast_id : AstNodeId __reference_resolver : ReferenceResolver __cu_hash : bytes def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_enum\" ) self . __name = _parse_user_identifier ( type_identifier ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid enum\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) self . __reference_resolver = reference_resolver self . __cu_hash = cu_hash @property def name ( self ) -> str : \"\"\" Returns: Name of the enum. \"\"\" return self . __name @property def ir_node ( self ) -> EnumDefinition : \"\"\" Returns: Enum definition IR node. \"\"\" from woke.ast.ir.declaration.enum_definition import EnumDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , EnumDefinition ) return node","title":"Enum"},{"location":"api-reference/ir/types/#woke.ast.types.Enum.name","text":"Returns: Type Description str Name of the enum. Source code in woke/ast/types.py 1199 1200 1201 1202 1203 1204 1205 @property def name ( self ) -> str : \"\"\" Returns: Name of the enum. \"\"\" return self . __name","title":"name()"},{"location":"api-reference/ir/types/#woke.ast.types.Enum.ir_node","text":"Returns: Type Description EnumDefinition Enum definition IR node. Source code in woke/ast/types.py 1207 1208 1209 1210 1211 1212 1213 1214 1215 1216 1217 @property def ir_node ( self ) -> EnumDefinition : \"\"\" Returns: Enum definition IR node. \"\"\" from woke.ast.ir.declaration.enum_definition import EnumDefinition node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , EnumDefinition ) return node","title":"ir_node()"},{"location":"api-reference/ir/types/#woke.ast.types.Magic","text":"Bases: TypeAbc Magic type represents Solidity language built-in objects. Source code in woke/ast/types.py 1220 1221 1222 1223 1224 1225 1226 1227 1228 1229 1230 1231 1232 1233 1234 1235 1236 1237 1238 1239 1240 1241 1242 1243 1244 1245 1246 1247 1248 1249 1250 1251 1252 1253 1254 1255 1256 1257 1258 1259 1260 1261 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 class Magic ( TypeAbc ): \"\"\" Magic type represents Solidity language built-in objects. \"\"\" __kind : MagicTypeKind __meta_argument_type : typ . Optional [ TypeAbc ] def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_magic_\" ) matched = False for kind in MagicTypeKind : if type_identifier . startswith ( kind ): self . __kind = MagicTypeKind ( kind ) type_identifier . read ( kind ) matched = True break assert matched , f \"Unexpected magic kind { type_identifier } \" if self . __kind == MagicTypeKind . META_TYPE : type_identifier . read ( \"_\" ) meta_argument_type = TypeAbc . from_type_identifier ( type_identifier , reference_resolver , cu_hash ) assert meta_argument_type is not None self . __meta_argument_type = meta_argument_type else : self . __meta_argument_type = None @property def kind ( self ) -> MagicTypeKind : \"\"\" Returns: Kind of the magic type. \"\"\" return self . __kind @property def meta_argument_type ( self ) -> typ . Optional [ TypeAbc ]: \"\"\" Is only set for [MagicTypeKind.META_TYPE][woke.ast.enums.MagicTypeKind.META_TYPE] kind. !!! example [Contract][woke.ast.types.Contract] in `:::solidity type(IERC20)`, [UInt][woke.ast.types.UInt] in `:::solidity type(uint)`. Returns: Type of the meta expression argument. \"\"\" return self . __meta_argument_type","title":"Magic"},{"location":"api-reference/ir/types/#woke.ast.types.Magic.kind","text":"Returns: Type Description MagicTypeKind Kind of the magic type. Source code in woke/ast/types.py 1254 1255 1256 1257 1258 1259 1260 @property def kind ( self ) -> MagicTypeKind : \"\"\" Returns: Kind of the magic type. \"\"\" return self . __kind","title":"kind()"},{"location":"api-reference/ir/types/#woke.ast.types.Magic.meta_argument_type","text":"Is only set for MagicTypeKind.META_TYPE kind. Example Contract in type ( IERC20 ) , UInt in type ( uint ) . Returns: Type Description typ . Optional [ TypeAbc ] Type of the meta expression argument. Source code in woke/ast/types.py 1262 1263 1264 1265 1266 1267 1268 1269 1270 1271 1272 @property def meta_argument_type ( self ) -> typ . Optional [ TypeAbc ]: \"\"\" Is only set for [MagicTypeKind.META_TYPE][woke.ast.enums.MagicTypeKind.META_TYPE] kind. !!! example [Contract][woke.ast.types.Contract] in `:::solidity type(IERC20)`, [UInt][woke.ast.types.UInt] in `:::solidity type(uint)`. Returns: Type of the meta expression argument. \"\"\" return self . __meta_argument_type","title":"meta_argument_type()"},{"location":"api-reference/ir/types/#woke.ast.types.UserDefinedValueType","text":"Bases: TypeAbc Source code in woke/ast/types.py 1275 1276 1277 1278 1279 1280 1281 1282 1283 1284 1285 1286 1287 1288 1289 1290 1291 1292 1293 1294 1295 1296 1297 1298 1299 1300 1301 1302 1303 1304 1305 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 class UserDefinedValueType ( TypeAbc ): __name : str __ast_id : AstNodeId __reference_resolver : ReferenceResolver __cu_hash : bytes def __init__ ( self , type_identifier : StringReader , reference_resolver : ReferenceResolver , cu_hash : bytes , ): type_identifier . read ( \"t_userDefinedValueType\" ) self . __name = _parse_user_identifier ( type_identifier ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid enum\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) self . __reference_resolver = reference_resolver self . __cu_hash = cu_hash @property def name ( self ) -> str : \"\"\" Returns: Name of the user defined value type. \"\"\" return self . __name @property def ir_node ( self ) -> UserDefinedValueTypeDefinition : \"\"\" Returns: User defined value type definition IR node. \"\"\" from woke.ast.ir.declaration.user_defined_value_type_definition import ( UserDefinedValueTypeDefinition , ) node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , UserDefinedValueTypeDefinition ) return node","title":"UserDefinedValueType"},{"location":"api-reference/ir/types/#woke.ast.types.UserDefinedValueType.name","text":"Returns: Type Description str Name of the user defined value type. Source code in woke/ast/types.py 1298 1299 1300 1301 1302 1303 1304 @property def name ( self ) -> str : \"\"\" Returns: Name of the user defined value type. \"\"\" return self . __name","title":"name()"},{"location":"api-reference/ir/types/#woke.ast.types.UserDefinedValueType.ir_node","text":"Returns: Type Description UserDefinedValueTypeDefinition User defined value type definition IR node. Source code in woke/ast/types.py 1306 1307 1308 1309 1310 1311 1312 1313 1314 1315 1316 1317 1318 @property def ir_node ( self ) -> UserDefinedValueTypeDefinition : \"\"\" Returns: User defined value type definition IR node. \"\"\" from woke.ast.ir.declaration.user_defined_value_type_definition import ( UserDefinedValueTypeDefinition , ) node = self . __reference_resolver . resolve_node ( self . __ast_id , self . __cu_hash ) assert isinstance ( node , UserDefinedValueTypeDefinition ) return node","title":"ir_node()"},{"location":"api-reference/ir/types/#woke.ast.types.Module","text":"Bases: TypeAbc Module type. Note It is probably currently not possible to create an expression of this type. Source code in woke/ast/types.py 1321 1322 1323 1324 1325 1326 1327 1328 1329 1330 1331 1332 1333 1334 1335 1336 1337 class Module ( TypeAbc ): \"\"\" Module type. !!! note It is probably currently not possible to create an expression of this type. \"\"\" __source_unit_id : int def __init__ ( self , type_identifier : StringReader ): type_identifier . read ( \"t_module_\" ) match = NUMBER_RE . match ( type_identifier . data ) assert match is not None , f \" { type_identifier } is not a valid module\" self . __ast_id = AstNodeId ( int ( match . group ( \"number\" ))) type_identifier . read ( match . group ( \"number\" )) self . __source_unit_id = int ( match . group ( \"number\" ))","title":"Module"},{"location":"api-reference/ir/declarations/contract-definition/","text":"woke.ast.ir.declaration.contract_definition module # ContractDefinition class # Bases: DeclarationAbc Definition of a contract, library or interface. byte_location also includes the contract body. Example contract C { uint x ; function f () public {} } interface I { function f () external ; } library L { function f () internal pure returns ( uint ) { return 7 ; } } Source code in woke/ast/ir/declaration/contract_definition.pyclass ContractDefinition ( DeclarationAbc ): \"\"\" Definition of a contract, library or interface. [byte_location][woke.ast.ir.abc.IrAbc.byte_location] also includes the contract body. !!! example ```solidity contract C { uint x; function f() public {} } ``` ```solidity interface I { function f() external; } ``` ```solidity library L { function f() internal pure returns (uint) { return 7; } } ``` \"\"\" _ast_node : SolcContractDefinition _parent : SourceUnit _abstract : bool _base_contracts : List [ InheritanceSpecifier ] # ___dependencies _kind : ContractKind _fully_implemented : Optional [ bool ] _linearized_base_contracts : List [ AstNodeId ] # __scope _documentation : Optional [ Union [ StructuredDocumentation , str ]] # __used_errors _enums : List [ EnumDefinition ] _errors : List [ ErrorDefinition ] _events : List [ EventDefinition ] _functions : List [ FunctionDefinition ] _modifiers : List [ ModifierDefinition ] _structs : List [ StructDefinition ] _user_defined_value_types : List [ UserDefinedValueTypeDefinition ] _using_for_directives : List [ UsingForDirective ] _declared_variables : List [ VariableDeclaration ] _child_contracts : Set [ ContractDefinition ] def __init__ ( self , init : IrInitTuple , contract : SolcContractDefinition , parent : SourceUnit ): super () . __init__ ( init , contract , parent ) self . _abstract = contract . abstract self . _kind = contract . contract_kind self . _fully_implemented = contract . fully_implemented self . _linearized_base_contracts = list ( contract . linearized_base_contracts ) if contract . documentation is None : self . _documentation = None elif isinstance ( contract . documentation , SolcStructuredDocumentation ): self . _documentation = StructuredDocumentation ( init , contract . documentation , self ) elif isinstance ( contract . documentation , str ): self . _documentation = contract . documentation else : raise TypeError ( f \"Unknown type of documentation: { type ( contract . documentation ) } \" ) self . _base_contracts = [] for base_contract in contract . base_contracts : self . _base_contracts . append ( InheritanceSpecifier ( init , base_contract , self )) self . _child_contracts = set () self . _enums = [] self . _errors = [] self . _events = [] self . _functions = [] self . _modifiers = [] self . _structs = [] self . _user_defined_value_types = [] self . _using_for_directives = [] self . _declared_variables = [] for node in contract . nodes : if isinstance ( node , SolcEnumDefinition ): self . _enums . append ( EnumDefinition ( init , node , self )) elif isinstance ( node , SolcErrorDefinition ): self . _errors . append ( ErrorDefinition ( init , node , self )) elif isinstance ( node , SolcEventDefinition ): self . _events . append ( EventDefinition ( init , node , self )) elif isinstance ( node , SolcFunctionDefinition ): self . _functions . append ( FunctionDefinition ( init , node , self )) elif isinstance ( node , SolcModifierDefinition ): self . _modifiers . append ( ModifierDefinition ( init , node , self )) elif isinstance ( node , SolcStructDefinition ): self . _structs . append ( StructDefinition ( init , node , self )) elif isinstance ( node , SolcUserDefinedValueTypeDefinition ): self . _user_defined_value_types . append ( UserDefinedValueTypeDefinition ( init , node , self ) ) elif isinstance ( node , SolcUsingForDirective ): self . _using_for_directives . append ( UsingForDirective ( init , node , self )) elif isinstance ( node , SolcVariableDeclaration ): self . _declared_variables . append ( VariableDeclaration ( init , node , self )) init . reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for base_contract in self . _base_contracts : yield from base_contract if isinstance ( self . _documentation , StructuredDocumentation ): yield from self . _documentation for enum in self . _enums : yield from enum for error in self . _errors : yield from error for event in self . _events : yield from event for function in self . _functions : yield from function for modifier in self . _modifiers : yield from modifier for struct in self . _structs : yield from struct for user_defined_value_type in self . _user_defined_value_types : yield from user_defined_value_type for using_for_directive in self . _using_for_directives : yield from using_for_directive for declared_variable in self . _declared_variables : yield from declared_variable def _post_process ( self , callback_params : CallbackParams ): base_contracts = [] for base_contract in self . _base_contracts : contract = base_contract . base_name . referenced_declaration assert isinstance ( contract , ContractDefinition ) contract . _child_contracts . add ( self ) base_contracts . append ( contract ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , base_contracts ) ) def _destroy ( self , base_contracts : List [ ContractDefinition ]) -> None : for base_contract in base_contracts : base_contract . _child_contracts . remove ( self ) def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" CONTRACT_RE = re . compile ( r \"^\\s*(abstract\\s)?\\s*contract\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) INTERFACE_RE = re . compile ( r \"^\\s*interface\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) LIBRARY_RE = re . compile ( r \"^\\s*library\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) if self . kind == ContractKind . CONTRACT : match = CONTRACT_RE . match ( self . _source ) elif self . kind == ContractKind . INTERFACE : match = INTERFACE_RE . match ( self . _source ) elif self . kind == ContractKind . LIBRARY : match = LIBRARY_RE . match ( self . _source ) else : raise ValueError ( f \"Unknown contract kind: { self . kind } \" ) assert match return self . byte_location [ 0 ] + match . start ( \"name\" ), self . byte_location [ 0 ] + match . end ( \"name\" ) @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return self . _name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = f \" { 'abstract ' if self . abstract else '' }{ self . kind } { self . name } \" ret += ( \" is \" + \", \" . join ( spec . source for spec in self . base_contracts ) if len ( self . base_contracts ) > 0 else \"\" ) if isinstance ( self . documentation , StructuredDocumentation ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) elif isinstance ( self . documentation , str ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . splitlines ()) + \" \\n \" + ret ) else : return ret @property def abstract ( self ) -> bool : \"\"\" Is `False` if the [kind][woke.ast.ir.declaration.contract_definition.ContractDefinition.kind] is [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] or [ContractKind.INTERFACE][woke.ast.enums.ContractKind.INTERFACE]. Returns: `True` if the contract is abstract, `False` otherwise. \"\"\" return self . _abstract @property def base_contracts ( self ) -> Tuple [ InheritanceSpecifier ]: \"\"\" Returns base contracts as specified in the source code. Does not return all base contracts (recursively). !!! example `A1` lists the interface `I` as a base contract. `A2` lists the interface `I` as a base contract. `B` lists the contracts `A1` and `A2` as base contracts. ```solidity interface I {} contract A1 is I {} contract A2 is I {} contract B is A1, A2 {} ``` Returns: Base contracts of this contract. \"\"\" return tuple ( self . _base_contracts ) @property def child_contracts ( self ) -> FrozenSet [ ContractDefinition ]: \"\"\" Returns: Contracts that list this contract in their [base_contracts][woke.ast.ir.declaration.contract_definition.ContractDefinition.base_contracts] property. \"\"\" return frozenset ( self . _child_contracts ) @property def kind ( self ) -> ContractKind : \"\"\" Returns: Contract kind. \"\"\" return self . _kind @property def fully_implemented ( self ) -> Optional [ bool ]: \"\"\" Is `None` when a file that imports this contract cannot be compiled. This may happen in the LSP server where partial project analysis is supported. Returns: `True` if all functions and modifiers of the contract are implemented, `False` otherwise. \"\"\" return self . _fully_implemented @property def linearized_base_contracts ( self ) -> Tuple [ ContractDefinition ]: \"\"\" Returns: C3 linearized list of all base contracts. \"\"\" base_contracts = [] for base_contract in self . _linearized_base_contracts : node = self . _reference_resolver . resolve_node ( base_contract , self . _cu_hash ) assert isinstance ( node , ContractDefinition ) base_contracts . append ( node ) return tuple ( base_contracts ) @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation of this contract, if any. \"\"\" return self . _documentation @property def enums ( self ) -> Tuple [ EnumDefinition ]: \"\"\" Returns: Enum definitions contained in this contract. \"\"\" return tuple ( self . _enums ) @property def errors ( self ) -> Tuple [ ErrorDefinition ]: \"\"\" Returns: Error definitions contained in this contract. \"\"\" return tuple ( self . _errors ) @property def events ( self ) -> Tuple [ EventDefinition ]: \"\"\" Returns: Event definitions contained in this contract. \"\"\" return tuple ( self . _events ) @property def functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" Returns: Function definitions contained in this contract. \"\"\" return tuple ( self . _functions ) @property def modifiers ( self ) -> Tuple [ ModifierDefinition ]: \"\"\" Returns: Modifier definitions contained in this contract. \"\"\" return tuple ( self . _modifiers ) @property def structs ( self ) -> Tuple [ StructDefinition ]: \"\"\" Returns: Struct definitions contained in this contract. \"\"\" return tuple ( self . _structs ) @property def user_defined_value_types ( self ) -> Tuple [ UserDefinedValueTypeDefinition ]: \"\"\" Returns: User defined value type definitions contained in this contract. \"\"\" return tuple ( self . _user_defined_value_types ) @property def using_for_directives ( self ) -> Tuple [ UsingForDirective ]: \"\"\" Returns: Using for directives contained in this contract. \"\"\" return tuple ( self . _using_for_directives ) @property def declared_variables ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Returns: Variable declarations contained in this contract. \"\"\" return tuple ( self . _declared_variables ) def declarations_iter ( self ) -> Iterator [ DeclarationAbc ]: \"\"\" Yields: All declarations contained in this contract. \"\"\" yield from self . enums for enum in self . enums : yield from enum . values yield from self . errors yield from self . events yield from self . functions yield from self . modifiers yield from self . structs yield from self . user_defined_value_types yield from self . declared_variables abstract () property # Is False if the kind is ContractKind.LIBRARY or ContractKind.INTERFACE . Returns: Type Description bool True if the contract is abstract, False otherwise. Source code in woke/ast/ir/declaration/contract_definition.py 268 269 270 271 272 273 274 275 276 @property def abstract ( self ) -> bool : \"\"\" Is `False` if the [kind][woke.ast.ir.declaration.contract_definition.ContractDefinition.kind] is [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] or [ContractKind.INTERFACE][woke.ast.enums.ContractKind.INTERFACE]. Returns: `True` if the contract is abstract, `False` otherwise. \"\"\" return self . _abstract base_contracts () property # Returns base contracts as specified in the source code. Does not return all base contracts (recursively). Example A1 lists the interface I as a base contract. A2 lists the interface I as a base contract. B lists the contracts A1 and A2 as base contracts. interface I {} contract A1 is I {} contract A2 is I {} contract B is A1 , A2 {} Returns: Type Description Tuple [ InheritanceSpecifier ] Base contracts of this contract. Source code in woke/ast/ir/declaration/contract_definition.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 @property def base_contracts ( self ) -> Tuple [ InheritanceSpecifier ]: \"\"\" Returns base contracts as specified in the source code. Does not return all base contracts (recursively). !!! example `A1` lists the interface `I` as a base contract. `A2` lists the interface `I` as a base contract. `B` lists the contracts `A1` and `A2` as base contracts. ```solidity interface I {} contract A1 is I {} contract A2 is I {} contract B is A1, A2 {} ``` Returns: Base contracts of this contract. \"\"\" return tuple ( self . _base_contracts ) child_contracts () property # Returns: Type Description FrozenSet [ ContractDefinition ] Contracts that list this contract in their base_contracts property. Source code in woke/ast/ir/declaration/contract_definition.py 299 300 301 302 303 304 305 @property def child_contracts ( self ) -> FrozenSet [ ContractDefinition ]: \"\"\" Returns: Contracts that list this contract in their [base_contracts][woke.ast.ir.declaration.contract_definition.ContractDefinition.base_contracts] property. \"\"\" return frozenset ( self . _child_contracts ) declarations_iter () # Yields: Type Description Iterator [ DeclarationAbc ] All declarations contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 def declarations_iter ( self ) -> Iterator [ DeclarationAbc ]: \"\"\" Yields: All declarations contained in this contract. \"\"\" yield from self . enums for enum in self . enums : yield from enum . values yield from self . errors yield from self . events yield from self . functions yield from self . modifiers yield from self . structs yield from self . user_defined_value_types yield from self . declared_variables declared_variables () property # Returns: Type Description Tuple [ VariableDeclaration ] Variable declarations contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 410 411 412 413 414 415 416 @property def declared_variables ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Returns: Variable declarations contained in this contract. \"\"\" return tuple ( self . _declared_variables ) documentation () property # Of StructuredDocumentation type since Solidity 0.6.3. Returns: Type Description Optional [ Union [ StructuredDocumentation , str ]] NatSpec documentation of this contract, if any. Source code in woke/ast/ir/declaration/contract_definition.py 337 338 339 340 341 342 343 344 @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation of this contract, if any. \"\"\" return self . _documentation enums () property # Returns: Type Description Tuple [ EnumDefinition ] Enum definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 346 347 348 349 350 351 352 @property def enums ( self ) -> Tuple [ EnumDefinition ]: \"\"\" Returns: Enum definitions contained in this contract. \"\"\" return tuple ( self . _enums ) errors () property # Returns: Type Description Tuple [ ErrorDefinition ] Error definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 354 355 356 357 358 359 360 @property def errors ( self ) -> Tuple [ ErrorDefinition ]: \"\"\" Returns: Error definitions contained in this contract. \"\"\" return tuple ( self . _errors ) events () property # Returns: Type Description Tuple [ EventDefinition ] Event definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 362 363 364 365 366 367 368 @property def events ( self ) -> Tuple [ EventDefinition ]: \"\"\" Returns: Event definitions contained in this contract. \"\"\" return tuple ( self . _events ) fully_implemented () property # Is None when a file that imports this contract cannot be compiled. This may happen in the LSP server where partial project analysis is supported. Returns: Type Description Optional [ bool ] True if all functions and modifiers of the contract are implemented, False otherwise. Source code in woke/ast/ir/declaration/contract_definition.py 315 316 317 318 319 320 321 322 @property def fully_implemented ( self ) -> Optional [ bool ]: \"\"\" Is `None` when a file that imports this contract cannot be compiled. This may happen in the LSP server where partial project analysis is supported. Returns: `True` if all functions and modifiers of the contract are implemented, `False` otherwise. \"\"\" return self . _fully_implemented functions () property # Returns: Type Description Tuple [ FunctionDefinition ] Function definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 370 371 372 373 374 375 376 @property def functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" Returns: Function definitions contained in this contract. \"\"\" return tuple ( self . _functions ) kind () property # Returns: Type Description ContractKind Contract kind. Source code in woke/ast/ir/declaration/contract_definition.py 307 308 309 310 311 312 313 @property def kind ( self ) -> ContractKind : \"\"\" Returns: Contract kind. \"\"\" return self . _kind linearized_base_contracts () property # Returns: Type Description Tuple [ ContractDefinition ] C3 linearized list of all base contracts. Source code in woke/ast/ir/declaration/contract_definition.py 324 325 326 327 328 329 330 331 332 333 334 335 @property def linearized_base_contracts ( self ) -> Tuple [ ContractDefinition ]: \"\"\" Returns: C3 linearized list of all base contracts. \"\"\" base_contracts = [] for base_contract in self . _linearized_base_contracts : node = self . _reference_resolver . resolve_node ( base_contract , self . _cu_hash ) assert isinstance ( node , ContractDefinition ) base_contracts . append ( node ) return tuple ( base_contracts ) modifiers () property # Returns: Type Description Tuple [ ModifierDefinition ] Modifier definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 378 379 380 381 382 383 384 @property def modifiers ( self ) -> Tuple [ ModifierDefinition ]: \"\"\" Returns: Modifier definitions contained in this contract. \"\"\" return tuple ( self . _modifiers ) parent () property # Returns: Type Description SourceUnit Parent IR node. Source code in woke/ast/ir/declaration/contract_definition.py 230 231 232 233 234 235 236 @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent structs () property # Returns: Type Description Tuple [ StructDefinition ] Struct definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 386 387 388 389 390 391 392 @property def structs ( self ) -> Tuple [ StructDefinition ]: \"\"\" Returns: Struct definitions contained in this contract. \"\"\" return tuple ( self . _structs ) user_defined_value_types () property # Returns: Type Description Tuple [ UserDefinedValueTypeDefinition ] User defined value type definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 394 395 396 397 398 399 400 @property def user_defined_value_types ( self ) -> Tuple [ UserDefinedValueTypeDefinition ]: \"\"\" Returns: User defined value type definitions contained in this contract. \"\"\" return tuple ( self . _user_defined_value_types ) using_for_directives () property # Returns: Type Description Tuple [ UsingForDirective ] Using for directives contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 402 403 404 405 406 407 408 @property def using_for_directives ( self ) -> Tuple [ UsingForDirective ]: \"\"\" Returns: Using for directives contained in this contract. \"\"\" return tuple ( self . _using_for_directives )","title":"Contract definition"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition","text":"","title":"contract_definition"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition","text":"Bases: DeclarationAbc Definition of a contract, library or interface. byte_location also includes the contract body. Example contract C { uint x ; function f () public {} } interface I { function f () external ; } library L { function f () internal pure returns ( uint ) { return 7 ; } } Source code in woke/ast/ir/declaration/contract_definition.pyclass ContractDefinition ( DeclarationAbc ): \"\"\" Definition of a contract, library or interface. [byte_location][woke.ast.ir.abc.IrAbc.byte_location] also includes the contract body. !!! example ```solidity contract C { uint x; function f() public {} } ``` ```solidity interface I { function f() external; } ``` ```solidity library L { function f() internal pure returns (uint) { return 7; } } ``` \"\"\" _ast_node : SolcContractDefinition _parent : SourceUnit _abstract : bool _base_contracts : List [ InheritanceSpecifier ] # ___dependencies _kind : ContractKind _fully_implemented : Optional [ bool ] _linearized_base_contracts : List [ AstNodeId ] # __scope _documentation : Optional [ Union [ StructuredDocumentation , str ]] # __used_errors _enums : List [ EnumDefinition ] _errors : List [ ErrorDefinition ] _events : List [ EventDefinition ] _functions : List [ FunctionDefinition ] _modifiers : List [ ModifierDefinition ] _structs : List [ StructDefinition ] _user_defined_value_types : List [ UserDefinedValueTypeDefinition ] _using_for_directives : List [ UsingForDirective ] _declared_variables : List [ VariableDeclaration ] _child_contracts : Set [ ContractDefinition ] def __init__ ( self , init : IrInitTuple , contract : SolcContractDefinition , parent : SourceUnit ): super () . __init__ ( init , contract , parent ) self . _abstract = contract . abstract self . _kind = contract . contract_kind self . _fully_implemented = contract . fully_implemented self . _linearized_base_contracts = list ( contract . linearized_base_contracts ) if contract . documentation is None : self . _documentation = None elif isinstance ( contract . documentation , SolcStructuredDocumentation ): self . _documentation = StructuredDocumentation ( init , contract . documentation , self ) elif isinstance ( contract . documentation , str ): self . _documentation = contract . documentation else : raise TypeError ( f \"Unknown type of documentation: { type ( contract . documentation ) } \" ) self . _base_contracts = [] for base_contract in contract . base_contracts : self . _base_contracts . append ( InheritanceSpecifier ( init , base_contract , self )) self . _child_contracts = set () self . _enums = [] self . _errors = [] self . _events = [] self . _functions = [] self . _modifiers = [] self . _structs = [] self . _user_defined_value_types = [] self . _using_for_directives = [] self . _declared_variables = [] for node in contract . nodes : if isinstance ( node , SolcEnumDefinition ): self . _enums . append ( EnumDefinition ( init , node , self )) elif isinstance ( node , SolcErrorDefinition ): self . _errors . append ( ErrorDefinition ( init , node , self )) elif isinstance ( node , SolcEventDefinition ): self . _events . append ( EventDefinition ( init , node , self )) elif isinstance ( node , SolcFunctionDefinition ): self . _functions . append ( FunctionDefinition ( init , node , self )) elif isinstance ( node , SolcModifierDefinition ): self . _modifiers . append ( ModifierDefinition ( init , node , self )) elif isinstance ( node , SolcStructDefinition ): self . _structs . append ( StructDefinition ( init , node , self )) elif isinstance ( node , SolcUserDefinedValueTypeDefinition ): self . _user_defined_value_types . append ( UserDefinedValueTypeDefinition ( init , node , self ) ) elif isinstance ( node , SolcUsingForDirective ): self . _using_for_directives . append ( UsingForDirective ( init , node , self )) elif isinstance ( node , SolcVariableDeclaration ): self . _declared_variables . append ( VariableDeclaration ( init , node , self )) init . reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for base_contract in self . _base_contracts : yield from base_contract if isinstance ( self . _documentation , StructuredDocumentation ): yield from self . _documentation for enum in self . _enums : yield from enum for error in self . _errors : yield from error for event in self . _events : yield from event for function in self . _functions : yield from function for modifier in self . _modifiers : yield from modifier for struct in self . _structs : yield from struct for user_defined_value_type in self . _user_defined_value_types : yield from user_defined_value_type for using_for_directive in self . _using_for_directives : yield from using_for_directive for declared_variable in self . _declared_variables : yield from declared_variable def _post_process ( self , callback_params : CallbackParams ): base_contracts = [] for base_contract in self . _base_contracts : contract = base_contract . base_name . referenced_declaration assert isinstance ( contract , ContractDefinition ) contract . _child_contracts . add ( self ) base_contracts . append ( contract ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , base_contracts ) ) def _destroy ( self , base_contracts : List [ ContractDefinition ]) -> None : for base_contract in base_contracts : base_contract . _child_contracts . remove ( self ) def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" CONTRACT_RE = re . compile ( r \"^\\s*(abstract\\s)?\\s*contract\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) INTERFACE_RE = re . compile ( r \"^\\s*interface\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) LIBRARY_RE = re . compile ( r \"^\\s*library\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) if self . kind == ContractKind . CONTRACT : match = CONTRACT_RE . match ( self . _source ) elif self . kind == ContractKind . INTERFACE : match = INTERFACE_RE . match ( self . _source ) elif self . kind == ContractKind . LIBRARY : match = LIBRARY_RE . match ( self . _source ) else : raise ValueError ( f \"Unknown contract kind: { self . kind } \" ) assert match return self . byte_location [ 0 ] + match . start ( \"name\" ), self . byte_location [ 0 ] + match . end ( \"name\" ) @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return self . _name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = f \" { 'abstract ' if self . abstract else '' }{ self . kind } { self . name } \" ret += ( \" is \" + \", \" . join ( spec . source for spec in self . base_contracts ) if len ( self . base_contracts ) > 0 else \"\" ) if isinstance ( self . documentation , StructuredDocumentation ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) elif isinstance ( self . documentation , str ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . splitlines ()) + \" \\n \" + ret ) else : return ret @property def abstract ( self ) -> bool : \"\"\" Is `False` if the [kind][woke.ast.ir.declaration.contract_definition.ContractDefinition.kind] is [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] or [ContractKind.INTERFACE][woke.ast.enums.ContractKind.INTERFACE]. Returns: `True` if the contract is abstract, `False` otherwise. \"\"\" return self . _abstract @property def base_contracts ( self ) -> Tuple [ InheritanceSpecifier ]: \"\"\" Returns base contracts as specified in the source code. Does not return all base contracts (recursively). !!! example `A1` lists the interface `I` as a base contract. `A2` lists the interface `I` as a base contract. `B` lists the contracts `A1` and `A2` as base contracts. ```solidity interface I {} contract A1 is I {} contract A2 is I {} contract B is A1, A2 {} ``` Returns: Base contracts of this contract. \"\"\" return tuple ( self . _base_contracts ) @property def child_contracts ( self ) -> FrozenSet [ ContractDefinition ]: \"\"\" Returns: Contracts that list this contract in their [base_contracts][woke.ast.ir.declaration.contract_definition.ContractDefinition.base_contracts] property. \"\"\" return frozenset ( self . _child_contracts ) @property def kind ( self ) -> ContractKind : \"\"\" Returns: Contract kind. \"\"\" return self . _kind @property def fully_implemented ( self ) -> Optional [ bool ]: \"\"\" Is `None` when a file that imports this contract cannot be compiled. This may happen in the LSP server where partial project analysis is supported. Returns: `True` if all functions and modifiers of the contract are implemented, `False` otherwise. \"\"\" return self . _fully_implemented @property def linearized_base_contracts ( self ) -> Tuple [ ContractDefinition ]: \"\"\" Returns: C3 linearized list of all base contracts. \"\"\" base_contracts = [] for base_contract in self . _linearized_base_contracts : node = self . _reference_resolver . resolve_node ( base_contract , self . _cu_hash ) assert isinstance ( node , ContractDefinition ) base_contracts . append ( node ) return tuple ( base_contracts ) @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation of this contract, if any. \"\"\" return self . _documentation @property def enums ( self ) -> Tuple [ EnumDefinition ]: \"\"\" Returns: Enum definitions contained in this contract. \"\"\" return tuple ( self . _enums ) @property def errors ( self ) -> Tuple [ ErrorDefinition ]: \"\"\" Returns: Error definitions contained in this contract. \"\"\" return tuple ( self . _errors ) @property def events ( self ) -> Tuple [ EventDefinition ]: \"\"\" Returns: Event definitions contained in this contract. \"\"\" return tuple ( self . _events ) @property def functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" Returns: Function definitions contained in this contract. \"\"\" return tuple ( self . _functions ) @property def modifiers ( self ) -> Tuple [ ModifierDefinition ]: \"\"\" Returns: Modifier definitions contained in this contract. \"\"\" return tuple ( self . _modifiers ) @property def structs ( self ) -> Tuple [ StructDefinition ]: \"\"\" Returns: Struct definitions contained in this contract. \"\"\" return tuple ( self . _structs ) @property def user_defined_value_types ( self ) -> Tuple [ UserDefinedValueTypeDefinition ]: \"\"\" Returns: User defined value type definitions contained in this contract. \"\"\" return tuple ( self . _user_defined_value_types ) @property def using_for_directives ( self ) -> Tuple [ UsingForDirective ]: \"\"\" Returns: Using for directives contained in this contract. \"\"\" return tuple ( self . _using_for_directives ) @property def declared_variables ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Returns: Variable declarations contained in this contract. \"\"\" return tuple ( self . _declared_variables ) def declarations_iter ( self ) -> Iterator [ DeclarationAbc ]: \"\"\" Yields: All declarations contained in this contract. \"\"\" yield from self . enums for enum in self . enums : yield from enum . values yield from self . errors yield from self . events yield from self . functions yield from self . modifiers yield from self . structs yield from self . user_defined_value_types yield from self . declared_variables","title":"ContractDefinition"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.abstract","text":"Is False if the kind is ContractKind.LIBRARY or ContractKind.INTERFACE . Returns: Type Description bool True if the contract is abstract, False otherwise. Source code in woke/ast/ir/declaration/contract_definition.py 268 269 270 271 272 273 274 275 276 @property def abstract ( self ) -> bool : \"\"\" Is `False` if the [kind][woke.ast.ir.declaration.contract_definition.ContractDefinition.kind] is [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] or [ContractKind.INTERFACE][woke.ast.enums.ContractKind.INTERFACE]. Returns: `True` if the contract is abstract, `False` otherwise. \"\"\" return self . _abstract","title":"abstract()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.base_contracts","text":"Returns base contracts as specified in the source code. Does not return all base contracts (recursively). Example A1 lists the interface I as a base contract. A2 lists the interface I as a base contract. B lists the contracts A1 and A2 as base contracts. interface I {} contract A1 is I {} contract A2 is I {} contract B is A1 , A2 {} Returns: Type Description Tuple [ InheritanceSpecifier ] Base contracts of this contract. Source code in woke/ast/ir/declaration/contract_definition.py 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 @property def base_contracts ( self ) -> Tuple [ InheritanceSpecifier ]: \"\"\" Returns base contracts as specified in the source code. Does not return all base contracts (recursively). !!! example `A1` lists the interface `I` as a base contract. `A2` lists the interface `I` as a base contract. `B` lists the contracts `A1` and `A2` as base contracts. ```solidity interface I {} contract A1 is I {} contract A2 is I {} contract B is A1, A2 {} ``` Returns: Base contracts of this contract. \"\"\" return tuple ( self . _base_contracts )","title":"base_contracts()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.child_contracts","text":"Returns: Type Description FrozenSet [ ContractDefinition ] Contracts that list this contract in their base_contracts property. Source code in woke/ast/ir/declaration/contract_definition.py 299 300 301 302 303 304 305 @property def child_contracts ( self ) -> FrozenSet [ ContractDefinition ]: \"\"\" Returns: Contracts that list this contract in their [base_contracts][woke.ast.ir.declaration.contract_definition.ContractDefinition.base_contracts] property. \"\"\" return frozenset ( self . _child_contracts )","title":"child_contracts()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.declarations_iter","text":"Yields: Type Description Iterator [ DeclarationAbc ] All declarations contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 def declarations_iter ( self ) -> Iterator [ DeclarationAbc ]: \"\"\" Yields: All declarations contained in this contract. \"\"\" yield from self . enums for enum in self . enums : yield from enum . values yield from self . errors yield from self . events yield from self . functions yield from self . modifiers yield from self . structs yield from self . user_defined_value_types yield from self . declared_variables","title":"declarations_iter()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.declared_variables","text":"Returns: Type Description Tuple [ VariableDeclaration ] Variable declarations contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 410 411 412 413 414 415 416 @property def declared_variables ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Returns: Variable declarations contained in this contract. \"\"\" return tuple ( self . _declared_variables )","title":"declared_variables()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.documentation","text":"Of StructuredDocumentation type since Solidity 0.6.3. Returns: Type Description Optional [ Union [ StructuredDocumentation , str ]] NatSpec documentation of this contract, if any. Source code in woke/ast/ir/declaration/contract_definition.py 337 338 339 340 341 342 343 344 @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation of this contract, if any. \"\"\" return self . _documentation","title":"documentation()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.enums","text":"Returns: Type Description Tuple [ EnumDefinition ] Enum definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 346 347 348 349 350 351 352 @property def enums ( self ) -> Tuple [ EnumDefinition ]: \"\"\" Returns: Enum definitions contained in this contract. \"\"\" return tuple ( self . _enums )","title":"enums()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.errors","text":"Returns: Type Description Tuple [ ErrorDefinition ] Error definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 354 355 356 357 358 359 360 @property def errors ( self ) -> Tuple [ ErrorDefinition ]: \"\"\" Returns: Error definitions contained in this contract. \"\"\" return tuple ( self . _errors )","title":"errors()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.events","text":"Returns: Type Description Tuple [ EventDefinition ] Event definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 362 363 364 365 366 367 368 @property def events ( self ) -> Tuple [ EventDefinition ]: \"\"\" Returns: Event definitions contained in this contract. \"\"\" return tuple ( self . _events )","title":"events()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.fully_implemented","text":"Is None when a file that imports this contract cannot be compiled. This may happen in the LSP server where partial project analysis is supported. Returns: Type Description Optional [ bool ] True if all functions and modifiers of the contract are implemented, False otherwise. Source code in woke/ast/ir/declaration/contract_definition.py 315 316 317 318 319 320 321 322 @property def fully_implemented ( self ) -> Optional [ bool ]: \"\"\" Is `None` when a file that imports this contract cannot be compiled. This may happen in the LSP server where partial project analysis is supported. Returns: `True` if all functions and modifiers of the contract are implemented, `False` otherwise. \"\"\" return self . _fully_implemented","title":"fully_implemented()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.functions","text":"Returns: Type Description Tuple [ FunctionDefinition ] Function definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 370 371 372 373 374 375 376 @property def functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" Returns: Function definitions contained in this contract. \"\"\" return tuple ( self . _functions )","title":"functions()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.kind","text":"Returns: Type Description ContractKind Contract kind. Source code in woke/ast/ir/declaration/contract_definition.py 307 308 309 310 311 312 313 @property def kind ( self ) -> ContractKind : \"\"\" Returns: Contract kind. \"\"\" return self . _kind","title":"kind()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.linearized_base_contracts","text":"Returns: Type Description Tuple [ ContractDefinition ] C3 linearized list of all base contracts. Source code in woke/ast/ir/declaration/contract_definition.py 324 325 326 327 328 329 330 331 332 333 334 335 @property def linearized_base_contracts ( self ) -> Tuple [ ContractDefinition ]: \"\"\" Returns: C3 linearized list of all base contracts. \"\"\" base_contracts = [] for base_contract in self . _linearized_base_contracts : node = self . _reference_resolver . resolve_node ( base_contract , self . _cu_hash ) assert isinstance ( node , ContractDefinition ) base_contracts . append ( node ) return tuple ( base_contracts )","title":"linearized_base_contracts()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.modifiers","text":"Returns: Type Description Tuple [ ModifierDefinition ] Modifier definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 378 379 380 381 382 383 384 @property def modifiers ( self ) -> Tuple [ ModifierDefinition ]: \"\"\" Returns: Modifier definitions contained in this contract. \"\"\" return tuple ( self . _modifiers )","title":"modifiers()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.parent","text":"Returns: Type Description SourceUnit Parent IR node. Source code in woke/ast/ir/declaration/contract_definition.py 230 231 232 233 234 235 236 @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.structs","text":"Returns: Type Description Tuple [ StructDefinition ] Struct definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 386 387 388 389 390 391 392 @property def structs ( self ) -> Tuple [ StructDefinition ]: \"\"\" Returns: Struct definitions contained in this contract. \"\"\" return tuple ( self . _structs )","title":"structs()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.user_defined_value_types","text":"Returns: Type Description Tuple [ UserDefinedValueTypeDefinition ] User defined value type definitions contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 394 395 396 397 398 399 400 @property def user_defined_value_types ( self ) -> Tuple [ UserDefinedValueTypeDefinition ]: \"\"\" Returns: User defined value type definitions contained in this contract. \"\"\" return tuple ( self . _user_defined_value_types )","title":"user_defined_value_types()"},{"location":"api-reference/ir/declarations/contract-definition/#woke.ast.ir.declaration.contract_definition.ContractDefinition.using_for_directives","text":"Returns: Type Description Tuple [ UsingForDirective ] Using for directives contained in this contract. Source code in woke/ast/ir/declaration/contract_definition.py 402 403 404 405 406 407 408 @property def using_for_directives ( self ) -> Tuple [ UsingForDirective ]: \"\"\" Returns: Using for directives contained in this contract. \"\"\" return tuple ( self . _using_for_directives )","title":"using_for_directives()"},{"location":"api-reference/ir/declarations/enum-definition/","text":"woke.ast.ir.declaration.enum_definition module # EnumDefinition class # Bases: DeclarationAbc Definition of an enum. Example enum ActionChoices { GoLeft , GoRight , GoStraight , SitStill } Source code in woke/ast/ir/declaration/enum_definition.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class EnumDefinition ( DeclarationAbc ): \"\"\" Definition of an enum. !!! example ```solidity enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill } ``` \"\"\" _ast_node : SolcEnumDefinition _parent : Union [ ContractDefinition , SourceUnit ] _canonical_name : str _values : List [ EnumValue ] def __init__ ( self , init : IrInitTuple , enum : SolcEnumDefinition , parent : SolidityAbc ): super () . __init__ ( init , enum , parent ) self . _canonical_name = enum . canonical_name self . _values = [] for value in enum . members : self . _values . append ( EnumValue ( init , value , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for value in self . _values : yield from value def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" ENUM_RE = re . compile ( r \"^\\s*enum\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = ENUM_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self ) -> Union [ SourceUnit , ContractDefinition ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return self . _canonical_name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : return ( f \"enum { self . name } \" + \" { \\n \" + \", \\n \" . join ( f \" { value . name } \" for value in self . _values ) + \" \\n }\" ) @property def values ( self ) -> Tuple [ EnumValue ]: \"\"\" Returns: Enum values defined in this enum. \"\"\" return tuple ( self . _values ) parent () property # Returns: Type Description Union [ SourceUnit , ContractDefinition ] Parent IR node. Source code in woke/ast/ir/declaration/enum_definition.py 67 68 69 70 71 72 73 @property def parent ( self ) -> Union [ SourceUnit , ContractDefinition ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent values () property # Returns: Type Description Tuple [ EnumValue ] Enum values defined in this enum. Source code in woke/ast/ir/declaration/enum_definition.py 89 90 91 92 93 94 95 @property def values ( self ) -> Tuple [ EnumValue ]: \"\"\" Returns: Enum values defined in this enum. \"\"\" return tuple ( self . _values )","title":"Enum definition"},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition","text":"","title":"enum_definition"},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition.EnumDefinition","text":"Bases: DeclarationAbc Definition of an enum. Example enum ActionChoices { GoLeft , GoRight , GoStraight , SitStill } Source code in woke/ast/ir/declaration/enum_definition.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 class EnumDefinition ( DeclarationAbc ): \"\"\" Definition of an enum. !!! example ```solidity enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill } ``` \"\"\" _ast_node : SolcEnumDefinition _parent : Union [ ContractDefinition , SourceUnit ] _canonical_name : str _values : List [ EnumValue ] def __init__ ( self , init : IrInitTuple , enum : SolcEnumDefinition , parent : SolidityAbc ): super () . __init__ ( init , enum , parent ) self . _canonical_name = enum . canonical_name self . _values = [] for value in enum . members : self . _values . append ( EnumValue ( init , value , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for value in self . _values : yield from value def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" ENUM_RE = re . compile ( r \"^\\s*enum\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = ENUM_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self ) -> Union [ SourceUnit , ContractDefinition ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return self . _canonical_name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : return ( f \"enum { self . name } \" + \" { \\n \" + \", \\n \" . join ( f \" { value . name } \" for value in self . _values ) + \" \\n }\" ) @property def values ( self ) -> Tuple [ EnumValue ]: \"\"\" Returns: Enum values defined in this enum. \"\"\" return tuple ( self . _values )","title":"EnumDefinition"},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition.EnumDefinition.parent","text":"Returns: Type Description Union [ SourceUnit , ContractDefinition ] Parent IR node. Source code in woke/ast/ir/declaration/enum_definition.py 67 68 69 70 71 72 73 @property def parent ( self ) -> Union [ SourceUnit , ContractDefinition ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/enum-definition/#woke.ast.ir.declaration.enum_definition.EnumDefinition.values","text":"Returns: Type Description Tuple [ EnumValue ] Enum values defined in this enum. Source code in woke/ast/ir/declaration/enum_definition.py 89 90 91 92 93 94 95 @property def values ( self ) -> Tuple [ EnumValue ]: \"\"\" Returns: Enum values defined in this enum. \"\"\" return tuple ( self . _values )","title":"values()"},{"location":"api-reference/ir/declarations/enum-value/","text":"woke.ast.ir.declaration.enum_value module # EnumValue class # Bases: DeclarationAbc Definition of an enum value inside an enum definition. Example GoLeft , GoRight , GoStraight , SitStill in the following enum definition: enum ActionChoices { GoLeft , GoRight , GoStraight , SitStill } Source code in woke/ast/ir/declaration/enum_value.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class EnumValue ( DeclarationAbc ): \"\"\" Definition of an enum value inside an enum definition. !!! example `GoLeft`, `GoRight`, `GoStraight`, `SitStill` in the following enum definition: ```solidity enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill } ``` \"\"\" _ast_node : SolcEnumValue _parent : EnumDefinition def __init__ ( self , init : IrInitTuple , value : SolcEnumValue , parent : SolidityAbc ): super () . __init__ ( init , value , parent ) def _parse_name_location ( self ) -> Tuple [ int , int ]: src = self . _ast_node . src return src . byte_offset , src . byte_offset + src . byte_length @property def parent ( self ) -> EnumDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return f \" { self . _parent . canonical_name } . { self . _name } \" @property def declaration_string ( self ) -> str : return self . name parent () property # Returns: Type Description EnumDefinition Parent IR node. Source code in woke/ast/ir/declaration/enum_value.py 38 39 40 41 42 43 44 @property def parent ( self ) -> EnumDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Enum value"},{"location":"api-reference/ir/declarations/enum-value/#woke.ast.ir.declaration.enum_value","text":"","title":"enum_value"},{"location":"api-reference/ir/declarations/enum-value/#woke.ast.ir.declaration.enum_value.EnumValue","text":"Bases: DeclarationAbc Definition of an enum value inside an enum definition. Example GoLeft , GoRight , GoStraight , SitStill in the following enum definition: enum ActionChoices { GoLeft , GoRight , GoStraight , SitStill } Source code in woke/ast/ir/declaration/enum_value.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 class EnumValue ( DeclarationAbc ): \"\"\" Definition of an enum value inside an enum definition. !!! example `GoLeft`, `GoRight`, `GoStraight`, `SitStill` in the following enum definition: ```solidity enum ActionChoices { GoLeft, GoRight, GoStraight, SitStill } ``` \"\"\" _ast_node : SolcEnumValue _parent : EnumDefinition def __init__ ( self , init : IrInitTuple , value : SolcEnumValue , parent : SolidityAbc ): super () . __init__ ( init , value , parent ) def _parse_name_location ( self ) -> Tuple [ int , int ]: src = self . _ast_node . src return src . byte_offset , src . byte_offset + src . byte_length @property def parent ( self ) -> EnumDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return f \" { self . _parent . canonical_name } . { self . _name } \" @property def declaration_string ( self ) -> str : return self . name","title":"EnumValue"},{"location":"api-reference/ir/declarations/enum-value/#woke.ast.ir.declaration.enum_value.EnumValue.parent","text":"Returns: Type Description EnumDefinition Parent IR node. Source code in woke/ast/ir/declaration/enum_value.py 38 39 40 41 42 43 44 @property def parent ( self ) -> EnumDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/error-definition/","text":"woke.ast.ir.declaration.error_definition module # ErrorDefinition class # Bases: DeclarationAbc Definition of an error. Example error InsufficientBalance ( uint256 available , uint256 required ); Source code in woke/ast/ir/declaration/error_definition.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class ErrorDefinition ( DeclarationAbc ): \"\"\" Definition of an error. !!! example ```solidity error InsufficientBalance(uint256 available, uint256 required); ``` \"\"\" _ast_node : SolcErrorDefinition _parent : Union [ ContractDefinition , SourceUnit ] _parameters : ParameterList _documentation : Optional [ StructuredDocumentation ] _error_selector : Optional [ bytes ] def __init__ ( self , init : IrInitTuple , error : SolcErrorDefinition , parent : SolidityAbc ): super () . __init__ ( init , error , parent ) self . _parameters = ParameterList ( init , error . parameters , self ) self . _documentation = ( StructuredDocumentation ( init , error . documentation , self ) if error . documentation else None ) self . _error_selector = ( bytes . fromhex ( error . error_selector ) if error . error_selector else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _parameters if self . _documentation is not None : yield from self . _documentation def _parse_name_location ( self ) -> Tuple [ int , int ]: # SolcErrorDefinition node always contains name_location attribute # this method is implemented here just for completeness and to satisfy the linter byte_start = self . _ast_node . name_location . byte_offset byte_length = self . _ast_node . name_location . byte_length return byte_start , byte_start + byte_length @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property @lru_cache ( maxsize = 2048 ) def canonical_name ( self ) -> str : from .contract_definition import ContractDefinition if isinstance ( self . _parent , ContractDefinition ): return f \" { self . _parent . canonical_name } . { self . _name } \" return self . _name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = ( f \"error { self . _name } (\" + \", \" . join ( param . declaration_string for param in self . parameters . parameters ) + \")\" ) if self . documentation is not None : return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) return ret @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing parameters of the error. \"\"\" return self . _parameters @property def documentation ( self ) -> Optional [ StructuredDocumentation ]: \"\"\" Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def error_selector ( self ) -> Optional [ bytes ]: \"\"\" Available since Solidity 0.8.13 (errors were introduced in 0.8.4). Returns: Selector of the error. \"\"\" return self . _error_selector documentation () property # Returns: Type Description Optional [ StructuredDocumentation ] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/error_definition.py 107 108 109 110 111 112 113 @property def documentation ( self ) -> Optional [ StructuredDocumentation ]: \"\"\" Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation error_selector () property # Available since Solidity 0.8.13 (errors were introduced in 0.8.4). Returns: Type Description Optional [ bytes ] Selector of the error. Source code in woke/ast/ir/declaration/error_definition.py 115 116 117 118 119 120 121 122 @property def error_selector ( self ) -> Optional [ bytes ]: \"\"\" Available since Solidity 0.8.13 (errors were introduced in 0.8.4). Returns: Selector of the error. \"\"\" return self . _error_selector parameters () property # Returns: Type Description ParameterList Parameter list describing parameters of the error. Source code in woke/ast/ir/declaration/error_definition.py 99 100 101 102 103 104 105 @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing parameters of the error. \"\"\" return self . _parameters parent () property # Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/declaration/error_definition.py 63 64 65 66 67 68 69 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Error definition"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition","text":"","title":"error_definition"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition","text":"Bases: DeclarationAbc Definition of an error. Example error InsufficientBalance ( uint256 available , uint256 required ); Source code in woke/ast/ir/declaration/error_definition.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class ErrorDefinition ( DeclarationAbc ): \"\"\" Definition of an error. !!! example ```solidity error InsufficientBalance(uint256 available, uint256 required); ``` \"\"\" _ast_node : SolcErrorDefinition _parent : Union [ ContractDefinition , SourceUnit ] _parameters : ParameterList _documentation : Optional [ StructuredDocumentation ] _error_selector : Optional [ bytes ] def __init__ ( self , init : IrInitTuple , error : SolcErrorDefinition , parent : SolidityAbc ): super () . __init__ ( init , error , parent ) self . _parameters = ParameterList ( init , error . parameters , self ) self . _documentation = ( StructuredDocumentation ( init , error . documentation , self ) if error . documentation else None ) self . _error_selector = ( bytes . fromhex ( error . error_selector ) if error . error_selector else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _parameters if self . _documentation is not None : yield from self . _documentation def _parse_name_location ( self ) -> Tuple [ int , int ]: # SolcErrorDefinition node always contains name_location attribute # this method is implemented here just for completeness and to satisfy the linter byte_start = self . _ast_node . name_location . byte_offset byte_length = self . _ast_node . name_location . byte_length return byte_start , byte_start + byte_length @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property @lru_cache ( maxsize = 2048 ) def canonical_name ( self ) -> str : from .contract_definition import ContractDefinition if isinstance ( self . _parent , ContractDefinition ): return f \" { self . _parent . canonical_name } . { self . _name } \" return self . _name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = ( f \"error { self . _name } (\" + \", \" . join ( param . declaration_string for param in self . parameters . parameters ) + \")\" ) if self . documentation is not None : return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) return ret @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing parameters of the error. \"\"\" return self . _parameters @property def documentation ( self ) -> Optional [ StructuredDocumentation ]: \"\"\" Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def error_selector ( self ) -> Optional [ bytes ]: \"\"\" Available since Solidity 0.8.13 (errors were introduced in 0.8.4). Returns: Selector of the error. \"\"\" return self . _error_selector","title":"ErrorDefinition"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.documentation","text":"Returns: Type Description Optional [ StructuredDocumentation ] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/error_definition.py 107 108 109 110 111 112 113 @property def documentation ( self ) -> Optional [ StructuredDocumentation ]: \"\"\" Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation","title":"documentation()"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.error_selector","text":"Available since Solidity 0.8.13 (errors were introduced in 0.8.4). Returns: Type Description Optional [ bytes ] Selector of the error. Source code in woke/ast/ir/declaration/error_definition.py 115 116 117 118 119 120 121 122 @property def error_selector ( self ) -> Optional [ bytes ]: \"\"\" Available since Solidity 0.8.13 (errors were introduced in 0.8.4). Returns: Selector of the error. \"\"\" return self . _error_selector","title":"error_selector()"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.parameters","text":"Returns: Type Description ParameterList Parameter list describing parameters of the error. Source code in woke/ast/ir/declaration/error_definition.py 99 100 101 102 103 104 105 @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing parameters of the error. \"\"\" return self . _parameters","title":"parameters()"},{"location":"api-reference/ir/declarations/error-definition/#woke.ast.ir.declaration.error_definition.ErrorDefinition.parent","text":"Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/declaration/error_definition.py 63 64 65 66 67 68 69 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/event-definition/","text":"woke.ast.ir.declaration.event_definition module # EventDefinition class # Bases: DeclarationAbc Definition of an event. Example event Transfer ( address indexed from , address indexed to , uint256 value ); Source code in woke/ast/ir/declaration/event_definition.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 class EventDefinition ( DeclarationAbc ): \"\"\" Definition of an event. !!! example ```solidity event Transfer(address indexed from, address indexed to, uint256 value); ``` \"\"\" _ast_node : SolcEventDefinition _parent : ContractDefinition _anonymous : bool _parameters : ParameterList _documentation : Optional [ Union [ StructuredDocumentation , str ]] _event_selector : Optional [ bytes ] def __init__ ( self , init : IrInitTuple , event : SolcEventDefinition , parent : SolidityAbc ): super () . __init__ ( init , event , parent ) self . _anonymous = event . anonymous self . _parameters = ParameterList ( init , event . parameters , self ) if event . documentation is None : self . _documentation = None elif isinstance ( event . documentation , SolcStructuredDocumentation ): self . _documentation = StructuredDocumentation ( init , event . documentation , self ) elif isinstance ( event . documentation , str ): self . _documentation = event . documentation else : raise TypeError ( f \"Unknown type of documentation: { type ( event . documentation ) } \" ) self . _event_selector = ( bytes . fromhex ( event . event_selector ) if event . event_selector else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _parameters if isinstance ( self . _documentation , StructuredDocumentation ): yield from self . _documentation def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" EVENT_RE = re . compile ( r \"^\\s*event\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = EVENT_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return f \" { self . _parent . canonical_name } . { self . _name } \" @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = ( f \"event { self . _name } (\" + \", \" . join ( param . declaration_string for param in self . parameters . parameters ) + f \") { ' anonymous' if self . anonymous else '' } \" ) if isinstance ( self . documentation , StructuredDocumentation ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) elif isinstance ( self . documentation , str ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . splitlines ()) + \" \\n \" + ret ) else : return ret @property def anonymous ( self ) -> bool : \"\"\" !!! example ```solidity event Transfer(address indexed from, address indexed to, uint256 value) anonymous; ``` Returns: `True` if the event is anonymous, `False` otherwise. \"\"\" return self . _anonymous @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing parameters of the event. \"\"\" return self . _parameters @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def event_selector ( self ) -> Optional [ bytes ]: \"\"\" Available since Solidity 0.8.13. Returns: Selector of the event. \"\"\" return self . _event_selector anonymous () property # Example event Transfer ( address indexed from , address indexed to , uint256 value ) anonymous ; Returns: Type Description bool True if the event is anonymous, False otherwise. Source code in woke/ast/ir/declaration/event_definition.py 117 118 119 120 121 122 123 124 125 126 127 @property def anonymous ( self ) -> bool : \"\"\" !!! example ```solidity event Transfer(address indexed from, address indexed to, uint256 value) anonymous; ``` Returns: `True` if the event is anonymous, `False` otherwise. \"\"\" return self . _anonymous documentation () property # Of StructuredDocumentation type since Solidity 0.6.3. Returns: Type Description Optional [ Union [ StructuredDocumentation , str ]] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/event_definition.py 137 138 139 140 141 142 143 144 @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation event_selector () property # Available since Solidity 0.8.13. Returns: Type Description Optional [ bytes ] Selector of the event. Source code in woke/ast/ir/declaration/event_definition.py 146 147 148 149 150 151 152 153 @property def event_selector ( self ) -> Optional [ bytes ]: \"\"\" Available since Solidity 0.8.13. Returns: Selector of the event. \"\"\" return self . _event_selector parameters () property # Returns: Type Description ParameterList Parameter list describing parameters of the event. Source code in woke/ast/ir/declaration/event_definition.py 129 130 131 132 133 134 135 @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing parameters of the event. \"\"\" return self . _parameters parent () property # Returns: Type Description ContractDefinition Parent IR node. Source code in woke/ast/ir/declaration/event_definition.py 78 79 80 81 82 83 84 @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Event definition"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition","text":"","title":"event_definition"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition","text":"Bases: DeclarationAbc Definition of an event. Example event Transfer ( address indexed from , address indexed to , uint256 value ); Source code in woke/ast/ir/declaration/event_definition.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 class EventDefinition ( DeclarationAbc ): \"\"\" Definition of an event. !!! example ```solidity event Transfer(address indexed from, address indexed to, uint256 value); ``` \"\"\" _ast_node : SolcEventDefinition _parent : ContractDefinition _anonymous : bool _parameters : ParameterList _documentation : Optional [ Union [ StructuredDocumentation , str ]] _event_selector : Optional [ bytes ] def __init__ ( self , init : IrInitTuple , event : SolcEventDefinition , parent : SolidityAbc ): super () . __init__ ( init , event , parent ) self . _anonymous = event . anonymous self . _parameters = ParameterList ( init , event . parameters , self ) if event . documentation is None : self . _documentation = None elif isinstance ( event . documentation , SolcStructuredDocumentation ): self . _documentation = StructuredDocumentation ( init , event . documentation , self ) elif isinstance ( event . documentation , str ): self . _documentation = event . documentation else : raise TypeError ( f \"Unknown type of documentation: { type ( event . documentation ) } \" ) self . _event_selector = ( bytes . fromhex ( event . event_selector ) if event . event_selector else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _parameters if isinstance ( self . _documentation , StructuredDocumentation ): yield from self . _documentation def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" EVENT_RE = re . compile ( r \"^\\s*event\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = EVENT_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return f \" { self . _parent . canonical_name } . { self . _name } \" @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = ( f \"event { self . _name } (\" + \", \" . join ( param . declaration_string for param in self . parameters . parameters ) + f \") { ' anonymous' if self . anonymous else '' } \" ) if isinstance ( self . documentation , StructuredDocumentation ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) elif isinstance ( self . documentation , str ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . splitlines ()) + \" \\n \" + ret ) else : return ret @property def anonymous ( self ) -> bool : \"\"\" !!! example ```solidity event Transfer(address indexed from, address indexed to, uint256 value) anonymous; ``` Returns: `True` if the event is anonymous, `False` otherwise. \"\"\" return self . _anonymous @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing parameters of the event. \"\"\" return self . _parameters @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def event_selector ( self ) -> Optional [ bytes ]: \"\"\" Available since Solidity 0.8.13. Returns: Selector of the event. \"\"\" return self . _event_selector","title":"EventDefinition"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.anonymous","text":"Example event Transfer ( address indexed from , address indexed to , uint256 value ) anonymous ; Returns: Type Description bool True if the event is anonymous, False otherwise. Source code in woke/ast/ir/declaration/event_definition.py 117 118 119 120 121 122 123 124 125 126 127 @property def anonymous ( self ) -> bool : \"\"\" !!! example ```solidity event Transfer(address indexed from, address indexed to, uint256 value) anonymous; ``` Returns: `True` if the event is anonymous, `False` otherwise. \"\"\" return self . _anonymous","title":"anonymous()"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.documentation","text":"Of StructuredDocumentation type since Solidity 0.6.3. Returns: Type Description Optional [ Union [ StructuredDocumentation , str ]] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/event_definition.py 137 138 139 140 141 142 143 144 @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation","title":"documentation()"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.event_selector","text":"Available since Solidity 0.8.13. Returns: Type Description Optional [ bytes ] Selector of the event. Source code in woke/ast/ir/declaration/event_definition.py 146 147 148 149 150 151 152 153 @property def event_selector ( self ) -> Optional [ bytes ]: \"\"\" Available since Solidity 0.8.13. Returns: Selector of the event. \"\"\" return self . _event_selector","title":"event_selector()"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.parameters","text":"Returns: Type Description ParameterList Parameter list describing parameters of the event. Source code in woke/ast/ir/declaration/event_definition.py 129 130 131 132 133 134 135 @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing parameters of the event. \"\"\" return self . _parameters","title":"parameters()"},{"location":"api-reference/ir/declarations/event-definition/#woke.ast.ir.declaration.event_definition.EventDefinition.parent","text":"Returns: Type Description ContractDefinition Parent IR node. Source code in woke/ast/ir/declaration/event_definition.py 78 79 80 81 82 83 84 @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/function-definition/","text":"woke.ast.ir.declaration.function_definition module # FunctionDefinition class # Bases: DeclarationAbc Definition of a function. Example Free function (= outside of a contract): 1 2 3 function f ( uint a , uint b ) pure returns ( uint ) { return a + b ; } Function inside a contract (lines 2-4): 1 2 3 4 5 contract C { function f ( uint a , uint b ) public pure returns ( uint ) { return a + b ; } } Constructor (lines 3-5): 1 2 3 4 5 6 contract C { uint public x ; constructor ( uint a ) public { x = a ; } } Fallback function (line 2): 1 2 3 contract C { fallback () external payable {} } Receive function (line 2): 1 2 3 contract C { receive () external payable {} } Source code in woke/ast/ir/declaration/function_definition.pyclass FunctionDefinition ( DeclarationAbc ): \"\"\" Definition of a function. !!! example Free function (= outside of a contract): ```solidity linenums=\"1\" function f(uint a, uint b) pure returns (uint) { return a + b; } ``` Function inside a contract (lines 2-4): ```solidity linenums=\"1\" contract C { function f(uint a, uint b) public pure returns (uint) { return a + b; } } ``` Constructor (lines 3-5): ```solidity linenums=\"1\" contract C { uint public x; constructor(uint a) public { x = a; } } ``` Fallback function (line 2): ```solidity linenums=\"1\" contract C { fallback() external payable {} } ``` Receive function (line 2): ```solidity linenums=\"1\" contract C { receive() external payable {} } ``` \"\"\" _ast_node : SolcFunctionDefinition _parent : Union [ ContractDefinition , SourceUnit ] _child_functions : Set [ Union [ FunctionDefinition , VariableDeclaration ]] _implemented : bool _kind : FunctionKind _modifiers : List [ ModifierInvocation ] _parameters : ParameterList _return_parameters : ParameterList # __scope _state_mutability : StateMutability _virtual : bool _visibility : Visibility _base_functions : List [ AstNodeId ] _documentation : Optional [ Union [ StructuredDocumentation , str ]] _function_selector : Optional [ bytes ] _body : Optional [ Block ] _overrides : Optional [ OverrideSpecifier ] def __init__ ( self , init : IrInitTuple , function : SolcFunctionDefinition , parent : SolidityAbc ): super () . __init__ ( init , function , parent ) self . _child_functions = set () self . _implemented = function . implemented self . _kind = function . kind if self . _kind == FunctionKind . CONSTRUCTOR : self . _name = \"constructor\" elif self . _kind == FunctionKind . FALLBACK : self . _name = \"fallback\" elif self . _kind == FunctionKind . RECEIVE : self . _name = \"receive\" self . _modifiers = [ ModifierInvocation ( init , modifier , self ) for modifier in function . modifiers ] self . _parameters = ParameterList ( init , function . parameters , self ) self . _return_parameters = ParameterList ( init , function . return_parameters , self ) # self.__scope = function.scope self . _state_mutability = function . state_mutability self . _virtual = function . virtual self . _visibility = function . visibility self . _base_functions = ( list ( function . base_functions ) if function . base_functions is not None else [] ) if function . documentation is None : self . _documentation = None elif isinstance ( function . documentation , SolcStructuredDocumentation ): self . _documentation = StructuredDocumentation ( init , function . documentation , self ) elif isinstance ( function . documentation , str ): self . _documentation = function . documentation else : raise TypeError ( f \"Unknown type of documentation: { type ( function . documentation ) } \" ) self . _function_selector = ( bytes . fromhex ( function . function_selector ) if function . function_selector else None ) if ( self . _visibility in { Visibility . PUBLIC , Visibility . EXTERNAL } and self . _kind == FunctionKind . FUNCTION ): assert self . _function_selector is not None else : assert self . _function_selector is None self . _body = Block ( init , function . body , self ) if function . body else None assert ( self . _body is not None ) == self . _implemented self . _overrides = ( OverrideSpecifier ( init , function . overrides , self ) if function . overrides else None ) self . _reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for modifier in self . _modifiers : yield from modifier yield from self . _parameters yield from self . _return_parameters if isinstance ( self . _documentation , StructuredDocumentation ): yield from self . _documentation if self . _body is not None : yield from self . _body if self . _overrides is not None : yield from self . _overrides def _post_process ( self , callback_params : CallbackParams ): base_functions = self . base_functions for base_function in base_functions : base_function . _child_functions . add ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , base_functions ) ) def _destroy ( self , base_functions : Tuple [ FunctionDefinition ]) -> None : for base_function in base_functions : base_function . _child_functions . remove ( self ) def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" FUNCTION_RE = re . compile ( r \"^\\s*function\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) CONSTRUCTOR_RE = re . compile ( r \"^\\s*(?P<name>constructor)\" . encode ( \"utf-8\" )) FALLBACK_RE = re . compile ( r \"^\\s*(?P<name>fallback)\" . encode ( \"utf-8\" )) RECEIVE_RE = re . compile ( r \"^\\s*(?P<name>receive)\" . encode ( \"utf-8\" )) regexps = [ FUNCTION_RE , CONSTRUCTOR_RE , FALLBACK_RE , RECEIVE_RE ] matches = [ regexp . match ( self . _source ) for regexp in regexps ] assert any ( matches ) byte_start = self . _ast_node . src . byte_offset match = next ( match for match in matches if match ) return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) def get_all_references ( self , include_declarations : bool ) -> Iterator [ Union [ DeclarationAbc , Identifier , IdentifierPathPart , MemberAccess , ExternalReference , ] ]: from .variable_declaration import VariableDeclaration processed_declarations : Set [ Union [ FunctionDefinition , VariableDeclaration ]] = { self } declarations_queue : Deque [ Union [ FunctionDefinition , VariableDeclaration ] ] = deque ([ self ]) while declarations_queue : declaration = declarations_queue . pop () if include_declarations : yield declaration yield from declaration . references if isinstance ( declaration , ( FunctionDefinition , VariableDeclaration )): for base_function in declaration . base_functions : if base_function not in processed_declarations : declarations_queue . append ( base_function ) processed_declarations . add ( base_function ) if isinstance ( declaration , FunctionDefinition ): for child_function in declaration . child_functions : if child_function not in processed_declarations : declarations_queue . append ( child_function ) processed_declarations . add ( child_function ) @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property @lru_cache ( maxsize = 2048 ) def canonical_name ( self ) -> str : from .contract_definition import ContractDefinition if isinstance ( self . _parent , ContractDefinition ): return f \" { self . _parent . canonical_name } . { self . _name } \" return self . name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : if self . kind == FunctionKind . CONSTRUCTOR : ret = \"constructor\" elif self . kind == FunctionKind . FALLBACK : ret = \"fallback\" elif self . kind == FunctionKind . RECEIVE : ret = \"receive\" else : ret = f \"function { self . name } \" ret += f \"( { ', ' . join ( parameter . declaration_string for parameter in self . parameters . parameters ) } )\" ret += f \" { self . visibility } \" ret += ( f \" { self . state_mutability } \" if self . state_mutability != StateMutability . NONPAYABLE else \"\" ) ret += f \" virtual\" if self . virtual else \"\" ret += ( ( f \" override\" + ( \"(\" + \", \" . join ( override . source for override in self . overrides . overrides ) + \")\" if len ( self . overrides . overrides ) > 0 else \"\" ) ) if self . overrides is not None else \"\" ) ret += ( ( \" \" + \" \" . join ( modifier . source for modifier in self . modifiers )) if len ( self . modifiers ) > 0 else \"\" ) ret += ( \" returns (\" + \", \" . join ( parameter . declaration_string for parameter in self . return_parameters . parameters ) + \")\" if len ( self . return_parameters . parameters ) > 0 else \"\" ) if isinstance ( self . documentation , StructuredDocumentation ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) elif isinstance ( self . documentation , str ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . splitlines ()) + \" \\n \" + ret ) else : return ret @property def implemented ( self ) -> bool : \"\"\" Returns: `True` if the function [body][woke.ast.ir.declaration.function_definition.FunctionDefinition.body] is not `None`, `False` otherwise. \"\"\" return self . _implemented @property def kind ( self ) -> FunctionKind : \"\"\" Returns: Kind of the function. \"\"\" return self . _kind @property def modifiers ( self ) -> Tuple [ ModifierInvocation ]: \"\"\" Also includes base constructor invocations. !!! example Both `:::solidity ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18)` and `initializer` are listed by this property. ```solidity contract MyToken is ERC20Token { constructor() ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18) initializer {} } ``` Returns: List of modifiers applied to the function. \"\"\" return tuple ( self . _modifiers ) @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function parameters. \"\"\" return self . _parameters @property def return_parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function return parameters. \"\"\" return self . _return_parameters @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function. \"\"\" return self . _state_mutability @property def virtual ( self ) -> bool : \"\"\" Returns: `True` if the function is virtual, `False` otherwise. \"\"\" return self . _virtual @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the function. \"\"\" return self . _visibility @property def base_functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" !!! example `A.foo` on lines 6-8 lists `I.foo` on line 2 as a base function. `B.foo` on lines 12-14 lists only `A.foo` on lines 6-8 as a base function. ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A is I { function foo() external pure virtual override returns(uint) { return 1; } } contract B is A { function foo() external pure override returns(uint) { return 2; } } ``` !!! example `A1.foo` on lines 6-8 lists `I.foo` on line 2 as a base function. `A2.foo` on lines 12-14 lists `I.foo` on line 2 as a base function. `B.foo` on lines 18-20 lists `A1.foo` on lines 6-8 and `A2.foo` on lines 12-14 as base functions. ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A1 is I { function foo() external pure virtual override returns(uint) { return 1; } } contract A2 is I { function foo() external pure virtual override returns(uint) { return 2; } } contract B is A1, A2 { function foo() external pure override(A1, A2) returns(uint) { return 3; } } ``` Returns: List of base functions overridden by this function. \"\"\" base_functions = [] for base_function_id in self . _base_functions : base_function = self . _reference_resolver . resolve_node ( base_function_id , self . _cu_hash ) assert isinstance ( base_function , FunctionDefinition ) base_functions . append ( base_function ) return tuple ( base_functions ) @property def child_functions ( self , ) -> FrozenSet [ Union [ FunctionDefinition , VariableDeclaration ]]: \"\"\" Returns: Functions that list this function in their [base_functions][woke.ast.ir.declaration.function_definition.FunctionDefinition.base_functions] property. \"\"\" return frozenset ( self . _child_functions ) @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://solidity.readthedocs.io/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def function_selector ( self ) -> Optional [ bytes ]: \"\"\" Is only set for [Visibility.PUBLIC][woke.ast.enums.Visibility.PUBLIC] and [Visibility.EXTERNAL][woke.ast.enums.Visibility.EXTERNAL] functions of the [FunctionKind.FUNCTION][woke.ast.enums.FunctionKind.FUNCTION] kind. Returns: Selector of the function. \"\"\" return self . _function_selector @property def body ( self ) -> Optional [ Block ]: \"\"\" Returns: Body of the function, if any. \"\"\" return self . _body @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specifier as present in the source code. !!! example `I.foo` on line 2 does not have an override specifier. `A.foo` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `B.foo` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg one item referencing the contract `A` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A is I { function foo() external pure virtual override returns(uint) { return 1; } } contract B is A { function foo() external pure override(A) returns(uint) { return 2; } } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides @property @lru_cache ( maxsize = 2048 ) def cfg ( self ) -> Optional [ ControlFlowGraph ]: from woke.analysis.cfg import ControlFlowGraph if self . body is None : return None return ControlFlowGraph ( self ) base_functions () property # Example A.foo on lines 6-8 lists I.foo on line 2 as a base function. B.foo on lines 12-14 lists only A.foo on lines 6-8 as a base function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 interface I { function foo () external returns ( uint ); } contract A is I { function foo () external pure virtual override returns ( uint ) { return 1 ; } } contract B is A { function foo () external pure override returns ( uint ) { return 2 ; } } Example A1.foo on lines 6-8 lists I.foo on line 2 as a base function. A2.foo on lines 12-14 lists I.foo on line 2 as a base function. B.foo on lines 18-20 lists A1.foo on lines 6-8 and A2.foo on lines 12-14 as base functions. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 interface I { function foo () external returns ( uint ); } contract A1 is I { function foo () external pure virtual override returns ( uint ) { return 1 ; } } contract A2 is I { function foo () external pure virtual override returns ( uint ) { return 2 ; } } contract B is A1 , A2 { function foo () external pure override ( A1 , A2 ) returns ( uint ) { return 3 ; } } Returns: Type Description Tuple [ FunctionDefinition ] List of base functions overridden by this function. Source code in woke/ast/ir/declaration/function_definition.py 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 @property def base_functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" !!! example `A.foo` on lines 6-8 lists `I.foo` on line 2 as a base function. `B.foo` on lines 12-14 lists only `A.foo` on lines 6-8 as a base function. ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A is I { function foo() external pure virtual override returns(uint) { return 1; } } contract B is A { function foo() external pure override returns(uint) { return 2; } } ``` !!! example `A1.foo` on lines 6-8 lists `I.foo` on line 2 as a base function. `A2.foo` on lines 12-14 lists `I.foo` on line 2 as a base function. `B.foo` on lines 18-20 lists `A1.foo` on lines 6-8 and `A2.foo` on lines 12-14 as base functions. ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A1 is I { function foo() external pure virtual override returns(uint) { return 1; } } contract A2 is I { function foo() external pure virtual override returns(uint) { return 2; } } contract B is A1, A2 { function foo() external pure override(A1, A2) returns(uint) { return 3; } } ``` Returns: List of base functions overridden by this function. \"\"\" base_functions = [] for base_function_id in self . _base_functions : base_function = self . _reference_resolver . resolve_node ( base_function_id , self . _cu_hash ) assert isinstance ( base_function , FunctionDefinition ) base_functions . append ( base_function ) return tuple ( base_functions ) body () property # Returns: Type Description Optional [ Block ] Body of the function, if any. Source code in woke/ast/ir/declaration/function_definition.py 507 508 509 510 511 512 513 @property def body ( self ) -> Optional [ Block ]: \"\"\" Returns: Body of the function, if any. \"\"\" return self . _body child_functions () property # Returns: Type Description FrozenSet [ Union [ FunctionDefinition , VariableDeclaration ]] Functions that list this function in their base_functions property. Source code in woke/ast/ir/declaration/function_definition.py 479 480 481 482 483 484 485 486 487 @property def child_functions ( self , ) -> FrozenSet [ Union [ FunctionDefinition , VariableDeclaration ]]: \"\"\" Returns: Functions that list this function in their [base_functions][woke.ast.ir.declaration.function_definition.FunctionDefinition.base_functions] property. \"\"\" return frozenset ( self . _child_functions ) documentation () property # Of StructuredDocumentation type since Solidity 0.6.3. Returns: Type Description Optional [ Union [ StructuredDocumentation , str ]] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/function_definition.py 489 490 491 492 493 494 495 496 @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://solidity.readthedocs.io/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation function_selector () property # Is only set for Visibility.PUBLIC and Visibility.EXTERNAL functions of the FunctionKind.FUNCTION kind. Returns: Type Description Optional [ bytes ] Selector of the function. Source code in woke/ast/ir/declaration/function_definition.py 498 499 500 501 502 503 504 505 @property def function_selector ( self ) -> Optional [ bytes ]: \"\"\" Is only set for [Visibility.PUBLIC][woke.ast.enums.Visibility.PUBLIC] and [Visibility.EXTERNAL][woke.ast.enums.Visibility.EXTERNAL] functions of the [FunctionKind.FUNCTION][woke.ast.enums.FunctionKind.FUNCTION] kind. Returns: Selector of the function. \"\"\" return self . _function_selector implemented () property # Returns: Type Description bool True if the function body is not None , False otherwise. Source code in woke/ast/ir/declaration/function_definition.py 340 341 342 343 344 345 346 @property def implemented ( self ) -> bool : \"\"\" Returns: `True` if the function [body][woke.ast.ir.declaration.function_definition.FunctionDefinition.body] is not `None`, `False` otherwise. \"\"\" return self . _implemented kind () property # Returns: Type Description FunctionKind Kind of the function. Source code in woke/ast/ir/declaration/function_definition.py 348 349 350 351 352 353 354 @property def kind ( self ) -> FunctionKind : \"\"\" Returns: Kind of the function. \"\"\" return self . _kind modifiers () property # Also includes base constructor invocations. Example Both ERC20Token ( \"My Token\" , \"MTK\" , msg.sender , 10 ** 18 ) and initializer are listed by this property. contract MyToken is ERC20Token { constructor () ERC20Token ( \"My Token\" , \"MTK\" , msg.sender , 10 ** 18 ) initializer {} } Returns: Type Description Tuple [ ModifierInvocation ] List of modifiers applied to the function. Source code in woke/ast/ir/declaration/function_definition.py 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 @property def modifiers ( self ) -> Tuple [ ModifierInvocation ]: \"\"\" Also includes base constructor invocations. !!! example Both `:::solidity ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18)` and `initializer` are listed by this property. ```solidity contract MyToken is ERC20Token { constructor() ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18) initializer {} } ``` Returns: List of modifiers applied to the function. \"\"\" return tuple ( self . _modifiers ) overrides () property # Returns override specifier as present in the source code. Example I.foo on line 2 does not have an override specifier. A.foo on lines 6-8 has an override specifier with the overrides property empty. B.foo on lines 12-14 has an override specifier with the overrides property containg one item referencing the contract A ( ContractDefinition ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 interface I { function foo () external returns ( uint ); } contract A is I { function foo () external pure virtual override returns ( uint ) { return 1 ; } } contract B is A { function foo () external pure override ( A ) returns ( uint ) { return 2 ; } } Returns: Type Description Optional [ OverrideSpecifier ] Override specifier, if any. Source code in woke/ast/ir/declaration/function_definition.py 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specifier as present in the source code. !!! example `I.foo` on line 2 does not have an override specifier. `A.foo` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `B.foo` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg one item referencing the contract `A` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A is I { function foo() external pure virtual override returns(uint) { return 1; } } contract B is A { function foo() external pure override(A) returns(uint) { return 2; } } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides parameters () property # Returns: Type Description ParameterList Parameter list describing the function parameters. Source code in woke/ast/ir/declaration/function_definition.py 373 374 375 376 377 378 379 @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function parameters. \"\"\" return self . _parameters parent () property # Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/declaration/function_definition.py 255 256 257 258 259 260 261 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent return_parameters () property # Returns: Type Description ParameterList Parameter list describing the function return parameters. Source code in woke/ast/ir/declaration/function_definition.py 381 382 383 384 385 386 387 @property def return_parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function return parameters. \"\"\" return self . _return_parameters state_mutability () property # Returns: Type Description StateMutability State mutability of the function. Source code in woke/ast/ir/declaration/function_definition.py 389 390 391 392 393 394 395 @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function. \"\"\" return self . _state_mutability virtual () property # Returns: Type Description bool True if the function is virtual, False otherwise. Source code in woke/ast/ir/declaration/function_definition.py 397 398 399 400 401 402 403 @property def virtual ( self ) -> bool : \"\"\" Returns: `True` if the function is virtual, `False` otherwise. \"\"\" return self . _virtual visibility () property # Returns: Type Description Visibility Visibility of the function. Source code in woke/ast/ir/declaration/function_definition.py 405 406 407 408 409 410 411 @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the function. \"\"\" return self . _visibility","title":"Function definition"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition","text":"","title":"function_definition"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition","text":"Bases: DeclarationAbc Definition of a function. Example Free function (= outside of a contract): 1 2 3 function f ( uint a , uint b ) pure returns ( uint ) { return a + b ; } Function inside a contract (lines 2-4): 1 2 3 4 5 contract C { function f ( uint a , uint b ) public pure returns ( uint ) { return a + b ; } } Constructor (lines 3-5): 1 2 3 4 5 6 contract C { uint public x ; constructor ( uint a ) public { x = a ; } } Fallback function (line 2): 1 2 3 contract C { fallback () external payable {} } Receive function (line 2): 1 2 3 contract C { receive () external payable {} } Source code in woke/ast/ir/declaration/function_definition.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 394 395 396 397 398 399 400 401 402 403 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 478 479 480 481 482 483 484 485 486 487 488 489 490 491 492 493 494 495 496 497 498 499 500 501 502 503 504 505 506 507 508 509 510 511 512 513 514 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 547 548 549 550 551 552 553 554 555 class FunctionDefinition ( DeclarationAbc ): \"\"\" Definition of a function. !!! example Free function (= outside of a contract): ```solidity linenums=\"1\" function f(uint a, uint b) pure returns (uint) { return a + b; } ``` Function inside a contract (lines 2-4): ```solidity linenums=\"1\" contract C { function f(uint a, uint b) public pure returns (uint) { return a + b; } } ``` Constructor (lines 3-5): ```solidity linenums=\"1\" contract C { uint public x; constructor(uint a) public { x = a; } } ``` Fallback function (line 2): ```solidity linenums=\"1\" contract C { fallback() external payable {} } ``` Receive function (line 2): ```solidity linenums=\"1\" contract C { receive() external payable {} } ``` \"\"\" _ast_node : SolcFunctionDefinition _parent : Union [ ContractDefinition , SourceUnit ] _child_functions : Set [ Union [ FunctionDefinition , VariableDeclaration ]] _implemented : bool _kind : FunctionKind _modifiers : List [ ModifierInvocation ] _parameters : ParameterList _return_parameters : ParameterList # __scope _state_mutability : StateMutability _virtual : bool _visibility : Visibility _base_functions : List [ AstNodeId ] _documentation : Optional [ Union [ StructuredDocumentation , str ]] _function_selector : Optional [ bytes ] _body : Optional [ Block ] _overrides : Optional [ OverrideSpecifier ] def __init__ ( self , init : IrInitTuple , function : SolcFunctionDefinition , parent : SolidityAbc ): super () . __init__ ( init , function , parent ) self . _child_functions = set () self . _implemented = function . implemented self . _kind = function . kind if self . _kind == FunctionKind . CONSTRUCTOR : self . _name = \"constructor\" elif self . _kind == FunctionKind . FALLBACK : self . _name = \"fallback\" elif self . _kind == FunctionKind . RECEIVE : self . _name = \"receive\" self . _modifiers = [ ModifierInvocation ( init , modifier , self ) for modifier in function . modifiers ] self . _parameters = ParameterList ( init , function . parameters , self ) self . _return_parameters = ParameterList ( init , function . return_parameters , self ) # self.__scope = function.scope self . _state_mutability = function . state_mutability self . _virtual = function . virtual self . _visibility = function . visibility self . _base_functions = ( list ( function . base_functions ) if function . base_functions is not None else [] ) if function . documentation is None : self . _documentation = None elif isinstance ( function . documentation , SolcStructuredDocumentation ): self . _documentation = StructuredDocumentation ( init , function . documentation , self ) elif isinstance ( function . documentation , str ): self . _documentation = function . documentation else : raise TypeError ( f \"Unknown type of documentation: { type ( function . documentation ) } \" ) self . _function_selector = ( bytes . fromhex ( function . function_selector ) if function . function_selector else None ) if ( self . _visibility in { Visibility . PUBLIC , Visibility . EXTERNAL } and self . _kind == FunctionKind . FUNCTION ): assert self . _function_selector is not None else : assert self . _function_selector is None self . _body = Block ( init , function . body , self ) if function . body else None assert ( self . _body is not None ) == self . _implemented self . _overrides = ( OverrideSpecifier ( init , function . overrides , self ) if function . overrides else None ) self . _reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for modifier in self . _modifiers : yield from modifier yield from self . _parameters yield from self . _return_parameters if isinstance ( self . _documentation , StructuredDocumentation ): yield from self . _documentation if self . _body is not None : yield from self . _body if self . _overrides is not None : yield from self . _overrides def _post_process ( self , callback_params : CallbackParams ): base_functions = self . base_functions for base_function in base_functions : base_function . _child_functions . add ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , base_functions ) ) def _destroy ( self , base_functions : Tuple [ FunctionDefinition ]) -> None : for base_function in base_functions : base_function . _child_functions . remove ( self ) def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" FUNCTION_RE = re . compile ( r \"^\\s*function\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) CONSTRUCTOR_RE = re . compile ( r \"^\\s*(?P<name>constructor)\" . encode ( \"utf-8\" )) FALLBACK_RE = re . compile ( r \"^\\s*(?P<name>fallback)\" . encode ( \"utf-8\" )) RECEIVE_RE = re . compile ( r \"^\\s*(?P<name>receive)\" . encode ( \"utf-8\" )) regexps = [ FUNCTION_RE , CONSTRUCTOR_RE , FALLBACK_RE , RECEIVE_RE ] matches = [ regexp . match ( self . _source ) for regexp in regexps ] assert any ( matches ) byte_start = self . _ast_node . src . byte_offset match = next ( match for match in matches if match ) return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) def get_all_references ( self , include_declarations : bool ) -> Iterator [ Union [ DeclarationAbc , Identifier , IdentifierPathPart , MemberAccess , ExternalReference , ] ]: from .variable_declaration import VariableDeclaration processed_declarations : Set [ Union [ FunctionDefinition , VariableDeclaration ]] = { self } declarations_queue : Deque [ Union [ FunctionDefinition , VariableDeclaration ] ] = deque ([ self ]) while declarations_queue : declaration = declarations_queue . pop () if include_declarations : yield declaration yield from declaration . references if isinstance ( declaration , ( FunctionDefinition , VariableDeclaration )): for base_function in declaration . base_functions : if base_function not in processed_declarations : declarations_queue . append ( base_function ) processed_declarations . add ( base_function ) if isinstance ( declaration , FunctionDefinition ): for child_function in declaration . child_functions : if child_function not in processed_declarations : declarations_queue . append ( child_function ) processed_declarations . add ( child_function ) @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property @lru_cache ( maxsize = 2048 ) def canonical_name ( self ) -> str : from .contract_definition import ContractDefinition if isinstance ( self . _parent , ContractDefinition ): return f \" { self . _parent . canonical_name } . { self . _name } \" return self . name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : if self . kind == FunctionKind . CONSTRUCTOR : ret = \"constructor\" elif self . kind == FunctionKind . FALLBACK : ret = \"fallback\" elif self . kind == FunctionKind . RECEIVE : ret = \"receive\" else : ret = f \"function { self . name } \" ret += f \"( { ', ' . join ( parameter . declaration_string for parameter in self . parameters . parameters ) } )\" ret += f \" { self . visibility } \" ret += ( f \" { self . state_mutability } \" if self . state_mutability != StateMutability . NONPAYABLE else \"\" ) ret += f \" virtual\" if self . virtual else \"\" ret += ( ( f \" override\" + ( \"(\" + \", \" . join ( override . source for override in self . overrides . overrides ) + \")\" if len ( self . overrides . overrides ) > 0 else \"\" ) ) if self . overrides is not None else \"\" ) ret += ( ( \" \" + \" \" . join ( modifier . source for modifier in self . modifiers )) if len ( self . modifiers ) > 0 else \"\" ) ret += ( \" returns (\" + \", \" . join ( parameter . declaration_string for parameter in self . return_parameters . parameters ) + \")\" if len ( self . return_parameters . parameters ) > 0 else \"\" ) if isinstance ( self . documentation , StructuredDocumentation ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) elif isinstance ( self . documentation , str ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . splitlines ()) + \" \\n \" + ret ) else : return ret @property def implemented ( self ) -> bool : \"\"\" Returns: `True` if the function [body][woke.ast.ir.declaration.function_definition.FunctionDefinition.body] is not `None`, `False` otherwise. \"\"\" return self . _implemented @property def kind ( self ) -> FunctionKind : \"\"\" Returns: Kind of the function. \"\"\" return self . _kind @property def modifiers ( self ) -> Tuple [ ModifierInvocation ]: \"\"\" Also includes base constructor invocations. !!! example Both `:::solidity ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18)` and `initializer` are listed by this property. ```solidity contract MyToken is ERC20Token { constructor() ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18) initializer {} } ``` Returns: List of modifiers applied to the function. \"\"\" return tuple ( self . _modifiers ) @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function parameters. \"\"\" return self . _parameters @property def return_parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function return parameters. \"\"\" return self . _return_parameters @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function. \"\"\" return self . _state_mutability @property def virtual ( self ) -> bool : \"\"\" Returns: `True` if the function is virtual, `False` otherwise. \"\"\" return self . _virtual @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the function. \"\"\" return self . _visibility @property def base_functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" !!! example `A.foo` on lines 6-8 lists `I.foo` on line 2 as a base function. `B.foo` on lines 12-14 lists only `A.foo` on lines 6-8 as a base function. ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A is I { function foo() external pure virtual override returns(uint) { return 1; } } contract B is A { function foo() external pure override returns(uint) { return 2; } } ``` !!! example `A1.foo` on lines 6-8 lists `I.foo` on line 2 as a base function. `A2.foo` on lines 12-14 lists `I.foo` on line 2 as a base function. `B.foo` on lines 18-20 lists `A1.foo` on lines 6-8 and `A2.foo` on lines 12-14 as base functions. ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A1 is I { function foo() external pure virtual override returns(uint) { return 1; } } contract A2 is I { function foo() external pure virtual override returns(uint) { return 2; } } contract B is A1, A2 { function foo() external pure override(A1, A2) returns(uint) { return 3; } } ``` Returns: List of base functions overridden by this function. \"\"\" base_functions = [] for base_function_id in self . _base_functions : base_function = self . _reference_resolver . resolve_node ( base_function_id , self . _cu_hash ) assert isinstance ( base_function , FunctionDefinition ) base_functions . append ( base_function ) return tuple ( base_functions ) @property def child_functions ( self , ) -> FrozenSet [ Union [ FunctionDefinition , VariableDeclaration ]]: \"\"\" Returns: Functions that list this function in their [base_functions][woke.ast.ir.declaration.function_definition.FunctionDefinition.base_functions] property. \"\"\" return frozenset ( self . _child_functions ) @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://solidity.readthedocs.io/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def function_selector ( self ) -> Optional [ bytes ]: \"\"\" Is only set for [Visibility.PUBLIC][woke.ast.enums.Visibility.PUBLIC] and [Visibility.EXTERNAL][woke.ast.enums.Visibility.EXTERNAL] functions of the [FunctionKind.FUNCTION][woke.ast.enums.FunctionKind.FUNCTION] kind. Returns: Selector of the function. \"\"\" return self . _function_selector @property def body ( self ) -> Optional [ Block ]: \"\"\" Returns: Body of the function, if any. \"\"\" return self . _body @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specifier as present in the source code. !!! example `I.foo` on line 2 does not have an override specifier. `A.foo` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `B.foo` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg one item referencing the contract `A` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A is I { function foo() external pure virtual override returns(uint) { return 1; } } contract B is A { function foo() external pure override(A) returns(uint) { return 2; } } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides @property @lru_cache ( maxsize = 2048 ) def cfg ( self ) -> Optional [ ControlFlowGraph ]: from woke.analysis.cfg import ControlFlowGraph if self . body is None : return None return ControlFlowGraph ( self )","title":"FunctionDefinition"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.base_functions","text":"Example A.foo on lines 6-8 lists I.foo on line 2 as a base function. B.foo on lines 12-14 lists only A.foo on lines 6-8 as a base function. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 interface I { function foo () external returns ( uint ); } contract A is I { function foo () external pure virtual override returns ( uint ) { return 1 ; } } contract B is A { function foo () external pure override returns ( uint ) { return 2 ; } } Example A1.foo on lines 6-8 lists I.foo on line 2 as a base function. A2.foo on lines 12-14 lists I.foo on line 2 as a base function. B.foo on lines 18-20 lists A1.foo on lines 6-8 and A2.foo on lines 12-14 as base functions. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 interface I { function foo () external returns ( uint ); } contract A1 is I { function foo () external pure virtual override returns ( uint ) { return 1 ; } } contract A2 is I { function foo () external pure virtual override returns ( uint ) { return 2 ; } } contract B is A1 , A2 { function foo () external pure override ( A1 , A2 ) returns ( uint ) { return 3 ; } } Returns: Type Description Tuple [ FunctionDefinition ] List of base functions overridden by this function. Source code in woke/ast/ir/declaration/function_definition.py 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 435 436 437 438 439 440 441 442 443 444 445 446 447 448 449 450 451 452 453 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 471 472 473 474 475 476 477 @property def base_functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" !!! example `A.foo` on lines 6-8 lists `I.foo` on line 2 as a base function. `B.foo` on lines 12-14 lists only `A.foo` on lines 6-8 as a base function. ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A is I { function foo() external pure virtual override returns(uint) { return 1; } } contract B is A { function foo() external pure override returns(uint) { return 2; } } ``` !!! example `A1.foo` on lines 6-8 lists `I.foo` on line 2 as a base function. `A2.foo` on lines 12-14 lists `I.foo` on line 2 as a base function. `B.foo` on lines 18-20 lists `A1.foo` on lines 6-8 and `A2.foo` on lines 12-14 as base functions. ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A1 is I { function foo() external pure virtual override returns(uint) { return 1; } } contract A2 is I { function foo() external pure virtual override returns(uint) { return 2; } } contract B is A1, A2 { function foo() external pure override(A1, A2) returns(uint) { return 3; } } ``` Returns: List of base functions overridden by this function. \"\"\" base_functions = [] for base_function_id in self . _base_functions : base_function = self . _reference_resolver . resolve_node ( base_function_id , self . _cu_hash ) assert isinstance ( base_function , FunctionDefinition ) base_functions . append ( base_function ) return tuple ( base_functions )","title":"base_functions()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.body","text":"Returns: Type Description Optional [ Block ] Body of the function, if any. Source code in woke/ast/ir/declaration/function_definition.py 507 508 509 510 511 512 513 @property def body ( self ) -> Optional [ Block ]: \"\"\" Returns: Body of the function, if any. \"\"\" return self . _body","title":"body()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.child_functions","text":"Returns: Type Description FrozenSet [ Union [ FunctionDefinition , VariableDeclaration ]] Functions that list this function in their base_functions property. Source code in woke/ast/ir/declaration/function_definition.py 479 480 481 482 483 484 485 486 487 @property def child_functions ( self , ) -> FrozenSet [ Union [ FunctionDefinition , VariableDeclaration ]]: \"\"\" Returns: Functions that list this function in their [base_functions][woke.ast.ir.declaration.function_definition.FunctionDefinition.base_functions] property. \"\"\" return frozenset ( self . _child_functions )","title":"child_functions()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.documentation","text":"Of StructuredDocumentation type since Solidity 0.6.3. Returns: Type Description Optional [ Union [ StructuredDocumentation , str ]] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/function_definition.py 489 490 491 492 493 494 495 496 @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://solidity.readthedocs.io/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation","title":"documentation()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.function_selector","text":"Is only set for Visibility.PUBLIC and Visibility.EXTERNAL functions of the FunctionKind.FUNCTION kind. Returns: Type Description Optional [ bytes ] Selector of the function. Source code in woke/ast/ir/declaration/function_definition.py 498 499 500 501 502 503 504 505 @property def function_selector ( self ) -> Optional [ bytes ]: \"\"\" Is only set for [Visibility.PUBLIC][woke.ast.enums.Visibility.PUBLIC] and [Visibility.EXTERNAL][woke.ast.enums.Visibility.EXTERNAL] functions of the [FunctionKind.FUNCTION][woke.ast.enums.FunctionKind.FUNCTION] kind. Returns: Selector of the function. \"\"\" return self . _function_selector","title":"function_selector()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.implemented","text":"Returns: Type Description bool True if the function body is not None , False otherwise. Source code in woke/ast/ir/declaration/function_definition.py 340 341 342 343 344 345 346 @property def implemented ( self ) -> bool : \"\"\" Returns: `True` if the function [body][woke.ast.ir.declaration.function_definition.FunctionDefinition.body] is not `None`, `False` otherwise. \"\"\" return self . _implemented","title":"implemented()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.kind","text":"Returns: Type Description FunctionKind Kind of the function. Source code in woke/ast/ir/declaration/function_definition.py 348 349 350 351 352 353 354 @property def kind ( self ) -> FunctionKind : \"\"\" Returns: Kind of the function. \"\"\" return self . _kind","title":"kind()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.modifiers","text":"Also includes base constructor invocations. Example Both ERC20Token ( \"My Token\" , \"MTK\" , msg.sender , 10 ** 18 ) and initializer are listed by this property. contract MyToken is ERC20Token { constructor () ERC20Token ( \"My Token\" , \"MTK\" , msg.sender , 10 ** 18 ) initializer {} } Returns: Type Description Tuple [ ModifierInvocation ] List of modifiers applied to the function. Source code in woke/ast/ir/declaration/function_definition.py 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 @property def modifiers ( self ) -> Tuple [ ModifierInvocation ]: \"\"\" Also includes base constructor invocations. !!! example Both `:::solidity ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18)` and `initializer` are listed by this property. ```solidity contract MyToken is ERC20Token { constructor() ERC20Token(\"My Token\", \"MTK\", msg.sender, 10 ** 18) initializer {} } ``` Returns: List of modifiers applied to the function. \"\"\" return tuple ( self . _modifiers )","title":"modifiers()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.overrides","text":"Returns override specifier as present in the source code. Example I.foo on line 2 does not have an override specifier. A.foo on lines 6-8 has an override specifier with the overrides property empty. B.foo on lines 12-14 has an override specifier with the overrides property containg one item referencing the contract A ( ContractDefinition ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 interface I { function foo () external returns ( uint ); } contract A is I { function foo () external pure virtual override returns ( uint ) { return 1 ; } } contract B is A { function foo () external pure override ( A ) returns ( uint ) { return 2 ; } } Returns: Type Description Optional [ OverrideSpecifier ] Override specifier, if any. Source code in woke/ast/ir/declaration/function_definition.py 515 516 517 518 519 520 521 522 523 524 525 526 527 528 529 530 531 532 533 534 535 536 537 538 539 540 541 542 543 544 545 546 @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specifier as present in the source code. !!! example `I.foo` on line 2 does not have an override specifier. `A.foo` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `B.foo` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg one item referencing the contract `A` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" interface I { function foo() external returns(uint); } contract A is I { function foo() external pure virtual override returns(uint) { return 1; } } contract B is A { function foo() external pure override(A) returns(uint) { return 2; } } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides","title":"overrides()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.parameters","text":"Returns: Type Description ParameterList Parameter list describing the function parameters. Source code in woke/ast/ir/declaration/function_definition.py 373 374 375 376 377 378 379 @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function parameters. \"\"\" return self . _parameters","title":"parameters()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.parent","text":"Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/declaration/function_definition.py 255 256 257 258 259 260 261 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.return_parameters","text":"Returns: Type Description ParameterList Parameter list describing the function return parameters. Source code in woke/ast/ir/declaration/function_definition.py 381 382 383 384 385 386 387 @property def return_parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function return parameters. \"\"\" return self . _return_parameters","title":"return_parameters()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.state_mutability","text":"Returns: Type Description StateMutability State mutability of the function. Source code in woke/ast/ir/declaration/function_definition.py 389 390 391 392 393 394 395 @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function. \"\"\" return self . _state_mutability","title":"state_mutability()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.virtual","text":"Returns: Type Description bool True if the function is virtual, False otherwise. Source code in woke/ast/ir/declaration/function_definition.py 397 398 399 400 401 402 403 @property def virtual ( self ) -> bool : \"\"\" Returns: `True` if the function is virtual, `False` otherwise. \"\"\" return self . _virtual","title":"virtual()"},{"location":"api-reference/ir/declarations/function-definition/#woke.ast.ir.declaration.function_definition.FunctionDefinition.visibility","text":"Returns: Type Description Visibility Visibility of the function. Source code in woke/ast/ir/declaration/function_definition.py 405 406 407 408 409 410 411 @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the function. \"\"\" return self . _visibility","title":"visibility()"},{"location":"api-reference/ir/declarations/modifier-definition/","text":"woke.ast.ir.declaration.modifier_definition module # ModifierDefinition class # Bases: DeclarationAbc Definition of a modifier. Example modifier onlyOwner { require ( msg.sender == owner ); _ ; } Source code in woke/ast/ir/declaration/modifier_definition.pyclass ModifierDefinition ( DeclarationAbc ): \"\"\" Definition of a modifier. !!! example ```solidity modifier onlyOwner { require(msg.sender == owner); _; } ``` \"\"\" _ast_node : SolcModifierDefinition _parent : ContractDefinition _child_modifiers : Set [ ModifierDefinition ] _body : Optional [ Block ] _implemented : bool _parameters : ParameterList _virtual : bool _visibility : Visibility _base_modifiers : List [ AstNodeId ] _documentation : Optional [ Union [ StructuredDocumentation , str ]] _overrides : Optional [ OverrideSpecifier ] def __init__ ( self , init : IrInitTuple , modifier : SolcModifierDefinition , parent : SolidityAbc ): super () . __init__ ( init , modifier , parent ) self . _child_modifiers = set () self . _body = Block ( init , modifier . body , self ) if modifier . body else None self . _implemented = self . _body is not None self . _parameters = ParameterList ( init , modifier . parameters , self ) self . _virtual = modifier . virtual self . _visibility = modifier . visibility self . _base_modifiers = ( list ( modifier . base_modifiers ) if modifier . base_modifiers is not None else [] ) if modifier . documentation is None : self . _documentation = None elif isinstance ( modifier . documentation , SolcStructuredDocumentation ): self . _documentation = StructuredDocumentation ( init , modifier . documentation , self ) elif isinstance ( modifier . documentation , str ): self . _documentation = modifier . documentation else : raise TypeError ( f \"Unknown type of documentation: { type ( modifier . documentation ) } \" ) self . _overrides = ( OverrideSpecifier ( init , modifier . overrides , self ) if modifier . overrides is not None else None ) self . _reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _body is not None : yield from self . _body yield from self . _parameters if isinstance ( self . _documentation , StructuredDocumentation ): yield from self . _documentation if self . _overrides is not None : yield from self . _overrides def _post_process ( self , callback_params : CallbackParams ): base_modifiers = self . base_modifiers for base_modifier in base_modifiers : base_modifier . _child_modifiers . add ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , base_modifiers ) ) def _destroy ( self , base_modifiers : Tuple [ ModifierDefinition ]) -> None : for base_modifier in base_modifiers : base_modifier . _child_modifiers . remove ( self ) def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" MODIFIER_RE = re . compile ( r \"^\\s*modifier\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = MODIFIER_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) def get_all_references ( self , include_declarations : bool ) -> Iterator [ Union [ DeclarationAbc , Identifier , IdentifierPathPart , MemberAccess , ExternalReference , ] ]: processed_declarations : Set [ ModifierDefinition ] = { self } declarations_queue : Deque [ ModifierDefinition ] = deque ([ self ]) while declarations_queue : declaration = declarations_queue . pop () if include_declarations : yield declaration yield from declaration . references for base_modifier in declaration . base_modifiers : if base_modifier not in processed_declarations : declarations_queue . append ( base_modifier ) processed_declarations . add ( base_modifier ) for child_modifier in declaration . child_modifiers : if child_modifier not in processed_declarations : declarations_queue . append ( child_modifier ) processed_declarations . add ( child_modifier ) @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return f \" { self . _parent . canonical_name } . { self . _name } \" @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = f \"modifier { self . _name } \" ret += ( f \"( { ', ' . join ( param . declaration_string for param in self . parameters . parameters ) } )\" if len ( self . parameters . parameters ) > 0 else \"\" ) ret += \" virtual\" if self . virtual else \"\" ret += ( ( f \" override\" + ( \"(\" + \", \" . join ( override . source for override in self . overrides . overrides ) + \")\" if len ( self . overrides . overrides ) > 0 else \"\" ) ) if self . overrides is not None else \"\" ) if isinstance ( self . documentation , StructuredDocumentation ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) elif isinstance ( self . documentation , str ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . splitlines ()) + \" \\n \" + ret ) else : return ret @property def body ( self ) -> Optional [ Block ]: \"\"\" Returns: Body of the modifier, if any. \"\"\" return self . _body @property def implemented ( self ) -> bool : \"\"\" Returns: `True` if the modifier [body][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.body] is not `None`, `False` otherwise. \"\"\" return self . _implemented @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the modifier parameters. \"\"\" return self . _parameters @property def virtual ( self ) -> bool : \"\"\" Returns: `True` if the modifier is virtual, `False` otherwise. \"\"\" return self . _virtual @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the modifier. \"\"\" return self . _visibility @property def base_modifiers ( self ) -> Tuple [ ModifierDefinition ]: \"\"\" !!! example `B.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier. `C.mod` on lines 12-14 lists only `B.mod` on lines 6-8 as a base modifier. ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B is A { modifier mod virtual override { _; } } contract C is B { modifier mod override { _; } } ``` !!! example `B1.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier. `B2.mod` on lines 12-14 lists `A.mod` on line 2 as a base modifier. `C.mod` on lines 18-20 lists `B1.mod` on lines 6-8 and `B2.mod` on lines 12-14 as base modifiers. ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B1 is A { modifier mod virtual override { _; } } contract B2 is A { modifier mod virtual override { _; } } contract C is B1, B2 { modifier mod override(B1, B2) { _; } } ``` Returns: List of base modifiers overridden by this modifier. \"\"\" base_modifiers = [] for base_modifier_id in self . _base_modifiers : base_modifier = self . _reference_resolver . resolve_node ( base_modifier_id , self . _cu_hash ) assert isinstance ( base_modifier , ModifierDefinition ) base_modifiers . append ( base_modifier ) return tuple ( base_modifiers ) @property def child_modifiers ( self ) -> FrozenSet [ ModifierDefinition ]: \"\"\" Returns: Modifiers that list this modifier in their [base_modifiers][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.base_modifiers] property. \"\"\" return frozenset ( self . _child_modifiers ) @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specifier as present in the source code. !!! example `A.mod` on line 2 does not have an override specifier. `B1.mod` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `B2.mod` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `C.mod` on lines 18-20 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg two items referencing the contracts `B1` and `B2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B1 is A { modifier mod virtual override { _; } } contract B2 is A { modifier mod virtual override { _; } } contract C is B1, B2 { modifier mod override(B1, B2) { _; } } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides @property @lru_cache ( maxsize = 2048 ) def cfg ( self ) -> Optional [ ControlFlowGraph ]: from woke.analysis.cfg import ControlFlowGraph if self . body is None : return None return ControlFlowGraph ( self ) base_modifiers () property # Example B.mod on lines 6-8 lists A.mod on line 2 as a base modifier. C.mod on lines 12-14 lists only B.mod on lines 6-8 as a base modifier. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 abstract contract A { modifier mod virtual ; } contract B is A { modifier mod virtual override { _ ; } } contract C is B { modifier mod override { _ ; } } Example B1.mod on lines 6-8 lists A.mod on line 2 as a base modifier. B2.mod on lines 12-14 lists A.mod on line 2 as a base modifier. C.mod on lines 18-20 lists B1.mod on lines 6-8 and B2.mod on lines 12-14 as base modifiers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 abstract contract A { modifier mod virtual ; } contract B1 is A { modifier mod virtual override { _ ; } } contract B2 is A { modifier mod virtual override { _ ; } } contract C is B1 , B2 { modifier mod override ( B1 , B2 ) { _ ; } } Returns: Type Description Tuple [ ModifierDefinition ] List of base modifiers overridden by this modifier. Source code in woke/ast/ir/declaration/modifier_definition.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 @property def base_modifiers ( self ) -> Tuple [ ModifierDefinition ]: \"\"\" !!! example `B.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier. `C.mod` on lines 12-14 lists only `B.mod` on lines 6-8 as a base modifier. ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B is A { modifier mod virtual override { _; } } contract C is B { modifier mod override { _; } } ``` !!! example `B1.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier. `B2.mod` on lines 12-14 lists `A.mod` on line 2 as a base modifier. `C.mod` on lines 18-20 lists `B1.mod` on lines 6-8 and `B2.mod` on lines 12-14 as base modifiers. ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B1 is A { modifier mod virtual override { _; } } contract B2 is A { modifier mod virtual override { _; } } contract C is B1, B2 { modifier mod override(B1, B2) { _; } } ``` Returns: List of base modifiers overridden by this modifier. \"\"\" base_modifiers = [] for base_modifier_id in self . _base_modifiers : base_modifier = self . _reference_resolver . resolve_node ( base_modifier_id , self . _cu_hash ) assert isinstance ( base_modifier , ModifierDefinition ) base_modifiers . append ( base_modifier ) return tuple ( base_modifiers ) body () property # Returns: Type Description Optional [ Block ] Body of the modifier, if any. Source code in woke/ast/ir/declaration/modifier_definition.py 222 223 224 225 226 227 228 @property def body ( self ) -> Optional [ Block ]: \"\"\" Returns: Body of the modifier, if any. \"\"\" return self . _body child_modifiers () property # Returns: Type Description FrozenSet [ ModifierDefinition ] Modifiers that list this modifier in their base_modifiers property. Source code in woke/ast/ir/declaration/modifier_definition.py 328 329 330 331 332 333 334 @property def child_modifiers ( self ) -> FrozenSet [ ModifierDefinition ]: \"\"\" Returns: Modifiers that list this modifier in their [base_modifiers][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.base_modifiers] property. \"\"\" return frozenset ( self . _child_modifiers ) documentation () property # Of StructuredDocumentation type since Solidity 0.6.3. Returns: Type Description Optional [ Union [ StructuredDocumentation , str ]] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/modifier_definition.py 336 337 338 339 340 341 342 343 @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation implemented () property # Returns: Type Description bool True if the modifier body is not None , False otherwise. Source code in woke/ast/ir/declaration/modifier_definition.py 230 231 232 233 234 235 236 @property def implemented ( self ) -> bool : \"\"\" Returns: `True` if the modifier [body][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.body] is not `None`, `False` otherwise. \"\"\" return self . _implemented overrides () property # Returns override specifier as present in the source code. Example A.mod on line 2 does not have an override specifier. B1.mod on lines 6-8 has an override specifier with the overrides property empty. B2.mod on lines 12-14 has an override specifier with the overrides property empty. C.mod on lines 18-20 has an override specifier with the overrides property containg two items referencing the contracts B1 and B2 ( ContractDefinition ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 abstract contract A { modifier mod virtual ; } contract B1 is A { modifier mod virtual override { _ ; } } contract B2 is A { modifier mod virtual override { _ ; } } contract C is B1 , B2 { modifier mod override ( B1 , B2 ) { _ ; } } Returns: Type Description Optional [ OverrideSpecifier ] Override specifier, if any. Source code in woke/ast/ir/declaration/modifier_definition.py 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specifier as present in the source code. !!! example `A.mod` on line 2 does not have an override specifier. `B1.mod` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `B2.mod` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `C.mod` on lines 18-20 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg two items referencing the contracts `B1` and `B2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B1 is A { modifier mod virtual override { _; } } contract B2 is A { modifier mod virtual override { _; } } contract C is B1, B2 { modifier mod override(B1, B2) { _; } } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides parameters () property # Returns: Type Description ParameterList Parameter list describing the modifier parameters. Source code in woke/ast/ir/declaration/modifier_definition.py 238 239 240 241 242 243 244 @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the modifier parameters. \"\"\" return self . _parameters parent () property # Returns: Type Description ContractDefinition Parent IR node. Source code in woke/ast/ir/declaration/modifier_definition.py 166 167 168 169 170 171 172 @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent virtual () property # Returns: Type Description bool True if the modifier is virtual, False otherwise. Source code in woke/ast/ir/declaration/modifier_definition.py 246 247 248 249 250 251 252 @property def virtual ( self ) -> bool : \"\"\" Returns: `True` if the modifier is virtual, `False` otherwise. \"\"\" return self . _virtual visibility () property # Returns: Type Description Visibility Visibility of the modifier. Source code in woke/ast/ir/declaration/modifier_definition.py 254 255 256 257 258 259 260 @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the modifier. \"\"\" return self . _visibility","title":"Modifier definition"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition","text":"","title":"modifier_definition"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition","text":"Bases: DeclarationAbc Definition of a modifier. Example modifier onlyOwner { require ( msg.sender == owner ); _ ; } Source code in woke/ast/ir/declaration/modifier_definition.py 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 327 328 329 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 385 386 387 388 389 390 391 392 393 class ModifierDefinition ( DeclarationAbc ): \"\"\" Definition of a modifier. !!! example ```solidity modifier onlyOwner { require(msg.sender == owner); _; } ``` \"\"\" _ast_node : SolcModifierDefinition _parent : ContractDefinition _child_modifiers : Set [ ModifierDefinition ] _body : Optional [ Block ] _implemented : bool _parameters : ParameterList _virtual : bool _visibility : Visibility _base_modifiers : List [ AstNodeId ] _documentation : Optional [ Union [ StructuredDocumentation , str ]] _overrides : Optional [ OverrideSpecifier ] def __init__ ( self , init : IrInitTuple , modifier : SolcModifierDefinition , parent : SolidityAbc ): super () . __init__ ( init , modifier , parent ) self . _child_modifiers = set () self . _body = Block ( init , modifier . body , self ) if modifier . body else None self . _implemented = self . _body is not None self . _parameters = ParameterList ( init , modifier . parameters , self ) self . _virtual = modifier . virtual self . _visibility = modifier . visibility self . _base_modifiers = ( list ( modifier . base_modifiers ) if modifier . base_modifiers is not None else [] ) if modifier . documentation is None : self . _documentation = None elif isinstance ( modifier . documentation , SolcStructuredDocumentation ): self . _documentation = StructuredDocumentation ( init , modifier . documentation , self ) elif isinstance ( modifier . documentation , str ): self . _documentation = modifier . documentation else : raise TypeError ( f \"Unknown type of documentation: { type ( modifier . documentation ) } \" ) self . _overrides = ( OverrideSpecifier ( init , modifier . overrides , self ) if modifier . overrides is not None else None ) self . _reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _body is not None : yield from self . _body yield from self . _parameters if isinstance ( self . _documentation , StructuredDocumentation ): yield from self . _documentation if self . _overrides is not None : yield from self . _overrides def _post_process ( self , callback_params : CallbackParams ): base_modifiers = self . base_modifiers for base_modifier in base_modifiers : base_modifier . _child_modifiers . add ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , base_modifiers ) ) def _destroy ( self , base_modifiers : Tuple [ ModifierDefinition ]) -> None : for base_modifier in base_modifiers : base_modifier . _child_modifiers . remove ( self ) def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" MODIFIER_RE = re . compile ( r \"^\\s*modifier\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = MODIFIER_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) def get_all_references ( self , include_declarations : bool ) -> Iterator [ Union [ DeclarationAbc , Identifier , IdentifierPathPart , MemberAccess , ExternalReference , ] ]: processed_declarations : Set [ ModifierDefinition ] = { self } declarations_queue : Deque [ ModifierDefinition ] = deque ([ self ]) while declarations_queue : declaration = declarations_queue . pop () if include_declarations : yield declaration yield from declaration . references for base_modifier in declaration . base_modifiers : if base_modifier not in processed_declarations : declarations_queue . append ( base_modifier ) processed_declarations . add ( base_modifier ) for child_modifier in declaration . child_modifiers : if child_modifier not in processed_declarations : declarations_queue . append ( child_modifier ) processed_declarations . add ( child_modifier ) @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return f \" { self . _parent . canonical_name } . { self . _name } \" @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = f \"modifier { self . _name } \" ret += ( f \"( { ', ' . join ( param . declaration_string for param in self . parameters . parameters ) } )\" if len ( self . parameters . parameters ) > 0 else \"\" ) ret += \" virtual\" if self . virtual else \"\" ret += ( ( f \" override\" + ( \"(\" + \", \" . join ( override . source for override in self . overrides . overrides ) + \")\" if len ( self . overrides . overrides ) > 0 else \"\" ) ) if self . overrides is not None else \"\" ) if isinstance ( self . documentation , StructuredDocumentation ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) elif isinstance ( self . documentation , str ): return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . splitlines ()) + \" \\n \" + ret ) else : return ret @property def body ( self ) -> Optional [ Block ]: \"\"\" Returns: Body of the modifier, if any. \"\"\" return self . _body @property def implemented ( self ) -> bool : \"\"\" Returns: `True` if the modifier [body][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.body] is not `None`, `False` otherwise. \"\"\" return self . _implemented @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the modifier parameters. \"\"\" return self . _parameters @property def virtual ( self ) -> bool : \"\"\" Returns: `True` if the modifier is virtual, `False` otherwise. \"\"\" return self . _virtual @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the modifier. \"\"\" return self . _visibility @property def base_modifiers ( self ) -> Tuple [ ModifierDefinition ]: \"\"\" !!! example `B.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier. `C.mod` on lines 12-14 lists only `B.mod` on lines 6-8 as a base modifier. ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B is A { modifier mod virtual override { _; } } contract C is B { modifier mod override { _; } } ``` !!! example `B1.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier. `B2.mod` on lines 12-14 lists `A.mod` on line 2 as a base modifier. `C.mod` on lines 18-20 lists `B1.mod` on lines 6-8 and `B2.mod` on lines 12-14 as base modifiers. ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B1 is A { modifier mod virtual override { _; } } contract B2 is A { modifier mod virtual override { _; } } contract C is B1, B2 { modifier mod override(B1, B2) { _; } } ``` Returns: List of base modifiers overridden by this modifier. \"\"\" base_modifiers = [] for base_modifier_id in self . _base_modifiers : base_modifier = self . _reference_resolver . resolve_node ( base_modifier_id , self . _cu_hash ) assert isinstance ( base_modifier , ModifierDefinition ) base_modifiers . append ( base_modifier ) return tuple ( base_modifiers ) @property def child_modifiers ( self ) -> FrozenSet [ ModifierDefinition ]: \"\"\" Returns: Modifiers that list this modifier in their [base_modifiers][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.base_modifiers] property. \"\"\" return frozenset ( self . _child_modifiers ) @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specifier as present in the source code. !!! example `A.mod` on line 2 does not have an override specifier. `B1.mod` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `B2.mod` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `C.mod` on lines 18-20 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg two items referencing the contracts `B1` and `B2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B1 is A { modifier mod virtual override { _; } } contract B2 is A { modifier mod virtual override { _; } } contract C is B1, B2 { modifier mod override(B1, B2) { _; } } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides @property @lru_cache ( maxsize = 2048 ) def cfg ( self ) -> Optional [ ControlFlowGraph ]: from woke.analysis.cfg import ControlFlowGraph if self . body is None : return None return ControlFlowGraph ( self )","title":"ModifierDefinition"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.base_modifiers","text":"Example B.mod on lines 6-8 lists A.mod on line 2 as a base modifier. C.mod on lines 12-14 lists only B.mod on lines 6-8 as a base modifier. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 abstract contract A { modifier mod virtual ; } contract B is A { modifier mod virtual override { _ ; } } contract C is B { modifier mod override { _ ; } } Example B1.mod on lines 6-8 lists A.mod on line 2 as a base modifier. B2.mod on lines 12-14 lists A.mod on line 2 as a base modifier. C.mod on lines 18-20 lists B1.mod on lines 6-8 and B2.mod on lines 12-14 as base modifiers. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 abstract contract A { modifier mod virtual ; } contract B1 is A { modifier mod virtual override { _ ; } } contract B2 is A { modifier mod virtual override { _ ; } } contract C is B1 , B2 { modifier mod override ( B1 , B2 ) { _ ; } } Returns: Type Description Tuple [ ModifierDefinition ] List of base modifiers overridden by this modifier. Source code in woke/ast/ir/declaration/modifier_definition.py 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 285 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 304 305 306 307 308 309 310 311 312 313 314 315 316 317 318 319 320 321 322 323 324 325 326 @property def base_modifiers ( self ) -> Tuple [ ModifierDefinition ]: \"\"\" !!! example `B.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier. `C.mod` on lines 12-14 lists only `B.mod` on lines 6-8 as a base modifier. ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B is A { modifier mod virtual override { _; } } contract C is B { modifier mod override { _; } } ``` !!! example `B1.mod` on lines 6-8 lists `A.mod` on line 2 as a base modifier. `B2.mod` on lines 12-14 lists `A.mod` on line 2 as a base modifier. `C.mod` on lines 18-20 lists `B1.mod` on lines 6-8 and `B2.mod` on lines 12-14 as base modifiers. ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B1 is A { modifier mod virtual override { _; } } contract B2 is A { modifier mod virtual override { _; } } contract C is B1, B2 { modifier mod override(B1, B2) { _; } } ``` Returns: List of base modifiers overridden by this modifier. \"\"\" base_modifiers = [] for base_modifier_id in self . _base_modifiers : base_modifier = self . _reference_resolver . resolve_node ( base_modifier_id , self . _cu_hash ) assert isinstance ( base_modifier , ModifierDefinition ) base_modifiers . append ( base_modifier ) return tuple ( base_modifiers )","title":"base_modifiers()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.body","text":"Returns: Type Description Optional [ Block ] Body of the modifier, if any. Source code in woke/ast/ir/declaration/modifier_definition.py 222 223 224 225 226 227 228 @property def body ( self ) -> Optional [ Block ]: \"\"\" Returns: Body of the modifier, if any. \"\"\" return self . _body","title":"body()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.child_modifiers","text":"Returns: Type Description FrozenSet [ ModifierDefinition ] Modifiers that list this modifier in their base_modifiers property. Source code in woke/ast/ir/declaration/modifier_definition.py 328 329 330 331 332 333 334 @property def child_modifiers ( self ) -> FrozenSet [ ModifierDefinition ]: \"\"\" Returns: Modifiers that list this modifier in their [base_modifiers][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.base_modifiers] property. \"\"\" return frozenset ( self . _child_modifiers )","title":"child_modifiers()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.documentation","text":"Of StructuredDocumentation type since Solidity 0.6.3. Returns: Type Description Optional [ Union [ StructuredDocumentation , str ]] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/modifier_definition.py 336 337 338 339 340 341 342 343 @property def documentation ( self ) -> Optional [ Union [ StructuredDocumentation , str ]]: \"\"\" Of [StructuredDocumentation][woke.ast.ir.meta.structured_documentation.StructuredDocumentation] type since Solidity 0.6.3. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation","title":"documentation()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.implemented","text":"Returns: Type Description bool True if the modifier body is not None , False otherwise. Source code in woke/ast/ir/declaration/modifier_definition.py 230 231 232 233 234 235 236 @property def implemented ( self ) -> bool : \"\"\" Returns: `True` if the modifier [body][woke.ast.ir.declaration.modifier_definition.ModifierDefinition.body] is not `None`, `False` otherwise. \"\"\" return self . _implemented","title":"implemented()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.overrides","text":"Returns override specifier as present in the source code. Example A.mod on line 2 does not have an override specifier. B1.mod on lines 6-8 has an override specifier with the overrides property empty. B2.mod on lines 12-14 has an override specifier with the overrides property empty. C.mod on lines 18-20 has an override specifier with the overrides property containg two items referencing the contracts B1 and B2 ( ContractDefinition ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 abstract contract A { modifier mod virtual ; } contract B1 is A { modifier mod virtual override { _ ; } } contract B2 is A { modifier mod virtual override { _ ; } } contract C is B1 , B2 { modifier mod override ( B1 , B2 ) { _ ; } } Returns: Type Description Optional [ OverrideSpecifier ] Override specifier, if any. Source code in woke/ast/ir/declaration/modifier_definition.py 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 378 379 380 381 382 383 384 @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specifier as present in the source code. !!! example `A.mod` on line 2 does not have an override specifier. `B1.mod` on lines 6-8 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `B2.mod` on lines 12-14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property empty. `C.mod` on lines 18-20 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containg two items referencing the contracts `B1` and `B2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" abstract contract A { modifier mod virtual; } contract B1 is A { modifier mod virtual override { _; } } contract B2 is A { modifier mod virtual override { _; } } contract C is B1, B2 { modifier mod override(B1, B2) { _; } } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides","title":"overrides()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.parameters","text":"Returns: Type Description ParameterList Parameter list describing the modifier parameters. Source code in woke/ast/ir/declaration/modifier_definition.py 238 239 240 241 242 243 244 @property def parameters ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the modifier parameters. \"\"\" return self . _parameters","title":"parameters()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.parent","text":"Returns: Type Description ContractDefinition Parent IR node. Source code in woke/ast/ir/declaration/modifier_definition.py 166 167 168 169 170 171 172 @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.virtual","text":"Returns: Type Description bool True if the modifier is virtual, False otherwise. Source code in woke/ast/ir/declaration/modifier_definition.py 246 247 248 249 250 251 252 @property def virtual ( self ) -> bool : \"\"\" Returns: `True` if the modifier is virtual, `False` otherwise. \"\"\" return self . _virtual","title":"virtual()"},{"location":"api-reference/ir/declarations/modifier-definition/#woke.ast.ir.declaration.modifier_definition.ModifierDefinition.visibility","text":"Returns: Type Description Visibility Visibility of the modifier. Source code in woke/ast/ir/declaration/modifier_definition.py 254 255 256 257 258 259 260 @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the modifier. \"\"\" return self . _visibility","title":"visibility()"},{"location":"api-reference/ir/declarations/struct-definition/","text":"woke.ast.ir.declaration.struct_definition module # StructDefinition class # Bases: DeclarationAbc Definition of a struct. Example struct S { uint a ; uint b ; } Source code in woke/ast/ir/declaration/struct_definition.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class StructDefinition ( DeclarationAbc ): \"\"\" Definition of a struct. !!! example ```solidity struct S { uint a; uint b; } ``` \"\"\" _ast_node : SolcStructDefinition _parent : Union [ ContractDefinition , SourceUnit ] _canonical_name : str _members : List [ VariableDeclaration ] _visibility : Visibility def __init__ ( self , init : IrInitTuple , struct_definition : SolcStructDefinition , parent : SolidityAbc , ): super () . __init__ ( init , struct_definition , parent ) self . _canonical_name = struct_definition . canonical_name # TODO scope self . _visibility = struct_definition . visibility self . _members = [] for member in struct_definition . members : self . _members . append ( VariableDeclaration ( init , member , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for member in self . _members : yield from member def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" STRUCT_RE = re . compile ( r \"^\\s*struct\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = STRUCT_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return self . _canonical_name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : return ( f \"struct { self . name } \" + \" { \\n \" + \"; \\n \" . join ( f \" { member . declaration_string } \" for member in self . _members ) + \"; \\n }\" ) @property def members ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Returns: Tuple of member variable declarations. \"\"\" return tuple ( self . _members ) members () property # Returns: Type Description Tuple [ VariableDeclaration ] Tuple of member variable declarations. Source code in woke/ast/ir/declaration/struct_definition.py 95 96 97 98 99 100 101 @property def members ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Returns: Tuple of member variable declarations. \"\"\" return tuple ( self . _members ) parent () property # Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/declaration/struct_definition.py 73 74 75 76 77 78 79 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Struct definition"},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition","text":"","title":"struct_definition"},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition.StructDefinition","text":"Bases: DeclarationAbc Definition of a struct. Example struct S { uint a ; uint b ; } Source code in woke/ast/ir/declaration/struct_definition.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class StructDefinition ( DeclarationAbc ): \"\"\" Definition of a struct. !!! example ```solidity struct S { uint a; uint b; } ``` \"\"\" _ast_node : SolcStructDefinition _parent : Union [ ContractDefinition , SourceUnit ] _canonical_name : str _members : List [ VariableDeclaration ] _visibility : Visibility def __init__ ( self , init : IrInitTuple , struct_definition : SolcStructDefinition , parent : SolidityAbc , ): super () . __init__ ( init , struct_definition , parent ) self . _canonical_name = struct_definition . canonical_name # TODO scope self . _visibility = struct_definition . visibility self . _members = [] for member in struct_definition . members : self . _members . append ( VariableDeclaration ( init , member , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for member in self . _members : yield from member def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" STRUCT_RE = re . compile ( r \"^\\s*struct\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = STRUCT_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def canonical_name ( self ) -> str : return self . _canonical_name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : return ( f \"struct { self . name } \" + \" { \\n \" + \"; \\n \" . join ( f \" { member . declaration_string } \" for member in self . _members ) + \"; \\n }\" ) @property def members ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Returns: Tuple of member variable declarations. \"\"\" return tuple ( self . _members )","title":"StructDefinition"},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition.StructDefinition.members","text":"Returns: Type Description Tuple [ VariableDeclaration ] Tuple of member variable declarations. Source code in woke/ast/ir/declaration/struct_definition.py 95 96 97 98 99 100 101 @property def members ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Returns: Tuple of member variable declarations. \"\"\" return tuple ( self . _members )","title":"members()"},{"location":"api-reference/ir/declarations/struct-definition/#woke.ast.ir.declaration.struct_definition.StructDefinition.parent","text":"Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/declaration/struct_definition.py 73 74 75 76 77 78 79 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/","text":"woke.ast.ir.declaration.user_defined_value_type_definition module # UserDefinedValueTypeDefinition class # Bases: DeclarationAbc Definition of a user defined value type. Example type MyInt is uint ; Source code in woke/ast/ir/declaration/user_defined_value_type_definition.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 class UserDefinedValueTypeDefinition ( DeclarationAbc ): \"\"\" Definition of a user defined value type. !!! example ```solidity type MyInt is uint; ``` \"\"\" _ast_node : SolcUserDefinedValueTypeDefinition _parent : Union [ ContractDefinition , SourceUnit ] _underlying_type : ElementaryTypeName def __init__ ( self , init : IrInitTuple , user_defined_value_type_definition : SolcUserDefinedValueTypeDefinition , parent : SolidityAbc , ): super () . __init__ ( init , user_defined_value_type_definition , parent ) self . _underlying_type = ElementaryTypeName ( init , user_defined_value_type_definition . underlying_type , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _underlying_type def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" USER_DEF_VAL_TYPE_RE = re . compile ( r \"^\\s*type\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = USER_DEF_VAL_TYPE_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property @lru_cache ( maxsize = 2048 ) def canonical_name ( self ) -> str : from .contract_definition import ContractDefinition if isinstance ( self . _parent , ContractDefinition ): return f \" { self . _parent . canonical_name } . { self . _name } \" return self . _name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : return f \"type { self . name } is { self . _underlying_type . source } \" @property def underlying_type ( self ) -> ElementaryTypeName : \"\"\" Returns: Underlying type of the user defined value type. \"\"\" return self . _underlying_type parent () property # Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/declaration/user_defined_value_type_definition.py 62 63 64 65 66 67 68 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent underlying_type () property # Returns: Type Description ElementaryTypeName Underlying type of the user defined value type. Source code in woke/ast/ir/declaration/user_defined_value_type_definition.py 84 85 86 87 88 89 90 @property def underlying_type ( self ) -> ElementaryTypeName : \"\"\" Returns: Underlying type of the user defined value type. \"\"\" return self . _underlying_type","title":"User defined value type definition"},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/#woke.ast.ir.declaration.user_defined_value_type_definition","text":"","title":"user_defined_value_type_definition"},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/#woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition","text":"Bases: DeclarationAbc Definition of a user defined value type. Example type MyInt is uint ; Source code in woke/ast/ir/declaration/user_defined_value_type_definition.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 class UserDefinedValueTypeDefinition ( DeclarationAbc ): \"\"\" Definition of a user defined value type. !!! example ```solidity type MyInt is uint; ``` \"\"\" _ast_node : SolcUserDefinedValueTypeDefinition _parent : Union [ ContractDefinition , SourceUnit ] _underlying_type : ElementaryTypeName def __init__ ( self , init : IrInitTuple , user_defined_value_type_definition : SolcUserDefinedValueTypeDefinition , parent : SolidityAbc , ): super () . __init__ ( init , user_defined_value_type_definition , parent ) self . _underlying_type = ElementaryTypeName ( init , user_defined_value_type_definition . underlying_type , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _underlying_type def _parse_name_location ( self ) -> Tuple [ int , int ]: IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" USER_DEF_VAL_TYPE_RE = re . compile ( r \"^\\s*type\\s+(?P<name> {identifier} )\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) byte_start = self . _ast_node . src . byte_offset match = USER_DEF_VAL_TYPE_RE . match ( self . _source ) assert match return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property @lru_cache ( maxsize = 2048 ) def canonical_name ( self ) -> str : from .contract_definition import ContractDefinition if isinstance ( self . _parent , ContractDefinition ): return f \" { self . _parent . canonical_name } . { self . _name } \" return self . _name @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : return f \"type { self . name } is { self . _underlying_type . source } \" @property def underlying_type ( self ) -> ElementaryTypeName : \"\"\" Returns: Underlying type of the user defined value type. \"\"\" return self . _underlying_type","title":"UserDefinedValueTypeDefinition"},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/#woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition.parent","text":"Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/declaration/user_defined_value_type_definition.py 62 63 64 65 66 67 68 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/user-defined-value-type-definition/#woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition.underlying_type","text":"Returns: Type Description ElementaryTypeName Underlying type of the user defined value type. Source code in woke/ast/ir/declaration/user_defined_value_type_definition.py 84 85 86 87 88 89 90 @property def underlying_type ( self ) -> ElementaryTypeName : \"\"\" Returns: Underlying type of the user defined value type. \"\"\" return self . _underlying_type","title":"underlying_type()"},{"location":"api-reference/ir/declarations/variable-declaration/","text":"woke.ast.ir.declaration.variable_declaration module # VariableDeclaration class # Bases: DeclarationAbc Example A variable can be declared: inside a ContractDefinition as a state variable: uint public stateVar in line 4, inside a ParameterList : in an ErrorDefinition parameters: uint errorArg in line 5, in an EventDefinition parameters: uint indexed eventArg in line 6, in a FunctionDefinition parameters or return parameters: uint funcReturnArg in line 16 uint x and uint in line 20 uint in line 30 function ( uint ) pure returns ( uint ) h and the third occurrence uint in line 34, in a ModifierDefinition parameters: uint modifierArg in line 12, in a FunctionTypeName parameters or return parameters: the first two occurrences of uint in line 34, in a TryCatchClause : uint z in line 22 string memory reason in line 24, inside a SourceUnit only as a constant variable: uint constant CONST = 10 in line 1, inside a StructDefinition as a member variable: uint structMember in line 9, inside a VariableDeclarationStatement in a FunctionDefinition.body as a local variable: uint y = x in line 21. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 uint constant CONST = 10 ; contract C { uint public stateVar ; error E ( uint errorArg ); event F ( uint indexed eventArg ); struct S { uint structMember ; } modifier M ( uint modifierArg ) { _ ; } function foo () public pure returns ( uint funcReturnArg ) { funcReturnArg = 7 ; } function f ( uint x ) public view returns ( uint ) { uint y = x ; try this . tmp () returns ( uint z ) { y = z ; } catch Error ( string memory reason ) { revert ( reason ); } return y ; } function tmp () external pure returns ( uint ) { return CONST ; } function g ( function ( uint ) pure returns ( uint ) h ) internal pure returns ( uint ) { return h ( 7 ); } } Source code in woke/ast/ir/declaration/variable_declaration.pyclass VariableDeclaration ( DeclarationAbc ): \"\"\" !!! example A variable can be declared: - inside a [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] as a state variable: - `:::solidity uint public stateVar` in line 4, - inside a [ParameterList][woke.ast.ir.meta.parameter_list.ParameterList]: - in an [ErrorDefinition][woke.ast.ir.declaration.error_definition.ErrorDefinition] parameters: - `:::solidity uint errorArg` in line 5, - in an [EventDefinition][woke.ast.ir.declaration.event_definition.EventDefinition] parameters: - `:::solidity uint indexed eventArg` in line 6, - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] parameters or return parameters: - `:::solidity uint funcReturnArg` in line 16 - `:::solidity uint x` and `:::solidity uint` in line 20 - `:::solidity uint` in line 30 - `:::solidity function (uint) pure returns(uint) h` and the third occurrence `:::solidity uint` in line 34, - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition] parameters: - `:::solidity uint modifierArg` in line 12, - in a [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] parameters or return parameters: - the first two occurrences of `:::solidity uint` in line 34, - in a [TryCatchClause][woke.ast.ir.meta.try_catch_clause.TryCatchClause]: - `:::solidity uint z` in line 22 - `:::solidity string memory reason` in line 24, - inside a [SourceUnit][woke.ast.ir.meta.source_unit.SourceUnit] only as a constant variable: - `:::solidity uint constant CONST = 10` in line 1, - inside a [StructDefinition][woke.ast.ir.declaration.struct_definition.StructDefinition] as a member variable: - `:::solidity uint structMember` in line 9, - inside a [VariableDeclarationStatement][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement] in a [FunctionDefinition.body][woke.ast.ir.declaration.function_definition.FunctionDefinition.body] as a local variable: - `:::solidity uint y = x` in line 21. ```solidity linenums=\"1\" uint constant CONST = 10; contract C { uint public stateVar; error E(uint errorArg); event F(uint indexed eventArg); struct S { uint structMember; } modifier M(uint modifierArg) { _; } function foo() public pure returns (uint funcReturnArg) { funcReturnArg = 7; } function f(uint x) public view returns (uint) { uint y = x; try this.tmp() returns (uint z) { y = z; } catch Error(string memory reason) { revert(reason); } return y; } function tmp() external pure returns(uint) { return CONST; } function g(function (uint) pure returns(uint) h) internal pure returns (uint) { return h(7); } } ``` \"\"\" _ast_node : SolcVariableDeclaration _parent : Union [ ContractDefinition , ParameterList , SourceUnit , StructDefinition , VariableDeclarationStatement , ] _constant : bool # __scope _mutability : Optional [ Mutability ] _state_variable : bool _data_location : DataLocation _visibility : Visibility _base_functions : List [ AstNodeId ] _documentation : Optional [ StructuredDocumentation ] _function_selector : Optional [ bytes ] _indexed : bool _overrides : Optional [ OverrideSpecifier ] _type_name : TypeNameAbc _value : Optional [ ExpressionAbc ] _type_descriptions : TypeDescriptionsModel def __init__ ( self , init : IrInitTuple , variable_declaration : SolcVariableDeclaration , parent : SolidityAbc , ): super () . __init__ ( init , variable_declaration , parent ) self . _constant = variable_declaration . constant self . _mutability = variable_declaration . mutability # TODO scope self . _state_variable = variable_declaration . state_variable self . _data_location = variable_declaration . storage_location self . _visibility = variable_declaration . visibility self . _base_functions = ( list ( variable_declaration . base_functions ) if variable_declaration . base_functions is not None else [] ) self . _documentation = ( StructuredDocumentation ( init , variable_declaration . documentation , self ) if variable_declaration . documentation else None ) self . _function_selector = ( bytes . fromhex ( variable_declaration . function_selector ) if variable_declaration . function_selector else None ) self . _indexed = variable_declaration . indexed or False self . _overrides = ( OverrideSpecifier ( init , variable_declaration . overrides , self ) if variable_declaration . overrides else None ) # type name should not be None # prior 0.5.0, there was a `var` keyword which resulted in the type name being None assert ( variable_declaration . type_name is not None ), \"Variable declaration must have a type name\" self . _type_name = TypeNameAbc . from_ast ( init , variable_declaration . type_name , self ) self . _value = ( ExpressionAbc . from_ast ( init , variable_declaration . value , self ) if variable_declaration . value is not None else None ) self . _type_descriptions = variable_declaration . type_descriptions self . _reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _documentation is not None : yield from self . _documentation if self . _overrides is not None : yield from self . _overrides yield from self . _type_name if self . _value is not None : yield from self . _value def _post_process ( self , callback_params : CallbackParams ): base_functions = self . base_functions for base_function in base_functions : base_function . _child_functions . add ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , base_functions ) ) def _destroy ( self , base_functions : Tuple [ FunctionDefinition ]) -> None : for base_function in base_functions : base_function . _child_functions . discard ( self ) def _parse_name_location ( self ) -> Tuple [ int , int ]: # this one is a bit tricky # it is easier to parse the variable declaration from the end (while omitting an optional assigned expression) if self . _value is None : source_without_value = self . _source else : length_without_value = self . _value . byte_location [ 0 ] - self . byte_location [ 0 ] source_without_value = self . _source [: length_without_value ] IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" VARIABLE_RE = re . compile ( r \"(?P<name> {identifier} )(\\s*=)?\\s*$\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) match = VARIABLE_RE . search ( source_without_value ) assert match byte_start = self . _ast_node . src . byte_offset return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self , ) -> Union [ ContractDefinition , ParameterList , SourceUnit , StructDefinition , VariableDeclarationStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property @lru_cache ( maxsize = 2048 ) def canonical_name ( self ) -> str : node = self . parent while node is not None : if isinstance ( node , DeclarationAbc ): break node = node . parent if node is None : return self . name return f \" { node . canonical_name } . { self . name } \" @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = self . type_name . source ret += f \" { self . visibility } \" if self . is_state_variable else \"\" ret += f \" { self . mutability } \" if self . mutability != Mutability . MUTABLE else \"\" ret += ( f \" { self . data_location } \" if self . data_location != DataLocation . DEFAULT else \"\" ) ret += ( ( f \" override\" + \", \" . join ( override . source for override in self . overrides . overrides ) ) if self . overrides is not None else \"\" ) ret += f \" { self . name } \" if len ( self . name ) > 0 else \"\" ret += ( f \" = { self . value . source } \" if self . value is not None and self . mutability == Mutability . CONSTANT else \"\" ) if self . documentation is not None : return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) return ret @property def mutability ( self ) -> Mutability : \"\"\" Returns: Mutability of the variable. \"\"\" if self . _mutability is None : relative_type_end = self . _type_name . byte_location [ 1 ] - self . byte_location [ 0 ] relative_name_start = self . name_location [ 0 ] - self . byte_location [ 0 ] keywords_source = self . _source [ relative_type_end : relative_name_start ] if b \"immutable\" in keywords_source : self . _mutability = Mutability . IMMUTABLE elif self . _constant : self . _mutability = Mutability . CONSTANT else : self . _mutability = Mutability . MUTABLE return self . _mutability @property def is_state_variable ( self ) -> bool : \"\"\" Returns: `True` if the variable is a state variable, `False` otherwise. \"\"\" return self . _state_variable @property def data_location ( self ) -> DataLocation : \"\"\" [DataLocation.DEFAULT][woke.ast.enums.DataLocation.DEFAULT] is returned if the data location is not specified in the source code. Returns: Data location of the variable. \"\"\" return self . _data_location @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the variable. \"\"\" return self . _visibility @property def base_functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" !!! example `C.foo` in line 6 lists `I.foo` in line 2 as a base function. ```solidity linenums=\"1\" interface I { function foo(uint, bool) external returns(uint); } contract C is I { mapping(uint => mapping(bool => uint)) public override foo; } ``` !!! example `B.foo` in line 14 lists `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 as base functions. ```solidity linenums=\"1\" contract A1 { function foo(uint, bool) external virtual returns(uint) { return 1; } } contract A2 { function foo(uint, bool) external virtual returns(uint) { return 2; } } contract B is A1, A2 { mapping(uint => mapping(bool => uint)) public override(A1, A2) foo; } ``` Returns: List of base functions overridden by this function. \"\"\" from ..declaration.function_definition import FunctionDefinition base_functions = [] for base_function_id in self . _base_functions : base_function = self . _reference_resolver . resolve_node ( base_function_id , self . _cu_hash ) assert isinstance ( base_function , FunctionDefinition ) base_functions . append ( base_function ) return tuple ( base_functions ) @property def documentation ( self ) -> Optional [ StructuredDocumentation ]: \"\"\" Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def function_selector ( self ) -> Optional [ bytes ]: \"\"\" Is only set for public state variables. Returns: Function selector of the getter function generated for this variable, if any. \"\"\" return self . _function_selector @property def indexed ( self ) -> bool : \"\"\" Returns: `True` if the variable is indexed, `False` otherwise. \"\"\" return self . _indexed @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specified as specified in the source code. !!! example `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 do not have an override specifier. `B.foo` in line 14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containing two items referencing the contracts `A1` and `A2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" contract A1 { function foo(uint, bool) external virtual returns(uint) { return 1; } } contract A2 { function foo(uint, bool) external virtual returns(uint) { return 2; } } contract B is A1, A2 { mapping(uint => mapping(bool => uint)) public override(A1, A2) foo; } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides @property def type_name ( self ) -> TypeNameAbc : \"\"\" Returns: Type name IR node as present in the source code. \"\"\" return self . _type_name @property def value ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Is not set if the parent is a [VariableDeclarationStatement][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement]. In this case, the initial value (if any) is set in the [VariableDeclarationStatement.initial_value][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.initial_value] property. Returns: Initial value expression assigned to the variable in this declaration, if any. \"\"\" return self . _value @property @lru_cache ( maxsize = 2048 ) def type ( self ) -> TypeAbc : \"\"\" Returns: Type of the variable. \"\"\" assert self . _type_descriptions . type_identifier is not None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 and ret is not None ), f \"Failed to parse type identifier: { self . _type_descriptions . type_identifier } \" return ret @property def type_string ( self ) -> str : \"\"\" Returns: User-friendly string describing the variable type. \"\"\" assert self . _type_descriptions . type_string is not None return self . _type_descriptions . type_string base_functions () property # Example C.foo in line 6 lists I.foo in line 2 as a base function. 1 2 3 4 5 6 7 interface I { function foo ( uint , bool ) external returns ( uint ); } contract C is I { mapping ( uint => mapping ( bool => uint )) public override foo ; } Example B.foo in line 14 lists A1.foo in lines 2-4 and A2.foo in lines 8-10 as base functions. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 contract A1 { function foo ( uint , bool ) external virtual returns ( uint ) { return 1 ; } } contract A2 { function foo ( uint , bool ) external virtual returns ( uint ) { return 2 ; } } contract B is A1 , A2 { mapping ( uint => mapping ( bool => uint )) public override ( A1 , A2 ) foo ; } Returns: Type Description Tuple [ FunctionDefinition ] List of base functions overridden by this function. Source code in woke/ast/ir/declaration/variable_declaration.py 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 @property def base_functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" !!! example `C.foo` in line 6 lists `I.foo` in line 2 as a base function. ```solidity linenums=\"1\" interface I { function foo(uint, bool) external returns(uint); } contract C is I { mapping(uint => mapping(bool => uint)) public override foo; } ``` !!! example `B.foo` in line 14 lists `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 as base functions. ```solidity linenums=\"1\" contract A1 { function foo(uint, bool) external virtual returns(uint) { return 1; } } contract A2 { function foo(uint, bool) external virtual returns(uint) { return 2; } } contract B is A1, A2 { mapping(uint => mapping(bool => uint)) public override(A1, A2) foo; } ``` Returns: List of base functions overridden by this function. \"\"\" from ..declaration.function_definition import FunctionDefinition base_functions = [] for base_function_id in self . _base_functions : base_function = self . _reference_resolver . resolve_node ( base_function_id , self . _cu_hash ) assert isinstance ( base_function , FunctionDefinition ) base_functions . append ( base_function ) return tuple ( base_functions ) data_location () property # DataLocation.DEFAULT is returned if the data location is not specified in the source code. Returns: Type Description DataLocation Data location of the variable. Source code in woke/ast/ir/declaration/variable_declaration.py 313 314 315 316 317 318 319 320 @property def data_location ( self ) -> DataLocation : \"\"\" [DataLocation.DEFAULT][woke.ast.enums.DataLocation.DEFAULT] is returned if the data location is not specified in the source code. Returns: Data location of the variable. \"\"\" return self . _data_location documentation () property # Returns: Type Description Optional [ StructuredDocumentation ] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/variable_declaration.py 379 380 381 382 383 384 385 @property def documentation ( self ) -> Optional [ StructuredDocumentation ]: \"\"\" Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation function_selector () property # Is only set for public state variables. Returns: Type Description Optional [ bytes ] Function selector of the getter function generated for this variable, if any. Source code in woke/ast/ir/declaration/variable_declaration.py 387 388 389 390 391 392 393 394 @property def function_selector ( self ) -> Optional [ bytes ]: \"\"\" Is only set for public state variables. Returns: Function selector of the getter function generated for this variable, if any. \"\"\" return self . _function_selector indexed () property # Returns: Type Description bool True if the variable is indexed, False otherwise. Source code in woke/ast/ir/declaration/variable_declaration.py 396 397 398 399 400 401 402 @property def indexed ( self ) -> bool : \"\"\" Returns: `True` if the variable is indexed, `False` otherwise. \"\"\" return self . _indexed is_state_variable () property # Returns: Type Description bool True if the variable is a state variable, False otherwise. Source code in woke/ast/ir/declaration/variable_declaration.py 305 306 307 308 309 310 311 @property def is_state_variable ( self ) -> bool : \"\"\" Returns: `True` if the variable is a state variable, `False` otherwise. \"\"\" return self . _state_variable mutability () property # Returns: Type Description Mutability Mutability of the variable. Source code in woke/ast/ir/declaration/variable_declaration.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 @property def mutability ( self ) -> Mutability : \"\"\" Returns: Mutability of the variable. \"\"\" if self . _mutability is None : relative_type_end = self . _type_name . byte_location [ 1 ] - self . byte_location [ 0 ] relative_name_start = self . name_location [ 0 ] - self . byte_location [ 0 ] keywords_source = self . _source [ relative_type_end : relative_name_start ] if b \"immutable\" in keywords_source : self . _mutability = Mutability . IMMUTABLE elif self . _constant : self . _mutability = Mutability . CONSTANT else : self . _mutability = Mutability . MUTABLE return self . _mutability overrides () property # Returns override specified as specified in the source code. Example A1.foo in lines 2-4 and A2.foo in lines 8-10 do not have an override specifier. B.foo in line 14 has an override specifier with the overrides property containing two items referencing the contracts A1 and A2 ( ContractDefinition ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 contract A1 { function foo ( uint , bool ) external virtual returns ( uint ) { return 1 ; } } contract A2 { function foo ( uint , bool ) external virtual returns ( uint ) { return 2 ; } } contract B is A1 , A2 { mapping ( uint => mapping ( bool => uint )) public override ( A1 , A2 ) foo ; } Returns: Type Description Optional [ OverrideSpecifier ] Override specifier, if any. Source code in woke/ast/ir/declaration/variable_declaration.py 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specified as specified in the source code. !!! example `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 do not have an override specifier. `B.foo` in line 14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containing two items referencing the contracts `A1` and `A2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" contract A1 { function foo(uint, bool) external virtual returns(uint) { return 1; } } contract A2 { function foo(uint, bool) external virtual returns(uint) { return 2; } } contract B is A1, A2 { mapping(uint => mapping(bool => uint)) public override(A1, A2) foo; } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides parent () property # Returns: Type Description Union [ ContractDefinition , ParameterList , SourceUnit , StructDefinition , VariableDeclarationStatement ] Parent IR node. Source code in woke/ast/ir/declaration/variable_declaration.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 @property def parent ( self , ) -> Union [ ContractDefinition , ParameterList , SourceUnit , StructDefinition , VariableDeclarationStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent type () cached property # Returns: Type Description TypeAbc Type of the variable. Source code in woke/ast/ir/declaration/variable_declaration.py 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 @property @lru_cache ( maxsize = 2048 ) def type ( self ) -> TypeAbc : \"\"\" Returns: Type of the variable. \"\"\" assert self . _type_descriptions . type_identifier is not None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 and ret is not None ), f \"Failed to parse type identifier: { self . _type_descriptions . type_identifier } \" return ret type_name () property # Returns: Type Description TypeNameAbc Type name IR node as present in the source code. Source code in woke/ast/ir/declaration/variable_declaration.py 436 437 438 439 440 441 442 @property def type_name ( self ) -> TypeNameAbc : \"\"\" Returns: Type name IR node as present in the source code. \"\"\" return self . _type_name type_string () property # Returns: Type Description str User-friendly string describing the variable type. Source code in woke/ast/ir/declaration/variable_declaration.py 472 473 474 475 476 477 478 479 @property def type_string ( self ) -> str : \"\"\" Returns: User-friendly string describing the variable type. \"\"\" assert self . _type_descriptions . type_string is not None return self . _type_descriptions . type_string value () property # Is not set if the parent is a VariableDeclarationStatement . In this case, the initial value (if any) is set in the VariableDeclarationStatement.initial_value property. Returns: Type Description Optional [ ExpressionAbc ] Initial value expression assigned to the variable in this declaration, if any. Source code in woke/ast/ir/declaration/variable_declaration.py 444 445 446 447 448 449 450 451 452 @property def value ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Is not set if the parent is a [VariableDeclarationStatement][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement]. In this case, the initial value (if any) is set in the [VariableDeclarationStatement.initial_value][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.initial_value] property. Returns: Initial value expression assigned to the variable in this declaration, if any. \"\"\" return self . _value visibility () property # Returns: Type Description Visibility Visibility of the variable. Source code in woke/ast/ir/declaration/variable_declaration.py 322 323 324 325 326 327 328 @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the variable. \"\"\" return self . _visibility","title":"Variable declaration"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration","text":"","title":"variable_declaration"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration","text":"Bases: DeclarationAbc Example A variable can be declared: inside a ContractDefinition as a state variable: uint public stateVar in line 4, inside a ParameterList : in an ErrorDefinition parameters: uint errorArg in line 5, in an EventDefinition parameters: uint indexed eventArg in line 6, in a FunctionDefinition parameters or return parameters: uint funcReturnArg in line 16 uint x and uint in line 20 uint in line 30 function ( uint ) pure returns ( uint ) h and the third occurrence uint in line 34, in a ModifierDefinition parameters: uint modifierArg in line 12, in a FunctionTypeName parameters or return parameters: the first two occurrences of uint in line 34, in a TryCatchClause : uint z in line 22 string memory reason in line 24, inside a SourceUnit only as a constant variable: uint constant CONST = 10 in line 1, inside a StructDefinition as a member variable: uint structMember in line 9, inside a VariableDeclarationStatement in a FunctionDefinition.body as a local variable: uint y = x in line 21. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 uint constant CONST = 10 ; contract C { uint public stateVar ; error E ( uint errorArg ); event F ( uint indexed eventArg ); struct S { uint structMember ; } modifier M ( uint modifierArg ) { _ ; } function foo () public pure returns ( uint funcReturnArg ) { funcReturnArg = 7 ; } function f ( uint x ) public view returns ( uint ) { uint y = x ; try this . tmp () returns ( uint z ) { y = z ; } catch Error ( string memory reason ) { revert ( reason ); } return y ; } function tmp () external pure returns ( uint ) { return CONST ; } function g ( function ( uint ) pure returns ( uint ) h ) internal pure returns ( uint ) { return h ( 7 ); } } Source code in woke/ast/ir/declaration/variable_declaration.pyclass VariableDeclaration ( DeclarationAbc ): \"\"\" !!! example A variable can be declared: - inside a [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] as a state variable: - `:::solidity uint public stateVar` in line 4, - inside a [ParameterList][woke.ast.ir.meta.parameter_list.ParameterList]: - in an [ErrorDefinition][woke.ast.ir.declaration.error_definition.ErrorDefinition] parameters: - `:::solidity uint errorArg` in line 5, - in an [EventDefinition][woke.ast.ir.declaration.event_definition.EventDefinition] parameters: - `:::solidity uint indexed eventArg` in line 6, - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition] parameters or return parameters: - `:::solidity uint funcReturnArg` in line 16 - `:::solidity uint x` and `:::solidity uint` in line 20 - `:::solidity uint` in line 30 - `:::solidity function (uint) pure returns(uint) h` and the third occurrence `:::solidity uint` in line 34, - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition] parameters: - `:::solidity uint modifierArg` in line 12, - in a [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName] parameters or return parameters: - the first two occurrences of `:::solidity uint` in line 34, - in a [TryCatchClause][woke.ast.ir.meta.try_catch_clause.TryCatchClause]: - `:::solidity uint z` in line 22 - `:::solidity string memory reason` in line 24, - inside a [SourceUnit][woke.ast.ir.meta.source_unit.SourceUnit] only as a constant variable: - `:::solidity uint constant CONST = 10` in line 1, - inside a [StructDefinition][woke.ast.ir.declaration.struct_definition.StructDefinition] as a member variable: - `:::solidity uint structMember` in line 9, - inside a [VariableDeclarationStatement][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement] in a [FunctionDefinition.body][woke.ast.ir.declaration.function_definition.FunctionDefinition.body] as a local variable: - `:::solidity uint y = x` in line 21. ```solidity linenums=\"1\" uint constant CONST = 10; contract C { uint public stateVar; error E(uint errorArg); event F(uint indexed eventArg); struct S { uint structMember; } modifier M(uint modifierArg) { _; } function foo() public pure returns (uint funcReturnArg) { funcReturnArg = 7; } function f(uint x) public view returns (uint) { uint y = x; try this.tmp() returns (uint z) { y = z; } catch Error(string memory reason) { revert(reason); } return y; } function tmp() external pure returns(uint) { return CONST; } function g(function (uint) pure returns(uint) h) internal pure returns (uint) { return h(7); } } ``` \"\"\" _ast_node : SolcVariableDeclaration _parent : Union [ ContractDefinition , ParameterList , SourceUnit , StructDefinition , VariableDeclarationStatement , ] _constant : bool # __scope _mutability : Optional [ Mutability ] _state_variable : bool _data_location : DataLocation _visibility : Visibility _base_functions : List [ AstNodeId ] _documentation : Optional [ StructuredDocumentation ] _function_selector : Optional [ bytes ] _indexed : bool _overrides : Optional [ OverrideSpecifier ] _type_name : TypeNameAbc _value : Optional [ ExpressionAbc ] _type_descriptions : TypeDescriptionsModel def __init__ ( self , init : IrInitTuple , variable_declaration : SolcVariableDeclaration , parent : SolidityAbc , ): super () . __init__ ( init , variable_declaration , parent ) self . _constant = variable_declaration . constant self . _mutability = variable_declaration . mutability # TODO scope self . _state_variable = variable_declaration . state_variable self . _data_location = variable_declaration . storage_location self . _visibility = variable_declaration . visibility self . _base_functions = ( list ( variable_declaration . base_functions ) if variable_declaration . base_functions is not None else [] ) self . _documentation = ( StructuredDocumentation ( init , variable_declaration . documentation , self ) if variable_declaration . documentation else None ) self . _function_selector = ( bytes . fromhex ( variable_declaration . function_selector ) if variable_declaration . function_selector else None ) self . _indexed = variable_declaration . indexed or False self . _overrides = ( OverrideSpecifier ( init , variable_declaration . overrides , self ) if variable_declaration . overrides else None ) # type name should not be None # prior 0.5.0, there was a `var` keyword which resulted in the type name being None assert ( variable_declaration . type_name is not None ), \"Variable declaration must have a type name\" self . _type_name = TypeNameAbc . from_ast ( init , variable_declaration . type_name , self ) self . _value = ( ExpressionAbc . from_ast ( init , variable_declaration . value , self ) if variable_declaration . value is not None else None ) self . _type_descriptions = variable_declaration . type_descriptions self . _reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _documentation is not None : yield from self . _documentation if self . _overrides is not None : yield from self . _overrides yield from self . _type_name if self . _value is not None : yield from self . _value def _post_process ( self , callback_params : CallbackParams ): base_functions = self . base_functions for base_function in base_functions : base_function . _child_functions . add ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , base_functions ) ) def _destroy ( self , base_functions : Tuple [ FunctionDefinition ]) -> None : for base_function in base_functions : base_function . _child_functions . discard ( self ) def _parse_name_location ( self ) -> Tuple [ int , int ]: # this one is a bit tricky # it is easier to parse the variable declaration from the end (while omitting an optional assigned expression) if self . _value is None : source_without_value = self . _source else : length_without_value = self . _value . byte_location [ 0 ] - self . byte_location [ 0 ] source_without_value = self . _source [: length_without_value ] IDENTIFIER = r \"[a-zA-Z$_][a-zA-Z0-9$_]*\" VARIABLE_RE = re . compile ( r \"(?P<name> {identifier} )(\\s*=)?\\s*$\" . format ( identifier = IDENTIFIER ) . encode ( \"utf-8\" ) ) match = VARIABLE_RE . search ( source_without_value ) assert match byte_start = self . _ast_node . src . byte_offset return byte_start + match . start ( \"name\" ), byte_start + match . end ( \"name\" ) @property def parent ( self , ) -> Union [ ContractDefinition , ParameterList , SourceUnit , StructDefinition , VariableDeclarationStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property @lru_cache ( maxsize = 2048 ) def canonical_name ( self ) -> str : node = self . parent while node is not None : if isinstance ( node , DeclarationAbc ): break node = node . parent if node is None : return self . name return f \" { node . canonical_name } . { self . name } \" @property @lru_cache ( maxsize = 2048 ) def declaration_string ( self ) -> str : ret = self . type_name . source ret += f \" { self . visibility } \" if self . is_state_variable else \"\" ret += f \" { self . mutability } \" if self . mutability != Mutability . MUTABLE else \"\" ret += ( f \" { self . data_location } \" if self . data_location != DataLocation . DEFAULT else \"\" ) ret += ( ( f \" override\" + \", \" . join ( override . source for override in self . overrides . overrides ) ) if self . overrides is not None else \"\" ) ret += f \" { self . name } \" if len ( self . name ) > 0 else \"\" ret += ( f \" = { self . value . source } \" if self . value is not None and self . mutability == Mutability . CONSTANT else \"\" ) if self . documentation is not None : return ( \"/// \" + \" \\n ///\" . join ( line for line in self . documentation . text . splitlines ()) + \" \\n \" + ret ) return ret @property def mutability ( self ) -> Mutability : \"\"\" Returns: Mutability of the variable. \"\"\" if self . _mutability is None : relative_type_end = self . _type_name . byte_location [ 1 ] - self . byte_location [ 0 ] relative_name_start = self . name_location [ 0 ] - self . byte_location [ 0 ] keywords_source = self . _source [ relative_type_end : relative_name_start ] if b \"immutable\" in keywords_source : self . _mutability = Mutability . IMMUTABLE elif self . _constant : self . _mutability = Mutability . CONSTANT else : self . _mutability = Mutability . MUTABLE return self . _mutability @property def is_state_variable ( self ) -> bool : \"\"\" Returns: `True` if the variable is a state variable, `False` otherwise. \"\"\" return self . _state_variable @property def data_location ( self ) -> DataLocation : \"\"\" [DataLocation.DEFAULT][woke.ast.enums.DataLocation.DEFAULT] is returned if the data location is not specified in the source code. Returns: Data location of the variable. \"\"\" return self . _data_location @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the variable. \"\"\" return self . _visibility @property def base_functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" !!! example `C.foo` in line 6 lists `I.foo` in line 2 as a base function. ```solidity linenums=\"1\" interface I { function foo(uint, bool) external returns(uint); } contract C is I { mapping(uint => mapping(bool => uint)) public override foo; } ``` !!! example `B.foo` in line 14 lists `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 as base functions. ```solidity linenums=\"1\" contract A1 { function foo(uint, bool) external virtual returns(uint) { return 1; } } contract A2 { function foo(uint, bool) external virtual returns(uint) { return 2; } } contract B is A1, A2 { mapping(uint => mapping(bool => uint)) public override(A1, A2) foo; } ``` Returns: List of base functions overridden by this function. \"\"\" from ..declaration.function_definition import FunctionDefinition base_functions = [] for base_function_id in self . _base_functions : base_function = self . _reference_resolver . resolve_node ( base_function_id , self . _cu_hash ) assert isinstance ( base_function , FunctionDefinition ) base_functions . append ( base_function ) return tuple ( base_functions ) @property def documentation ( self ) -> Optional [ StructuredDocumentation ]: \"\"\" Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation @property def function_selector ( self ) -> Optional [ bytes ]: \"\"\" Is only set for public state variables. Returns: Function selector of the getter function generated for this variable, if any. \"\"\" return self . _function_selector @property def indexed ( self ) -> bool : \"\"\" Returns: `True` if the variable is indexed, `False` otherwise. \"\"\" return self . _indexed @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specified as specified in the source code. !!! example `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 do not have an override specifier. `B.foo` in line 14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containing two items referencing the contracts `A1` and `A2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" contract A1 { function foo(uint, bool) external virtual returns(uint) { return 1; } } contract A2 { function foo(uint, bool) external virtual returns(uint) { return 2; } } contract B is A1, A2 { mapping(uint => mapping(bool => uint)) public override(A1, A2) foo; } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides @property def type_name ( self ) -> TypeNameAbc : \"\"\" Returns: Type name IR node as present in the source code. \"\"\" return self . _type_name @property def value ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Is not set if the parent is a [VariableDeclarationStatement][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement]. In this case, the initial value (if any) is set in the [VariableDeclarationStatement.initial_value][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.initial_value] property. Returns: Initial value expression assigned to the variable in this declaration, if any. \"\"\" return self . _value @property @lru_cache ( maxsize = 2048 ) def type ( self ) -> TypeAbc : \"\"\" Returns: Type of the variable. \"\"\" assert self . _type_descriptions . type_identifier is not None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 and ret is not None ), f \"Failed to parse type identifier: { self . _type_descriptions . type_identifier } \" return ret @property def type_string ( self ) -> str : \"\"\" Returns: User-friendly string describing the variable type. \"\"\" assert self . _type_descriptions . type_string is not None return self . _type_descriptions . type_string","title":"VariableDeclaration"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.base_functions","text":"Example C.foo in line 6 lists I.foo in line 2 as a base function. 1 2 3 4 5 6 7 interface I { function foo ( uint , bool ) external returns ( uint ); } contract C is I { mapping ( uint => mapping ( bool => uint )) public override foo ; } Example B.foo in line 14 lists A1.foo in lines 2-4 and A2.foo in lines 8-10 as base functions. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 contract A1 { function foo ( uint , bool ) external virtual returns ( uint ) { return 1 ; } } contract A2 { function foo ( uint , bool ) external virtual returns ( uint ) { return 2 ; } } contract B is A1 , A2 { mapping ( uint => mapping ( bool => uint )) public override ( A1 , A2 ) foo ; } Returns: Type Description Tuple [ FunctionDefinition ] List of base functions overridden by this function. Source code in woke/ast/ir/declaration/variable_declaration.py 330 331 332 333 334 335 336 337 338 339 340 341 342 343 344 345 346 347 348 349 350 351 352 353 354 355 356 357 358 359 360 361 362 363 364 365 366 367 368 369 370 371 372 373 374 375 376 377 @property def base_functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" !!! example `C.foo` in line 6 lists `I.foo` in line 2 as a base function. ```solidity linenums=\"1\" interface I { function foo(uint, bool) external returns(uint); } contract C is I { mapping(uint => mapping(bool => uint)) public override foo; } ``` !!! example `B.foo` in line 14 lists `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 as base functions. ```solidity linenums=\"1\" contract A1 { function foo(uint, bool) external virtual returns(uint) { return 1; } } contract A2 { function foo(uint, bool) external virtual returns(uint) { return 2; } } contract B is A1, A2 { mapping(uint => mapping(bool => uint)) public override(A1, A2) foo; } ``` Returns: List of base functions overridden by this function. \"\"\" from ..declaration.function_definition import FunctionDefinition base_functions = [] for base_function_id in self . _base_functions : base_function = self . _reference_resolver . resolve_node ( base_function_id , self . _cu_hash ) assert isinstance ( base_function , FunctionDefinition ) base_functions . append ( base_function ) return tuple ( base_functions )","title":"base_functions()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.data_location","text":"DataLocation.DEFAULT is returned if the data location is not specified in the source code. Returns: Type Description DataLocation Data location of the variable. Source code in woke/ast/ir/declaration/variable_declaration.py 313 314 315 316 317 318 319 320 @property def data_location ( self ) -> DataLocation : \"\"\" [DataLocation.DEFAULT][woke.ast.enums.DataLocation.DEFAULT] is returned if the data location is not specified in the source code. Returns: Data location of the variable. \"\"\" return self . _data_location","title":"data_location()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.documentation","text":"Returns: Type Description Optional [ StructuredDocumentation ] NatSpec documentation string, if any. Source code in woke/ast/ir/declaration/variable_declaration.py 379 380 381 382 383 384 385 @property def documentation ( self ) -> Optional [ StructuredDocumentation ]: \"\"\" Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string, if any. \"\"\" return self . _documentation","title":"documentation()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.function_selector","text":"Is only set for public state variables. Returns: Type Description Optional [ bytes ] Function selector of the getter function generated for this variable, if any. Source code in woke/ast/ir/declaration/variable_declaration.py 387 388 389 390 391 392 393 394 @property def function_selector ( self ) -> Optional [ bytes ]: \"\"\" Is only set for public state variables. Returns: Function selector of the getter function generated for this variable, if any. \"\"\" return self . _function_selector","title":"function_selector()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.indexed","text":"Returns: Type Description bool True if the variable is indexed, False otherwise. Source code in woke/ast/ir/declaration/variable_declaration.py 396 397 398 399 400 401 402 @property def indexed ( self ) -> bool : \"\"\" Returns: `True` if the variable is indexed, `False` otherwise. \"\"\" return self . _indexed","title":"indexed()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.is_state_variable","text":"Returns: Type Description bool True if the variable is a state variable, False otherwise. Source code in woke/ast/ir/declaration/variable_declaration.py 305 306 307 308 309 310 311 @property def is_state_variable ( self ) -> bool : \"\"\" Returns: `True` if the variable is a state variable, `False` otherwise. \"\"\" return self . _state_variable","title":"is_state_variable()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.mutability","text":"Returns: Type Description Mutability Mutability of the variable. Source code in woke/ast/ir/declaration/variable_declaration.py 286 287 288 289 290 291 292 293 294 295 296 297 298 299 300 301 302 303 @property def mutability ( self ) -> Mutability : \"\"\" Returns: Mutability of the variable. \"\"\" if self . _mutability is None : relative_type_end = self . _type_name . byte_location [ 1 ] - self . byte_location [ 0 ] relative_name_start = self . name_location [ 0 ] - self . byte_location [ 0 ] keywords_source = self . _source [ relative_type_end : relative_name_start ] if b \"immutable\" in keywords_source : self . _mutability = Mutability . IMMUTABLE elif self . _constant : self . _mutability = Mutability . CONSTANT else : self . _mutability = Mutability . MUTABLE return self . _mutability","title":"mutability()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.overrides","text":"Returns override specified as specified in the source code. Example A1.foo in lines 2-4 and A2.foo in lines 8-10 do not have an override specifier. B.foo in line 14 has an override specifier with the overrides property containing two items referencing the contracts A1 and A2 ( ContractDefinition ). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 contract A1 { function foo ( uint , bool ) external virtual returns ( uint ) { return 1 ; } } contract A2 { function foo ( uint , bool ) external virtual returns ( uint ) { return 2 ; } } contract B is A1 , A2 { mapping ( uint => mapping ( bool => uint )) public override ( A1 , A2 ) foo ; } Returns: Type Description Optional [ OverrideSpecifier ] Override specifier, if any. Source code in woke/ast/ir/declaration/variable_declaration.py 404 405 406 407 408 409 410 411 412 413 414 415 416 417 418 419 420 421 422 423 424 425 426 427 428 429 430 431 432 433 434 @property def overrides ( self ) -> Optional [ OverrideSpecifier ]: \"\"\" Returns override specified as specified in the source code. !!! example `A1.foo` in lines 2-4 and `A2.foo` in lines 8-10 do not have an override specifier. `B.foo` in line 14 has an override specifier with the [overrides][woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides] property containing two items referencing the contracts `A1` and `A2` ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). ```solidity linenums=\"1\" contract A1 { function foo(uint, bool) external virtual returns(uint) { return 1; } } contract A2 { function foo(uint, bool) external virtual returns(uint) { return 2; } } contract B is A1, A2 { mapping(uint => mapping(bool => uint)) public override(A1, A2) foo; } ``` Returns: Override specifier, if any. \"\"\" return self . _overrides","title":"overrides()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.parent","text":"Returns: Type Description Union [ ContractDefinition , ParameterList , SourceUnit , StructDefinition , VariableDeclarationStatement ] Parent IR node. Source code in woke/ast/ir/declaration/variable_declaration.py 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 @property def parent ( self , ) -> Union [ ContractDefinition , ParameterList , SourceUnit , StructDefinition , VariableDeclarationStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.type","text":"Returns: Type Description TypeAbc Type of the variable. Source code in woke/ast/ir/declaration/variable_declaration.py 454 455 456 457 458 459 460 461 462 463 464 465 466 467 468 469 470 @property @lru_cache ( maxsize = 2048 ) def type ( self ) -> TypeAbc : \"\"\" Returns: Type of the variable. \"\"\" assert self . _type_descriptions . type_identifier is not None type_identifier = StringReader ( self . _type_descriptions . type_identifier ) ret = TypeAbc . from_type_identifier ( type_identifier , self . _reference_resolver , self . cu_hash ) assert ( len ( type_identifier ) == 0 and ret is not None ), f \"Failed to parse type identifier: { self . _type_descriptions . type_identifier } \" return ret","title":"type()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.type_name","text":"Returns: Type Description TypeNameAbc Type name IR node as present in the source code. Source code in woke/ast/ir/declaration/variable_declaration.py 436 437 438 439 440 441 442 @property def type_name ( self ) -> TypeNameAbc : \"\"\" Returns: Type name IR node as present in the source code. \"\"\" return self . _type_name","title":"type_name()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.type_string","text":"Returns: Type Description str User-friendly string describing the variable type. Source code in woke/ast/ir/declaration/variable_declaration.py 472 473 474 475 476 477 478 479 @property def type_string ( self ) -> str : \"\"\" Returns: User-friendly string describing the variable type. \"\"\" assert self . _type_descriptions . type_string is not None return self . _type_descriptions . type_string","title":"type_string()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.value","text":"Is not set if the parent is a VariableDeclarationStatement . In this case, the initial value (if any) is set in the VariableDeclarationStatement.initial_value property. Returns: Type Description Optional [ ExpressionAbc ] Initial value expression assigned to the variable in this declaration, if any. Source code in woke/ast/ir/declaration/variable_declaration.py 444 445 446 447 448 449 450 451 452 @property def value ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Is not set if the parent is a [VariableDeclarationStatement][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement]. In this case, the initial value (if any) is set in the [VariableDeclarationStatement.initial_value][woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.initial_value] property. Returns: Initial value expression assigned to the variable in this declaration, if any. \"\"\" return self . _value","title":"value()"},{"location":"api-reference/ir/declarations/variable-declaration/#woke.ast.ir.declaration.variable_declaration.VariableDeclaration.visibility","text":"Returns: Type Description Visibility Visibility of the variable. Source code in woke/ast/ir/declaration/variable_declaration.py 322 323 324 325 326 327 328 @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the variable. \"\"\" return self . _visibility","title":"visibility()"},{"location":"api-reference/ir/expressions/assignment/","text":"woke.ast.ir.expression.assignment module # Assignment class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/assignment.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Assignment ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcAssignment _parent : SolidityAbc # TODO: make this more specific _left_expression : ExpressionAbc _right_expression : ExpressionAbc _operator : AssignmentOperator def __init__ ( self , init : IrInitTuple , assignment : SolcAssignment , parent : SolidityAbc ): super () . __init__ ( init , assignment , parent ) self . _operator = assignment . operator self . _left_expression = ExpressionAbc . from_ast ( init , assignment . left_hand_side , self ) self . _right_expression = ExpressionAbc . from_ast ( init , assignment . right_hand_side , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _left_expression yield from self . _right_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def left_expression ( self ) -> ExpressionAbc : return self . _left_expression @property def right_expression ( self ) -> ExpressionAbc : return self . _right_expression @property def operator ( self ) -> AssignmentOperator : return self . _operator @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : return self . left_expression . is_ref_to_state_variable @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . left_expression . modifies_state | self . right_expression . modifies_state if self . left_expression . is_ref_to_state_variable : ret |= {( self , ModifiesStateFlag . MODIFIES_STATE_VAR )} return ret @property @lru_cache ( maxsize = 2048 ) def assigned_variables ( self ) -> Tuple [ Optional [ Set [ AssignedVariablePath ]], ... ]: def resolve_node ( node : ExpressionAbc ) -> Set [ AssignedVariablePath ]: if isinstance ( node , Conditional ): return resolve_node ( node . true_expression ) | resolve_node ( node . false_expression ) elif isinstance ( node , Identifier ): referenced_declaration = node . referenced_declaration assert isinstance ( referenced_declaration , DeclarationAbc ) return {( referenced_declaration ,)} elif isinstance ( node , IndexAccess ): return { path + ( \"IndexAccess\" ,) for path in resolve_node ( node . base_expression ) } elif isinstance ( node , MemberAccess ): referenced_declaration = node . referenced_declaration assert isinstance ( referenced_declaration , DeclarationAbc ) return { path + ( referenced_declaration ,) for path in resolve_node ( node . expression ) } else : assert False , f \"Unexpected node type: { type ( node ) } \\n { self . source } \" node = self . left_expression if isinstance ( node , TupleExpression ): return tuple ( resolve_node ( expression ) if expression is not None else None for expression in node . components ) else : return ( resolve_node ( node ),)","title":"Assignment"},{"location":"api-reference/ir/expressions/assignment/#woke.ast.ir.expression.assignment","text":"","title":"assignment"},{"location":"api-reference/ir/expressions/assignment/#woke.ast.ir.expression.assignment.Assignment","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/assignment.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Assignment ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcAssignment _parent : SolidityAbc # TODO: make this more specific _left_expression : ExpressionAbc _right_expression : ExpressionAbc _operator : AssignmentOperator def __init__ ( self , init : IrInitTuple , assignment : SolcAssignment , parent : SolidityAbc ): super () . __init__ ( init , assignment , parent ) self . _operator = assignment . operator self . _left_expression = ExpressionAbc . from_ast ( init , assignment . left_hand_side , self ) self . _right_expression = ExpressionAbc . from_ast ( init , assignment . right_hand_side , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _left_expression yield from self . _right_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def left_expression ( self ) -> ExpressionAbc : return self . _left_expression @property def right_expression ( self ) -> ExpressionAbc : return self . _right_expression @property def operator ( self ) -> AssignmentOperator : return self . _operator @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : return self . left_expression . is_ref_to_state_variable @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . left_expression . modifies_state | self . right_expression . modifies_state if self . left_expression . is_ref_to_state_variable : ret |= {( self , ModifiesStateFlag . MODIFIES_STATE_VAR )} return ret @property @lru_cache ( maxsize = 2048 ) def assigned_variables ( self ) -> Tuple [ Optional [ Set [ AssignedVariablePath ]], ... ]: def resolve_node ( node : ExpressionAbc ) -> Set [ AssignedVariablePath ]: if isinstance ( node , Conditional ): return resolve_node ( node . true_expression ) | resolve_node ( node . false_expression ) elif isinstance ( node , Identifier ): referenced_declaration = node . referenced_declaration assert isinstance ( referenced_declaration , DeclarationAbc ) return {( referenced_declaration ,)} elif isinstance ( node , IndexAccess ): return { path + ( \"IndexAccess\" ,) for path in resolve_node ( node . base_expression ) } elif isinstance ( node , MemberAccess ): referenced_declaration = node . referenced_declaration assert isinstance ( referenced_declaration , DeclarationAbc ) return { path + ( referenced_declaration ,) for path in resolve_node ( node . expression ) } else : assert False , f \"Unexpected node type: { type ( node ) } \\n { self . source } \" node = self . left_expression if isinstance ( node , TupleExpression ): return tuple ( resolve_node ( expression ) if expression is not None else None for expression in node . components ) else : return ( resolve_node ( node ),)","title":"Assignment"},{"location":"api-reference/ir/expressions/binary-operation/","text":"woke.ast.ir.expression.binary_operation module # BinaryOperation class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/binary_operation.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class BinaryOperation ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcBinaryOperation _parent : SolidityAbc # TODO: make this more specific _left_expression : ExpressionAbc _operator : BinaryOpOperator _right_expression : ExpressionAbc def __init__ ( self , init : IrInitTuple , binary_operation : SolcBinaryOperation , parent : SolidityAbc , ): super () . __init__ ( init , binary_operation , parent ) self . _operator = binary_operation . operator self . _left_expression = ExpressionAbc . from_ast ( init , binary_operation . left_expression , self ) self . _right_expression = ExpressionAbc . from_ast ( init , binary_operation . right_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _left_expression yield from self . _right_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def operator ( self ) -> BinaryOpOperator : return self . _operator @property def left_expression ( self ) -> ExpressionAbc : return self . _left_expression @property def right_expression ( self ) -> ExpressionAbc : return self . _right_expression @property def is_ref_to_state_variable ( self ) -> bool : return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return ( self . left_expression . modifies_state | self . right_expression . modifies_state )","title":"Binary operation"},{"location":"api-reference/ir/expressions/binary-operation/#woke.ast.ir.expression.binary_operation","text":"","title":"binary_operation"},{"location":"api-reference/ir/expressions/binary-operation/#woke.ast.ir.expression.binary_operation.BinaryOperation","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/binary_operation.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 class BinaryOperation ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcBinaryOperation _parent : SolidityAbc # TODO: make this more specific _left_expression : ExpressionAbc _operator : BinaryOpOperator _right_expression : ExpressionAbc def __init__ ( self , init : IrInitTuple , binary_operation : SolcBinaryOperation , parent : SolidityAbc , ): super () . __init__ ( init , binary_operation , parent ) self . _operator = binary_operation . operator self . _left_expression = ExpressionAbc . from_ast ( init , binary_operation . left_expression , self ) self . _right_expression = ExpressionAbc . from_ast ( init , binary_operation . right_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _left_expression yield from self . _right_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def operator ( self ) -> BinaryOpOperator : return self . _operator @property def left_expression ( self ) -> ExpressionAbc : return self . _left_expression @property def right_expression ( self ) -> ExpressionAbc : return self . _right_expression @property def is_ref_to_state_variable ( self ) -> bool : return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return ( self . left_expression . modifies_state | self . right_expression . modifies_state )","title":"BinaryOperation"},{"location":"api-reference/ir/expressions/conditional/","text":"woke.ast.ir.expression.conditional module # Conditional class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/conditional.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Conditional ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcConditional _parent : SolidityAbc # TODO: make this more specific _condition : ExpressionAbc _false_expression : ExpressionAbc _true_expression : ExpressionAbc def __init__ ( self , init : IrInitTuple , conditional : SolcConditional , parent : SolidityAbc ): super () . __init__ ( init , conditional , parent ) self . _condition = ExpressionAbc . from_ast ( init , conditional . condition , self ) self . _false_expression = ExpressionAbc . from_ast ( init , conditional . false_expression , self ) self . _true_expression = ExpressionAbc . from_ast ( init , conditional . true_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _condition yield from self . _false_expression yield from self . _true_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def condition ( self ) -> ExpressionAbc : return self . _condition @property def false_expression ( self ) -> ExpressionAbc : return self . _false_expression @property def true_expression ( self ) -> ExpressionAbc : return self . _true_expression @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : return ( self . true_expression . is_ref_to_state_variable or self . false_expression . is_ref_to_state_variable ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return ( self . condition . modifies_state | self . true_expression . modifies_state | self . false_expression . modifies_state )","title":"Conditional"},{"location":"api-reference/ir/expressions/conditional/#woke.ast.ir.expression.conditional","text":"","title":"conditional"},{"location":"api-reference/ir/expressions/conditional/#woke.ast.ir.expression.conditional.Conditional","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/conditional.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 class Conditional ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcConditional _parent : SolidityAbc # TODO: make this more specific _condition : ExpressionAbc _false_expression : ExpressionAbc _true_expression : ExpressionAbc def __init__ ( self , init : IrInitTuple , conditional : SolcConditional , parent : SolidityAbc ): super () . __init__ ( init , conditional , parent ) self . _condition = ExpressionAbc . from_ast ( init , conditional . condition , self ) self . _false_expression = ExpressionAbc . from_ast ( init , conditional . false_expression , self ) self . _true_expression = ExpressionAbc . from_ast ( init , conditional . true_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _condition yield from self . _false_expression yield from self . _true_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def condition ( self ) -> ExpressionAbc : return self . _condition @property def false_expression ( self ) -> ExpressionAbc : return self . _false_expression @property def true_expression ( self ) -> ExpressionAbc : return self . _true_expression @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : return ( self . true_expression . is_ref_to_state_variable or self . false_expression . is_ref_to_state_variable ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return ( self . condition . modifies_state | self . true_expression . modifies_state | self . false_expression . modifies_state )","title":"Conditional"},{"location":"api-reference/ir/expressions/elementary-type-name-expression/","text":"woke.ast.ir.expression.elementary_type_name_expression module # ElementaryTypeNameExpression class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/elementary_type_name_expression.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class ElementaryTypeNameExpression ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcElementaryTypeNameExpression _parent : SolidityAbc # TODO: make this more specific _type_name : ElementaryTypeName def __init__ ( self , init : IrInitTuple , elementary_type_name_expression : SolcElementaryTypeNameExpression , parent : SolidityAbc , ): super () . __init__ ( init , elementary_type_name_expression , parent ) self . _type_name = ElementaryTypeName ( init , elementary_type_name_expression . type_name , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _type_name @property def parent ( self ) -> SolidityAbc : return self . _parent @property def type_name ( self ) -> ElementaryTypeName : return self . _type_name @property def is_ref_to_state_variable ( self ) -> bool : return False @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"Elementary type name expression"},{"location":"api-reference/ir/expressions/elementary-type-name-expression/#woke.ast.ir.expression.elementary_type_name_expression","text":"","title":"elementary_type_name_expression"},{"location":"api-reference/ir/expressions/elementary-type-name-expression/#woke.ast.ir.expression.elementary_type_name_expression.ElementaryTypeNameExpression","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/elementary_type_name_expression.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 class ElementaryTypeNameExpression ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcElementaryTypeNameExpression _parent : SolidityAbc # TODO: make this more specific _type_name : ElementaryTypeName def __init__ ( self , init : IrInitTuple , elementary_type_name_expression : SolcElementaryTypeNameExpression , parent : SolidityAbc , ): super () . __init__ ( init , elementary_type_name_expression , parent ) self . _type_name = ElementaryTypeName ( init , elementary_type_name_expression . type_name , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _type_name @property def parent ( self ) -> SolidityAbc : return self . _parent @property def type_name ( self ) -> ElementaryTypeName : return self . _type_name @property def is_ref_to_state_variable ( self ) -> bool : return False @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"ElementaryTypeNameExpression"},{"location":"api-reference/ir/expressions/function-call-options/","text":"woke.ast.ir.expression.function_call_options module # FunctionCallOptions class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/function_call_options.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class FunctionCallOptions ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcFunctionCallOptions _parent : SolidityAbc # TODO: make this more specific _expression : ExpressionAbc _names : List [ str ] _options : List [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , function_call_options : SolcFunctionCallOptions , parent : SolidityAbc , ): super () . __init__ ( init , function_call_options , parent ) self . _expression = ExpressionAbc . from_ast ( init , function_call_options . expression , self ) self . _names = list ( function_call_options . names ) self . _options = [ ExpressionAbc . from_ast ( init , option , self ) for option in function_call_options . options ] def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _expression for option in self . _options : yield from option @property def parent ( self ) -> SolidityAbc : return self . _parent @property def expression ( self ) -> ExpressionAbc : return self . _expression @property def names ( self ) -> Tuple [ str ]: return tuple ( self . _names ) @property def options ( self ) -> Tuple [ ExpressionAbc ]: return tuple ( self . _options ) @property def is_ref_to_state_variable ( self ) -> bool : return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . expression . modifies_state | reduce ( or_ , ( option . modifies_state for option in self . options ), set (), ) if \"value\" in self . names : ret |= {( self , ModifiesStateFlag . SENDS_ETHER )} return ret","title":"Function call options"},{"location":"api-reference/ir/expressions/function-call-options/#woke.ast.ir.expression.function_call_options","text":"","title":"function_call_options"},{"location":"api-reference/ir/expressions/function-call-options/#woke.ast.ir.expression.function_call_options.FunctionCallOptions","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/function_call_options.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class FunctionCallOptions ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcFunctionCallOptions _parent : SolidityAbc # TODO: make this more specific _expression : ExpressionAbc _names : List [ str ] _options : List [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , function_call_options : SolcFunctionCallOptions , parent : SolidityAbc , ): super () . __init__ ( init , function_call_options , parent ) self . _expression = ExpressionAbc . from_ast ( init , function_call_options . expression , self ) self . _names = list ( function_call_options . names ) self . _options = [ ExpressionAbc . from_ast ( init , option , self ) for option in function_call_options . options ] def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _expression for option in self . _options : yield from option @property def parent ( self ) -> SolidityAbc : return self . _parent @property def expression ( self ) -> ExpressionAbc : return self . _expression @property def names ( self ) -> Tuple [ str ]: return tuple ( self . _names ) @property def options ( self ) -> Tuple [ ExpressionAbc ]: return tuple ( self . _options ) @property def is_ref_to_state_variable ( self ) -> bool : return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . expression . modifies_state | reduce ( or_ , ( option . modifies_state for option in self . options ), set (), ) if \"value\" in self . names : ret |= {( self , ModifiesStateFlag . SENDS_ETHER )} return ret","title":"FunctionCallOptions"},{"location":"api-reference/ir/expressions/function-call/","text":"woke.ast.ir.expression.function_call module # FunctionCall class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/function_call.py 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 class FunctionCall ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcFunctionCall _parent : SolidityAbc # TODO: make this more specific _arguments : List [ ExpressionAbc ] _expression : ExpressionAbc _kind : FunctionCallKind _names : List [ str ] _try_call : bool _recursion_lock : bool def __init__ ( self , init : IrInitTuple , function_call : SolcFunctionCall , parent : SolidityAbc ): super () . __init__ ( init , function_call , parent ) self . _recursion_lock = False self . _kind = function_call . kind self . _names = list ( function_call . names ) self . _try_call = function_call . try_call self . _expression = ExpressionAbc . from_ast ( init , function_call . expression , self ) self . _arguments = [ ExpressionAbc . from_ast ( init , argument , self ) for argument in function_call . arguments ] def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for argument in self . _arguments : yield from argument yield from self . _expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def kind ( self ) -> FunctionCallKind : return self . _kind @property def names ( self ) -> Tuple [ str ]: return tuple ( self . _names ) @property def try_call ( self ) -> bool : return self . _try_call @property def expression ( self ) -> ExpressionAbc : return self . _expression @property def arguments ( self ) -> Tuple [ ExpressionAbc ]: return tuple ( self . _arguments ) @property @lru_cache ( maxsize = 2048 ) def function_called ( self , ) -> Optional [ Union [ EventDefinition , ErrorDefinition , FunctionDefinition , GlobalSymbolsEnum , StructDefinition , VariableDeclaration , ] ]: if self . kind == FunctionCallKind . TYPE_CONVERSION : return None node = self . expression while True : if isinstance ( node , Identifier ): referenced_declaration = node . referenced_declaration if isinstance ( referenced_declaration , ( EventDefinition , ErrorDefinition , FunctionDefinition , GlobalSymbolsEnum , StructDefinition , VariableDeclaration , ), ): return referenced_declaration else : assert ( False ), f \"Unexpected function call referenced declaration type: { referenced_declaration } \" elif isinstance ( node , MemberAccess ): referenced_declaration = node . referenced_declaration if isinstance ( referenced_declaration , ( EventDefinition , ErrorDefinition , FunctionDefinition , GlobalSymbolsEnum , StructDefinition , VariableDeclaration , ), ): return referenced_declaration else : assert ( False ), f \"Unexpected function call referenced declaration type: { referenced_declaration } \" elif isinstance ( node , FunctionCall ): node = node . expression while isinstance ( node , MemberAccess ) and node . referenced_declaration in { GlobalSymbolsEnum . FUNCTION_VALUE , GlobalSymbolsEnum . FUNCTION_GAS , }: node = node . expression elif isinstance ( node , FunctionCallOptions ): node = node . expression elif isinstance ( node , NewExpression ): return None elif isinstance ( node , TupleExpression ): if len ( node . components ) != 1 : assert ( False ), f \"Unexpected function call child node: { node } \\n { self . source } \" node = node . components [ 0 ] else : assert ( False ), f \"Unexpected function call child node: { node } \\n { self . source } \" @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : if self . kind == FunctionCallKind . TYPE_CONVERSION : return self . expression . is_ref_to_state_variable return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: if self . _recursion_lock : return set () self . _recursion_lock = True ret = self . expression . modifies_state | reduce ( or_ , ( arg . modifies_state for arg in self . arguments ), set () ) if self . kind == FunctionCallKind . FUNCTION_CALL : called_function = self . function_called if called_function in { GlobalSymbolsEnum . SELFDESTRUCT , GlobalSymbolsEnum . SUICIDE , }: ret |= {( self , ModifiesStateFlag . SELFDESTRUCTS )} elif called_function in { GlobalSymbolsEnum . ADDRESS_TRANSFER , GlobalSymbolsEnum . ADDRESS_SEND , }: ret |= {( self , ModifiesStateFlag . SENDS_ETHER )} elif called_function == GlobalSymbolsEnum . ADDRESS_CALL : ret |= {( self , ModifiesStateFlag . PERFORMS_CALL )} elif called_function == GlobalSymbolsEnum . ADDRESS_DELEGATECALL : ret |= {( self , ModifiesStateFlag . PERFORMS_DELEGATECALL )} elif ( called_function in { GlobalSymbolsEnum . ARRAY_PUSH , GlobalSymbolsEnum . ARRAY_POP } and self . expression . is_ref_to_state_variable ): ret |= {( self , ModifiesStateFlag . MODIFIES_STATE_VAR )} elif called_function == GlobalSymbolsEnum . FUNCTION_VALUE : ret |= {( self , ModifiesStateFlag . SENDS_ETHER )} elif isinstance ( called_function , FunctionDefinition ): if called_function . state_mutability in { StateMutability . PURE , StateMutability . VIEW , }: pass elif called_function . body is not None : ret |= called_function . body . modifies_state for modifier in called_function . modifiers : modifier_def = modifier . modifier_name . referenced_declaration assert isinstance ( modifier_def , ModifierDefinition ) if modifier_def . body is not None : ret |= modifier_def . body . modifies_state elif called_function . state_mutability == StateMutability . NONPAYABLE : ret |= { ( self , ModifiesStateFlag . CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION , ) } elif called_function . state_mutability == StateMutability . PAYABLE : ret |= { ( self , ModifiesStateFlag . CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION ) } else : assert False self . _recursion_lock = False return ret","title":"Function call"},{"location":"api-reference/ir/expressions/function-call/#woke.ast.ir.expression.function_call","text":"","title":"function_call"},{"location":"api-reference/ir/expressions/function-call/#woke.ast.ir.expression.function_call.FunctionCall","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/function_call.pyclass FunctionCall ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcFunctionCall _parent : SolidityAbc # TODO: make this more specific _arguments : List [ ExpressionAbc ] _expression : ExpressionAbc _kind : FunctionCallKind _names : List [ str ] _try_call : bool _recursion_lock : bool def __init__ ( self , init : IrInitTuple , function_call : SolcFunctionCall , parent : SolidityAbc ): super () . __init__ ( init , function_call , parent ) self . _recursion_lock = False self . _kind = function_call . kind self . _names = list ( function_call . names ) self . _try_call = function_call . try_call self . _expression = ExpressionAbc . from_ast ( init , function_call . expression , self ) self . _arguments = [ ExpressionAbc . from_ast ( init , argument , self ) for argument in function_call . arguments ] def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for argument in self . _arguments : yield from argument yield from self . _expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def kind ( self ) -> FunctionCallKind : return self . _kind @property def names ( self ) -> Tuple [ str ]: return tuple ( self . _names ) @property def try_call ( self ) -> bool : return self . _try_call @property def expression ( self ) -> ExpressionAbc : return self . _expression @property def arguments ( self ) -> Tuple [ ExpressionAbc ]: return tuple ( self . _arguments ) @property @lru_cache ( maxsize = 2048 ) def function_called ( self , ) -> Optional [ Union [ EventDefinition , ErrorDefinition , FunctionDefinition , GlobalSymbolsEnum , StructDefinition , VariableDeclaration , ] ]: if self . kind == FunctionCallKind . TYPE_CONVERSION : return None node = self . expression while True : if isinstance ( node , Identifier ): referenced_declaration = node . referenced_declaration if isinstance ( referenced_declaration , ( EventDefinition , ErrorDefinition , FunctionDefinition , GlobalSymbolsEnum , StructDefinition , VariableDeclaration , ), ): return referenced_declaration else : assert ( False ), f \"Unexpected function call referenced declaration type: { referenced_declaration } \" elif isinstance ( node , MemberAccess ): referenced_declaration = node . referenced_declaration if isinstance ( referenced_declaration , ( EventDefinition , ErrorDefinition , FunctionDefinition , GlobalSymbolsEnum , StructDefinition , VariableDeclaration , ), ): return referenced_declaration else : assert ( False ), f \"Unexpected function call referenced declaration type: { referenced_declaration } \" elif isinstance ( node , FunctionCall ): node = node . expression while isinstance ( node , MemberAccess ) and node . referenced_declaration in { GlobalSymbolsEnum . FUNCTION_VALUE , GlobalSymbolsEnum . FUNCTION_GAS , }: node = node . expression elif isinstance ( node , FunctionCallOptions ): node = node . expression elif isinstance ( node , NewExpression ): return None elif isinstance ( node , TupleExpression ): if len ( node . components ) != 1 : assert ( False ), f \"Unexpected function call child node: { node } \\n { self . source } \" node = node . components [ 0 ] else : assert ( False ), f \"Unexpected function call child node: { node } \\n { self . source } \" @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : if self . kind == FunctionCallKind . TYPE_CONVERSION : return self . expression . is_ref_to_state_variable return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: if self . _recursion_lock : return set () self . _recursion_lock = True ret = self . expression . modifies_state | reduce ( or_ , ( arg . modifies_state for arg in self . arguments ), set () ) if self . kind == FunctionCallKind . FUNCTION_CALL : called_function = self . function_called if called_function in { GlobalSymbolsEnum . SELFDESTRUCT , GlobalSymbolsEnum . SUICIDE , }: ret |= {( self , ModifiesStateFlag . SELFDESTRUCTS )} elif called_function in { GlobalSymbolsEnum . ADDRESS_TRANSFER , GlobalSymbolsEnum . ADDRESS_SEND , }: ret |= {( self , ModifiesStateFlag . SENDS_ETHER )} elif called_function == GlobalSymbolsEnum . ADDRESS_CALL : ret |= {( self , ModifiesStateFlag . PERFORMS_CALL )} elif called_function == GlobalSymbolsEnum . ADDRESS_DELEGATECALL : ret |= {( self , ModifiesStateFlag . PERFORMS_DELEGATECALL )} elif ( called_function in { GlobalSymbolsEnum . ARRAY_PUSH , GlobalSymbolsEnum . ARRAY_POP } and self . expression . is_ref_to_state_variable ): ret |= {( self , ModifiesStateFlag . MODIFIES_STATE_VAR )} elif called_function == GlobalSymbolsEnum . FUNCTION_VALUE : ret |= {( self , ModifiesStateFlag . SENDS_ETHER )} elif isinstance ( called_function , FunctionDefinition ): if called_function . state_mutability in { StateMutability . PURE , StateMutability . VIEW , }: pass elif called_function . body is not None : ret |= called_function . body . modifies_state for modifier in called_function . modifiers : modifier_def = modifier . modifier_name . referenced_declaration assert isinstance ( modifier_def , ModifierDefinition ) if modifier_def . body is not None : ret |= modifier_def . body . modifies_state elif called_function . state_mutability == StateMutability . NONPAYABLE : ret |= { ( self , ModifiesStateFlag . CALLS_UNIMPLEMENTED_NONPAYABLE_FUNCTION , ) } elif called_function . state_mutability == StateMutability . PAYABLE : ret |= { ( self , ModifiesStateFlag . CALLS_UNIMPLEMENTED_PAYABLE_FUNCTION ) } else : assert False self . _recursion_lock = False return ret","title":"FunctionCall"},{"location":"api-reference/ir/expressions/identifier/","text":"woke.ast.ir.expression.identifier module # Identifier class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/identifier.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Identifier ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcIdentifier _parent : SolidityAbc # TODO: make this more specific _name : str _overloaded_declarations : List [ AstNodeId ] _referenced_declaration_id : Optional [ AstNodeId ] def __init__ ( self , init : IrInitTuple , identifier : SolcIdentifier , parent : SolidityAbc ): from woke.ast.ir.meta.import_directive import ImportDirective super () . __init__ ( init , identifier , parent ) self . _name = identifier . name self . _overloaded_declarations = list ( identifier . overloaded_declarations ) self . _referenced_declaration_id = identifier . referenced_declaration if self . _referenced_declaration_id is None : assert isinstance ( self . _parent , ImportDirective ) init . reference_resolver . register_post_process_callback ( self . _post_process ) def _post_process ( self , callback_params : CallbackParams ): assert self . _referenced_declaration_id is not None if self . _referenced_declaration_id < 0 : global_symbol = GlobalSymbolsEnum ( self . _referenced_declaration_id ) self . _reference_resolver . register_global_symbol_reference ( global_symbol , self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , global_symbol ) ) else : referenced_declaration = self . referenced_declaration assert isinstance ( referenced_declaration , DeclarationAbc ) referenced_declaration . register_reference ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , referenced_declaration ) ) def _destroy ( self , referenced_declaration : Union [ GlobalSymbolsEnum , DeclarationAbc ] ) -> None : if isinstance ( referenced_declaration , GlobalSymbolsEnum ): self . _reference_resolver . unregister_global_symbol_reference ( referenced_declaration , self ) elif isinstance ( referenced_declaration , DeclarationAbc ): referenced_declaration . unregister_reference ( self ) else : raise TypeError ( f \"Unexpected type: { type ( referenced_declaration ) } \" ) @property def parent ( self ) -> SolidityAbc : return self . _parent @property def name ( self ) -> str : return self . _name @property def overloaded_declarations ( self ) -> Tuple [ DeclarationAbc ]: overloaded_declarations = [] for overloaded_declaration_id in self . _overloaded_declarations : if overloaded_declaration_id < 0 : continue overloaded_declaration = self . _reference_resolver . resolve_node ( overloaded_declaration_id , self . _cu_hash ) assert isinstance ( overloaded_declaration , DeclarationAbc ) overloaded_declarations . append ( overloaded_declaration ) return tuple ( overloaded_declarations ) @property def referenced_declaration ( self ) -> Union [ DeclarationAbc , GlobalSymbolsEnum ]: assert self . _referenced_declaration_id is not None if self . _referenced_declaration_id < 0 : return GlobalSymbolsEnum ( self . _referenced_declaration_id ) node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : referenced_declaration = self . referenced_declaration return ( isinstance ( referenced_declaration , VariableDeclaration ) and referenced_declaration . is_state_variable ) @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"Identifier"},{"location":"api-reference/ir/expressions/identifier/#woke.ast.ir.expression.identifier","text":"","title":"identifier"},{"location":"api-reference/ir/expressions/identifier/#woke.ast.ir.expression.identifier.Identifier","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/identifier.py 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 class Identifier ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcIdentifier _parent : SolidityAbc # TODO: make this more specific _name : str _overloaded_declarations : List [ AstNodeId ] _referenced_declaration_id : Optional [ AstNodeId ] def __init__ ( self , init : IrInitTuple , identifier : SolcIdentifier , parent : SolidityAbc ): from woke.ast.ir.meta.import_directive import ImportDirective super () . __init__ ( init , identifier , parent ) self . _name = identifier . name self . _overloaded_declarations = list ( identifier . overloaded_declarations ) self . _referenced_declaration_id = identifier . referenced_declaration if self . _referenced_declaration_id is None : assert isinstance ( self . _parent , ImportDirective ) init . reference_resolver . register_post_process_callback ( self . _post_process ) def _post_process ( self , callback_params : CallbackParams ): assert self . _referenced_declaration_id is not None if self . _referenced_declaration_id < 0 : global_symbol = GlobalSymbolsEnum ( self . _referenced_declaration_id ) self . _reference_resolver . register_global_symbol_reference ( global_symbol , self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , global_symbol ) ) else : referenced_declaration = self . referenced_declaration assert isinstance ( referenced_declaration , DeclarationAbc ) referenced_declaration . register_reference ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , referenced_declaration ) ) def _destroy ( self , referenced_declaration : Union [ GlobalSymbolsEnum , DeclarationAbc ] ) -> None : if isinstance ( referenced_declaration , GlobalSymbolsEnum ): self . _reference_resolver . unregister_global_symbol_reference ( referenced_declaration , self ) elif isinstance ( referenced_declaration , DeclarationAbc ): referenced_declaration . unregister_reference ( self ) else : raise TypeError ( f \"Unexpected type: { type ( referenced_declaration ) } \" ) @property def parent ( self ) -> SolidityAbc : return self . _parent @property def name ( self ) -> str : return self . _name @property def overloaded_declarations ( self ) -> Tuple [ DeclarationAbc ]: overloaded_declarations = [] for overloaded_declaration_id in self . _overloaded_declarations : if overloaded_declaration_id < 0 : continue overloaded_declaration = self . _reference_resolver . resolve_node ( overloaded_declaration_id , self . _cu_hash ) assert isinstance ( overloaded_declaration , DeclarationAbc ) overloaded_declarations . append ( overloaded_declaration ) return tuple ( overloaded_declarations ) @property def referenced_declaration ( self ) -> Union [ DeclarationAbc , GlobalSymbolsEnum ]: assert self . _referenced_declaration_id is not None if self . _referenced_declaration_id < 0 : return GlobalSymbolsEnum ( self . _referenced_declaration_id ) node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : referenced_declaration = self . referenced_declaration return ( isinstance ( referenced_declaration , VariableDeclaration ) and referenced_declaration . is_state_variable ) @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"Identifier"},{"location":"api-reference/ir/expressions/index-access/","text":"woke.ast.ir.expression.index_access module # IndexAccess class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/index_access.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class IndexAccess ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcIndexAccess _parent : SolidityAbc # TODO: make this more specific _base_expression : ExpressionAbc _index_expression : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , index_access : SolcIndexAccess , parent : SolidityAbc ): super () . __init__ ( init , index_access , parent ) self . _base_expression = ExpressionAbc . from_ast ( init , index_access . base_expression , self ) if index_access . index_expression is None : self . _index_expression = None else : self . _index_expression = ExpressionAbc . from_ast ( init , index_access . index_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _base_expression if self . _index_expression is not None : yield from self . _index_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def base_expression ( self ) -> ExpressionAbc : return self . _base_expression @property def index_expression ( self ) -> Optional [ ExpressionAbc ]: return self . _index_expression @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : return self . base_expression . is_ref_to_state_variable @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . base_expression . modifies_state if self . index_expression is not None : ret |= self . index_expression . modifies_state return ret","title":"Index access"},{"location":"api-reference/ir/expressions/index-access/#woke.ast.ir.expression.index_access","text":"","title":"index_access"},{"location":"api-reference/ir/expressions/index-access/#woke.ast.ir.expression.index_access.IndexAccess","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/index_access.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 class IndexAccess ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcIndexAccess _parent : SolidityAbc # TODO: make this more specific _base_expression : ExpressionAbc _index_expression : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , index_access : SolcIndexAccess , parent : SolidityAbc ): super () . __init__ ( init , index_access , parent ) self . _base_expression = ExpressionAbc . from_ast ( init , index_access . base_expression , self ) if index_access . index_expression is None : self . _index_expression = None else : self . _index_expression = ExpressionAbc . from_ast ( init , index_access . index_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _base_expression if self . _index_expression is not None : yield from self . _index_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def base_expression ( self ) -> ExpressionAbc : return self . _base_expression @property def index_expression ( self ) -> Optional [ ExpressionAbc ]: return self . _index_expression @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : return self . base_expression . is_ref_to_state_variable @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . base_expression . modifies_state if self . index_expression is not None : ret |= self . index_expression . modifies_state return ret","title":"IndexAccess"},{"location":"api-reference/ir/expressions/index-range-access/","text":"woke.ast.ir.expression.index_range_access module # IndexRangeAccess class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/index_range_access.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class IndexRangeAccess ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcIndexRangeAccess _parent : SolidityAbc # TODO: make this more specific _base_expression : ExpressionAbc _start_expression : Optional [ ExpressionAbc ] _end_expression : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , index_range_access : SolcIndexRangeAccess , parent : SolidityAbc , ): super () . __init__ ( init , index_range_access , parent ) self . _base_expression = ExpressionAbc . from_ast ( init , index_range_access . base_expression , self ) if index_range_access . start_expression is None : self . _start_expression = None else : self . _start_expression = ExpressionAbc . from_ast ( init , index_range_access . start_expression , self ) if index_range_access . end_expression is None : self . _end_expression = None else : self . _end_expression = ExpressionAbc . from_ast ( init , index_range_access . end_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _base_expression if self . _start_expression is not None : yield from self . _start_expression if self . _end_expression is not None : yield from self . _end_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def base_expression ( self ) -> ExpressionAbc : return self . _base_expression @property def start_expression ( self ) -> Optional [ ExpressionAbc ]: return self . _start_expression @property def end_expression ( self ) -> Optional [ ExpressionAbc ]: return self . _end_expression @property def is_ref_to_state_variable ( self ) -> bool : # index range access in only supported for dynamic calldata arrays return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . base_expression . modifies_state if self . start_expression is not None : ret |= self . start_expression . modifies_state if self . end_expression is not None : ret |= self . end_expression . modifies_state return ret","title":"Index range access"},{"location":"api-reference/ir/expressions/index-range-access/#woke.ast.ir.expression.index_range_access","text":"","title":"index_range_access"},{"location":"api-reference/ir/expressions/index-range-access/#woke.ast.ir.expression.index_range_access.IndexRangeAccess","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/index_range_access.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 class IndexRangeAccess ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcIndexRangeAccess _parent : SolidityAbc # TODO: make this more specific _base_expression : ExpressionAbc _start_expression : Optional [ ExpressionAbc ] _end_expression : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , index_range_access : SolcIndexRangeAccess , parent : SolidityAbc , ): super () . __init__ ( init , index_range_access , parent ) self . _base_expression = ExpressionAbc . from_ast ( init , index_range_access . base_expression , self ) if index_range_access . start_expression is None : self . _start_expression = None else : self . _start_expression = ExpressionAbc . from_ast ( init , index_range_access . start_expression , self ) if index_range_access . end_expression is None : self . _end_expression = None else : self . _end_expression = ExpressionAbc . from_ast ( init , index_range_access . end_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _base_expression if self . _start_expression is not None : yield from self . _start_expression if self . _end_expression is not None : yield from self . _end_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def base_expression ( self ) -> ExpressionAbc : return self . _base_expression @property def start_expression ( self ) -> Optional [ ExpressionAbc ]: return self . _start_expression @property def end_expression ( self ) -> Optional [ ExpressionAbc ]: return self . _end_expression @property def is_ref_to_state_variable ( self ) -> bool : # index range access in only supported for dynamic calldata arrays return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . base_expression . modifies_state if self . start_expression is not None : ret |= self . start_expression . modifies_state if self . end_expression is not None : ret |= self . end_expression . modifies_state return ret","title":"IndexRangeAccess"},{"location":"api-reference/ir/expressions/literal/","text":"woke.ast.ir.expression.literal module # Literal class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/literal.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Literal ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcLiteral _parent : SolidityAbc # TODO: make this more specific _hex_value : str _kind : LiteralKind _subdenomination : Optional [ str ] _value : Optional [ str ] def __init__ ( self , init : IrInitTuple , literal : SolcLiteral , parent : SolidityAbc ): super () . __init__ ( init , literal , parent ) self . _hex_value = literal . hex_value self . _kind = literal . kind self . _subdenomination = literal . subdenomination self . _value = literal . value @property def parent ( self ) -> SolidityAbc : return self . _parent @property def hex_value ( self ) -> str : return self . _hex_value @property def kind ( self ) -> LiteralKind : return self . _kind @property def subdenomination ( self ) -> Optional [ str ]: return self . _subdenomination @property def value ( self ) -> Optional [ str ]: return self . _value @property def is_ref_to_state_variable ( self ) -> bool : return False @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"Literal"},{"location":"api-reference/ir/expressions/literal/#woke.ast.ir.expression.literal","text":"","title":"literal"},{"location":"api-reference/ir/expressions/literal/#woke.ast.ir.expression.literal.Literal","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/literal.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Literal ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcLiteral _parent : SolidityAbc # TODO: make this more specific _hex_value : str _kind : LiteralKind _subdenomination : Optional [ str ] _value : Optional [ str ] def __init__ ( self , init : IrInitTuple , literal : SolcLiteral , parent : SolidityAbc ): super () . __init__ ( init , literal , parent ) self . _hex_value = literal . hex_value self . _kind = literal . kind self . _subdenomination = literal . subdenomination self . _value = literal . value @property def parent ( self ) -> SolidityAbc : return self . _parent @property def hex_value ( self ) -> str : return self . _hex_value @property def kind ( self ) -> LiteralKind : return self . _kind @property def subdenomination ( self ) -> Optional [ str ]: return self . _subdenomination @property def value ( self ) -> Optional [ str ]: return self . _value @property def is_ref_to_state_variable ( self ) -> bool : return False @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"Literal"},{"location":"api-reference/ir/expressions/member-access/","text":"woke.ast.ir.expression.member_access module # MemberAccess class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/member_access.pyclass MemberAccess ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcMemberAccess _parent : SolidityAbc # TODO: make this more specific _expression : ExpressionAbc _member_name : str _referenced_declaration_id : Optional [ AstNodeId ] def __init__ ( self , init : IrInitTuple , member_access : SolcMemberAccess , parent : SolidityAbc ): super () . __init__ ( init , member_access , parent ) self . _expression = ExpressionAbc . from_ast ( init , member_access . expression , self ) assert self . _expression . byte_location [ 0 ] == self . byte_location [ 0 ] assert self . _expression . byte_location [ 1 ] < self . byte_location [ 1 ] self . _member_name = member_access . member_name self . _referenced_declaration_id = member_access . referenced_declaration self . _reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _expression def _post_process ( self , callback_params : CallbackParams ): # workaround for enum value bug in Solidity versions prior to 0.8.2 if self . _referenced_declaration_id is None : if isinstance ( self . _expression , Identifier ) or ( isinstance ( self . _expression , MemberAccess ) and self . _expression . _referenced_declaration_id is not None ): referenced_declaration = self . _expression . referenced_declaration if isinstance ( referenced_declaration , EnumDefinition ): for enum_value in referenced_declaration . values : if enum_value . name == self . _member_name : node_path_order = ( self . _reference_resolver . get_node_path_order ( AstNodeId ( enum_value . ast_node_id ), enum_value . cu_hash , ) ) this_cu_id = self . _reference_resolver . get_ast_id_from_cu_node_path_order ( node_path_order , self . cu_hash ) self . _referenced_declaration_id = this_cu_id break if self . _referenced_declaration_id is None : expr_type = self . expression . type if isinstance ( expr_type , Address ): if self . member_name == \"balance\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_BALANCE ) elif self . member_name == \"code\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_CODE ) elif self . member_name == \"codehash\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_CODEHASH ) elif self . member_name == \"transfer\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_TRANSFER ) elif self . member_name == \"send\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_SEND ) elif self . member_name == \"call\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_CALL ) elif self . member_name == \"delegatecall\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_DELEGATECALL ) elif self . member_name == \"staticcall\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_STATICCALL ) else : assert False , f \"Unknown address member: { self . member_name } \" elif isinstance ( expr_type , Array ): if self . member_name == \"length\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ARRAY_LENGTH ) elif self . member_name == \"push\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ARRAY_PUSH ) elif self . member_name == \"pop\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ARRAY_POP ) else : assert False , f \"Unknown array member: { self . member_name } \" elif isinstance ( expr_type , ( Bytes , FixedBytes )): if self . member_name == \"length\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BYTES_LENGTH ) elif self . member_name == \"push\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BYTES_PUSH ) else : assert False , f \"Unknown bytes member: { self . member_name } \" elif isinstance ( expr_type , Function ): if self . member_name == \"selector\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . FUNCTION_SELECTOR ) elif self . member_name == \"value\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . FUNCTION_VALUE ) elif self . member_name == \"gas\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . FUNCTION_GAS ) elif self . member_name == \"address\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . FUNCTION_ADDRESS ) else : assert False , f \"Unknown function member: { self . member_name } \" elif isinstance ( expr_type , Magic ): if expr_type . kind == MagicTypeKind . BLOCK : if self . member_name == \"basefee\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_BASEFEE ) elif self . member_name == \"chainid\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_CHAINID ) elif self . member_name == \"coinbase\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_COINBASE ) elif self . member_name == \"difficulty\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_DIFFICULTY ) elif self . member_name == \"gaslimit\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_GASLIMIT ) elif self . member_name == \"number\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_NUMBER ) elif self . member_name == \"timestamp\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_TIMESTAMP ) else : assert False , f \"Unknown block member { self . member_name } \" elif expr_type . kind == MagicTypeKind . MESSAGE : if self . member_name == \"data\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . MSG_DATA ) elif self . member_name == \"sender\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . MSG_SENDER ) elif self . member_name == \"sig\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . MSG_SIG ) elif self . member_name == \"value\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . MSG_VALUE ) else : assert False , f \"Unknown msg member { self . member_name } \" elif expr_type . kind == MagicTypeKind . TRANSACTION : if self . member_name == \"gasprice\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TX_GASPRICE ) elif self . member_name == \"origin\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TX_ORIGIN ) else : assert False , f \"Unknown tx member { self . member_name } \" elif expr_type . kind == MagicTypeKind . ABI : if self . member_name == \"decode\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_DECODE ) elif self . member_name == \"encode\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE ) elif self . member_name == \"encodePacked\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE_PACKED ) elif self . member_name == \"encodeWithSelector\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE_WITH_SELECTOR ) elif self . member_name == \"encodeWithSignature\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE_WITH_SIGNATURE ) elif self . member_name == \"encodeCall\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE_CALL ) else : assert False , f \"Unknown abi member { self . member_name } \" elif expr_type . kind == MagicTypeKind . META_TYPE : if self . member_name == \"name\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_NAME ) elif self . member_name == \"creationCode\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_CREATION_CODE ) elif self . member_name == \"runtimeCode\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_RUNTIME_CODE ) elif self . member_name == \"interfaceId\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_INTERFACE_ID ) elif self . member_name == \"min\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_MIN ) elif self . member_name == \"max\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_MAX ) else : assert False , f \"Unknown type member { self . member_name } \" elif isinstance ( expr_type , Type ): if isinstance ( expr_type . actual_type , Bytes ): if self . member_name == \"concat\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BYTES_CONCAT ) else : assert False , f \"Unknown bytes member { self . member_name } \" elif isinstance ( expr_type . actual_type , String ): if self . member_name == \"concat\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . STRING_CONCAT ) else : assert False , f \"Unknown string member { self . member_name } \" elif isinstance ( expr_type . actual_type , UserDefinedValueType ): if self . member_name == \"wrap\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . USER_DEFINED_VALUE_TYPE_WRAP ) elif self . member_name == \"unwrap\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . USER_DEFINED_VALUE_TYPE_UNWRAP ) else : assert ( False ), f \"Unknown user defined value type member { self . member_name } \" else : assert ( False ), f \"Unknown type member { self . member_name } { expr_type . actual_type } \" assert ( self . _referenced_declaration_id is not None ), f \"Unknown member { self . member_name } \" if self . _referenced_declaration_id < 0 : global_symbol = GlobalSymbolsEnum ( self . _referenced_declaration_id ) self . _reference_resolver . register_global_symbol_reference ( global_symbol , self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , global_symbol ) ) else : referenced_declaration = self . referenced_declaration assert isinstance ( referenced_declaration , DeclarationAbc ) referenced_declaration . register_reference ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , referenced_declaration ) ) def _destroy ( self , referenced_declaration : Union [ GlobalSymbolsEnum , DeclarationAbc ] ) -> None : if isinstance ( referenced_declaration , GlobalSymbolsEnum ): self . _reference_resolver . unregister_global_symbol_reference ( referenced_declaration , self ) elif isinstance ( referenced_declaration , DeclarationAbc ): referenced_declaration . unregister_reference ( self ) else : raise TypeError ( f \"Unexpected type: { type ( referenced_declaration ) } \" ) @property def parent ( self ) -> SolidityAbc : return self . _parent @property def expression ( self ) -> ExpressionAbc : return self . _expression @property def member_name ( self ) -> str : return self . _member_name @property @lru_cache ( maxsize = 2048 ) def member_byte_location ( self ) -> Tuple [ int , int ]: relative_expression_end = ( self . _expression . byte_location [ 1 ] - self . byte_location [ 0 ] ) match = MEMBER_RE . match ( self . _source [ relative_expression_end :]) assert match return self . _expression . byte_location [ 1 ] + match . start ( \"member\" ), self . _expression . byte_location [ 1 ] + match . end ( \"member\" ) @property def referenced_declaration ( self ) -> Union [ DeclarationAbc , GlobalSymbolsEnum ]: assert self . _referenced_declaration_id is not None if self . _referenced_declaration_id < 0 : return GlobalSymbolsEnum ( self . _referenced_declaration_id ) node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : referenced_declaration = self . referenced_declaration return ( isinstance ( referenced_declaration , VariableDeclaration ) and referenced_declaration . is_state_variable or self . expression . is_ref_to_state_variable ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . expression . modifies_state","title":"Member access"},{"location":"api-reference/ir/expressions/member-access/#woke.ast.ir.expression.member_access","text":"","title":"member_access"},{"location":"api-reference/ir/expressions/member-access/#woke.ast.ir.expression.member_access.MemberAccess","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/member_access.pyclass MemberAccess ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcMemberAccess _parent : SolidityAbc # TODO: make this more specific _expression : ExpressionAbc _member_name : str _referenced_declaration_id : Optional [ AstNodeId ] def __init__ ( self , init : IrInitTuple , member_access : SolcMemberAccess , parent : SolidityAbc ): super () . __init__ ( init , member_access , parent ) self . _expression = ExpressionAbc . from_ast ( init , member_access . expression , self ) assert self . _expression . byte_location [ 0 ] == self . byte_location [ 0 ] assert self . _expression . byte_location [ 1 ] < self . byte_location [ 1 ] self . _member_name = member_access . member_name self . _referenced_declaration_id = member_access . referenced_declaration self . _reference_resolver . register_post_process_callback ( self . _post_process ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _expression def _post_process ( self , callback_params : CallbackParams ): # workaround for enum value bug in Solidity versions prior to 0.8.2 if self . _referenced_declaration_id is None : if isinstance ( self . _expression , Identifier ) or ( isinstance ( self . _expression , MemberAccess ) and self . _expression . _referenced_declaration_id is not None ): referenced_declaration = self . _expression . referenced_declaration if isinstance ( referenced_declaration , EnumDefinition ): for enum_value in referenced_declaration . values : if enum_value . name == self . _member_name : node_path_order = ( self . _reference_resolver . get_node_path_order ( AstNodeId ( enum_value . ast_node_id ), enum_value . cu_hash , ) ) this_cu_id = self . _reference_resolver . get_ast_id_from_cu_node_path_order ( node_path_order , self . cu_hash ) self . _referenced_declaration_id = this_cu_id break if self . _referenced_declaration_id is None : expr_type = self . expression . type if isinstance ( expr_type , Address ): if self . member_name == \"balance\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_BALANCE ) elif self . member_name == \"code\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_CODE ) elif self . member_name == \"codehash\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_CODEHASH ) elif self . member_name == \"transfer\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_TRANSFER ) elif self . member_name == \"send\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_SEND ) elif self . member_name == \"call\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_CALL ) elif self . member_name == \"delegatecall\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_DELEGATECALL ) elif self . member_name == \"staticcall\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ADDRESS_STATICCALL ) else : assert False , f \"Unknown address member: { self . member_name } \" elif isinstance ( expr_type , Array ): if self . member_name == \"length\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ARRAY_LENGTH ) elif self . member_name == \"push\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ARRAY_PUSH ) elif self . member_name == \"pop\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ARRAY_POP ) else : assert False , f \"Unknown array member: { self . member_name } \" elif isinstance ( expr_type , ( Bytes , FixedBytes )): if self . member_name == \"length\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BYTES_LENGTH ) elif self . member_name == \"push\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BYTES_PUSH ) else : assert False , f \"Unknown bytes member: { self . member_name } \" elif isinstance ( expr_type , Function ): if self . member_name == \"selector\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . FUNCTION_SELECTOR ) elif self . member_name == \"value\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . FUNCTION_VALUE ) elif self . member_name == \"gas\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . FUNCTION_GAS ) elif self . member_name == \"address\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . FUNCTION_ADDRESS ) else : assert False , f \"Unknown function member: { self . member_name } \" elif isinstance ( expr_type , Magic ): if expr_type . kind == MagicTypeKind . BLOCK : if self . member_name == \"basefee\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_BASEFEE ) elif self . member_name == \"chainid\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_CHAINID ) elif self . member_name == \"coinbase\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_COINBASE ) elif self . member_name == \"difficulty\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_DIFFICULTY ) elif self . member_name == \"gaslimit\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_GASLIMIT ) elif self . member_name == \"number\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_NUMBER ) elif self . member_name == \"timestamp\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BLOCK_TIMESTAMP ) else : assert False , f \"Unknown block member { self . member_name } \" elif expr_type . kind == MagicTypeKind . MESSAGE : if self . member_name == \"data\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . MSG_DATA ) elif self . member_name == \"sender\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . MSG_SENDER ) elif self . member_name == \"sig\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . MSG_SIG ) elif self . member_name == \"value\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . MSG_VALUE ) else : assert False , f \"Unknown msg member { self . member_name } \" elif expr_type . kind == MagicTypeKind . TRANSACTION : if self . member_name == \"gasprice\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TX_GASPRICE ) elif self . member_name == \"origin\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TX_ORIGIN ) else : assert False , f \"Unknown tx member { self . member_name } \" elif expr_type . kind == MagicTypeKind . ABI : if self . member_name == \"decode\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_DECODE ) elif self . member_name == \"encode\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE ) elif self . member_name == \"encodePacked\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE_PACKED ) elif self . member_name == \"encodeWithSelector\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE_WITH_SELECTOR ) elif self . member_name == \"encodeWithSignature\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE_WITH_SIGNATURE ) elif self . member_name == \"encodeCall\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . ABI_ENCODE_CALL ) else : assert False , f \"Unknown abi member { self . member_name } \" elif expr_type . kind == MagicTypeKind . META_TYPE : if self . member_name == \"name\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_NAME ) elif self . member_name == \"creationCode\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_CREATION_CODE ) elif self . member_name == \"runtimeCode\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_RUNTIME_CODE ) elif self . member_name == \"interfaceId\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_INTERFACE_ID ) elif self . member_name == \"min\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_MIN ) elif self . member_name == \"max\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . TYPE_MAX ) else : assert False , f \"Unknown type member { self . member_name } \" elif isinstance ( expr_type , Type ): if isinstance ( expr_type . actual_type , Bytes ): if self . member_name == \"concat\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . BYTES_CONCAT ) else : assert False , f \"Unknown bytes member { self . member_name } \" elif isinstance ( expr_type . actual_type , String ): if self . member_name == \"concat\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . STRING_CONCAT ) else : assert False , f \"Unknown string member { self . member_name } \" elif isinstance ( expr_type . actual_type , UserDefinedValueType ): if self . member_name == \"wrap\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . USER_DEFINED_VALUE_TYPE_WRAP ) elif self . member_name == \"unwrap\" : self . _referenced_declaration_id = AstNodeId ( GlobalSymbolsEnum . USER_DEFINED_VALUE_TYPE_UNWRAP ) else : assert ( False ), f \"Unknown user defined value type member { self . member_name } \" else : assert ( False ), f \"Unknown type member { self . member_name } { expr_type . actual_type } \" assert ( self . _referenced_declaration_id is not None ), f \"Unknown member { self . member_name } \" if self . _referenced_declaration_id < 0 : global_symbol = GlobalSymbolsEnum ( self . _referenced_declaration_id ) self . _reference_resolver . register_global_symbol_reference ( global_symbol , self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , global_symbol ) ) else : referenced_declaration = self . referenced_declaration assert isinstance ( referenced_declaration , DeclarationAbc ) referenced_declaration . register_reference ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , referenced_declaration ) ) def _destroy ( self , referenced_declaration : Union [ GlobalSymbolsEnum , DeclarationAbc ] ) -> None : if isinstance ( referenced_declaration , GlobalSymbolsEnum ): self . _reference_resolver . unregister_global_symbol_reference ( referenced_declaration , self ) elif isinstance ( referenced_declaration , DeclarationAbc ): referenced_declaration . unregister_reference ( self ) else : raise TypeError ( f \"Unexpected type: { type ( referenced_declaration ) } \" ) @property def parent ( self ) -> SolidityAbc : return self . _parent @property def expression ( self ) -> ExpressionAbc : return self . _expression @property def member_name ( self ) -> str : return self . _member_name @property @lru_cache ( maxsize = 2048 ) def member_byte_location ( self ) -> Tuple [ int , int ]: relative_expression_end = ( self . _expression . byte_location [ 1 ] - self . byte_location [ 0 ] ) match = MEMBER_RE . match ( self . _source [ relative_expression_end :]) assert match return self . _expression . byte_location [ 1 ] + match . start ( \"member\" ), self . _expression . byte_location [ 1 ] + match . end ( \"member\" ) @property def referenced_declaration ( self ) -> Union [ DeclarationAbc , GlobalSymbolsEnum ]: assert self . _referenced_declaration_id is not None if self . _referenced_declaration_id < 0 : return GlobalSymbolsEnum ( self . _referenced_declaration_id ) node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : referenced_declaration = self . referenced_declaration return ( isinstance ( referenced_declaration , VariableDeclaration ) and referenced_declaration . is_state_variable or self . expression . is_ref_to_state_variable ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . expression . modifies_state","title":"MemberAccess"},{"location":"api-reference/ir/expressions/new-expression/","text":"woke.ast.ir.expression.new_expression module # NewExpression class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/new_expression.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class NewExpression ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcNewExpression _parent : SolidityAbc # TODO: make this more specific _type_name : TypeNameAbc def __init__ ( self , init : IrInitTuple , new_expression : SolcNewExpression , parent : SolidityAbc ): super () . __init__ ( init , new_expression , parent ) self . _type_name = TypeNameAbc . from_ast ( init , new_expression . type_name , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _type_name @property def parent ( self ) -> SolidityAbc : return self . _parent @property def type_name ( self ) -> TypeNameAbc : return self . _type_name @property def is_ref_to_state_variable ( self ) -> bool : return False @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: if isinstance ( self . type , Contract ): return {( self , ModifiesStateFlag . DEPLOYS_CONTRACT )} else : return set ()","title":"New expression"},{"location":"api-reference/ir/expressions/new-expression/#woke.ast.ir.expression.new_expression","text":"","title":"new_expression"},{"location":"api-reference/ir/expressions/new-expression/#woke.ast.ir.expression.new_expression.NewExpression","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/new_expression.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class NewExpression ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcNewExpression _parent : SolidityAbc # TODO: make this more specific _type_name : TypeNameAbc def __init__ ( self , init : IrInitTuple , new_expression : SolcNewExpression , parent : SolidityAbc ): super () . __init__ ( init , new_expression , parent ) self . _type_name = TypeNameAbc . from_ast ( init , new_expression . type_name , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _type_name @property def parent ( self ) -> SolidityAbc : return self . _parent @property def type_name ( self ) -> TypeNameAbc : return self . _type_name @property def is_ref_to_state_variable ( self ) -> bool : return False @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: if isinstance ( self . type , Contract ): return {( self , ModifiesStateFlag . DEPLOYS_CONTRACT )} else : return set ()","title":"NewExpression"},{"location":"api-reference/ir/expressions/tuple-expression/","text":"woke.ast.ir.expression.tuple_expression module # TupleExpression class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/tuple_expression.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class TupleExpression ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcTupleExpression _parent : SolidityAbc # TODO: make this more specific _components : List [ Optional [ ExpressionAbc ]] _is_inline_array : bool def __init__ ( self , init : IrInitTuple , tuple_expression : SolcTupleExpression , parent : SolidityAbc , ): super () . __init__ ( init , tuple_expression , parent ) self . _is_inline_array = tuple_expression . is_inline_array self . _components = [] for component in tuple_expression . components : if component is None : self . _components . append ( None ) else : self . _components . append ( ExpressionAbc . from_ast ( init , component , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for component in self . _components : if component is not None : yield from component @property def parent ( self ) -> SolidityAbc : return self . _parent @property def is_inline_array ( self ) -> bool : return self . _is_inline_array @property def components ( self ) -> Tuple [ Optional [ ExpressionAbc ]]: return tuple ( self . _components ) @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : return any ( component . is_ref_to_state_variable for component in self . _components if component is not None ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return reduce ( or_ , ( component . modifies_state for component in self . _components if component is not None ), set (), )","title":"Tuple expression"},{"location":"api-reference/ir/expressions/tuple-expression/#woke.ast.ir.expression.tuple_expression","text":"","title":"tuple_expression"},{"location":"api-reference/ir/expressions/tuple-expression/#woke.ast.ir.expression.tuple_expression.TupleExpression","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/tuple_expression.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class TupleExpression ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcTupleExpression _parent : SolidityAbc # TODO: make this more specific _components : List [ Optional [ ExpressionAbc ]] _is_inline_array : bool def __init__ ( self , init : IrInitTuple , tuple_expression : SolcTupleExpression , parent : SolidityAbc , ): super () . __init__ ( init , tuple_expression , parent ) self . _is_inline_array = tuple_expression . is_inline_array self . _components = [] for component in tuple_expression . components : if component is None : self . _components . append ( None ) else : self . _components . append ( ExpressionAbc . from_ast ( init , component , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for component in self . _components : if component is not None : yield from component @property def parent ( self ) -> SolidityAbc : return self . _parent @property def is_inline_array ( self ) -> bool : return self . _is_inline_array @property def components ( self ) -> Tuple [ Optional [ ExpressionAbc ]]: return tuple ( self . _components ) @property @lru_cache ( maxsize = 2048 ) def is_ref_to_state_variable ( self ) -> bool : return any ( component . is_ref_to_state_variable for component in self . _components if component is not None ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return reduce ( or_ , ( component . modifies_state for component in self . _components if component is not None ), set (), )","title":"TupleExpression"},{"location":"api-reference/ir/expressions/unary-operation/","text":"woke.ast.ir.expression.unary_operation module # UnaryOperation class # Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/unary_operation.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class UnaryOperation ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcUnaryOperation _parent : SolidityAbc _operator : UnaryOpOperator _prefix : bool _sub_expression : ExpressionAbc def __init__ ( self , init : IrInitTuple , unary_operation : SolcUnaryOperation , parent : SolidityAbc , ): super () . __init__ ( init , unary_operation , parent ) self . _operator = unary_operation . operator self . _prefix = unary_operation . prefix self . _sub_expression = ExpressionAbc . from_ast ( init , unary_operation . sub_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _sub_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def operator ( self ) -> UnaryOpOperator : return self . _operator @property def prefix ( self ) -> bool : return self . _prefix @property def sub_expression ( self ) -> ExpressionAbc : return self . _sub_expression @property def is_ref_to_state_variable ( self ) -> bool : return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . sub_expression . modifies_state if ( self . operator in { UnaryOpOperator . PLUS_PLUS , UnaryOpOperator . MINUS_MINUS , UnaryOpOperator . DELETE , } and self . sub_expression . is_ref_to_state_variable ): ret |= {( self , ModifiesStateFlag . MODIFIES_STATE_VAR )} return ret","title":"Unary operation"},{"location":"api-reference/ir/expressions/unary-operation/#woke.ast.ir.expression.unary_operation","text":"","title":"unary_operation"},{"location":"api-reference/ir/expressions/unary-operation/#woke.ast.ir.expression.unary_operation.UnaryOperation","text":"Bases: ExpressionAbc TBD Source code in woke/ast/ir/expression/unary_operation.py 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 class UnaryOperation ( ExpressionAbc ): \"\"\" TBD \"\"\" _ast_node : SolcUnaryOperation _parent : SolidityAbc _operator : UnaryOpOperator _prefix : bool _sub_expression : ExpressionAbc def __init__ ( self , init : IrInitTuple , unary_operation : SolcUnaryOperation , parent : SolidityAbc , ): super () . __init__ ( init , unary_operation , parent ) self . _operator = unary_operation . operator self . _prefix = unary_operation . prefix self . _sub_expression = ExpressionAbc . from_ast ( init , unary_operation . sub_expression , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _sub_expression @property def parent ( self ) -> SolidityAbc : return self . _parent @property def operator ( self ) -> UnaryOpOperator : return self . _operator @property def prefix ( self ) -> bool : return self . _prefix @property def sub_expression ( self ) -> ExpressionAbc : return self . _sub_expression @property def is_ref_to_state_variable ( self ) -> bool : return False @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = self . sub_expression . modifies_state if ( self . operator in { UnaryOpOperator . PLUS_PLUS , UnaryOpOperator . MINUS_MINUS , UnaryOpOperator . DELETE , } and self . sub_expression . is_ref_to_state_variable ): ret |= {( self , ModifiesStateFlag . MODIFIES_STATE_VAR )} return ret","title":"UnaryOperation"},{"location":"api-reference/ir/meta/identifier-path/","text":"woke.ast.ir.meta.identifier_path module # IdentifierPath class # Bases: SolidityAbc Identifier path represents a path name of identifiers separated by dots. It was introduced in Solidity 0.8.0 to replace UserDefinedTypeName in some cases. Source code in woke/ast/ir/meta/identifier_path.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 class IdentifierPath ( SolidityAbc ): \"\"\" Identifier path represents a path name of identifiers separated by dots. It was introduced in Solidity 0.8.0 to replace [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] in some cases. \"\"\" _ast_node : SolcIdentifierPath _parent : Union [ InheritanceSpecifier , ModifierInvocation , OverrideSpecifier , UsingForDirective , UserDefinedTypeName , ] _name : str _referenced_declaration_id : AstNodeId _parts : IntervalTree def __init__ ( self , init : IrInitTuple , identifier_path : SolcIdentifierPath , parent : SolidityAbc , ): super () . __init__ ( init , identifier_path , parent ) self . _name = identifier_path . name self . _referenced_declaration_id = identifier_path . referenced_declaration assert self . _referenced_declaration_id >= 0 matches = list ( IDENTIFIER_RE . finditer ( self . _source )) groups_count = len ( matches ) assert groups_count > 0 self . _parts = IntervalTree () for i , match in enumerate ( matches ): name = match . group ( 0 ) . decode ( \"utf-8\" ) start = self . byte_location [ 0 ] + match . start () end = self . byte_location [ 0 ] + match . end () self . _parts [ start : end ] = IdentifierPathPart ( self , init , ( start , end ), name , self . _referenced_declaration_id , groups_count - i - 1 , ) @property def parent ( self , ) -> Union [ InheritanceSpecifier , ModifierInvocation , OverrideSpecifier , UsingForDirective , UserDefinedTypeName , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def name ( self ) -> str : \"\"\" Returns: Name (as it appears in the source code) of the user-defined type referenced by this identifier path. \"\"\" return self . _name @property def identifier_path_parts ( self ) -> Tuple [ IdentifierPathPart , ... ]: \"\"\" Returns: Parts of the identifier path. \"\"\" return tuple ( interval . data for interval in sorted ( self . _parts )) def identifier_path_part_at ( self , byte_offset : int ) -> Optional [ IdentifierPathPart ]: \"\"\" Parameters: byte_offset: Byte offset in the source code. Returns: Identifier path part at the given byte offset, if any. \"\"\" intervals = self . _parts . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Declaration referenced by this identifier path. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node identifier_path_part_at ( byte_offset ) # Parameters: Name Type Description Default byte_offset int Byte offset in the source code. required Returns: Type Description Optional [ IdentifierPathPart ] Identifier path part at the given byte offset, if any. Source code in woke/ast/ir/meta/identifier_path.py 223 224 225 226 227 228 229 230 231 232 233 234 def identifier_path_part_at ( self , byte_offset : int ) -> Optional [ IdentifierPathPart ]: \"\"\" Parameters: byte_offset: Byte offset in the source code. Returns: Identifier path part at the given byte offset, if any. \"\"\" intervals = self . _parts . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data identifier_path_parts () property # Returns: Type Description Tuple [ IdentifierPathPart , ...] Parts of the identifier path. Source code in woke/ast/ir/meta/identifier_path.py 215 216 217 218 219 220 221 @property def identifier_path_parts ( self ) -> Tuple [ IdentifierPathPart , ... ]: \"\"\" Returns: Parts of the identifier path. \"\"\" return tuple ( interval . data for interval in sorted ( self . _parts )) name () property # Returns: Type Description str Name (as it appears in the source code) of the user-defined type referenced by this identifier path. Source code in woke/ast/ir/meta/identifier_path.py 207 208 209 210 211 212 213 @property def name ( self ) -> str : \"\"\" Returns: Name (as it appears in the source code) of the user-defined type referenced by this identifier path. \"\"\" return self . _name parent () property # Returns: Type Description Union [ InheritanceSpecifier , ModifierInvocation , OverrideSpecifier , UsingForDirective , UserDefinedTypeName ] Parent IR node. Source code in woke/ast/ir/meta/identifier_path.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 @property def parent ( self , ) -> Union [ InheritanceSpecifier , ModifierInvocation , OverrideSpecifier , UsingForDirective , UserDefinedTypeName , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent referenced_declaration () property # Returns: Type Description DeclarationAbc Declaration referenced by this identifier path. Source code in woke/ast/ir/meta/identifier_path.py 236 237 238 239 240 241 242 243 244 245 246 @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Declaration referenced by this identifier path. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node IdentifierPathPart class # A class representing a part of an identifier path. Is almost the same as Identifier , but it is not generated in the AST output of the compiler and so it is not an IR node. Source code in woke/ast/ir/meta/identifier_path.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 class IdentifierPathPart : \"\"\" A class representing a part of an identifier path. Is almost the same as [Identifier][woke.ast.ir.expression.identifier.Identifier], but it is not generated in the AST output of the compiler and so it is not an IR node. \"\"\" _reference_resolver : ReferenceResolver _underlying_node : Union [ IdentifierPath , UserDefinedTypeName ] _path_referenced_declaration_id : AstNodeId _path_index : int _referenced_declaration_id : Optional [ AstNodeId ] _cu_hash : bytes _file : Path _byte_location : Tuple [ int , int ] _name : str def __init__ ( self , underlying_node : Union [ IdentifierPath , UserDefinedTypeName ], init : IrInitTuple , byte_location : Tuple [ int , int ], name : str , path_referenced_declaration_id : AstNodeId , path_index : int , ): self . _underlying_node = underlying_node self . _reference_resolver = init . reference_resolver self . _path_referenced_declaration_id = path_referenced_declaration_id # zero-based index from the end of the path self . _path_index = path_index self . _referenced_declaration_id = None self . _cu_hash = init . cu . hash self . _file = init . file self . _byte_location = byte_location self . _name = name self . _reference_resolver . register_post_process_callback ( self . _post_process ) def _post_process ( self , callback_params : CallbackParams ): referenced_declaration = self . _reference_resolver . resolve_node ( self . _path_referenced_declaration_id , self . _cu_hash ) for i in range ( self . _path_index ): assert referenced_declaration . parent is not None referenced_declaration = referenced_declaration . parent assert isinstance ( referenced_declaration , DeclarationAbc ) node_path_order = self . _reference_resolver . get_node_path_order ( AstNodeId ( referenced_declaration . ast_node_id ), referenced_declaration . cu_hash , ) this_cu_id = self . _reference_resolver . get_ast_id_from_cu_node_path_order ( node_path_order , self . _cu_hash ) self . _referenced_declaration_id = this_cu_id referenced_declaration . register_reference ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , referenced_declaration ) ) def _destroy ( self , referenced_declaration : DeclarationAbc ) -> None : referenced_declaration . unregister_reference ( self ) @property def underlying_node ( self ) -> Union [ IdentifierPath , UserDefinedTypeName ]: \"\"\" Returns: Underlying IR node (parent) of this identifier path part. \"\"\" return self . _underlying_node @property def file ( self ) -> Path : \"\"\" The absolute path to the source file that contains the parent IR node of this identifier path part. Returns: Absolute path to the file containing this identifier path part. \"\"\" return self . _file @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" The start and end byte offsets of this identifier path part in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset. `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`. Returns: Tuple of the start and end byte offsets of this node in the source file. \"\"\" return self . _byte_location @property def name ( self ) -> str : \"\"\" !!! example `Contract` or `Event` in `Contract.Event`. Returns: Name of the identifier path part as it appears in the source code. \"\"\" return self . _name @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" !!! example In the case of `Contract.Struct` [IdentifierPath][woke.ast.ir.meta.identifier_path.IdentifierPath], the referenced declaration of `Struct` is the declaration of the struct `Struct` in the contract `Contract`. Returns: Declaration referenced by this identifier path part. \"\"\" assert self . _referenced_declaration_id is not None node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node byte_location () property # The start and end byte offsets of this identifier path part in the source file. {node}.byte_location[0] is the start byte offset, {node}.byte_location[1] is the end byte offset. {node}.byte_location[1] is always greater than or equal to {node}.byte_location[0] . Returns: Type Description Tuple [ int , int ] Tuple of the start and end byte offsets of this node in the source file. Source code in woke/ast/ir/meta/identifier_path.py 106 107 108 109 110 111 112 113 114 115 @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" The start and end byte offsets of this identifier path part in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset. `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`. Returns: Tuple of the start and end byte offsets of this node in the source file. \"\"\" return self . _byte_location file () property # The absolute path to the source file that contains the parent IR node of this identifier path part. Returns: Type Description Path Absolute path to the file containing this identifier path part. Source code in woke/ast/ir/meta/identifier_path.py 97 98 99 100 101 102 103 104 @property def file ( self ) -> Path : \"\"\" The absolute path to the source file that contains the parent IR node of this identifier path part. Returns: Absolute path to the file containing this identifier path part. \"\"\" return self . _file name () property # Example Contract or Event in Contract.Event . Returns: Type Description str Name of the identifier path part as it appears in the source code. Source code in woke/ast/ir/meta/identifier_path.py 117 118 119 120 121 122 123 124 125 @property def name ( self ) -> str : \"\"\" !!! example `Contract` or `Event` in `Contract.Event`. Returns: Name of the identifier path part as it appears in the source code. \"\"\" return self . _name referenced_declaration () property # Example In the case of Contract.Struct IdentifierPath , the referenced declaration of Struct is the declaration of the struct Struct in the contract Contract . Returns: Type Description DeclarationAbc Declaration referenced by this identifier path part. Source code in woke/ast/ir/meta/identifier_path.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" !!! example In the case of `Contract.Struct` [IdentifierPath][woke.ast.ir.meta.identifier_path.IdentifierPath], the referenced declaration of `Struct` is the declaration of the struct `Struct` in the contract `Contract`. Returns: Declaration referenced by this identifier path part. \"\"\" assert self . _referenced_declaration_id is not None node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node underlying_node () property # Returns: Type Description Union [ IdentifierPath , UserDefinedTypeName ] Underlying IR node (parent) of this identifier path part. Source code in woke/ast/ir/meta/identifier_path.py 89 90 91 92 93 94 95 @property def underlying_node ( self ) -> Union [ IdentifierPath , UserDefinedTypeName ]: \"\"\" Returns: Underlying IR node (parent) of this identifier path part. \"\"\" return self . _underlying_node","title":"Identifier path"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path","text":"","title":"identifier_path"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath","text":"Bases: SolidityAbc Identifier path represents a path name of identifiers separated by dots. It was introduced in Solidity 0.8.0 to replace UserDefinedTypeName in some cases. Source code in woke/ast/ir/meta/identifier_path.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 182 183 184 185 186 187 188 189 190 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 218 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 242 243 244 245 246 class IdentifierPath ( SolidityAbc ): \"\"\" Identifier path represents a path name of identifiers separated by dots. It was introduced in Solidity 0.8.0 to replace [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] in some cases. \"\"\" _ast_node : SolcIdentifierPath _parent : Union [ InheritanceSpecifier , ModifierInvocation , OverrideSpecifier , UsingForDirective , UserDefinedTypeName , ] _name : str _referenced_declaration_id : AstNodeId _parts : IntervalTree def __init__ ( self , init : IrInitTuple , identifier_path : SolcIdentifierPath , parent : SolidityAbc , ): super () . __init__ ( init , identifier_path , parent ) self . _name = identifier_path . name self . _referenced_declaration_id = identifier_path . referenced_declaration assert self . _referenced_declaration_id >= 0 matches = list ( IDENTIFIER_RE . finditer ( self . _source )) groups_count = len ( matches ) assert groups_count > 0 self . _parts = IntervalTree () for i , match in enumerate ( matches ): name = match . group ( 0 ) . decode ( \"utf-8\" ) start = self . byte_location [ 0 ] + match . start () end = self . byte_location [ 0 ] + match . end () self . _parts [ start : end ] = IdentifierPathPart ( self , init , ( start , end ), name , self . _referenced_declaration_id , groups_count - i - 1 , ) @property def parent ( self , ) -> Union [ InheritanceSpecifier , ModifierInvocation , OverrideSpecifier , UsingForDirective , UserDefinedTypeName , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def name ( self ) -> str : \"\"\" Returns: Name (as it appears in the source code) of the user-defined type referenced by this identifier path. \"\"\" return self . _name @property def identifier_path_parts ( self ) -> Tuple [ IdentifierPathPart , ... ]: \"\"\" Returns: Parts of the identifier path. \"\"\" return tuple ( interval . data for interval in sorted ( self . _parts )) def identifier_path_part_at ( self , byte_offset : int ) -> Optional [ IdentifierPathPart ]: \"\"\" Parameters: byte_offset: Byte offset in the source code. Returns: Identifier path part at the given byte offset, if any. \"\"\" intervals = self . _parts . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Declaration referenced by this identifier path. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node","title":"IdentifierPath"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.identifier_path_part_at","text":"Parameters: Name Type Description Default byte_offset int Byte offset in the source code. required Returns: Type Description Optional [ IdentifierPathPart ] Identifier path part at the given byte offset, if any. Source code in woke/ast/ir/meta/identifier_path.py 223 224 225 226 227 228 229 230 231 232 233 234 def identifier_path_part_at ( self , byte_offset : int ) -> Optional [ IdentifierPathPart ]: \"\"\" Parameters: byte_offset: Byte offset in the source code. Returns: Identifier path part at the given byte offset, if any. \"\"\" intervals = self . _parts . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data","title":"identifier_path_part_at()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.identifier_path_parts","text":"Returns: Type Description Tuple [ IdentifierPathPart , ...] Parts of the identifier path. Source code in woke/ast/ir/meta/identifier_path.py 215 216 217 218 219 220 221 @property def identifier_path_parts ( self ) -> Tuple [ IdentifierPathPart , ... ]: \"\"\" Returns: Parts of the identifier path. \"\"\" return tuple ( interval . data for interval in sorted ( self . _parts ))","title":"identifier_path_parts()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.name","text":"Returns: Type Description str Name (as it appears in the source code) of the user-defined type referenced by this identifier path. Source code in woke/ast/ir/meta/identifier_path.py 207 208 209 210 211 212 213 @property def name ( self ) -> str : \"\"\" Returns: Name (as it appears in the source code) of the user-defined type referenced by this identifier path. \"\"\" return self . _name","title":"name()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.parent","text":"Returns: Type Description Union [ InheritanceSpecifier , ModifierInvocation , OverrideSpecifier , UsingForDirective , UserDefinedTypeName ] Parent IR node. Source code in woke/ast/ir/meta/identifier_path.py 191 192 193 194 195 196 197 198 199 200 201 202 203 204 205 @property def parent ( self , ) -> Union [ InheritanceSpecifier , ModifierInvocation , OverrideSpecifier , UsingForDirective , UserDefinedTypeName , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPath.referenced_declaration","text":"Returns: Type Description DeclarationAbc Declaration referenced by this identifier path. Source code in woke/ast/ir/meta/identifier_path.py 236 237 238 239 240 241 242 243 244 245 246 @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Declaration referenced by this identifier path. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node","title":"referenced_declaration()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart","text":"A class representing a part of an identifier path. Is almost the same as Identifier , but it is not generated in the AST output of the compiler and so it is not an IR node. Source code in woke/ast/ir/meta/identifier_path.py 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 class IdentifierPathPart : \"\"\" A class representing a part of an identifier path. Is almost the same as [Identifier][woke.ast.ir.expression.identifier.Identifier], but it is not generated in the AST output of the compiler and so it is not an IR node. \"\"\" _reference_resolver : ReferenceResolver _underlying_node : Union [ IdentifierPath , UserDefinedTypeName ] _path_referenced_declaration_id : AstNodeId _path_index : int _referenced_declaration_id : Optional [ AstNodeId ] _cu_hash : bytes _file : Path _byte_location : Tuple [ int , int ] _name : str def __init__ ( self , underlying_node : Union [ IdentifierPath , UserDefinedTypeName ], init : IrInitTuple , byte_location : Tuple [ int , int ], name : str , path_referenced_declaration_id : AstNodeId , path_index : int , ): self . _underlying_node = underlying_node self . _reference_resolver = init . reference_resolver self . _path_referenced_declaration_id = path_referenced_declaration_id # zero-based index from the end of the path self . _path_index = path_index self . _referenced_declaration_id = None self . _cu_hash = init . cu . hash self . _file = init . file self . _byte_location = byte_location self . _name = name self . _reference_resolver . register_post_process_callback ( self . _post_process ) def _post_process ( self , callback_params : CallbackParams ): referenced_declaration = self . _reference_resolver . resolve_node ( self . _path_referenced_declaration_id , self . _cu_hash ) for i in range ( self . _path_index ): assert referenced_declaration . parent is not None referenced_declaration = referenced_declaration . parent assert isinstance ( referenced_declaration , DeclarationAbc ) node_path_order = self . _reference_resolver . get_node_path_order ( AstNodeId ( referenced_declaration . ast_node_id ), referenced_declaration . cu_hash , ) this_cu_id = self . _reference_resolver . get_ast_id_from_cu_node_path_order ( node_path_order , self . _cu_hash ) self . _referenced_declaration_id = this_cu_id referenced_declaration . register_reference ( self ) self . _reference_resolver . register_destroy_callback ( self . file , partial ( self . _destroy , referenced_declaration ) ) def _destroy ( self , referenced_declaration : DeclarationAbc ) -> None : referenced_declaration . unregister_reference ( self ) @property def underlying_node ( self ) -> Union [ IdentifierPath , UserDefinedTypeName ]: \"\"\" Returns: Underlying IR node (parent) of this identifier path part. \"\"\" return self . _underlying_node @property def file ( self ) -> Path : \"\"\" The absolute path to the source file that contains the parent IR node of this identifier path part. Returns: Absolute path to the file containing this identifier path part. \"\"\" return self . _file @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" The start and end byte offsets of this identifier path part in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset. `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`. Returns: Tuple of the start and end byte offsets of this node in the source file. \"\"\" return self . _byte_location @property def name ( self ) -> str : \"\"\" !!! example `Contract` or `Event` in `Contract.Event`. Returns: Name of the identifier path part as it appears in the source code. \"\"\" return self . _name @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" !!! example In the case of `Contract.Struct` [IdentifierPath][woke.ast.ir.meta.identifier_path.IdentifierPath], the referenced declaration of `Struct` is the declaration of the struct `Struct` in the contract `Contract`. Returns: Declaration referenced by this identifier path part. \"\"\" assert self . _referenced_declaration_id is not None node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node","title":"IdentifierPathPart"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.byte_location","text":"The start and end byte offsets of this identifier path part in the source file. {node}.byte_location[0] is the start byte offset, {node}.byte_location[1] is the end byte offset. {node}.byte_location[1] is always greater than or equal to {node}.byte_location[0] . Returns: Type Description Tuple [ int , int ] Tuple of the start and end byte offsets of this node in the source file. Source code in woke/ast/ir/meta/identifier_path.py 106 107 108 109 110 111 112 113 114 115 @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" The start and end byte offsets of this identifier path part in the source file. `{node}.byte_location[0]` is the start byte offset, `{node}.byte_location[1]` is the end byte offset. `{node}.byte_location[1]` is always greater than or equal to `{node}.byte_location[0]`. Returns: Tuple of the start and end byte offsets of this node in the source file. \"\"\" return self . _byte_location","title":"byte_location()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.file","text":"The absolute path to the source file that contains the parent IR node of this identifier path part. Returns: Type Description Path Absolute path to the file containing this identifier path part. Source code in woke/ast/ir/meta/identifier_path.py 97 98 99 100 101 102 103 104 @property def file ( self ) -> Path : \"\"\" The absolute path to the source file that contains the parent IR node of this identifier path part. Returns: Absolute path to the file containing this identifier path part. \"\"\" return self . _file","title":"file()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.name","text":"Example Contract or Event in Contract.Event . Returns: Type Description str Name of the identifier path part as it appears in the source code. Source code in woke/ast/ir/meta/identifier_path.py 117 118 119 120 121 122 123 124 125 @property def name ( self ) -> str : \"\"\" !!! example `Contract` or `Event` in `Contract.Event`. Returns: Name of the identifier path part as it appears in the source code. \"\"\" return self . _name","title":"name()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.referenced_declaration","text":"Example In the case of Contract.Struct IdentifierPath , the referenced declaration of Struct is the declaration of the struct Struct in the contract Contract . Returns: Type Description DeclarationAbc Declaration referenced by this identifier path part. Source code in woke/ast/ir/meta/identifier_path.py 127 128 129 130 131 132 133 134 135 136 137 138 139 140 @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" !!! example In the case of `Contract.Struct` [IdentifierPath][woke.ast.ir.meta.identifier_path.IdentifierPath], the referenced declaration of `Struct` is the declaration of the struct `Struct` in the contract `Contract`. Returns: Declaration referenced by this identifier path part. \"\"\" assert self . _referenced_declaration_id is not None node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node","title":"referenced_declaration()"},{"location":"api-reference/ir/meta/identifier-path/#woke.ast.ir.meta.identifier_path.IdentifierPathPart.underlying_node","text":"Returns: Type Description Union [ IdentifierPath , UserDefinedTypeName ] Underlying IR node (parent) of this identifier path part. Source code in woke/ast/ir/meta/identifier_path.py 89 90 91 92 93 94 95 @property def underlying_node ( self ) -> Union [ IdentifierPath , UserDefinedTypeName ]: \"\"\" Returns: Underlying IR node (parent) of this identifier path part. \"\"\" return self . _underlying_node","title":"underlying_node()"},{"location":"api-reference/ir/meta/import-directive/","text":"woke.ast.ir.meta.import_directive module # ImportDirective class # Bases: SolidityAbc Example import \"SafeLib.sol\" ; import \"SafeLib.sol\" as SafeLib ; import * as SafeLib from \"SafeLib.sol\" ; import { SafeType as CustomSafeType } from \"SafeLib.sol\" ; Source code in woke/ast/ir/meta/import_directive.pyclass ImportDirective ( SolidityAbc ): \"\"\" !!! example ```solidity import \"SafeLib.sol\"; ``` ```solidity import \"SafeLib.sol\" as SafeLib; ``` ```solidity import * as SafeLib from \"SafeLib.sol\"; ``` ```solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\"; ``` \"\"\" _ast_node : SolcImportDirective _parent : SourceUnit _source_unit_name : PurePath _import_string : str _imported_file : Path _source_unit_id : AstNodeId _symbol_aliases : List [ SymbolAlias ] _unit_alias : Optional [ str ] def __init__ ( self , init : IrInitTuple , import_directive : SolcImportDirective , parent : SolidityAbc , ): super () . __init__ ( init , import_directive , parent ) self . _source_unit_name = PurePath ( import_directive . absolute_path ) self . _import_string = import_directive . file self . _imported_file = init . cu . source_unit_name_to_path ( self . _source_unit_name ) self . _source_unit_id = import_directive . source_unit self . _symbol_aliases = [] if len ( import_directive . unit_alias ) > 0 : self . _unit_alias = import_directive . unit_alias else : self . _unit_alias = None for alias in import_directive . symbol_aliases : self . _symbol_aliases . append ( SymbolAlias ( Identifier ( init , alias . foreign , self ), alias . local ) ) self . _reference_resolver . register_post_process_callback ( self . _post_process , priority =- 1 ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for symbol_alias in self . _symbol_aliases : yield from symbol_alias . foreign def _post_process ( self , callback_params : CallbackParams ): # referenced declaration ID is missing (for whatever reason) in import directive symbol aliases # for example `import { SafeType } from \"SafeLib.sol\";` # fix: find these reference IDs manually for symbol_alias in self . _symbol_aliases : source_units_queue : Deque [ SourceUnit ] = deque ( [ callback_params . source_units [ self . _imported_file ]] ) processed_source_units : Set [ Path ] = { self . _imported_file } referenced_declaration = None while source_units_queue and referenced_declaration is None : imported_source_unit = source_units_queue . pop () for declaration in imported_source_unit . declarations_iter (): if declaration . canonical_name == symbol_alias . foreign . name : referenced_declaration = declaration break for import_ in imported_source_unit . imports : if import_ . imported_file not in processed_source_units : source_units_queue . append ( callback_params . source_units [ import_ . imported_file ] ) processed_source_units . add ( import_ . imported_file ) assert referenced_declaration is not None node_path_order = self . _reference_resolver . get_node_path_order ( AstNodeId ( referenced_declaration . ast_node_id ), referenced_declaration . cu_hash , ) referenced_declaration_id = ( self . _reference_resolver . get_ast_id_from_cu_node_path_order ( node_path_order , self . cu_hash ) ) symbol_alias . foreign . _referenced_declaration_id = referenced_declaration_id @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def source_unit_name ( self ) -> PurePath : \"\"\" Returns: Source unit name of the imported file. \"\"\" return self . _source_unit_name @property def imported_file ( self ) -> Path : \"\"\" Returns: Absolute path of the imported file. \"\"\" return self . _imported_file @property def import_string ( self ) -> str : \"\"\" Returns: Import string as it appears in the source code. \"\"\" return self . _import_string @property def source_unit ( self ) -> SourceUnit : \"\"\" Returns: Source unit imported by this import directive. \"\"\" from .source_unit import SourceUnit node = self . _reference_resolver . resolve_node ( self . _source_unit_id , self . _cu_hash ) assert isinstance ( node , SourceUnit ) return node @property def symbol_aliases ( self ) -> Tuple [ SymbolAlias ]: \"\"\" Is only set in the case of `:::solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\";` import directive type. Returns: Symbol aliases present in the import directive. \"\"\" return tuple ( self . _symbol_aliases ) @property def unit_alias ( self ) -> Optional [ str ]: \"\"\" !!! example Is `SafeLib` in the case of these import directives: ```solidity import \"SafeLib.sol\" as SafeLib; ``` ```solidity import * as SafeLib from \"SafeLib.sol\"; ``` Is `None` in the case of these import directives: ```solidity import \"SafeLib.sol\"; ``` ```solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\"; ``` Returns: Alias for the namespace of the imported source unit. \"\"\" return self . _unit_alias @property @lru_cache ( maxsize = 2048 ) def import_string_pos ( self ) -> Tuple [ int , int ]: \"\"\" Returns: Byte offsets (start, end) of the import string in the source file. \"\"\" source_start = self . _ast_node . src . byte_offset res = ( IMPORT_FILENAME_RE , IMPORT_AS_FROM_RE , IMPORT_AS_RE , IMPORT_ALIAS_LIST , ) matches = list ( re . match ( self . _source ) for re in res ) assert any ( matches ) match = next ( m for m in matches if m ) return source_start + match . start ( \"filename\" ), source_start + match . end ( \"filename\" ) import_string () property # Returns: Type Description str Import string as it appears in the source code. Source code in woke/ast/ir/meta/import_directive.py 188 189 190 191 192 193 194 @property def import_string ( self ) -> str : \"\"\" Returns: Import string as it appears in the source code. \"\"\" return self . _import_string import_string_pos () cached property # Returns: Type Description Tuple [ int , int ] Byte offsets (start, end) of the import string in the source file. Source code in woke/ast/ir/meta/import_directive.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 @property @lru_cache ( maxsize = 2048 ) def import_string_pos ( self ) -> Tuple [ int , int ]: \"\"\" Returns: Byte offsets (start, end) of the import string in the source file. \"\"\" source_start = self . _ast_node . src . byte_offset res = ( IMPORT_FILENAME_RE , IMPORT_AS_FROM_RE , IMPORT_AS_RE , IMPORT_ALIAS_LIST , ) matches = list ( re . match ( self . _source ) for re in res ) assert any ( matches ) match = next ( m for m in matches if m ) return source_start + match . start ( \"filename\" ), source_start + match . end ( \"filename\" ) imported_file () property # Returns: Type Description Path Absolute path of the imported file. Source code in woke/ast/ir/meta/import_directive.py 180 181 182 183 184 185 186 @property def imported_file ( self ) -> Path : \"\"\" Returns: Absolute path of the imported file. \"\"\" return self . _imported_file parent () property # Returns: Type Description SourceUnit Parent IR node. Source code in woke/ast/ir/meta/import_directive.py 164 165 166 167 168 169 170 @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent source_unit () property # Returns: Type Description SourceUnit Source unit imported by this import directive. Source code in woke/ast/ir/meta/import_directive.py 196 197 198 199 200 201 202 203 204 205 206 207 208 @property def source_unit ( self ) -> SourceUnit : \"\"\" Returns: Source unit imported by this import directive. \"\"\" from .source_unit import SourceUnit node = self . _reference_resolver . resolve_node ( self . _source_unit_id , self . _cu_hash ) assert isinstance ( node , SourceUnit ) return node source_unit_name () property # Returns: Type Description PurePath Source unit name of the imported file. Source code in woke/ast/ir/meta/import_directive.py 172 173 174 175 176 177 178 @property def source_unit_name ( self ) -> PurePath : \"\"\" Returns: Source unit name of the imported file. \"\"\" return self . _source_unit_name symbol_aliases () property # Is only set in the case of import { SafeType as CustomSafeType } from \"SafeLib.sol\" ; import directive type. Returns: Type Description Tuple [ SymbolAlias ] Symbol aliases present in the import directive. Source code in woke/ast/ir/meta/import_directive.py 210 211 212 213 214 215 216 217 @property def symbol_aliases ( self ) -> Tuple [ SymbolAlias ]: \"\"\" Is only set in the case of `:::solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\";` import directive type. Returns: Symbol aliases present in the import directive. \"\"\" return tuple ( self . _symbol_aliases ) unit_alias () property # Example Is SafeLib in the case of these import directives: import \"SafeLib.sol\" as SafeLib ; import * as SafeLib from \"SafeLib.sol\" ; Is None in the case of these import directives: import \"SafeLib.sol\" ; import { SafeType as CustomSafeType } from \"SafeLib.sol\" ; Returns: Type Description Optional [ str ] Alias for the namespace of the imported source unit. Source code in woke/ast/ir/meta/import_directive.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 @property def unit_alias ( self ) -> Optional [ str ]: \"\"\" !!! example Is `SafeLib` in the case of these import directives: ```solidity import \"SafeLib.sol\" as SafeLib; ``` ```solidity import * as SafeLib from \"SafeLib.sol\"; ``` Is `None` in the case of these import directives: ```solidity import \"SafeLib.sol\"; ``` ```solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\"; ``` Returns: Alias for the namespace of the imported source unit. \"\"\" return self . _unit_alias SymbolAlias class # Helper class representing a symbol alias in an import directive of the import { symbol as alias } from \"file.sol\" ; form. Example symbol is the foreign attribute and alias is the local attribute in the following example: import { symbol as alias } from \"file.sol\" ; Attributes: Name Type Description foreign Identifier Identifier referencing the symbol in the imported file. local Optional [ str ] Alias name of the imported symbol (if any). Source code in woke/ast/ir/meta/import_directive.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 @dataclass class SymbolAlias : \"\"\" Helper class representing a symbol alias in an import directive of the`:::solidity import {symbol as alias} from \"file.sol\";` form. !!! example `symbol` is the `foreign` attribute and `alias` is the `local` attribute in the following example: ```solidity import {symbol as alias} from \"file.sol\"; ``` Attributes: foreign (Identifier): Identifier referencing the symbol in the imported file. local (Optional[str]): Alias name of the imported symbol (if any). \"\"\" foreign : Identifier local : Optional [ str ]","title":"Import directive"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive","text":"","title":"import_directive"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective","text":"Bases: SolidityAbc Example import \"SafeLib.sol\" ; import \"SafeLib.sol\" as SafeLib ; import * as SafeLib from \"SafeLib.sol\" ; import { SafeType as CustomSafeType } from \"SafeLib.sol\" ; Source code in woke/ast/ir/meta/import_directive.pyclass ImportDirective ( SolidityAbc ): \"\"\" !!! example ```solidity import \"SafeLib.sol\"; ``` ```solidity import \"SafeLib.sol\" as SafeLib; ``` ```solidity import * as SafeLib from \"SafeLib.sol\"; ``` ```solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\"; ``` \"\"\" _ast_node : SolcImportDirective _parent : SourceUnit _source_unit_name : PurePath _import_string : str _imported_file : Path _source_unit_id : AstNodeId _symbol_aliases : List [ SymbolAlias ] _unit_alias : Optional [ str ] def __init__ ( self , init : IrInitTuple , import_directive : SolcImportDirective , parent : SolidityAbc , ): super () . __init__ ( init , import_directive , parent ) self . _source_unit_name = PurePath ( import_directive . absolute_path ) self . _import_string = import_directive . file self . _imported_file = init . cu . source_unit_name_to_path ( self . _source_unit_name ) self . _source_unit_id = import_directive . source_unit self . _symbol_aliases = [] if len ( import_directive . unit_alias ) > 0 : self . _unit_alias = import_directive . unit_alias else : self . _unit_alias = None for alias in import_directive . symbol_aliases : self . _symbol_aliases . append ( SymbolAlias ( Identifier ( init , alias . foreign , self ), alias . local ) ) self . _reference_resolver . register_post_process_callback ( self . _post_process , priority =- 1 ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for symbol_alias in self . _symbol_aliases : yield from symbol_alias . foreign def _post_process ( self , callback_params : CallbackParams ): # referenced declaration ID is missing (for whatever reason) in import directive symbol aliases # for example `import { SafeType } from \"SafeLib.sol\";` # fix: find these reference IDs manually for symbol_alias in self . _symbol_aliases : source_units_queue : Deque [ SourceUnit ] = deque ( [ callback_params . source_units [ self . _imported_file ]] ) processed_source_units : Set [ Path ] = { self . _imported_file } referenced_declaration = None while source_units_queue and referenced_declaration is None : imported_source_unit = source_units_queue . pop () for declaration in imported_source_unit . declarations_iter (): if declaration . canonical_name == symbol_alias . foreign . name : referenced_declaration = declaration break for import_ in imported_source_unit . imports : if import_ . imported_file not in processed_source_units : source_units_queue . append ( callback_params . source_units [ import_ . imported_file ] ) processed_source_units . add ( import_ . imported_file ) assert referenced_declaration is not None node_path_order = self . _reference_resolver . get_node_path_order ( AstNodeId ( referenced_declaration . ast_node_id ), referenced_declaration . cu_hash , ) referenced_declaration_id = ( self . _reference_resolver . get_ast_id_from_cu_node_path_order ( node_path_order , self . cu_hash ) ) symbol_alias . foreign . _referenced_declaration_id = referenced_declaration_id @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def source_unit_name ( self ) -> PurePath : \"\"\" Returns: Source unit name of the imported file. \"\"\" return self . _source_unit_name @property def imported_file ( self ) -> Path : \"\"\" Returns: Absolute path of the imported file. \"\"\" return self . _imported_file @property def import_string ( self ) -> str : \"\"\" Returns: Import string as it appears in the source code. \"\"\" return self . _import_string @property def source_unit ( self ) -> SourceUnit : \"\"\" Returns: Source unit imported by this import directive. \"\"\" from .source_unit import SourceUnit node = self . _reference_resolver . resolve_node ( self . _source_unit_id , self . _cu_hash ) assert isinstance ( node , SourceUnit ) return node @property def symbol_aliases ( self ) -> Tuple [ SymbolAlias ]: \"\"\" Is only set in the case of `:::solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\";` import directive type. Returns: Symbol aliases present in the import directive. \"\"\" return tuple ( self . _symbol_aliases ) @property def unit_alias ( self ) -> Optional [ str ]: \"\"\" !!! example Is `SafeLib` in the case of these import directives: ```solidity import \"SafeLib.sol\" as SafeLib; ``` ```solidity import * as SafeLib from \"SafeLib.sol\"; ``` Is `None` in the case of these import directives: ```solidity import \"SafeLib.sol\"; ``` ```solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\"; ``` Returns: Alias for the namespace of the imported source unit. \"\"\" return self . _unit_alias @property @lru_cache ( maxsize = 2048 ) def import_string_pos ( self ) -> Tuple [ int , int ]: \"\"\" Returns: Byte offsets (start, end) of the import string in the source file. \"\"\" source_start = self . _ast_node . src . byte_offset res = ( IMPORT_FILENAME_RE , IMPORT_AS_FROM_RE , IMPORT_AS_RE , IMPORT_ALIAS_LIST , ) matches = list ( re . match ( self . _source ) for re in res ) assert any ( matches ) match = next ( m for m in matches if m ) return source_start + match . start ( \"filename\" ), source_start + match . end ( \"filename\" )","title":"ImportDirective"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.import_string","text":"Returns: Type Description str Import string as it appears in the source code. Source code in woke/ast/ir/meta/import_directive.py 188 189 190 191 192 193 194 @property def import_string ( self ) -> str : \"\"\" Returns: Import string as it appears in the source code. \"\"\" return self . _import_string","title":"import_string()"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.import_string_pos","text":"Returns: Type Description Tuple [ int , int ] Byte offsets (start, end) of the import string in the source file. Source code in woke/ast/ir/meta/import_directive.py 243 244 245 246 247 248 249 250 251 252 253 254 255 256 257 258 259 260 261 262 263 @property @lru_cache ( maxsize = 2048 ) def import_string_pos ( self ) -> Tuple [ int , int ]: \"\"\" Returns: Byte offsets (start, end) of the import string in the source file. \"\"\" source_start = self . _ast_node . src . byte_offset res = ( IMPORT_FILENAME_RE , IMPORT_AS_FROM_RE , IMPORT_AS_RE , IMPORT_ALIAS_LIST , ) matches = list ( re . match ( self . _source ) for re in res ) assert any ( matches ) match = next ( m for m in matches if m ) return source_start + match . start ( \"filename\" ), source_start + match . end ( \"filename\" )","title":"import_string_pos()"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.imported_file","text":"Returns: Type Description Path Absolute path of the imported file. Source code in woke/ast/ir/meta/import_directive.py 180 181 182 183 184 185 186 @property def imported_file ( self ) -> Path : \"\"\" Returns: Absolute path of the imported file. \"\"\" return self . _imported_file","title":"imported_file()"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.parent","text":"Returns: Type Description SourceUnit Parent IR node. Source code in woke/ast/ir/meta/import_directive.py 164 165 166 167 168 169 170 @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.source_unit","text":"Returns: Type Description SourceUnit Source unit imported by this import directive. Source code in woke/ast/ir/meta/import_directive.py 196 197 198 199 200 201 202 203 204 205 206 207 208 @property def source_unit ( self ) -> SourceUnit : \"\"\" Returns: Source unit imported by this import directive. \"\"\" from .source_unit import SourceUnit node = self . _reference_resolver . resolve_node ( self . _source_unit_id , self . _cu_hash ) assert isinstance ( node , SourceUnit ) return node","title":"source_unit()"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.source_unit_name","text":"Returns: Type Description PurePath Source unit name of the imported file. Source code in woke/ast/ir/meta/import_directive.py 172 173 174 175 176 177 178 @property def source_unit_name ( self ) -> PurePath : \"\"\" Returns: Source unit name of the imported file. \"\"\" return self . _source_unit_name","title":"source_unit_name()"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.symbol_aliases","text":"Is only set in the case of import { SafeType as CustomSafeType } from \"SafeLib.sol\" ; import directive type. Returns: Type Description Tuple [ SymbolAlias ] Symbol aliases present in the import directive. Source code in woke/ast/ir/meta/import_directive.py 210 211 212 213 214 215 216 217 @property def symbol_aliases ( self ) -> Tuple [ SymbolAlias ]: \"\"\" Is only set in the case of `:::solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\";` import directive type. Returns: Symbol aliases present in the import directive. \"\"\" return tuple ( self . _symbol_aliases )","title":"symbol_aliases()"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.ImportDirective.unit_alias","text":"Example Is SafeLib in the case of these import directives: import \"SafeLib.sol\" as SafeLib ; import * as SafeLib from \"SafeLib.sol\" ; Is None in the case of these import directives: import \"SafeLib.sol\" ; import { SafeType as CustomSafeType } from \"SafeLib.sol\" ; Returns: Type Description Optional [ str ] Alias for the namespace of the imported source unit. Source code in woke/ast/ir/meta/import_directive.py 219 220 221 222 223 224 225 226 227 228 229 230 231 232 233 234 235 236 237 238 239 240 241 @property def unit_alias ( self ) -> Optional [ str ]: \"\"\" !!! example Is `SafeLib` in the case of these import directives: ```solidity import \"SafeLib.sol\" as SafeLib; ``` ```solidity import * as SafeLib from \"SafeLib.sol\"; ``` Is `None` in the case of these import directives: ```solidity import \"SafeLib.sol\"; ``` ```solidity import { SafeType as CustomSafeType } from \"SafeLib.sol\"; ``` Returns: Alias for the namespace of the imported source unit. \"\"\" return self . _unit_alias","title":"unit_alias()"},{"location":"api-reference/ir/meta/import-directive/#woke.ast.ir.meta.import_directive.SymbolAlias","text":"Helper class representing a symbol alias in an import directive of the import { symbol as alias } from \"file.sol\" ; form. Example symbol is the foreign attribute and alias is the local attribute in the following example: import { symbol as alias } from \"file.sol\" ; Attributes: Name Type Description foreign Identifier Identifier referencing the symbol in the imported file. local Optional [ str ] Alias name of the imported symbol (if any). Source code in woke/ast/ir/meta/import_directive.py 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 @dataclass class SymbolAlias : \"\"\" Helper class representing a symbol alias in an import directive of the`:::solidity import {symbol as alias} from \"file.sol\";` form. !!! example `symbol` is the `foreign` attribute and `alias` is the `local` attribute in the following example: ```solidity import {symbol as alias} from \"file.sol\"; ``` Attributes: foreign (Identifier): Identifier referencing the symbol in the imported file. local (Optional[str]): Alias name of the imported symbol (if any). \"\"\" foreign : Identifier local : Optional [ str ]","title":"SymbolAlias"},{"location":"api-reference/ir/meta/inheritance-specifier/","text":"woke.ast.ir.meta.inheritance_specifier module # InheritanceSpecifier class # Bases: SolidityAbc Example A ( 0x1234567890123456789012345678901234567890 ) in the following code: contract A { address immutable owner ; constructor ( address _owner ) { owner = _owner ; } } contract B is A ( 0x1234567890123456789012345678901234567890 ) {} Source code in woke/ast/ir/meta/inheritance_specifier.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 class InheritanceSpecifier ( SolidityAbc ): \"\"\" !!! example `:::solidity A(0x1234567890123456789012345678901234567890)` in the following code: ```solidity contract A { address immutable owner; constructor(address _owner) { owner = _owner; } } contract B is A(0x1234567890123456789012345678901234567890) {} ``` \"\"\" _ast_node : SolcInheritanceSpecifier _parent : ContractDefinition _base_name : Union [ IdentifierPath , UserDefinedTypeName ] _arguments : Optional [ List [ ExpressionAbc ]] def __init__ ( self , init : IrInitTuple , inheritance_specifier : SolcInheritanceSpecifier , parent : ContractDefinition , ): super () . __init__ ( init , inheritance_specifier , parent ) if isinstance ( inheritance_specifier . base_name , SolcIdentifierPath ): self . _base_name = IdentifierPath ( init , inheritance_specifier . base_name , self ) elif isinstance ( inheritance_specifier . base_name , SolcUserDefinedTypeName ): self . _base_name = UserDefinedTypeName ( init , inheritance_specifier . base_name , self ) if inheritance_specifier . arguments is None : self . _arguments = None else : self . _arguments = [] for argument in inheritance_specifier . arguments : self . _arguments . append ( ExpressionAbc . from_ast ( init , argument , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _base_name if self . _arguments is not None : for argument in self . _arguments : yield from argument @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def base_name ( self ) -> Union [ IdentifierPath , UserDefinedTypeName ]: \"\"\" The returned IR node holds a reference to the base contract definition ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). !!! example `A` in the following code: ```solidity contract B is A(0x1234567890123456789012345678901234567890) {} ``` Returns: IR node representing the base contract name. \"\"\" return self . _base_name @property def arguments ( self ) -> Optional [ List [ ExpressionAbc ]]: \"\"\" !!! warning Is `None` when there are no curly braces after the inheritance specifier name. ```solidity contract B is A {} ``` Is an empty list when there are curly braces but no arguments. ```solidity contract B is A() {} ``` !!! example `:::solidity 0x1234567890123456789012345678901234567890` in the following code: ```solidity contract B is A(0x1234567890123456789012345678901234567890) {} ``` Returns: Arguments of the base constructor call, if provided. \"\"\" return self . _arguments arguments () property # Warning Is None when there are no curly braces after the inheritance specifier name. contract B is A {} Is an empty list when there are curly braces but no arguments. contract B is A () {} Example 0x1234567890123456789012345678901234567890 in the following code: contract B is A ( 0x1234567890123456789012345678901234567890 ) {} Returns: Type Description Optional [ List [ ExpressionAbc ]] Arguments of the base constructor call, if provided. Source code in woke/ast/ir/meta/inheritance_specifier.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 @property def arguments ( self ) -> Optional [ List [ ExpressionAbc ]]: \"\"\" !!! warning Is `None` when there are no curly braces after the inheritance specifier name. ```solidity contract B is A {} ``` Is an empty list when there are curly braces but no arguments. ```solidity contract B is A() {} ``` !!! example `:::solidity 0x1234567890123456789012345678901234567890` in the following code: ```solidity contract B is A(0x1234567890123456789012345678901234567890) {} ``` Returns: Arguments of the base constructor call, if provided. \"\"\" return self . _arguments base_name () property # The returned IR node holds a reference to the base contract definition ( ContractDefinition ). Example A in the following code: contract B is A ( 0x1234567890123456789012345678901234567890 ) {} Returns: Type Description Union [ IdentifierPath , UserDefinedTypeName ] IR node representing the base contract name. Source code in woke/ast/ir/meta/inheritance_specifier.py 82 83 84 85 86 87 88 89 90 91 92 93 94 @property def base_name ( self ) -> Union [ IdentifierPath , UserDefinedTypeName ]: \"\"\" The returned IR node holds a reference to the base contract definition ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). !!! example `A` in the following code: ```solidity contract B is A(0x1234567890123456789012345678901234567890) {} ``` Returns: IR node representing the base contract name. \"\"\" return self . _base_name parent () property # Returns: Type Description ContractDefinition Parent IR node. Source code in woke/ast/ir/meta/inheritance_specifier.py 74 75 76 77 78 79 80 @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Inheritance specifier"},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier","text":"","title":"inheritance_specifier"},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier","text":"Bases: SolidityAbc Example A ( 0x1234567890123456789012345678901234567890 ) in the following code: contract A { address immutable owner ; constructor ( address _owner ) { owner = _owner ; } } contract B is A ( 0x1234567890123456789012345678901234567890 ) {} Source code in woke/ast/ir/meta/inheritance_specifier.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 class InheritanceSpecifier ( SolidityAbc ): \"\"\" !!! example `:::solidity A(0x1234567890123456789012345678901234567890)` in the following code: ```solidity contract A { address immutable owner; constructor(address _owner) { owner = _owner; } } contract B is A(0x1234567890123456789012345678901234567890) {} ``` \"\"\" _ast_node : SolcInheritanceSpecifier _parent : ContractDefinition _base_name : Union [ IdentifierPath , UserDefinedTypeName ] _arguments : Optional [ List [ ExpressionAbc ]] def __init__ ( self , init : IrInitTuple , inheritance_specifier : SolcInheritanceSpecifier , parent : ContractDefinition , ): super () . __init__ ( init , inheritance_specifier , parent ) if isinstance ( inheritance_specifier . base_name , SolcIdentifierPath ): self . _base_name = IdentifierPath ( init , inheritance_specifier . base_name , self ) elif isinstance ( inheritance_specifier . base_name , SolcUserDefinedTypeName ): self . _base_name = UserDefinedTypeName ( init , inheritance_specifier . base_name , self ) if inheritance_specifier . arguments is None : self . _arguments = None else : self . _arguments = [] for argument in inheritance_specifier . arguments : self . _arguments . append ( ExpressionAbc . from_ast ( init , argument , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _base_name if self . _arguments is not None : for argument in self . _arguments : yield from argument @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def base_name ( self ) -> Union [ IdentifierPath , UserDefinedTypeName ]: \"\"\" The returned IR node holds a reference to the base contract definition ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). !!! example `A` in the following code: ```solidity contract B is A(0x1234567890123456789012345678901234567890) {} ``` Returns: IR node representing the base contract name. \"\"\" return self . _base_name @property def arguments ( self ) -> Optional [ List [ ExpressionAbc ]]: \"\"\" !!! warning Is `None` when there are no curly braces after the inheritance specifier name. ```solidity contract B is A {} ``` Is an empty list when there are curly braces but no arguments. ```solidity contract B is A() {} ``` !!! example `:::solidity 0x1234567890123456789012345678901234567890` in the following code: ```solidity contract B is A(0x1234567890123456789012345678901234567890) {} ``` Returns: Arguments of the base constructor call, if provided. \"\"\" return self . _arguments","title":"InheritanceSpecifier"},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier.arguments","text":"Warning Is None when there are no curly braces after the inheritance specifier name. contract B is A {} Is an empty list when there are curly braces but no arguments. contract B is A () {} Example 0x1234567890123456789012345678901234567890 in the following code: contract B is A ( 0x1234567890123456789012345678901234567890 ) {} Returns: Type Description Optional [ List [ ExpressionAbc ]] Arguments of the base constructor call, if provided. Source code in woke/ast/ir/meta/inheritance_specifier.py 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 @property def arguments ( self ) -> Optional [ List [ ExpressionAbc ]]: \"\"\" !!! warning Is `None` when there are no curly braces after the inheritance specifier name. ```solidity contract B is A {} ``` Is an empty list when there are curly braces but no arguments. ```solidity contract B is A() {} ``` !!! example `:::solidity 0x1234567890123456789012345678901234567890` in the following code: ```solidity contract B is A(0x1234567890123456789012345678901234567890) {} ``` Returns: Arguments of the base constructor call, if provided. \"\"\" return self . _arguments","title":"arguments()"},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier.base_name","text":"The returned IR node holds a reference to the base contract definition ( ContractDefinition ). Example A in the following code: contract B is A ( 0x1234567890123456789012345678901234567890 ) {} Returns: Type Description Union [ IdentifierPath , UserDefinedTypeName ] IR node representing the base contract name. Source code in woke/ast/ir/meta/inheritance_specifier.py 82 83 84 85 86 87 88 89 90 91 92 93 94 @property def base_name ( self ) -> Union [ IdentifierPath , UserDefinedTypeName ]: \"\"\" The returned IR node holds a reference to the base contract definition ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition]). !!! example `A` in the following code: ```solidity contract B is A(0x1234567890123456789012345678901234567890) {} ``` Returns: IR node representing the base contract name. \"\"\" return self . _base_name","title":"base_name()"},{"location":"api-reference/ir/meta/inheritance-specifier/#woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier.parent","text":"Returns: Type Description ContractDefinition Parent IR node. Source code in woke/ast/ir/meta/inheritance_specifier.py 74 75 76 77 78 79 80 @property def parent ( self ) -> ContractDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/modifier-invocation/","text":"woke.ast.ir.meta.modifier_invocation module # ModifierInvocation class # Bases: SolidityAbc Warning Also represents a base constructor invocation. Example IERC20 ( \"MyToken\" , \"MTK\" ) ( ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER ), initializer ( ModifierInvocationKind.MODIFIER_INVOCATION ) in the following code: import Initializable from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\" ; contract MyContract is ERC20 , Initializable { constructor () ERC20 ( \"MyToken\" , \"MTK\" ) initializer { // ... } } Source code in woke/ast/ir/meta/modifier_invocation.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 class ModifierInvocation ( SolidityAbc ): \"\"\" !!! warning Also represents a base constructor invocation. !!! example - `:::solidity IERC20(\"MyToken\", \"MTK\")` ([ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER][woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER]), - `:::solidity initializer` ([ModifierInvocationKind.MODIFIER_INVOCATION][woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION]) in the following code: ```solidity import Initializable from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\"; contract MyContract is ERC20, Initializable { constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } } ``` \"\"\" _ast_node : SolcModifierInvocation _parent : FunctionDefinition _kind : Optional [ ModifierInvocationKind ] _modifier_name : Union [ Identifier , IdentifierPath ] _arguments : Optional [ List [ ExpressionAbc ]] def __init__ ( self , init : IrInitTuple , modifier_invocation : SolcModifierInvocation , parent : SolidityAbc , ): super () . __init__ ( init , modifier_invocation , parent ) self . _kind = None if isinstance ( modifier_invocation . modifier_name , SolcIdentifier ): self . _modifier_name = Identifier ( init , modifier_invocation . modifier_name , self ) elif isinstance ( modifier_invocation . modifier_name , SolcIdentifierPath ): self . _modifier_name = IdentifierPath ( init , modifier_invocation . modifier_name , self ) if modifier_invocation . arguments is None : self . _arguments = None else : self . _arguments = [ ExpressionAbc . from_ast ( init , argument , self ) for argument in modifier_invocation . arguments ] self . _reference_resolver . register_post_process_callback ( self . _post_process ) def _post_process ( self , callback_params : CallbackParams ): from ..declaration.contract_definition import ContractDefinition from ..declaration.modifier_definition import ModifierDefinition referenced_declaration = self . modifier_name . referenced_declaration if isinstance ( referenced_declaration , ModifierDefinition ): self . _kind = ModifierInvocationKind . MODIFIER_INVOCATION elif isinstance ( referenced_declaration , ContractDefinition ): self . _kind = ModifierInvocationKind . BASE_CONSTRUCTOR_SPECIFIER else : assert False , f \"Unexpected declaration type: { referenced_declaration } \" def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _modifier_name if self . _arguments is not None : for argument in self . _arguments : yield from argument @property def parent ( self ) -> FunctionDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def kind ( self ) -> ModifierInvocationKind : \"\"\" Returns: Kind of the modifier invocation. \"\"\" assert self . _kind is not None return self . _kind @property def modifier_name ( self ) -> Union [ Identifier , IdentifierPath ]: \"\"\" The returned IR node holds a reference to the [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition] declaration of the modifier being invoked in the case of the [ModifierInvocationKind.MODIFIER_INVOCATION][woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION] kind. In the case of the [ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER][woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER] kind, the returned IR node holds a reference to the [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] whose constructor is being invoked. !!! example `ERC20` and `initializer` in the following code: ```solidity constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } ``` Returns: IR node representing the name of the modifier. \"\"\" return self . _modifier_name @property def arguments ( self ) -> Optional [ List [ ExpressionAbc ]]: \"\"\" !!! warning Is `None` when there are no curly braces after the modifier name. ```solidity constructor() initializer {} ``` Is an empty list when there are curly braces but no arguments. ```solidity constructor() initializer() {} ``` !!! example `:::solidity \"MyToken\"` and `:::solidity \"MTK\"` in the following code: ```solidity constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } ``` Returns: Arguments of the base constructor or modifier invocation (if any). \"\"\" return self . _arguments arguments () property # Warning Is None when there are no curly braces after the modifier name. constructor () initializer {} Is an empty list when there are curly braces but no arguments. constructor () initializer () {} Example \"MyToken\" and \"MTK\" in the following code: constructor () ERC20 ( \"MyToken\" , \"MTK\" ) initializer { // ... } Returns: Type Description Optional [ List [ ExpressionAbc ]] Arguments of the base constructor or modifier invocation (if any). Source code in woke/ast/ir/meta/modifier_invocation.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 @property def arguments ( self ) -> Optional [ List [ ExpressionAbc ]]: \"\"\" !!! warning Is `None` when there are no curly braces after the modifier name. ```solidity constructor() initializer {} ``` Is an empty list when there are curly braces but no arguments. ```solidity constructor() initializer() {} ``` !!! example `:::solidity \"MyToken\"` and `:::solidity \"MTK\"` in the following code: ```solidity constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } ``` Returns: Arguments of the base constructor or modifier invocation (if any). \"\"\" return self . _arguments kind () property # Returns: Type Description ModifierInvocationKind Kind of the modifier invocation. Source code in woke/ast/ir/meta/modifier_invocation.py 99 100 101 102 103 104 105 106 @property def kind ( self ) -> ModifierInvocationKind : \"\"\" Returns: Kind of the modifier invocation. \"\"\" assert self . _kind is not None return self . _kind modifier_name () property # The returned IR node holds a reference to the ModifierDefinition declaration of the modifier being invoked in the case of the ModifierInvocationKind.MODIFIER_INVOCATION kind. In the case of the ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER kind, the returned IR node holds a reference to the ContractDefinition whose constructor is being invoked. Example ERC20 and initializer in the following code: constructor () ERC20 ( \"MyToken\" , \"MTK\" ) initializer { // ... } Returns: Type Description Union [ Identifier , IdentifierPath ] IR node representing the name of the modifier. Source code in woke/ast/ir/meta/modifier_invocation.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 @property def modifier_name ( self ) -> Union [ Identifier , IdentifierPath ]: \"\"\" The returned IR node holds a reference to the [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition] declaration of the modifier being invoked in the case of the [ModifierInvocationKind.MODIFIER_INVOCATION][woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION] kind. In the case of the [ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER][woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER] kind, the returned IR node holds a reference to the [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] whose constructor is being invoked. !!! example `ERC20` and `initializer` in the following code: ```solidity constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } ``` Returns: IR node representing the name of the modifier. \"\"\" return self . _modifier_name parent () property # Returns: Type Description FunctionDefinition Parent IR node. Source code in woke/ast/ir/meta/modifier_invocation.py 91 92 93 94 95 96 97 @property def parent ( self ) -> FunctionDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Modifier invocation"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation","text":"","title":"modifier_invocation"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation","text":"Bases: SolidityAbc Warning Also represents a base constructor invocation. Example IERC20 ( \"MyToken\" , \"MTK\" ) ( ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER ), initializer ( ModifierInvocationKind.MODIFIER_INVOCATION ) in the following code: import Initializable from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\" ; contract MyContract is ERC20 , Initializable { constructor () ERC20 ( \"MyToken\" , \"MTK\" ) initializer { // ... } } Source code in woke/ast/ir/meta/modifier_invocation.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 class ModifierInvocation ( SolidityAbc ): \"\"\" !!! warning Also represents a base constructor invocation. !!! example - `:::solidity IERC20(\"MyToken\", \"MTK\")` ([ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER][woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER]), - `:::solidity initializer` ([ModifierInvocationKind.MODIFIER_INVOCATION][woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION]) in the following code: ```solidity import Initializable from \"@openzeppelin/contracts/proxy/utils/Initializable.sol\"; contract MyContract is ERC20, Initializable { constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } } ``` \"\"\" _ast_node : SolcModifierInvocation _parent : FunctionDefinition _kind : Optional [ ModifierInvocationKind ] _modifier_name : Union [ Identifier , IdentifierPath ] _arguments : Optional [ List [ ExpressionAbc ]] def __init__ ( self , init : IrInitTuple , modifier_invocation : SolcModifierInvocation , parent : SolidityAbc , ): super () . __init__ ( init , modifier_invocation , parent ) self . _kind = None if isinstance ( modifier_invocation . modifier_name , SolcIdentifier ): self . _modifier_name = Identifier ( init , modifier_invocation . modifier_name , self ) elif isinstance ( modifier_invocation . modifier_name , SolcIdentifierPath ): self . _modifier_name = IdentifierPath ( init , modifier_invocation . modifier_name , self ) if modifier_invocation . arguments is None : self . _arguments = None else : self . _arguments = [ ExpressionAbc . from_ast ( init , argument , self ) for argument in modifier_invocation . arguments ] self . _reference_resolver . register_post_process_callback ( self . _post_process ) def _post_process ( self , callback_params : CallbackParams ): from ..declaration.contract_definition import ContractDefinition from ..declaration.modifier_definition import ModifierDefinition referenced_declaration = self . modifier_name . referenced_declaration if isinstance ( referenced_declaration , ModifierDefinition ): self . _kind = ModifierInvocationKind . MODIFIER_INVOCATION elif isinstance ( referenced_declaration , ContractDefinition ): self . _kind = ModifierInvocationKind . BASE_CONSTRUCTOR_SPECIFIER else : assert False , f \"Unexpected declaration type: { referenced_declaration } \" def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _modifier_name if self . _arguments is not None : for argument in self . _arguments : yield from argument @property def parent ( self ) -> FunctionDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def kind ( self ) -> ModifierInvocationKind : \"\"\" Returns: Kind of the modifier invocation. \"\"\" assert self . _kind is not None return self . _kind @property def modifier_name ( self ) -> Union [ Identifier , IdentifierPath ]: \"\"\" The returned IR node holds a reference to the [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition] declaration of the modifier being invoked in the case of the [ModifierInvocationKind.MODIFIER_INVOCATION][woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION] kind. In the case of the [ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER][woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER] kind, the returned IR node holds a reference to the [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] whose constructor is being invoked. !!! example `ERC20` and `initializer` in the following code: ```solidity constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } ``` Returns: IR node representing the name of the modifier. \"\"\" return self . _modifier_name @property def arguments ( self ) -> Optional [ List [ ExpressionAbc ]]: \"\"\" !!! warning Is `None` when there are no curly braces after the modifier name. ```solidity constructor() initializer {} ``` Is an empty list when there are curly braces but no arguments. ```solidity constructor() initializer() {} ``` !!! example `:::solidity \"MyToken\"` and `:::solidity \"MTK\"` in the following code: ```solidity constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } ``` Returns: Arguments of the base constructor or modifier invocation (if any). \"\"\" return self . _arguments","title":"ModifierInvocation"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation.arguments","text":"Warning Is None when there are no curly braces after the modifier name. constructor () initializer {} Is an empty list when there are curly braces but no arguments. constructor () initializer () {} Example \"MyToken\" and \"MTK\" in the following code: constructor () ERC20 ( \"MyToken\" , \"MTK\" ) initializer { // ... } Returns: Type Description Optional [ List [ ExpressionAbc ]] Arguments of the base constructor or modifier invocation (if any). Source code in woke/ast/ir/meta/modifier_invocation.py 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 @property def arguments ( self ) -> Optional [ List [ ExpressionAbc ]]: \"\"\" !!! warning Is `None` when there are no curly braces after the modifier name. ```solidity constructor() initializer {} ``` Is an empty list when there are curly braces but no arguments. ```solidity constructor() initializer() {} ``` !!! example `:::solidity \"MyToken\"` and `:::solidity \"MTK\"` in the following code: ```solidity constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } ``` Returns: Arguments of the base constructor or modifier invocation (if any). \"\"\" return self . _arguments","title":"arguments()"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation.kind","text":"Returns: Type Description ModifierInvocationKind Kind of the modifier invocation. Source code in woke/ast/ir/meta/modifier_invocation.py 99 100 101 102 103 104 105 106 @property def kind ( self ) -> ModifierInvocationKind : \"\"\" Returns: Kind of the modifier invocation. \"\"\" assert self . _kind is not None return self . _kind","title":"kind()"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation.modifier_name","text":"The returned IR node holds a reference to the ModifierDefinition declaration of the modifier being invoked in the case of the ModifierInvocationKind.MODIFIER_INVOCATION kind. In the case of the ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER kind, the returned IR node holds a reference to the ContractDefinition whose constructor is being invoked. Example ERC20 and initializer in the following code: constructor () ERC20 ( \"MyToken\" , \"MTK\" ) initializer { // ... } Returns: Type Description Union [ Identifier , IdentifierPath ] IR node representing the name of the modifier. Source code in woke/ast/ir/meta/modifier_invocation.py 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 @property def modifier_name ( self ) -> Union [ Identifier , IdentifierPath ]: \"\"\" The returned IR node holds a reference to the [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition] declaration of the modifier being invoked in the case of the [ModifierInvocationKind.MODIFIER_INVOCATION][woke.ast.enums.ModifierInvocationKind.MODIFIER_INVOCATION] kind. In the case of the [ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER][woke.ast.enums.ModifierInvocationKind.BASE_CONSTRUCTOR_SPECIFIER] kind, the returned IR node holds a reference to the [ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] whose constructor is being invoked. !!! example `ERC20` and `initializer` in the following code: ```solidity constructor() ERC20(\"MyToken\", \"MTK\") initializer { // ... } ``` Returns: IR node representing the name of the modifier. \"\"\" return self . _modifier_name","title":"modifier_name()"},{"location":"api-reference/ir/meta/modifier-invocation/#woke.ast.ir.meta.modifier_invocation.ModifierInvocation.parent","text":"Returns: Type Description FunctionDefinition Parent IR node. Source code in woke/ast/ir/meta/modifier_invocation.py 91 92 93 94 95 96 97 @property def parent ( self ) -> FunctionDefinition : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/override-specifier/","text":"woke.ast.ir.meta.override_specifier module # OverrideSpecifier class # Bases: SolidityAbc Example An override specifier can be used: in a FunctionDefinition : override in line 19, in a ModifierDefinition : override in line 12, in a VariableDeclaration : override ( IERC20 ) in line 17. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 interface IERC20 { function transfer ( address to , uint256 value ) external returns ( bool ); function allowance ( address owner , address spender ) external view returns ( uint256 ); } abstract contract ERC20 is IERC20 { modifier EOA () virtual ; } contract C is ERC20 { modifier EOA () override { require ( msg.sender == tx.origin ); _ ; } mapping ( address => mapping ( address => uint256 )) public override ( IERC20 ) allowance ; function transfer ( address to , uint256 value ) external override returns ( bool ) { // ... } } Source code in woke/ast/ir/meta/override_specifier.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 class OverrideSpecifier ( SolidityAbc ): \"\"\" !!! example An override specifier can be used: - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition]: - `:::solidity override` in line 19, - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition]: - `:::solidity override` in line 12, - in a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - `:::solidity override(IERC20)` in line 17. ```solidity linenums=\"1\" interface IERC20 { function transfer(address to, uint256 value) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); } abstract contract ERC20 is IERC20 { modifier EOA() virtual; } contract C is ERC20 { modifier EOA() override { require(msg.sender == tx.origin); _; } mapping(address => mapping(address => uint256)) public override(IERC20) allowance; function transfer(address to, uint256 value) external override returns (bool) { // ... } } ``` \"\"\" _ast_node : SolcOverrideSpecifier _parent : Union [ FunctionDefinition , ModifierDefinition , VariableDeclaration ] _overrides : List [ Union [ IdentifierPath , UserDefinedTypeName ]] def __init__ ( self , init : IrInitTuple , override_specifier : SolcOverrideSpecifier , parent : SolidityAbc , ): super () . __init__ ( init , override_specifier , parent ) self . _overrides = [] for override in override_specifier . overrides : if isinstance ( override , SolcIdentifierPath ): self . _overrides . append ( IdentifierPath ( init , override , self )) elif isinstance ( override , SolcUserDefinedTypeName ): self . _overrides . append ( UserDefinedTypeName ( init , override , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for override in self . _overrides : yield from override @property def parent ( self , ) -> Union [ FunctionDefinition , ModifierDefinition , VariableDeclaration ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def overrides ( self ) -> Tuple [ Union [ IdentifierPath , UserDefinedTypeName ]]: \"\"\" !!! note Is empty when there are no curly braces after the `:::solidity override` keyword. Returns: Tuple of IR nodes referencing the contract or interface whose declaration is being overridden. \"\"\" return tuple ( self . _overrides ) overrides () property # Note Is empty when there are no curly braces after the override keyword. Returns: Type Description Tuple [ Union [ IdentifierPath , UserDefinedTypeName ]] Tuple of IR nodes referencing the contract or interface whose declaration is being overridden. Source code in woke/ast/ir/meta/override_specifier.py 94 95 96 97 98 99 100 101 102 @property def overrides ( self ) -> Tuple [ Union [ IdentifierPath , UserDefinedTypeName ]]: \"\"\" !!! note Is empty when there are no curly braces after the `:::solidity override` keyword. Returns: Tuple of IR nodes referencing the contract or interface whose declaration is being overridden. \"\"\" return tuple ( self . _overrides ) parent () property # Returns: Type Description Union [ FunctionDefinition , ModifierDefinition , VariableDeclaration ] Parent IR node. Source code in woke/ast/ir/meta/override_specifier.py 84 85 86 87 88 89 90 91 92 @property def parent ( self , ) -> Union [ FunctionDefinition , ModifierDefinition , VariableDeclaration ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Override specifier"},{"location":"api-reference/ir/meta/override-specifier/#woke.ast.ir.meta.override_specifier","text":"","title":"override_specifier"},{"location":"api-reference/ir/meta/override-specifier/#woke.ast.ir.meta.override_specifier.OverrideSpecifier","text":"Bases: SolidityAbc Example An override specifier can be used: in a FunctionDefinition : override in line 19, in a ModifierDefinition : override in line 12, in a VariableDeclaration : override ( IERC20 ) in line 17. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 interface IERC20 { function transfer ( address to , uint256 value ) external returns ( bool ); function allowance ( address owner , address spender ) external view returns ( uint256 ); } abstract contract ERC20 is IERC20 { modifier EOA () virtual ; } contract C is ERC20 { modifier EOA () override { require ( msg.sender == tx.origin ); _ ; } mapping ( address => mapping ( address => uint256 )) public override ( IERC20 ) allowance ; function transfer ( address to , uint256 value ) external override returns ( bool ) { // ... } } Source code in woke/ast/ir/meta/override_specifier.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 class OverrideSpecifier ( SolidityAbc ): \"\"\" !!! example An override specifier can be used: - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition]: - `:::solidity override` in line 19, - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition]: - `:::solidity override` in line 12, - in a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - `:::solidity override(IERC20)` in line 17. ```solidity linenums=\"1\" interface IERC20 { function transfer(address to, uint256 value) external returns (bool); function allowance(address owner, address spender) external view returns (uint256); } abstract contract ERC20 is IERC20 { modifier EOA() virtual; } contract C is ERC20 { modifier EOA() override { require(msg.sender == tx.origin); _; } mapping(address => mapping(address => uint256)) public override(IERC20) allowance; function transfer(address to, uint256 value) external override returns (bool) { // ... } } ``` \"\"\" _ast_node : SolcOverrideSpecifier _parent : Union [ FunctionDefinition , ModifierDefinition , VariableDeclaration ] _overrides : List [ Union [ IdentifierPath , UserDefinedTypeName ]] def __init__ ( self , init : IrInitTuple , override_specifier : SolcOverrideSpecifier , parent : SolidityAbc , ): super () . __init__ ( init , override_specifier , parent ) self . _overrides = [] for override in override_specifier . overrides : if isinstance ( override , SolcIdentifierPath ): self . _overrides . append ( IdentifierPath ( init , override , self )) elif isinstance ( override , SolcUserDefinedTypeName ): self . _overrides . append ( UserDefinedTypeName ( init , override , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for override in self . _overrides : yield from override @property def parent ( self , ) -> Union [ FunctionDefinition , ModifierDefinition , VariableDeclaration ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def overrides ( self ) -> Tuple [ Union [ IdentifierPath , UserDefinedTypeName ]]: \"\"\" !!! note Is empty when there are no curly braces after the `:::solidity override` keyword. Returns: Tuple of IR nodes referencing the contract or interface whose declaration is being overridden. \"\"\" return tuple ( self . _overrides )","title":"OverrideSpecifier"},{"location":"api-reference/ir/meta/override-specifier/#woke.ast.ir.meta.override_specifier.OverrideSpecifier.overrides","text":"Note Is empty when there are no curly braces after the override keyword. Returns: Type Description Tuple [ Union [ IdentifierPath , UserDefinedTypeName ]] Tuple of IR nodes referencing the contract or interface whose declaration is being overridden. Source code in woke/ast/ir/meta/override_specifier.py 94 95 96 97 98 99 100 101 102 @property def overrides ( self ) -> Tuple [ Union [ IdentifierPath , UserDefinedTypeName ]]: \"\"\" !!! note Is empty when there are no curly braces after the `:::solidity override` keyword. Returns: Tuple of IR nodes referencing the contract or interface whose declaration is being overridden. \"\"\" return tuple ( self . _overrides )","title":"overrides()"},{"location":"api-reference/ir/meta/override-specifier/#woke.ast.ir.meta.override_specifier.OverrideSpecifier.parent","text":"Returns: Type Description Union [ FunctionDefinition , ModifierDefinition , VariableDeclaration ] Parent IR node. Source code in woke/ast/ir/meta/override_specifier.py 84 85 86 87 88 89 90 91 92 @property def parent ( self , ) -> Union [ FunctionDefinition , ModifierDefinition , VariableDeclaration ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/parameter-list/","text":"woke.ast.ir.meta.parameter_list module # ParameterList class # Bases: SolidityAbc Example A parameter list can be used: in an ErrorDefinition : ( uint requested , uint available ) in line 2, in an EventDefinition : ( address indexed previousOwner , address indexed newOwner ) in line 3, in a FunctionDefinition : ( uint a , uint b ) in line 12 as function parameters, ( uint256 ) in line 12 as function return parameters, in a FunctionTypeName : ( string memory , uint ) in line 5 as function type name parameters, ( bool ) in line 5 as function type name return parameters, in a ModifierDefinition : ( uint x ) in line 7, in a TryCatchClause : ( bool success ) in line 17 as try clause parameters, ( string memory reason ) in line 19 as catch clause parameters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 contract C { error InsufficientBalance ( uint requested , uint available ); event OwnershipTransferred ( address indexed previousOwner , address indexed newOwner ); function ( string memory , uint ) external returns ( bool ) externalFunction ; modifier onlyPositive ( uint x ) { require ( x > 0 , \"x must be positive\" ); _ ; } function add ( uint a , uint b ) onlyPositive ( a ) public pure returns ( uint256 ) { return a + b ; } function callExternalFunction () public { try externalFunction ( \"abc\" , 123 ) returns ( bool success ) { // ... } catch Error ( string memory reason ) { // ... } } } Source code in woke/ast/ir/meta/parameter_list.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class ParameterList ( SolidityAbc ): \"\"\" !!! example A parameter list can be used: - in an [ErrorDefinition][woke.ast.ir.declaration.error_definition.ErrorDefinition]: - `:::solidity (uint requested, uint available)` in line 2, - in an [EventDefinition][woke.ast.ir.declaration.event_definition.EventDefinition]: - `:::solidity (address indexed previousOwner, address indexed newOwner)` in line 3, - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition]: - `:::solidity (uint a, uint b)` in line 12 as function parameters, - `:::solidity (uint256)` in line 12 as function return parameters, - in a [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName]: - `:::solidity (string memory, uint)` in line 5 as function type name parameters, - `:::solidity (bool)` in line 5 as function type name return parameters, - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition]: - `:::solidity (uint x)` in line 7, - in a [TryCatchClause][woke.ast.ir.meta.try_catch_clause.TryCatchClause]: - `:::solidity (bool success)` in line 17 as try clause parameters, - `:::solidity (string memory reason)` in line 19 as catch clause parameters. ```solidity linenums=\"1\" contract C { error InsufficientBalance(uint requested, uint available); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function (string memory, uint) external returns (bool) externalFunction; modifier onlyPositive(uint x) { require(x > 0, \"x must be positive\"); _; } function add(uint a, uint b) onlyPositive(a) public pure returns (uint256) { return a + b; } function callExternalFunction() public { try externalFunction(\"abc\", 123) returns (bool success) { // ... } catch Error(string memory reason) { // ... } } } ``` \"\"\" _ast_node : SolcParameterList _parent : Union [ ErrorDefinition , EventDefinition , FunctionDefinition , FunctionTypeName , ModifierDefinition , TryCatchClause , ] _parameters : List [ VariableDeclaration ] def __init__ ( self , init : IrInitTuple , parameter_list : SolcParameterList , parent : SolidityAbc ): super () . __init__ ( init , parameter_list , parent ) self . _parameters = [] for parameter in parameter_list . parameters : self . _parameters . append ( VariableDeclaration ( init , parameter , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for parameter in self . _parameters : yield from parameter @property def parent ( self , ) -> Union [ ErrorDefinition , EventDefinition , FunctionDefinition , FunctionTypeName , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def parameters ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Can be empty. Returns: Variable declarations of the parameter list. \"\"\" return tuple ( self . _parameters ) parameters () property # Can be empty. Returns: Type Description Tuple [ VariableDeclaration ] Variable declarations of the parameter list. Source code in woke/ast/ir/meta/parameter_list.py 112 113 114 115 116 117 118 119 @property def parameters ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Can be empty. Returns: Variable declarations of the parameter list. \"\"\" return tuple ( self . _parameters ) parent () property # Returns: Type Description Union [ ErrorDefinition , EventDefinition , FunctionDefinition , FunctionTypeName , ModifierDefinition , TryCatchClause ] Parent IR node. Source code in woke/ast/ir/meta/parameter_list.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 @property def parent ( self , ) -> Union [ ErrorDefinition , EventDefinition , FunctionDefinition , FunctionTypeName , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Parameter list"},{"location":"api-reference/ir/meta/parameter-list/#woke.ast.ir.meta.parameter_list","text":"","title":"parameter_list"},{"location":"api-reference/ir/meta/parameter-list/#woke.ast.ir.meta.parameter_list.ParameterList","text":"Bases: SolidityAbc Example A parameter list can be used: in an ErrorDefinition : ( uint requested , uint available ) in line 2, in an EventDefinition : ( address indexed previousOwner , address indexed newOwner ) in line 3, in a FunctionDefinition : ( uint a , uint b ) in line 12 as function parameters, ( uint256 ) in line 12 as function return parameters, in a FunctionTypeName : ( string memory , uint ) in line 5 as function type name parameters, ( bool ) in line 5 as function type name return parameters, in a ModifierDefinition : ( uint x ) in line 7, in a TryCatchClause : ( bool success ) in line 17 as try clause parameters, ( string memory reason ) in line 19 as catch clause parameters. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 contract C { error InsufficientBalance ( uint requested , uint available ); event OwnershipTransferred ( address indexed previousOwner , address indexed newOwner ); function ( string memory , uint ) external returns ( bool ) externalFunction ; modifier onlyPositive ( uint x ) { require ( x > 0 , \"x must be positive\" ); _ ; } function add ( uint a , uint b ) onlyPositive ( a ) public pure returns ( uint256 ) { return a + b ; } function callExternalFunction () public { try externalFunction ( \"abc\" , 123 ) returns ( bool success ) { // ... } catch Error ( string memory reason ) { // ... } } } Source code in woke/ast/ir/meta/parameter_list.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 class ParameterList ( SolidityAbc ): \"\"\" !!! example A parameter list can be used: - in an [ErrorDefinition][woke.ast.ir.declaration.error_definition.ErrorDefinition]: - `:::solidity (uint requested, uint available)` in line 2, - in an [EventDefinition][woke.ast.ir.declaration.event_definition.EventDefinition]: - `:::solidity (address indexed previousOwner, address indexed newOwner)` in line 3, - in a [FunctionDefinition][woke.ast.ir.declaration.function_definition.FunctionDefinition]: - `:::solidity (uint a, uint b)` in line 12 as function parameters, - `:::solidity (uint256)` in line 12 as function return parameters, - in a [FunctionTypeName][woke.ast.ir.type_name.function_type_name.FunctionTypeName]: - `:::solidity (string memory, uint)` in line 5 as function type name parameters, - `:::solidity (bool)` in line 5 as function type name return parameters, - in a [ModifierDefinition][woke.ast.ir.declaration.modifier_definition.ModifierDefinition]: - `:::solidity (uint x)` in line 7, - in a [TryCatchClause][woke.ast.ir.meta.try_catch_clause.TryCatchClause]: - `:::solidity (bool success)` in line 17 as try clause parameters, - `:::solidity (string memory reason)` in line 19 as catch clause parameters. ```solidity linenums=\"1\" contract C { error InsufficientBalance(uint requested, uint available); event OwnershipTransferred(address indexed previousOwner, address indexed newOwner); function (string memory, uint) external returns (bool) externalFunction; modifier onlyPositive(uint x) { require(x > 0, \"x must be positive\"); _; } function add(uint a, uint b) onlyPositive(a) public pure returns (uint256) { return a + b; } function callExternalFunction() public { try externalFunction(\"abc\", 123) returns (bool success) { // ... } catch Error(string memory reason) { // ... } } } ``` \"\"\" _ast_node : SolcParameterList _parent : Union [ ErrorDefinition , EventDefinition , FunctionDefinition , FunctionTypeName , ModifierDefinition , TryCatchClause , ] _parameters : List [ VariableDeclaration ] def __init__ ( self , init : IrInitTuple , parameter_list : SolcParameterList , parent : SolidityAbc ): super () . __init__ ( init , parameter_list , parent ) self . _parameters = [] for parameter in parameter_list . parameters : self . _parameters . append ( VariableDeclaration ( init , parameter , self )) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for parameter in self . _parameters : yield from parameter @property def parent ( self , ) -> Union [ ErrorDefinition , EventDefinition , FunctionDefinition , FunctionTypeName , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def parameters ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Can be empty. Returns: Variable declarations of the parameter list. \"\"\" return tuple ( self . _parameters )","title":"ParameterList"},{"location":"api-reference/ir/meta/parameter-list/#woke.ast.ir.meta.parameter_list.ParameterList.parameters","text":"Can be empty. Returns: Type Description Tuple [ VariableDeclaration ] Variable declarations of the parameter list. Source code in woke/ast/ir/meta/parameter_list.py 112 113 114 115 116 117 118 119 @property def parameters ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Can be empty. Returns: Variable declarations of the parameter list. \"\"\" return tuple ( self . _parameters )","title":"parameters()"},{"location":"api-reference/ir/meta/parameter-list/#woke.ast.ir.meta.parameter_list.ParameterList.parent","text":"Returns: Type Description Union [ ErrorDefinition , EventDefinition , FunctionDefinition , FunctionTypeName , ModifierDefinition , TryCatchClause ] Parent IR node. Source code in woke/ast/ir/meta/parameter_list.py 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 @property def parent ( self , ) -> Union [ ErrorDefinition , EventDefinition , FunctionDefinition , FunctionTypeName , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/pragma-directive/","text":"woke.ast.ir.meta.pragma_directive module # PragmaDirective class # Bases: SolidityAbc Source code in woke/ast/ir/meta/pragma_directive.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class PragmaDirective ( SolidityAbc ): _ast_node : SolcPragmaDirective _parent : SourceUnit _literals : List [ str ] def __init__ ( self , init : IrInitTuple , pragma : SolcPragmaDirective , parent : SolidityAbc ): super () . __init__ ( init , pragma , parent ) self . _literals = list ( pragma . literals ) @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def literals ( self ) -> Tuple [ str ]: \"\"\" !!! example `:::py ('solidity', '^', '0.8', '||', '0.7', '.1', '-', '0.7', '.6')` for the following pragma: ```solidity pragma solidity ^0.8 || 0.7.1 - 0.7.6; ``` !!! example `:::py ('abicoder', 'v2')` for the following pragma: ```solidity pragma abicoder v2; ``` !!! example `:::py ('experimental', 'SMTChecker')` for the following pragma: ```solidity pragma experimental SMTChecker; ``` Returns: Literals of the pragma directive. \"\"\" return tuple ( self . _literals ) literals () property # Example ( 'solidity' , '^' , '0.8' , '||' , '0.7' , '.1' , '-' , '0.7' , '.6' ) for the following pragma: pragma solidity ^0.8 || 0.7.1 - 0.7.6 ; Example ( 'abicoder' , 'v2' ) for the following pragma: pragma abicoder v2 ; Example ( 'experimental' , 'SMTChecker' ) for the following pragma: pragma experimental SMTChecker ; Returns: Type Description Tuple [ str ] Literals of the pragma directive. Source code in woke/ast/ir/meta/pragma_directive.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @property def literals ( self ) -> Tuple [ str ]: \"\"\" !!! example `:::py ('solidity', '^', '0.8', '||', '0.7', '.1', '-', '0.7', '.6')` for the following pragma: ```solidity pragma solidity ^0.8 || 0.7.1 - 0.7.6; ``` !!! example `:::py ('abicoder', 'v2')` for the following pragma: ```solidity pragma abicoder v2; ``` !!! example `:::py ('experimental', 'SMTChecker')` for the following pragma: ```solidity pragma experimental SMTChecker; ``` Returns: Literals of the pragma directive. \"\"\" return tuple ( self . _literals ) parent () property # Returns: Type Description SourceUnit Parent IR node. Source code in woke/ast/ir/meta/pragma_directive.py 29 30 31 32 33 34 35 @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Pragma directive"},{"location":"api-reference/ir/meta/pragma-directive/#woke.ast.ir.meta.pragma_directive","text":"","title":"pragma_directive"},{"location":"api-reference/ir/meta/pragma-directive/#woke.ast.ir.meta.pragma_directive.PragmaDirective","text":"Bases: SolidityAbc Source code in woke/ast/ir/meta/pragma_directive.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 class PragmaDirective ( SolidityAbc ): _ast_node : SolcPragmaDirective _parent : SourceUnit _literals : List [ str ] def __init__ ( self , init : IrInitTuple , pragma : SolcPragmaDirective , parent : SolidityAbc ): super () . __init__ ( init , pragma , parent ) self . _literals = list ( pragma . literals ) @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def literals ( self ) -> Tuple [ str ]: \"\"\" !!! example `:::py ('solidity', '^', '0.8', '||', '0.7', '.1', '-', '0.7', '.6')` for the following pragma: ```solidity pragma solidity ^0.8 || 0.7.1 - 0.7.6; ``` !!! example `:::py ('abicoder', 'v2')` for the following pragma: ```solidity pragma abicoder v2; ``` !!! example `:::py ('experimental', 'SMTChecker')` for the following pragma: ```solidity pragma experimental SMTChecker; ``` Returns: Literals of the pragma directive. \"\"\" return tuple ( self . _literals )","title":"PragmaDirective"},{"location":"api-reference/ir/meta/pragma-directive/#woke.ast.ir.meta.pragma_directive.PragmaDirective.literals","text":"Example ( 'solidity' , '^' , '0.8' , '||' , '0.7' , '.1' , '-' , '0.7' , '.6' ) for the following pragma: pragma solidity ^0.8 || 0.7.1 - 0.7.6 ; Example ( 'abicoder' , 'v2' ) for the following pragma: pragma abicoder v2 ; Example ( 'experimental' , 'SMTChecker' ) for the following pragma: pragma experimental SMTChecker ; Returns: Type Description Tuple [ str ] Literals of the pragma directive. Source code in woke/ast/ir/meta/pragma_directive.py 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 @property def literals ( self ) -> Tuple [ str ]: \"\"\" !!! example `:::py ('solidity', '^', '0.8', '||', '0.7', '.1', '-', '0.7', '.6')` for the following pragma: ```solidity pragma solidity ^0.8 || 0.7.1 - 0.7.6; ``` !!! example `:::py ('abicoder', 'v2')` for the following pragma: ```solidity pragma abicoder v2; ``` !!! example `:::py ('experimental', 'SMTChecker')` for the following pragma: ```solidity pragma experimental SMTChecker; ``` Returns: Literals of the pragma directive. \"\"\" return tuple ( self . _literals )","title":"literals()"},{"location":"api-reference/ir/meta/pragma-directive/#woke.ast.ir.meta.pragma_directive.PragmaDirective.parent","text":"Returns: Type Description SourceUnit Parent IR node. Source code in woke/ast/ir/meta/pragma_directive.py 29 30 31 32 33 34 35 @property def parent ( self ) -> SourceUnit : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/source-unit/","text":"woke.ast.ir.meta.source_unit module # SourceUnit class # Bases: SolidityAbc Source unit is the root node. Warning Source unit byte_location does not cover the whole file. Only lines 3-7 are covered by the source unit in the following example: 1 2 3 4 5 6 7 // SPDX-License-Identifier: MIT pragma solidity ^0.8 ; contract Foo { function bar () public {} } Also trailing newlines are not covered by the source unit. Source code in woke/ast/ir/meta/source_unit.pyclass SourceUnit ( SolidityAbc ): \"\"\" Source unit is the root node. !!! warning Source unit [byte_location][woke.ast.ir.abc.IrAbc.byte_location] does not cover the whole file. Only lines 3-7 are covered by the source unit in the following example: ```solidity linenums=\"1\" // SPDX-License-Identifier: MIT pragma solidity ^0.8; contract Foo { function bar() public {} } ``` Also trailing newlines are not covered by the source unit. \"\"\" _ast_node : SolcSourceUnit _file_source : bytes _license : Optional [ str ] _source_unit_name : str _pragmas : List [ PragmaDirective ] _imports : List [ ImportDirective ] _declared_variables : List [ VariableDeclaration ] _enums : List [ EnumDefinition ] _functions : List [ FunctionDefinition ] _structs : List [ StructDefinition ] _errors : List [ ErrorDefinition ] _user_defined_value_types : List [ UserDefinedValueTypeDefinition ] _contracts : List [ ContractDefinition ] _using_for_directives : List [ UsingForDirective ] def __init__ ( self , init : IrInitTuple , source_unit : SolcSourceUnit , ): super () . __init__ ( init , source_unit , None ) self . _file_source = init . source self . _license = source_unit . license self . _source_unit_name = source_unit . absolute_path self . _pragmas = [] self . _imports = [] self . _declared_variables = [] self . _enums = [] self . _functions = [] self . _structs = [] self . _errors = [] self . _user_defined_value_types = [] self . _contracts = [] self . _using_for_directives = [] for node in source_unit . nodes : if isinstance ( node , SolcPragmaDirective ): self . _pragmas . append ( PragmaDirective ( init , node , self )) elif isinstance ( node , SolcImportDirective ): self . _imports . append ( ImportDirective ( init , node , self )) elif isinstance ( node , SolcVariableDeclaration ): self . _declared_variables . append ( VariableDeclaration ( init , node , self )) elif isinstance ( node , SolcEnumDefinition ): self . _enums . append ( EnumDefinition ( init , node , self )) elif isinstance ( node , SolcFunctionDefinition ): self . _functions . append ( FunctionDefinition ( init , node , self )) elif isinstance ( node , SolcStructDefinition ): self . _structs . append ( StructDefinition ( init , node , self )) elif isinstance ( node , SolcErrorDefinition ): self . _errors . append ( ErrorDefinition ( init , node , self )) elif isinstance ( node , SolcUserDefinedValueTypeDefinition ): self . _user_defined_value_types . append ( UserDefinedValueTypeDefinition ( init , node , self ) ) elif isinstance ( node , SolcContractDefinition ): self . _contracts . append ( ContractDefinition ( init , node , self )) elif isinstance ( node , SolcUsingForDirective ): self . _using_for_directives . append ( UsingForDirective ( init , node , self )) else : assert False , f \"Unknown node type: { node } \" def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for pragma in self . _pragmas : yield from pragma for import_directive in self . _imports : yield from import_directive for variable_declaration in self . _declared_variables : yield from variable_declaration for enum in self . _enums : yield from enum for function in self . _functions : yield from function for struct in self . _structs : yield from struct for error in self . _errors : yield from error for user_defined_value_type in self . _user_defined_value_types : yield from user_defined_value_type for contract in self . _contracts : yield from contract for using_for_directive in self . _using_for_directives : yield from using_for_directive @property def parent ( self ) -> None : \"\"\" Returns: Does not have a parent. \"\"\" return None @property def file_source ( self ) -> bytes : \"\"\" As opposed to [source][woke.ast.ir.abc.IrAbc.source], this property returns the whole file source. Returns: Source code of the file including trailing newlines and license string. \"\"\" return self . _file_source @property def license ( self ) -> Optional [ str ]: \"\"\" !!! example Returns `MIT` for the following license comment: ```solidity // SPDX-License-Identifier: MIT ``` Returns: License string of the file, if any. \"\"\" return self . _license @property def source_unit_name ( self ) -> str : \"\"\" Returns: Source unit name of the file. \"\"\" return self . _source_unit_name @property def pragmas ( self ) -> Tuple [ PragmaDirective ]: \"\"\" Returns: Pragma directives present in the file. \"\"\" return tuple ( self . _pragmas ) @property def imports ( self ) -> Tuple [ ImportDirective ]: \"\"\" Returns: Import directives present in the file. \"\"\" return tuple ( self . _imports ) @property def declared_variables ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Should only return constants. Returns: Top-level variable declarations present in the file. \"\"\" return tuple ( self . _declared_variables ) @property def enums ( self ) -> Tuple [ EnumDefinition ]: \"\"\" Returns: Top-level enum definitions present in the file. \"\"\" return tuple ( self . _enums ) @property def functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" Should only return [FunctionDefinitions][woke.ast.ir.declaration.function_definition.FunctionDefinition] of the [FunctionKind.FREE_FUNCTION][woke.ast.enums.FunctionKind.FREE_FUNCTION] kind. Returns: Top-level function definitions present in the file. \"\"\" return tuple ( self . _functions ) @property def structs ( self ) -> Tuple [ StructDefinition ]: \"\"\" Returns: Top-level struct definitions present in the file. \"\"\" return tuple ( self . _structs ) @property def errors ( self ) -> Tuple [ ErrorDefinition ]: \"\"\" Returns: Top-level error definitions present in the file. \"\"\" return tuple ( self . _errors ) @property def user_defined_value_types ( self ) -> Tuple [ UserDefinedValueTypeDefinition ]: \"\"\" Returns: Top-level user-defined value type definitions present in the file. \"\"\" return tuple ( self . _user_defined_value_types ) @property def contracts ( self ) -> Tuple [ ContractDefinition ]: \"\"\" Returns: Contract definitions present in the file. \"\"\" return tuple ( self . _contracts ) @property def using_for_directives ( self ) -> Tuple [ UsingForDirective ]: \"\"\" Returns: Top-level using for directives present in the file. \"\"\" return tuple ( self . _using_for_directives ) def declarations_iter ( self ) -> Iterator [ DeclarationAbc ]: \"\"\" Yields: All declarations ([DeclarationAbc][woke.ast.ir.declaration.abc.DeclarationAbc]) present in the file (recursively). \"\"\" yield from self . declared_variables yield from self . enums for enum in self . enums : yield from enum . values yield from self . functions yield from self . structs yield from self . errors yield from self . user_defined_value_types yield from self . contracts for contract in self . contracts : yield from contract . declarations_iter () contracts () property # Returns: Type Description Tuple [ ContractDefinition ] Contract definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 245 246 247 248 249 250 251 @property def contracts ( self ) -> Tuple [ ContractDefinition ]: \"\"\" Returns: Contract definitions present in the file. \"\"\" return tuple ( self . _contracts ) declarations_iter () # Yields: Type Description Iterator [ DeclarationAbc ] All declarations ( DeclarationAbc ) present in the file (recursively). Source code in woke/ast/ir/meta/source_unit.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 def declarations_iter ( self ) -> Iterator [ DeclarationAbc ]: \"\"\" Yields: All declarations ([DeclarationAbc][woke.ast.ir.declaration.abc.DeclarationAbc]) present in the file (recursively). \"\"\" yield from self . declared_variables yield from self . enums for enum in self . enums : yield from enum . values yield from self . functions yield from self . structs yield from self . errors yield from self . user_defined_value_types yield from self . contracts for contract in self . contracts : yield from contract . declarations_iter () declared_variables () property # Should only return constants. Returns: Type Description Tuple [ VariableDeclaration ] Top-level variable declarations present in the file. Source code in woke/ast/ir/meta/source_unit.py 195 196 197 198 199 200 201 202 @property def declared_variables ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Should only return constants. Returns: Top-level variable declarations present in the file. \"\"\" return tuple ( self . _declared_variables ) enums () property # Returns: Type Description Tuple [ EnumDefinition ] Top-level enum definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 204 205 206 207 208 209 210 @property def enums ( self ) -> Tuple [ EnumDefinition ]: \"\"\" Returns: Top-level enum definitions present in the file. \"\"\" return tuple ( self . _enums ) errors () property # Returns: Type Description Tuple [ ErrorDefinition ] Top-level error definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 229 230 231 232 233 234 235 @property def errors ( self ) -> Tuple [ ErrorDefinition ]: \"\"\" Returns: Top-level error definitions present in the file. \"\"\" return tuple ( self . _errors ) file_source () property # As opposed to source , this property returns the whole file source. Returns: Type Description bytes Source code of the file including trailing newlines and license string. Source code in woke/ast/ir/meta/source_unit.py 149 150 151 152 153 154 155 156 @property def file_source ( self ) -> bytes : \"\"\" As opposed to [source][woke.ast.ir.abc.IrAbc.source], this property returns the whole file source. Returns: Source code of the file including trailing newlines and license string. \"\"\" return self . _file_source functions () property # Should only return FunctionDefinitions of the FunctionKind.FREE_FUNCTION kind. Returns: Type Description Tuple [ FunctionDefinition ] Top-level function definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 212 213 214 215 216 217 218 219 @property def functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" Should only return [FunctionDefinitions][woke.ast.ir.declaration.function_definition.FunctionDefinition] of the [FunctionKind.FREE_FUNCTION][woke.ast.enums.FunctionKind.FREE_FUNCTION] kind. Returns: Top-level function definitions present in the file. \"\"\" return tuple ( self . _functions ) imports () property # Returns: Type Description Tuple [ ImportDirective ] Import directives present in the file. Source code in woke/ast/ir/meta/source_unit.py 187 188 189 190 191 192 193 @property def imports ( self ) -> Tuple [ ImportDirective ]: \"\"\" Returns: Import directives present in the file. \"\"\" return tuple ( self . _imports ) license () property # Example Returns MIT for the following license comment: // SPDX-License-Identifier: MIT Returns: Type Description Optional [ str ] License string of the file, if any. Source code in woke/ast/ir/meta/source_unit.py 158 159 160 161 162 163 164 165 166 167 168 169 @property def license ( self ) -> Optional [ str ]: \"\"\" !!! example Returns `MIT` for the following license comment: ```solidity // SPDX-License-Identifier: MIT ``` Returns: License string of the file, if any. \"\"\" return self . _license parent () property # Returns: Type Description None Does not have a parent. Source code in woke/ast/ir/meta/source_unit.py 141 142 143 144 145 146 147 @property def parent ( self ) -> None : \"\"\" Returns: Does not have a parent. \"\"\" return None pragmas () property # Returns: Type Description Tuple [ PragmaDirective ] Pragma directives present in the file. Source code in woke/ast/ir/meta/source_unit.py 179 180 181 182 183 184 185 @property def pragmas ( self ) -> Tuple [ PragmaDirective ]: \"\"\" Returns: Pragma directives present in the file. \"\"\" return tuple ( self . _pragmas ) source_unit_name () property # Returns: Type Description str Source unit name of the file. Source code in woke/ast/ir/meta/source_unit.py 171 172 173 174 175 176 177 @property def source_unit_name ( self ) -> str : \"\"\" Returns: Source unit name of the file. \"\"\" return self . _source_unit_name structs () property # Returns: Type Description Tuple [ StructDefinition ] Top-level struct definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 221 222 223 224 225 226 227 @property def structs ( self ) -> Tuple [ StructDefinition ]: \"\"\" Returns: Top-level struct definitions present in the file. \"\"\" return tuple ( self . _structs ) user_defined_value_types () property # Returns: Type Description Tuple [ UserDefinedValueTypeDefinition ] Top-level user-defined value type definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 237 238 239 240 241 242 243 @property def user_defined_value_types ( self ) -> Tuple [ UserDefinedValueTypeDefinition ]: \"\"\" Returns: Top-level user-defined value type definitions present in the file. \"\"\" return tuple ( self . _user_defined_value_types ) using_for_directives () property # Returns: Type Description Tuple [ UsingForDirective ] Top-level using for directives present in the file. Source code in woke/ast/ir/meta/source_unit.py 253 254 255 256 257 258 259 @property def using_for_directives ( self ) -> Tuple [ UsingForDirective ]: \"\"\" Returns: Top-level using for directives present in the file. \"\"\" return tuple ( self . _using_for_directives )","title":"Source unit"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit","text":"","title":"source_unit"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit","text":"Bases: SolidityAbc Source unit is the root node. Warning Source unit byte_location does not cover the whole file. Only lines 3-7 are covered by the source unit in the following example: 1 2 3 4 5 6 7 // SPDX-License-Identifier: MIT pragma solidity ^0.8 ; contract Foo { function bar () public {} } Also trailing newlines are not covered by the source unit. Source code in woke/ast/ir/meta/source_unit.pyclass SourceUnit ( SolidityAbc ): \"\"\" Source unit is the root node. !!! warning Source unit [byte_location][woke.ast.ir.abc.IrAbc.byte_location] does not cover the whole file. Only lines 3-7 are covered by the source unit in the following example: ```solidity linenums=\"1\" // SPDX-License-Identifier: MIT pragma solidity ^0.8; contract Foo { function bar() public {} } ``` Also trailing newlines are not covered by the source unit. \"\"\" _ast_node : SolcSourceUnit _file_source : bytes _license : Optional [ str ] _source_unit_name : str _pragmas : List [ PragmaDirective ] _imports : List [ ImportDirective ] _declared_variables : List [ VariableDeclaration ] _enums : List [ EnumDefinition ] _functions : List [ FunctionDefinition ] _structs : List [ StructDefinition ] _errors : List [ ErrorDefinition ] _user_defined_value_types : List [ UserDefinedValueTypeDefinition ] _contracts : List [ ContractDefinition ] _using_for_directives : List [ UsingForDirective ] def __init__ ( self , init : IrInitTuple , source_unit : SolcSourceUnit , ): super () . __init__ ( init , source_unit , None ) self . _file_source = init . source self . _license = source_unit . license self . _source_unit_name = source_unit . absolute_path self . _pragmas = [] self . _imports = [] self . _declared_variables = [] self . _enums = [] self . _functions = [] self . _structs = [] self . _errors = [] self . _user_defined_value_types = [] self . _contracts = [] self . _using_for_directives = [] for node in source_unit . nodes : if isinstance ( node , SolcPragmaDirective ): self . _pragmas . append ( PragmaDirective ( init , node , self )) elif isinstance ( node , SolcImportDirective ): self . _imports . append ( ImportDirective ( init , node , self )) elif isinstance ( node , SolcVariableDeclaration ): self . _declared_variables . append ( VariableDeclaration ( init , node , self )) elif isinstance ( node , SolcEnumDefinition ): self . _enums . append ( EnumDefinition ( init , node , self )) elif isinstance ( node , SolcFunctionDefinition ): self . _functions . append ( FunctionDefinition ( init , node , self )) elif isinstance ( node , SolcStructDefinition ): self . _structs . append ( StructDefinition ( init , node , self )) elif isinstance ( node , SolcErrorDefinition ): self . _errors . append ( ErrorDefinition ( init , node , self )) elif isinstance ( node , SolcUserDefinedValueTypeDefinition ): self . _user_defined_value_types . append ( UserDefinedValueTypeDefinition ( init , node , self ) ) elif isinstance ( node , SolcContractDefinition ): self . _contracts . append ( ContractDefinition ( init , node , self )) elif isinstance ( node , SolcUsingForDirective ): self . _using_for_directives . append ( UsingForDirective ( init , node , self )) else : assert False , f \"Unknown node type: { node } \" def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for pragma in self . _pragmas : yield from pragma for import_directive in self . _imports : yield from import_directive for variable_declaration in self . _declared_variables : yield from variable_declaration for enum in self . _enums : yield from enum for function in self . _functions : yield from function for struct in self . _structs : yield from struct for error in self . _errors : yield from error for user_defined_value_type in self . _user_defined_value_types : yield from user_defined_value_type for contract in self . _contracts : yield from contract for using_for_directive in self . _using_for_directives : yield from using_for_directive @property def parent ( self ) -> None : \"\"\" Returns: Does not have a parent. \"\"\" return None @property def file_source ( self ) -> bytes : \"\"\" As opposed to [source][woke.ast.ir.abc.IrAbc.source], this property returns the whole file source. Returns: Source code of the file including trailing newlines and license string. \"\"\" return self . _file_source @property def license ( self ) -> Optional [ str ]: \"\"\" !!! example Returns `MIT` for the following license comment: ```solidity // SPDX-License-Identifier: MIT ``` Returns: License string of the file, if any. \"\"\" return self . _license @property def source_unit_name ( self ) -> str : \"\"\" Returns: Source unit name of the file. \"\"\" return self . _source_unit_name @property def pragmas ( self ) -> Tuple [ PragmaDirective ]: \"\"\" Returns: Pragma directives present in the file. \"\"\" return tuple ( self . _pragmas ) @property def imports ( self ) -> Tuple [ ImportDirective ]: \"\"\" Returns: Import directives present in the file. \"\"\" return tuple ( self . _imports ) @property def declared_variables ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Should only return constants. Returns: Top-level variable declarations present in the file. \"\"\" return tuple ( self . _declared_variables ) @property def enums ( self ) -> Tuple [ EnumDefinition ]: \"\"\" Returns: Top-level enum definitions present in the file. \"\"\" return tuple ( self . _enums ) @property def functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" Should only return [FunctionDefinitions][woke.ast.ir.declaration.function_definition.FunctionDefinition] of the [FunctionKind.FREE_FUNCTION][woke.ast.enums.FunctionKind.FREE_FUNCTION] kind. Returns: Top-level function definitions present in the file. \"\"\" return tuple ( self . _functions ) @property def structs ( self ) -> Tuple [ StructDefinition ]: \"\"\" Returns: Top-level struct definitions present in the file. \"\"\" return tuple ( self . _structs ) @property def errors ( self ) -> Tuple [ ErrorDefinition ]: \"\"\" Returns: Top-level error definitions present in the file. \"\"\" return tuple ( self . _errors ) @property def user_defined_value_types ( self ) -> Tuple [ UserDefinedValueTypeDefinition ]: \"\"\" Returns: Top-level user-defined value type definitions present in the file. \"\"\" return tuple ( self . _user_defined_value_types ) @property def contracts ( self ) -> Tuple [ ContractDefinition ]: \"\"\" Returns: Contract definitions present in the file. \"\"\" return tuple ( self . _contracts ) @property def using_for_directives ( self ) -> Tuple [ UsingForDirective ]: \"\"\" Returns: Top-level using for directives present in the file. \"\"\" return tuple ( self . _using_for_directives ) def declarations_iter ( self ) -> Iterator [ DeclarationAbc ]: \"\"\" Yields: All declarations ([DeclarationAbc][woke.ast.ir.declaration.abc.DeclarationAbc]) present in the file (recursively). \"\"\" yield from self . declared_variables yield from self . enums for enum in self . enums : yield from enum . values yield from self . functions yield from self . structs yield from self . errors yield from self . user_defined_value_types yield from self . contracts for contract in self . contracts : yield from contract . declarations_iter ()","title":"SourceUnit"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.contracts","text":"Returns: Type Description Tuple [ ContractDefinition ] Contract definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 245 246 247 248 249 250 251 @property def contracts ( self ) -> Tuple [ ContractDefinition ]: \"\"\" Returns: Contract definitions present in the file. \"\"\" return tuple ( self . _contracts )","title":"contracts()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.declarations_iter","text":"Yields: Type Description Iterator [ DeclarationAbc ] All declarations ( DeclarationAbc ) present in the file (recursively). Source code in woke/ast/ir/meta/source_unit.py 261 262 263 264 265 266 267 268 269 270 271 272 273 274 275 276 def declarations_iter ( self ) -> Iterator [ DeclarationAbc ]: \"\"\" Yields: All declarations ([DeclarationAbc][woke.ast.ir.declaration.abc.DeclarationAbc]) present in the file (recursively). \"\"\" yield from self . declared_variables yield from self . enums for enum in self . enums : yield from enum . values yield from self . functions yield from self . structs yield from self . errors yield from self . user_defined_value_types yield from self . contracts for contract in self . contracts : yield from contract . declarations_iter ()","title":"declarations_iter()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.declared_variables","text":"Should only return constants. Returns: Type Description Tuple [ VariableDeclaration ] Top-level variable declarations present in the file. Source code in woke/ast/ir/meta/source_unit.py 195 196 197 198 199 200 201 202 @property def declared_variables ( self ) -> Tuple [ VariableDeclaration ]: \"\"\" Should only return constants. Returns: Top-level variable declarations present in the file. \"\"\" return tuple ( self . _declared_variables )","title":"declared_variables()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.enums","text":"Returns: Type Description Tuple [ EnumDefinition ] Top-level enum definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 204 205 206 207 208 209 210 @property def enums ( self ) -> Tuple [ EnumDefinition ]: \"\"\" Returns: Top-level enum definitions present in the file. \"\"\" return tuple ( self . _enums )","title":"enums()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.errors","text":"Returns: Type Description Tuple [ ErrorDefinition ] Top-level error definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 229 230 231 232 233 234 235 @property def errors ( self ) -> Tuple [ ErrorDefinition ]: \"\"\" Returns: Top-level error definitions present in the file. \"\"\" return tuple ( self . _errors )","title":"errors()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.file_source","text":"As opposed to source , this property returns the whole file source. Returns: Type Description bytes Source code of the file including trailing newlines and license string. Source code in woke/ast/ir/meta/source_unit.py 149 150 151 152 153 154 155 156 @property def file_source ( self ) -> bytes : \"\"\" As opposed to [source][woke.ast.ir.abc.IrAbc.source], this property returns the whole file source. Returns: Source code of the file including trailing newlines and license string. \"\"\" return self . _file_source","title":"file_source()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.functions","text":"Should only return FunctionDefinitions of the FunctionKind.FREE_FUNCTION kind. Returns: Type Description Tuple [ FunctionDefinition ] Top-level function definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 212 213 214 215 216 217 218 219 @property def functions ( self ) -> Tuple [ FunctionDefinition ]: \"\"\" Should only return [FunctionDefinitions][woke.ast.ir.declaration.function_definition.FunctionDefinition] of the [FunctionKind.FREE_FUNCTION][woke.ast.enums.FunctionKind.FREE_FUNCTION] kind. Returns: Top-level function definitions present in the file. \"\"\" return tuple ( self . _functions )","title":"functions()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.imports","text":"Returns: Type Description Tuple [ ImportDirective ] Import directives present in the file. Source code in woke/ast/ir/meta/source_unit.py 187 188 189 190 191 192 193 @property def imports ( self ) -> Tuple [ ImportDirective ]: \"\"\" Returns: Import directives present in the file. \"\"\" return tuple ( self . _imports )","title":"imports()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.license","text":"Example Returns MIT for the following license comment: // SPDX-License-Identifier: MIT Returns: Type Description Optional [ str ] License string of the file, if any. Source code in woke/ast/ir/meta/source_unit.py 158 159 160 161 162 163 164 165 166 167 168 169 @property def license ( self ) -> Optional [ str ]: \"\"\" !!! example Returns `MIT` for the following license comment: ```solidity // SPDX-License-Identifier: MIT ``` Returns: License string of the file, if any. \"\"\" return self . _license","title":"license()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.parent","text":"Returns: Type Description None Does not have a parent. Source code in woke/ast/ir/meta/source_unit.py 141 142 143 144 145 146 147 @property def parent ( self ) -> None : \"\"\" Returns: Does not have a parent. \"\"\" return None","title":"parent()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.pragmas","text":"Returns: Type Description Tuple [ PragmaDirective ] Pragma directives present in the file. Source code in woke/ast/ir/meta/source_unit.py 179 180 181 182 183 184 185 @property def pragmas ( self ) -> Tuple [ PragmaDirective ]: \"\"\" Returns: Pragma directives present in the file. \"\"\" return tuple ( self . _pragmas )","title":"pragmas()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.source_unit_name","text":"Returns: Type Description str Source unit name of the file. Source code in woke/ast/ir/meta/source_unit.py 171 172 173 174 175 176 177 @property def source_unit_name ( self ) -> str : \"\"\" Returns: Source unit name of the file. \"\"\" return self . _source_unit_name","title":"source_unit_name()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.structs","text":"Returns: Type Description Tuple [ StructDefinition ] Top-level struct definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 221 222 223 224 225 226 227 @property def structs ( self ) -> Tuple [ StructDefinition ]: \"\"\" Returns: Top-level struct definitions present in the file. \"\"\" return tuple ( self . _structs )","title":"structs()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.user_defined_value_types","text":"Returns: Type Description Tuple [ UserDefinedValueTypeDefinition ] Top-level user-defined value type definitions present in the file. Source code in woke/ast/ir/meta/source_unit.py 237 238 239 240 241 242 243 @property def user_defined_value_types ( self ) -> Tuple [ UserDefinedValueTypeDefinition ]: \"\"\" Returns: Top-level user-defined value type definitions present in the file. \"\"\" return tuple ( self . _user_defined_value_types )","title":"user_defined_value_types()"},{"location":"api-reference/ir/meta/source-unit/#woke.ast.ir.meta.source_unit.SourceUnit.using_for_directives","text":"Returns: Type Description Tuple [ UsingForDirective ] Top-level using for directives present in the file. Source code in woke/ast/ir/meta/source_unit.py 253 254 255 256 257 258 259 @property def using_for_directives ( self ) -> Tuple [ UsingForDirective ]: \"\"\" Returns: Top-level using for directives present in the file. \"\"\" return tuple ( self . _using_for_directives )","title":"using_for_directives()"},{"location":"api-reference/ir/meta/structured-documentation/","text":"woke.ast.ir.meta.structured_documentation module # StructuredDocumentation class # Bases: SolidityAbc Example Lines 1-4 in the following example: 1 2 3 4 5 6 7 8 9 /// @title A simulator for trees /// @author John /// @notice You can use this contract for only the most basic simulation /// @dev All function calls are currently implemented without side effects contract Tree { function multiply ( uint a ) public pure returns ( uint ) { return a * 7 ; } } Source code in woke/ast/ir/meta/structured_documentation.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class StructuredDocumentation ( SolidityAbc ): \"\"\" !!! example Lines 1-4 in the following example: ```solidity linenums=\"1\" /// @title A simulator for trees /// @author John /// @notice You can use this contract for only the most basic simulation /// @dev All function calls are currently implemented without side effects contract Tree { function multiply(uint a) public pure returns(uint) { return a * 7; } } ``` \"\"\" _ast_node : SolcStructuredDocumentation _parent : Union [ ContractDefinition , ErrorDefinition , EventDefinition , FunctionDefinition , ModifierDefinition , VariableDeclaration , ] _text : str def __init__ ( self , init : IrInitTuple , structured_documentation : SolcStructuredDocumentation , parent : SolidityAbc , ): super () . __init__ ( init , structured_documentation , parent ) self . _text = structured_documentation . text @property def parent ( self , ) -> Union [ ContractDefinition , ErrorDefinition , EventDefinition , FunctionDefinition , ModifierDefinition , VariableDeclaration , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def text ( self ) -> str : \"\"\" Does not include the leading `///` or `/**` and trailing `*/`. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string. \"\"\" return self . _text parent () property # Returns: Type Description Union [ ContractDefinition , ErrorDefinition , EventDefinition , FunctionDefinition , ModifierDefinition , VariableDeclaration ] Parent IR node. Source code in woke/ast/ir/meta/structured_documentation.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @property def parent ( self , ) -> Union [ ContractDefinition , ErrorDefinition , EventDefinition , FunctionDefinition , ModifierDefinition , VariableDeclaration , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent text () property # Does not include the leading /// or /** and trailing */ . Returns: Type Description str NatSpec documentation string. Source code in woke/ast/ir/meta/structured_documentation.py 72 73 74 75 76 77 78 79 @property def text ( self ) -> str : \"\"\" Does not include the leading `///` or `/**` and trailing `*/`. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string. \"\"\" return self . _text","title":"Structured documentation"},{"location":"api-reference/ir/meta/structured-documentation/#woke.ast.ir.meta.structured_documentation","text":"","title":"structured_documentation"},{"location":"api-reference/ir/meta/structured-documentation/#woke.ast.ir.meta.structured_documentation.StructuredDocumentation","text":"Bases: SolidityAbc Example Lines 1-4 in the following example: 1 2 3 4 5 6 7 8 9 /// @title A simulator for trees /// @author John /// @notice You can use this contract for only the most basic simulation /// @dev All function calls are currently implemented without side effects contract Tree { function multiply ( uint a ) public pure returns ( uint ) { return a * 7 ; } } Source code in woke/ast/ir/meta/structured_documentation.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class StructuredDocumentation ( SolidityAbc ): \"\"\" !!! example Lines 1-4 in the following example: ```solidity linenums=\"1\" /// @title A simulator for trees /// @author John /// @notice You can use this contract for only the most basic simulation /// @dev All function calls are currently implemented without side effects contract Tree { function multiply(uint a) public pure returns(uint) { return a * 7; } } ``` \"\"\" _ast_node : SolcStructuredDocumentation _parent : Union [ ContractDefinition , ErrorDefinition , EventDefinition , FunctionDefinition , ModifierDefinition , VariableDeclaration , ] _text : str def __init__ ( self , init : IrInitTuple , structured_documentation : SolcStructuredDocumentation , parent : SolidityAbc , ): super () . __init__ ( init , structured_documentation , parent ) self . _text = structured_documentation . text @property def parent ( self , ) -> Union [ ContractDefinition , ErrorDefinition , EventDefinition , FunctionDefinition , ModifierDefinition , VariableDeclaration , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def text ( self ) -> str : \"\"\" Does not include the leading `///` or `/**` and trailing `*/`. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string. \"\"\" return self . _text","title":"StructuredDocumentation"},{"location":"api-reference/ir/meta/structured-documentation/#woke.ast.ir.meta.structured_documentation.StructuredDocumentation.parent","text":"Returns: Type Description Union [ ContractDefinition , ErrorDefinition , EventDefinition , FunctionDefinition , ModifierDefinition , VariableDeclaration ] Parent IR node. Source code in woke/ast/ir/meta/structured_documentation.py 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 @property def parent ( self , ) -> Union [ ContractDefinition , ErrorDefinition , EventDefinition , FunctionDefinition , ModifierDefinition , VariableDeclaration , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/structured-documentation/#woke.ast.ir.meta.structured_documentation.StructuredDocumentation.text","text":"Does not include the leading /// or /** and trailing */ . Returns: Type Description str NatSpec documentation string. Source code in woke/ast/ir/meta/structured_documentation.py 72 73 74 75 76 77 78 79 @property def text ( self ) -> str : \"\"\" Does not include the leading `///` or `/**` and trailing `*/`. Returns: [NatSpec](https://docs.soliditylang.org/en/latest/natspec-format.html) documentation string. \"\"\" return self . _text","title":"text()"},{"location":"api-reference/ir/meta/try-catch-clause/","text":"woke.ast.ir.meta.try_catch_clause module # TryCatchClause class # Bases: SolidityAbc Example returns ( uint x ) {} , catch Error ( string memory reason ) {} , catch Panic ( uint errorCode ) {} , catch ( bytes memory lowLevelData ) {} are all try/catch clauses in the following example: contract C { function foo () public view { try this . bar ( 10 ) returns ( uint x ) {} catch Error ( string memory reason ) {} catch Panic ( uint errorCode ) {} catch ( bytes memory lowLevelData ) {} } function bar ( uint x ) external pure returns ( uint ) { return x ; } } Source code in woke/ast/ir/meta/try_catch_clause.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 class TryCatchClause ( SolidityAbc ): \"\"\" !!! example - `:::solidity returns(uint x) {}`, - `:::solidity catch Error(string memory reason) {}`, - `:::solidity catch Panic(uint errorCode) {}`, - `:::solidity catch (bytes memory lowLevelData) {}` are all try/catch clauses in the following example: ```solidity contract C { function foo() public view { try this.bar(10) returns(uint x) {} catch Error(string memory reason) {} catch Panic(uint errorCode) {} catch (bytes memory lowLevelData) {} } function bar(uint x) external pure returns(uint) { return x; } } ``` \"\"\" _ast_node : SolcTryCatchClause _parent : TryStatement _block : Block _error_name : str _parameters : Optional [ ParameterList ] def __init__ ( self , init : IrInitTuple , try_catch_clause : SolcTryCatchClause , parent : TryStatement , ): super () . __init__ ( init , try_catch_clause , parent ) self . _block = Block ( init , try_catch_clause . block , self ) self . _error_name = try_catch_clause . error_name if try_catch_clause . parameters is None : self . _parameters = None else : self . _parameters = ParameterList ( init , try_catch_clause . parameters , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _block if self . _parameters is not None : yield from self . _parameters @property def parent ( self ) -> TryStatement : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def block ( self ) -> Block : \"\"\" Returns: Body of the try/catch clause. \"\"\" return self . _block @property def error_name ( self ) -> str : \"\"\" !!! example For the following snippet: ```solidity try this.f() returns (uint256) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` - the `error_name` of the first (try) clause is empty, - the `error_name` of the second (catch) clause is `Error`, - the `error_name` of the third (catch) clause is `Panic`, - the `error_name` of the fourth (catch) clause is empty. Returns: Error name of the try/catch clause. \"\"\" return self . _error_name @property def parameters ( self ) -> Optional [ ParameterList ]: \"\"\" Can be `None` if the try clause does not have return parameters or if the catch clause does not accept parameters. !!! example Both clauses in the following example do not have parameters: ```solidity try this.f() { // ... } catch { // ... } ``` !!! example `:::solidity (uint x)`, `:::solidity (string memory reason)`, `:::solidity (uint errorCode)` and `:::solidity (bytes memory lowLevelData)` are the parameters of the try/catch clauses in the following example: ```solidity try this.f() returns (uint x) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` Returns: Return parameters in the case of a try clause, or error parameters in the case of a catch clause. \"\"\" return self . _parameters @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . block . modifies_state block () property # Returns: Type Description Block Body of the try/catch clause. Source code in woke/ast/ir/meta/try_catch_clause.py 77 78 79 80 81 82 83 @property def block ( self ) -> Block : \"\"\" Returns: Body of the try/catch clause. \"\"\" return self . _block error_name () property # Example For the following snippet: try this . f () returns ( uint256 ) { // ... } catch Error ( string memory reason ) { // ... } catch Panic ( uint errorCode ) { // ... } catch ( bytes memory lowLevelData ) { // ... } the error_name of the first (try) clause is empty, the error_name of the second (catch) clause is Error , the error_name of the third (catch) clause is Panic , the error_name of the fourth (catch) clause is empty. Returns: Type Description str Error name of the try/catch clause. Source code in woke/ast/ir/meta/try_catch_clause.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 @property def error_name ( self ) -> str : \"\"\" !!! example For the following snippet: ```solidity try this.f() returns (uint256) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` - the `error_name` of the first (try) clause is empty, - the `error_name` of the second (catch) clause is `Error`, - the `error_name` of the third (catch) clause is `Panic`, - the `error_name` of the fourth (catch) clause is empty. Returns: Error name of the try/catch clause. \"\"\" return self . _error_name parameters () property # Can be None if the try clause does not have return parameters or if the catch clause does not accept parameters. Example Both clauses in the following example do not have parameters: try this . f () { // ... } catch { // ... } Example ( uint x ) , ( string memory reason ) , ( uint errorCode ) and ( bytes memory lowLevelData ) are the parameters of the try/catch clauses in the following example: try this . f () returns ( uint x ) { // ... } catch Error ( string memory reason ) { // ... } catch Panic ( uint errorCode ) { // ... } catch ( bytes memory lowLevelData ) { // ... } Returns: Type Description Optional [ ParameterList ] Return parameters in the case of a try clause, or error parameters in the case of a catch clause. Source code in woke/ast/ir/meta/try_catch_clause.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @property def parameters ( self ) -> Optional [ ParameterList ]: \"\"\" Can be `None` if the try clause does not have return parameters or if the catch clause does not accept parameters. !!! example Both clauses in the following example do not have parameters: ```solidity try this.f() { // ... } catch { // ... } ``` !!! example `:::solidity (uint x)`, `:::solidity (string memory reason)`, `:::solidity (uint errorCode)` and `:::solidity (bytes memory lowLevelData)` are the parameters of the try/catch clauses in the following example: ```solidity try this.f() returns (uint x) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` Returns: Return parameters in the case of a try clause, or error parameters in the case of a catch clause. \"\"\" return self . _parameters parent () property # Returns: Type Description TryStatement Parent IR node. Source code in woke/ast/ir/meta/try_catch_clause.py 69 70 71 72 73 74 75 @property def parent ( self ) -> TryStatement : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Try catch clause"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause","text":"","title":"try_catch_clause"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause","text":"Bases: SolidityAbc Example returns ( uint x ) {} , catch Error ( string memory reason ) {} , catch Panic ( uint errorCode ) {} , catch ( bytes memory lowLevelData ) {} are all try/catch clauses in the following example: contract C { function foo () public view { try this . bar ( 10 ) returns ( uint x ) {} catch Error ( string memory reason ) {} catch Panic ( uint errorCode ) {} catch ( bytes memory lowLevelData ) {} } function bar ( uint x ) external pure returns ( uint ) { return x ; } } Source code in woke/ast/ir/meta/try_catch_clause.py 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 class TryCatchClause ( SolidityAbc ): \"\"\" !!! example - `:::solidity returns(uint x) {}`, - `:::solidity catch Error(string memory reason) {}`, - `:::solidity catch Panic(uint errorCode) {}`, - `:::solidity catch (bytes memory lowLevelData) {}` are all try/catch clauses in the following example: ```solidity contract C { function foo() public view { try this.bar(10) returns(uint x) {} catch Error(string memory reason) {} catch Panic(uint errorCode) {} catch (bytes memory lowLevelData) {} } function bar(uint x) external pure returns(uint) { return x; } } ``` \"\"\" _ast_node : SolcTryCatchClause _parent : TryStatement _block : Block _error_name : str _parameters : Optional [ ParameterList ] def __init__ ( self , init : IrInitTuple , try_catch_clause : SolcTryCatchClause , parent : TryStatement , ): super () . __init__ ( init , try_catch_clause , parent ) self . _block = Block ( init , try_catch_clause . block , self ) self . _error_name = try_catch_clause . error_name if try_catch_clause . parameters is None : self . _parameters = None else : self . _parameters = ParameterList ( init , try_catch_clause . parameters , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _block if self . _parameters is not None : yield from self . _parameters @property def parent ( self ) -> TryStatement : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def block ( self ) -> Block : \"\"\" Returns: Body of the try/catch clause. \"\"\" return self . _block @property def error_name ( self ) -> str : \"\"\" !!! example For the following snippet: ```solidity try this.f() returns (uint256) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` - the `error_name` of the first (try) clause is empty, - the `error_name` of the second (catch) clause is `Error`, - the `error_name` of the third (catch) clause is `Panic`, - the `error_name` of the fourth (catch) clause is empty. Returns: Error name of the try/catch clause. \"\"\" return self . _error_name @property def parameters ( self ) -> Optional [ ParameterList ]: \"\"\" Can be `None` if the try clause does not have return parameters or if the catch clause does not accept parameters. !!! example Both clauses in the following example do not have parameters: ```solidity try this.f() { // ... } catch { // ... } ``` !!! example `:::solidity (uint x)`, `:::solidity (string memory reason)`, `:::solidity (uint errorCode)` and `:::solidity (bytes memory lowLevelData)` are the parameters of the try/catch clauses in the following example: ```solidity try this.f() returns (uint x) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` Returns: Return parameters in the case of a try clause, or error parameters in the case of a catch clause. \"\"\" return self . _parameters @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . block . modifies_state","title":"TryCatchClause"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause.block","text":"Returns: Type Description Block Body of the try/catch clause. Source code in woke/ast/ir/meta/try_catch_clause.py 77 78 79 80 81 82 83 @property def block ( self ) -> Block : \"\"\" Returns: Body of the try/catch clause. \"\"\" return self . _block","title":"block()"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause.error_name","text":"Example For the following snippet: try this . f () returns ( uint256 ) { // ... } catch Error ( string memory reason ) { // ... } catch Panic ( uint errorCode ) { // ... } catch ( bytes memory lowLevelData ) { // ... } the error_name of the first (try) clause is empty, the error_name of the second (catch) clause is Error , the error_name of the third (catch) clause is Panic , the error_name of the fourth (catch) clause is empty. Returns: Type Description str Error name of the try/catch clause. Source code in woke/ast/ir/meta/try_catch_clause.py 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 @property def error_name ( self ) -> str : \"\"\" !!! example For the following snippet: ```solidity try this.f() returns (uint256) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` - the `error_name` of the first (try) clause is empty, - the `error_name` of the second (catch) clause is `Error`, - the `error_name` of the third (catch) clause is `Panic`, - the `error_name` of the fourth (catch) clause is empty. Returns: Error name of the try/catch clause. \"\"\" return self . _error_name","title":"error_name()"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause.parameters","text":"Can be None if the try clause does not have return parameters or if the catch clause does not accept parameters. Example Both clauses in the following example do not have parameters: try this . f () { // ... } catch { // ... } Example ( uint x ) , ( string memory reason ) , ( uint errorCode ) and ( bytes memory lowLevelData ) are the parameters of the try/catch clauses in the following example: try this . f () returns ( uint x ) { // ... } catch Error ( string memory reason ) { // ... } catch Panic ( uint errorCode ) { // ... } catch ( bytes memory lowLevelData ) { // ... } Returns: Type Description Optional [ ParameterList ] Return parameters in the case of a try clause, or error parameters in the case of a catch clause. Source code in woke/ast/ir/meta/try_catch_clause.py 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @property def parameters ( self ) -> Optional [ ParameterList ]: \"\"\" Can be `None` if the try clause does not have return parameters or if the catch clause does not accept parameters. !!! example Both clauses in the following example do not have parameters: ```solidity try this.f() { // ... } catch { // ... } ``` !!! example `:::solidity (uint x)`, `:::solidity (string memory reason)`, `:::solidity (uint errorCode)` and `:::solidity (bytes memory lowLevelData)` are the parameters of the try/catch clauses in the following example: ```solidity try this.f() returns (uint x) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` Returns: Return parameters in the case of a try clause, or error parameters in the case of a catch clause. \"\"\" return self . _parameters","title":"parameters()"},{"location":"api-reference/ir/meta/try-catch-clause/#woke.ast.ir.meta.try_catch_clause.TryCatchClause.parent","text":"Returns: Type Description TryStatement Parent IR node. Source code in woke/ast/ir/meta/try_catch_clause.py 69 70 71 72 73 74 75 @property def parent ( self ) -> TryStatement : \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/using-for-directive/","text":"woke.ast.ir.meta.using_for_directive module # UsingForDirective class # Bases: SolidityAbc Note Either functions or library_name must be set. Example Lines 13 and 14 in the following example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function add ( uint a , uint b ) pure returns ( uint ) { return a + b ; } library SafeMath { function sub ( uint a , uint b ) pure returns ( uint ) { require ( b <= a ); return a - b ; } } contract C { using SafeMath for uint ; using { add as add2 } for uint ; } Source code in woke/ast/ir/meta/using_for_directive.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 class UsingForDirective ( SolidityAbc ): \"\"\" !!! note Either [functions][woke.ast.ir.meta.using_for_directive.UsingForDirective.functions] or [library_name][woke.ast.ir.meta.using_for_directive.UsingForDirective.library_name] must be set. !!! example Lines 13 and 14 in the following example: ```solidity linenums=\"1\" function add(uint a, uint b) pure returns (uint) { return a + b; } library SafeMath { function sub(uint a, uint b) pure returns (uint) { require(b <= a); return a - b; } } contract C { using SafeMath for uint; using {add as add2} for uint; } ``` \"\"\" _ast_node : SolcUsingForDirective _parent : Union [ ContractDefinition , SourceUnit ] _functions : Optional [ List [ IdentifierPath ]] _library_name : Optional [ Union [ IdentifierPath , UserDefinedTypeName ]] _type_name : Optional [ TypeNameAbc ] def __init__ ( self , init : IrInitTuple , using_for_directive : SolcUsingForDirective , parent : Union [ ContractDefinition , SourceUnit ], ): super () . __init__ ( init , using_for_directive , parent ) if using_for_directive . function_list is None : self . _functions = None else : self . _functions = [ IdentifierPath ( init , function . function , self ) for function in using_for_directive . function_list ] if using_for_directive . library_name is None : self . _library_name = None elif isinstance ( using_for_directive . library_name , SolcUserDefinedTypeName ): self . _library_name = UserDefinedTypeName ( init , using_for_directive . library_name , self ) elif isinstance ( using_for_directive . library_name , SolcIdentifierPath ): self . _library_name = IdentifierPath ( init , using_for_directive . library_name , self ) if using_for_directive . type_name is None : self . _type_name = None else : self . _type_name = TypeNameAbc . from_ast ( init , using_for_directive . type_name , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _functions is not None : for function in self . _functions : yield from function if self . _library_name is not None : yield from self . _library_name if self . _type_name is not None : yield from self . _type_name @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def functions ( self ) -> Optional [ Tuple [ IdentifierPath ]]: \"\"\" Is only set in the case of `:::solidity using {function1, function2} for TypeName;` directive type. Returns: List of functions that are bound to the target type. \"\"\" if self . _functions is None : return None return tuple ( self . _functions ) @property def library_name ( self ) -> Optional [ Union [ IdentifierPath , UserDefinedTypeName ]]: \"\"\" Is only set in the case of `:::solidity using LibraryName for TypeName;` directive type. Returns: IR node referencing the library ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] of the [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] kind) that is bound to the target type. \"\"\" return self . _library_name @property def type_name ( self ) -> Optional [ TypeNameAbc ]: \"\"\" Is `None` in the case of `:::solidity using Lib for *;`. Returns: Type name that is bound to the functions or library. \"\"\" return self . _type_name functions () property # Is only set in the case of using { function1 , function2 } for TypeName ; directive type. Returns: Type Description Optional [ Tuple [ IdentifierPath ]] List of functions that are bound to the target type. Source code in woke/ast/ir/meta/using_for_directive.py 105 106 107 108 109 110 111 112 113 114 @property def functions ( self ) -> Optional [ Tuple [ IdentifierPath ]]: \"\"\" Is only set in the case of `:::solidity using {function1, function2} for TypeName;` directive type. Returns: List of functions that are bound to the target type. \"\"\" if self . _functions is None : return None return tuple ( self . _functions ) library_name () property # Is only set in the case of using LibraryName for TypeName ; directive type. Returns: Type Description Optional [ Union [ IdentifierPath , UserDefinedTypeName ]] IR node referencing the library ( ContractDefinition of the ContractKind.LIBRARY kind) that is bound to the target type. Source code in woke/ast/ir/meta/using_for_directive.py 116 117 118 119 120 121 122 123 @property def library_name ( self ) -> Optional [ Union [ IdentifierPath , UserDefinedTypeName ]]: \"\"\" Is only set in the case of `:::solidity using LibraryName for TypeName;` directive type. Returns: IR node referencing the library ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] of the [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] kind) that is bound to the target type. \"\"\" return self . _library_name parent () property # Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/meta/using_for_directive.py 97 98 99 100 101 102 103 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent type_name () property # Is None in the case of using Lib for * ; . Returns: Type Description Optional [ TypeNameAbc ] Type name that is bound to the functions or library. Source code in woke/ast/ir/meta/using_for_directive.py 125 126 127 128 129 130 131 132 @property def type_name ( self ) -> Optional [ TypeNameAbc ]: \"\"\" Is `None` in the case of `:::solidity using Lib for *;`. Returns: Type name that is bound to the functions or library. \"\"\" return self . _type_name","title":"Using for directive"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive","text":"","title":"using_for_directive"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective","text":"Bases: SolidityAbc Note Either functions or library_name must be set. Example Lines 13 and 14 in the following example: 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 function add ( uint a , uint b ) pure returns ( uint ) { return a + b ; } library SafeMath { function sub ( uint a , uint b ) pure returns ( uint ) { require ( b <= a ); return a - b ; } } contract C { using SafeMath for uint ; using { add as add2 } for uint ; } Source code in woke/ast/ir/meta/using_for_directive.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 class UsingForDirective ( SolidityAbc ): \"\"\" !!! note Either [functions][woke.ast.ir.meta.using_for_directive.UsingForDirective.functions] or [library_name][woke.ast.ir.meta.using_for_directive.UsingForDirective.library_name] must be set. !!! example Lines 13 and 14 in the following example: ```solidity linenums=\"1\" function add(uint a, uint b) pure returns (uint) { return a + b; } library SafeMath { function sub(uint a, uint b) pure returns (uint) { require(b <= a); return a - b; } } contract C { using SafeMath for uint; using {add as add2} for uint; } ``` \"\"\" _ast_node : SolcUsingForDirective _parent : Union [ ContractDefinition , SourceUnit ] _functions : Optional [ List [ IdentifierPath ]] _library_name : Optional [ Union [ IdentifierPath , UserDefinedTypeName ]] _type_name : Optional [ TypeNameAbc ] def __init__ ( self , init : IrInitTuple , using_for_directive : SolcUsingForDirective , parent : Union [ ContractDefinition , SourceUnit ], ): super () . __init__ ( init , using_for_directive , parent ) if using_for_directive . function_list is None : self . _functions = None else : self . _functions = [ IdentifierPath ( init , function . function , self ) for function in using_for_directive . function_list ] if using_for_directive . library_name is None : self . _library_name = None elif isinstance ( using_for_directive . library_name , SolcUserDefinedTypeName ): self . _library_name = UserDefinedTypeName ( init , using_for_directive . library_name , self ) elif isinstance ( using_for_directive . library_name , SolcIdentifierPath ): self . _library_name = IdentifierPath ( init , using_for_directive . library_name , self ) if using_for_directive . type_name is None : self . _type_name = None else : self . _type_name = TypeNameAbc . from_ast ( init , using_for_directive . type_name , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _functions is not None : for function in self . _functions : yield from function if self . _library_name is not None : yield from self . _library_name if self . _type_name is not None : yield from self . _type_name @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def functions ( self ) -> Optional [ Tuple [ IdentifierPath ]]: \"\"\" Is only set in the case of `:::solidity using {function1, function2} for TypeName;` directive type. Returns: List of functions that are bound to the target type. \"\"\" if self . _functions is None : return None return tuple ( self . _functions ) @property def library_name ( self ) -> Optional [ Union [ IdentifierPath , UserDefinedTypeName ]]: \"\"\" Is only set in the case of `:::solidity using LibraryName for TypeName;` directive type. Returns: IR node referencing the library ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] of the [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] kind) that is bound to the target type. \"\"\" return self . _library_name @property def type_name ( self ) -> Optional [ TypeNameAbc ]: \"\"\" Is `None` in the case of `:::solidity using Lib for *;`. Returns: Type name that is bound to the functions or library. \"\"\" return self . _type_name","title":"UsingForDirective"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.functions","text":"Is only set in the case of using { function1 , function2 } for TypeName ; directive type. Returns: Type Description Optional [ Tuple [ IdentifierPath ]] List of functions that are bound to the target type. Source code in woke/ast/ir/meta/using_for_directive.py 105 106 107 108 109 110 111 112 113 114 @property def functions ( self ) -> Optional [ Tuple [ IdentifierPath ]]: \"\"\" Is only set in the case of `:::solidity using {function1, function2} for TypeName;` directive type. Returns: List of functions that are bound to the target type. \"\"\" if self . _functions is None : return None return tuple ( self . _functions )","title":"functions()"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.library_name","text":"Is only set in the case of using LibraryName for TypeName ; directive type. Returns: Type Description Optional [ Union [ IdentifierPath , UserDefinedTypeName ]] IR node referencing the library ( ContractDefinition of the ContractKind.LIBRARY kind) that is bound to the target type. Source code in woke/ast/ir/meta/using_for_directive.py 116 117 118 119 120 121 122 123 @property def library_name ( self ) -> Optional [ Union [ IdentifierPath , UserDefinedTypeName ]]: \"\"\" Is only set in the case of `:::solidity using LibraryName for TypeName;` directive type. Returns: IR node referencing the library ([ContractDefinition][woke.ast.ir.declaration.contract_definition.ContractDefinition] of the [ContractKind.LIBRARY][woke.ast.enums.ContractKind.LIBRARY] kind) that is bound to the target type. \"\"\" return self . _library_name","title":"library_name()"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.parent","text":"Returns: Type Description Union [ ContractDefinition , SourceUnit ] Parent IR node. Source code in woke/ast/ir/meta/using_for_directive.py 97 98 99 100 101 102 103 @property def parent ( self ) -> Union [ ContractDefinition , SourceUnit ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/meta/using-for-directive/#woke.ast.ir.meta.using_for_directive.UsingForDirective.type_name","text":"Is None in the case of using Lib for * ; . Returns: Type Description Optional [ TypeNameAbc ] Type name that is bound to the functions or library. Source code in woke/ast/ir/meta/using_for_directive.py 125 126 127 128 129 130 131 132 @property def type_name ( self ) -> Optional [ TypeNameAbc ]: \"\"\" Is `None` in the case of `:::solidity using Lib for *;`. Returns: Type name that is bound to the functions or library. \"\"\" return self . _type_name","title":"type_name()"},{"location":"api-reference/ir/statements/block/","text":"woke.ast.ir.statement.block module # Block class # Bases: StatementAbc Block statements group multiple statements into a single block. Example Lines 3-5 in the following code: 1 2 3 4 5 6 contract Foo { function bar ( uint a , uint b ) public pure returns ( uint ) { return a + b ; } } Source code in woke/ast/ir/statement/block.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 class Block ( StatementAbc ): \"\"\" Block statements group multiple statements into a single block. !!! example Lines 3-5 in the following code: ```solidity linenums=\"1\" contract Foo { function bar(uint a, uint b) public pure returns(uint) { return a + b; } } ``` \"\"\" _ast_node : SolcBlock _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , # statements FunctionDefinition , ModifierDefinition , # declarations TryCatchClause , # meta ] _statements : List [ StatementAbc ] def __init__ ( self , init : IrInitTuple , block : SolcBlock , parent : SolidityAbc ): super () . __init__ ( init , block , parent ) self . _statements = [ StatementAbc . from_ast ( init , statement , self ) for statement in block . statements ] def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _statements is not None : for statement in self . _statements : yield from statement @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def statements ( self ) -> Tuple [ StatementAbc ]: \"\"\" Can be empty. Returns: Statements in the block. \"\"\" return tuple ( self . _statements ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: if self . statements is None : return set () return reduce ( or_ , ( statement . modifies_state for statement in self . statements ), set (), ) def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self if self . _statements is not None : for statement in self . _statements : yield from statement . statements_iter () parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause ] Parent IR node. Source code in woke/ast/ir/statement/block.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent statements () property # Can be empty. Returns: Type Description Tuple [ StatementAbc ] Statements in the block. Source code in woke/ast/ir/statement/block.py 88 89 90 91 92 93 94 95 @property def statements ( self ) -> Tuple [ StatementAbc ]: \"\"\" Can be empty. Returns: Statements in the block. \"\"\" return tuple ( self . _statements )","title":"Block"},{"location":"api-reference/ir/statements/block/#woke.ast.ir.statement.block","text":"","title":"block"},{"location":"api-reference/ir/statements/block/#woke.ast.ir.statement.block.Block","text":"Bases: StatementAbc Block statements group multiple statements into a single block. Example Lines 3-5 in the following code: 1 2 3 4 5 6 contract Foo { function bar ( uint a , uint b ) public pure returns ( uint ) { return a + b ; } } Source code in woke/ast/ir/statement/block.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 class Block ( StatementAbc ): \"\"\" Block statements group multiple statements into a single block. !!! example Lines 3-5 in the following code: ```solidity linenums=\"1\" contract Foo { function bar(uint a, uint b) public pure returns(uint) { return a + b; } } ``` \"\"\" _ast_node : SolcBlock _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , # statements FunctionDefinition , ModifierDefinition , # declarations TryCatchClause , # meta ] _statements : List [ StatementAbc ] def __init__ ( self , init : IrInitTuple , block : SolcBlock , parent : SolidityAbc ): super () . __init__ ( init , block , parent ) self . _statements = [ StatementAbc . from_ast ( init , statement , self ) for statement in block . statements ] def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _statements is not None : for statement in self . _statements : yield from statement @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def statements ( self ) -> Tuple [ StatementAbc ]: \"\"\" Can be empty. Returns: Statements in the block. \"\"\" return tuple ( self . _statements ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: if self . statements is None : return set () return reduce ( or_ , ( statement . modifies_state for statement in self . statements ), set (), ) def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self if self . _statements is not None : for statement in self . _statements : yield from statement . statements_iter ()","title":"Block"},{"location":"api-reference/ir/statements/block/#woke.ast.ir.statement.block.Block.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause ] Parent IR node. Source code in woke/ast/ir/statement/block.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , FunctionDefinition , ModifierDefinition , TryCatchClause , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/block/#woke.ast.ir.statement.block.Block.statements","text":"Can be empty. Returns: Type Description Tuple [ StatementAbc ] Statements in the block. Source code in woke/ast/ir/statement/block.py 88 89 90 91 92 93 94 95 @property def statements ( self ) -> Tuple [ StatementAbc ]: \"\"\" Can be empty. Returns: Statements in the block. \"\"\" return tuple ( self . _statements )","title":"statements()"},{"location":"api-reference/ir/statements/break-statement/","text":"woke.ast.ir.statement.break_statement module # Break class # Bases: StatementAbc Example break in the following code: function foo () public { for ( uint i = 0 ; i < 10 ; i ++ ) { if ( i == 5 ) break ; } } Source code in woke/ast/ir/statement/break_statement.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class Break ( StatementAbc ): \"\"\" !!! example `:::solidity break` in the following code: ```solidity function foo() public { for (uint i = 0; i < 10; i++) { if (i == 5) break; } } ``` \"\"\" _ast_node : SolcBreak _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] def __init__ ( self , init : IrInitTuple , break_ : SolcBreak , parent : SolidityAbc ): super () . __init__ ( init , break_ , parent ) @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set () parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/break_statement.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Break statement"},{"location":"api-reference/ir/statements/break-statement/#woke.ast.ir.statement.break_statement","text":"","title":"break_statement"},{"location":"api-reference/ir/statements/break-statement/#woke.ast.ir.statement.break_statement.Break","text":"Bases: StatementAbc Example break in the following code: function foo () public { for ( uint i = 0 ; i < 10 ; i ++ ) { if ( i == 5 ) break ; } } Source code in woke/ast/ir/statement/break_statement.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class Break ( StatementAbc ): \"\"\" !!! example `:::solidity break` in the following code: ```solidity function foo() public { for (uint i = 0; i < 10; i++) { if (i == 5) break; } } ``` \"\"\" _ast_node : SolcBreak _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] def __init__ ( self , init : IrInitTuple , break_ : SolcBreak , parent : SolidityAbc ): super () . __init__ ( init , break_ , parent ) @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"Break"},{"location":"api-reference/ir/statements/break-statement/#woke.ast.ir.statement.break_statement.Break.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/break_statement.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/continue-statement/","text":"woke.ast.ir.statement.continue_statement module # Continue class # Bases: StatementAbc Example continue in the following code: function foo () public { for ( uint i = 0 ; i < 10 ; i ++ ) { if ( i == 5 ) continue ; } } Source code in woke/ast/ir/statement/continue_statement.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class Continue ( StatementAbc ): \"\"\" !!! example `:::solidity continue` in the following code: ```solidity function foo() public { for (uint i = 0; i < 10; i++) { if (i == 5) continue; } } ``` \"\"\" _ast_node : SolcContinue _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] def __init__ ( self , init : IrInitTuple , continue_ : SolcContinue , parent : SolidityAbc ): super () . __init__ ( init , continue_ , parent ) @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set () parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/continue_statement.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Continue statement"},{"location":"api-reference/ir/statements/continue-statement/#woke.ast.ir.statement.continue_statement","text":"","title":"continue_statement"},{"location":"api-reference/ir/statements/continue-statement/#woke.ast.ir.statement.continue_statement.Continue","text":"Bases: StatementAbc Example continue in the following code: function foo () public { for ( uint i = 0 ; i < 10 ; i ++ ) { if ( i == 5 ) continue ; } } Source code in woke/ast/ir/statement/continue_statement.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 class Continue ( StatementAbc ): \"\"\" !!! example `:::solidity continue` in the following code: ```solidity function foo() public { for (uint i = 0; i < 10; i++) { if (i == 5) continue; } } ``` \"\"\" _ast_node : SolcContinue _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] def __init__ ( self , init : IrInitTuple , continue_ : SolcContinue , parent : SolidityAbc ): super () . __init__ ( init , continue_ , parent ) @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"Continue"},{"location":"api-reference/ir/statements/continue-statement/#woke.ast.ir.statement.continue_statement.Continue.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/continue_statement.py 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/do-while-statement/","text":"woke.ast.ir.statement.do_while_statement module # DoWhileStatement class # Bases: StatementAbc Example Lines 2-4 in the following code: 1 2 3 4 5 function foo ( uint x ) public { do { x += 1 ; } while ( x < 10 ); } Source code in woke/ast/ir/statement/do_while_statement.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 class DoWhileStatement ( StatementAbc ): \"\"\" !!! example Lines 2-4 in the following code: ```solidity linenums=\"1\" function foo(uint x) public { do { x += 1; } while (x < 10); } ``` \"\"\" _ast_node : SolcDoWhileStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _body : StatementAbc _condition : ExpressionAbc def __init__ ( self , init : IrInitTuple , do_while : SolcDoWhileStatement , parent : SolidityAbc ): super () . __init__ ( init , do_while , parent ) self . _body = StatementAbc . from_ast ( init , do_while . body , self ) self . _condition = ExpressionAbc . from_ast ( init , do_while . condition , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _body yield from self . _condition @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the do-while statement. \"\"\" return self . _body @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the do-while statement. \"\"\" return self . _condition @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . condition . modifies_state | self . body . modifies_state def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self yield from self . _body . statements_iter () body () property # Returns: Type Description StatementAbc Body of the do-while statement. Source code in woke/ast/ir/statement/do_while_statement.py 76 77 78 79 80 81 82 @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the do-while statement. \"\"\" return self . _body condition () property # Returns: Type Description ExpressionAbc Condition of the do-while statement. Source code in woke/ast/ir/statement/do_while_statement.py 84 85 86 87 88 89 90 @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the do-while statement. \"\"\" return self . _condition parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/do_while_statement.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Do while statement"},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement","text":"","title":"do_while_statement"},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement.DoWhileStatement","text":"Bases: StatementAbc Example Lines 2-4 in the following code: 1 2 3 4 5 function foo ( uint x ) public { do { x += 1 ; } while ( x < 10 ); } Source code in woke/ast/ir/statement/do_while_statement.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 class DoWhileStatement ( StatementAbc ): \"\"\" !!! example Lines 2-4 in the following code: ```solidity linenums=\"1\" function foo(uint x) public { do { x += 1; } while (x < 10); } ``` \"\"\" _ast_node : SolcDoWhileStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _body : StatementAbc _condition : ExpressionAbc def __init__ ( self , init : IrInitTuple , do_while : SolcDoWhileStatement , parent : SolidityAbc ): super () . __init__ ( init , do_while , parent ) self . _body = StatementAbc . from_ast ( init , do_while . body , self ) self . _condition = ExpressionAbc . from_ast ( init , do_while . condition , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _body yield from self . _condition @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the do-while statement. \"\"\" return self . _body @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the do-while statement. \"\"\" return self . _condition @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . condition . modifies_state | self . body . modifies_state def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self yield from self . _body . statements_iter ()","title":"DoWhileStatement"},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement.DoWhileStatement.body","text":"Returns: Type Description StatementAbc Body of the do-while statement. Source code in woke/ast/ir/statement/do_while_statement.py 76 77 78 79 80 81 82 @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the do-while statement. \"\"\" return self . _body","title":"body()"},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement.DoWhileStatement.condition","text":"Returns: Type Description ExpressionAbc Condition of the do-while statement. Source code in woke/ast/ir/statement/do_while_statement.py 84 85 86 87 88 89 90 @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the do-while statement. \"\"\" return self . _condition","title":"condition()"},{"location":"api-reference/ir/statements/do-while-statement/#woke.ast.ir.statement.do_while_statement.DoWhileStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/do_while_statement.py 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/emit-statement/","text":"woke.ast.ir.statement.emit_statement module # EmitStatement class # Bases: StatementAbc Example emit Transfer ( msg.sender , to , amount ) in the following code: function transfer ( address to , uint amount ) public { emit Transfer ( msg.sender , to , amount ); } Source code in woke/ast/ir/statement/emit_statement.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class EmitStatement ( StatementAbc ): \"\"\" !!! example `:::solidity emit Transfer(msg.sender, to, amount)` in the following code: ```solidity function transfer(address to, uint amount) public { emit Transfer(msg.sender, to, amount); } ``` \"\"\" _ast_node : SolcEmitStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _event_call : FunctionCall def __init__ ( self , init : IrInitTuple , emit : SolcEmitStatement , parent : SolidityAbc ): super () . __init__ ( init , emit , parent ) self . _event_call = FunctionCall ( init , emit . event_call , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _event_call @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def event_call ( self ) -> FunctionCall : \"\"\" !!! example ```solidity Transfer(msg.sender, to, amount) ``` in the following emit statement: ```solidity emit Transfer(msg.sender, to, amount) ``` Returns: Expression representing the event call. \"\"\" return self . _event_call @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return {( self , ModifiesStateFlag . EMITS )} | self . event_call . modifies_state event_call () property # Example Transfer ( msg.sender , to , amount ) in the following emit statement: emit Transfer ( msg.sender , to , amount ) Returns: Type Description FunctionCall Expression representing the event call. Source code in woke/ast/ir/statement/emit_statement.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @property def event_call ( self ) -> FunctionCall : \"\"\" !!! example ```solidity Transfer(msg.sender, to, amount) ``` in the following emit statement: ```solidity emit Transfer(msg.sender, to, amount) ``` Returns: Expression representing the event call. \"\"\" return self . _event_call parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/emit_statement.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Emit statement"},{"location":"api-reference/ir/statements/emit-statement/#woke.ast.ir.statement.emit_statement","text":"","title":"emit_statement"},{"location":"api-reference/ir/statements/emit-statement/#woke.ast.ir.statement.emit_statement.EmitStatement","text":"Bases: StatementAbc Example emit Transfer ( msg.sender , to , amount ) in the following code: function transfer ( address to , uint amount ) public { emit Transfer ( msg.sender , to , amount ); } Source code in woke/ast/ir/statement/emit_statement.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 class EmitStatement ( StatementAbc ): \"\"\" !!! example `:::solidity emit Transfer(msg.sender, to, amount)` in the following code: ```solidity function transfer(address to, uint amount) public { emit Transfer(msg.sender, to, amount); } ``` \"\"\" _ast_node : SolcEmitStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _event_call : FunctionCall def __init__ ( self , init : IrInitTuple , emit : SolcEmitStatement , parent : SolidityAbc ): super () . __init__ ( init , emit , parent ) self . _event_call = FunctionCall ( init , emit . event_call , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _event_call @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def event_call ( self ) -> FunctionCall : \"\"\" !!! example ```solidity Transfer(msg.sender, to, amount) ``` in the following emit statement: ```solidity emit Transfer(msg.sender, to, amount) ``` Returns: Expression representing the event call. \"\"\" return self . _event_call @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return {( self , ModifiesStateFlag . EMITS )} | self . event_call . modifies_state","title":"EmitStatement"},{"location":"api-reference/ir/statements/emit-statement/#woke.ast.ir.statement.emit_statement.EmitStatement.event_call","text":"Example Transfer ( msg.sender , to , amount ) in the following emit statement: emit Transfer ( msg.sender , to , amount ) Returns: Type Description FunctionCall Expression representing the event call. Source code in woke/ast/ir/statement/emit_statement.py 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @property def event_call ( self ) -> FunctionCall : \"\"\" !!! example ```solidity Transfer(msg.sender, to, amount) ``` in the following emit statement: ```solidity emit Transfer(msg.sender, to, amount) ``` Returns: Expression representing the event call. \"\"\" return self . _event_call","title":"event_call()"},{"location":"api-reference/ir/statements/emit-statement/#woke.ast.ir.statement.emit_statement.EmitStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/emit_statement.py 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/expression-statement/","text":"woke.ast.ir.statement.expression_statement module # ExpressionStatement class # Bases: StatementAbc Example The underlying expression can be: an Assignment : i = 1 in line 6, a BinaryOperation : arr [ 0 ] + arr [ 1 ] in line 11, a Conditional : arr [ i ] >= arr [ i - 1 ] ? x ++ : x -- in line 7, a FunctionCall : require ( arr . length > 1 ) in line 3, a FunctionCallOptions : payable ( msg.sender ). call { value : 1 } in line 16, an Identifier : this in line 15, an IndexAccess : arr [ 0 ] in line 9, an IndexRangeAccess : arr [ 0 : 1 ] in line 10, a Literal : 10 in line 12, a MemberAccess : arr . length in line 13, a TupleExpression : ( arr ) in line 14, an UnaryOperation : i ++ in line 6. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 contract C { function foo ( uint [] calldata arr ) external view { require ( arr . length > 1 ); uint i ; int x = 0 ; for ( i = 1 ; i < arr . length ; i ++ ) arr [ i ] >= arr [ i - 1 ] ? x ++ : x -- ; arr [ 0 ]; arr [ 0 : 1 ]; arr [ 0 ] + arr [ 1 ]; 10 ; arr . length ; ( arr ); this ; // silence state mutability warning without generating bytecode payable ( msg.sender ). call { value : 1 }; } } Source code in woke/ast/ir/statement/expression_statement.pyclass ExpressionStatement ( StatementAbc ): \"\"\" !!! example The underlying expression can be: - an [Assignment][woke.ast.ir.expression.assignment.Assignment]: - `:::solidity i = 1` in line 6, - a [BinaryOperation][woke.ast.ir.expression.binary_operation.BinaryOperation]: - `:::solidity arr[0] + arr[1]` in line 11, - a [Conditional][woke.ast.ir.expression.conditional.Conditional]: - `:::solidity arr[i] >= arr[i - 1] ? x++ : x--` in line 7, - a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall]: - `:::solidity require(arr.length > 1)` in line 3, - a [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions]: - `:::solidity payable(msg.sender).call{value: 1}` in line 16, - an [Identifier][woke.ast.ir.expression.identifier.Identifier]: - `:::solidity this` in line 15, - an [IndexAccess][woke.ast.ir.expression.index_access.IndexAccess]: - `:::solidity arr[0]` in line 9, - an [IndexRangeAccess][woke.ast.ir.expression.index_range_access.IndexRangeAccess]: - `:::solidity arr[0:1]` in line 10, - a [Literal][woke.ast.ir.expression.literal.Literal]: - `:::solidity 10` in line 12, - a [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess]: - `:::solidity arr.length` in line 13, - a [TupleExpression][woke.ast.ir.expression.tuple_expression.TupleExpression]: - `:::solidity (arr)` in line 14, - an [UnaryOperation][woke.ast.ir.expression.unary_operation.UnaryOperation]: - `:::solidity i++` in line 6. ```solidity linenums=\"1\" contract C { function foo(uint[] calldata arr) external view { require(arr.length > 1); uint i; int x = 0; for (i = 1; i < arr.length; i++) arr[i] >= arr[i - 1] ? x++ : x--; arr[0]; arr[0:1]; arr[0] + arr[1]; 10; arr.length; (arr); this; // silence state mutability warning without generating bytecode payable(msg.sender).call{value: 1}; } } ``` \"\"\" _ast_node : SolcExpressionStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] __expression : Union [ Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation , ] def __init__ ( self , init : IrInitTuple , expression_statement : SolcExpressionStatement , parent : SolidityAbc , ): super () . __init__ ( init , expression_statement , parent ) expr = ExpressionAbc . from_ast ( init , expression_statement . expression , self ) assert isinstance ( expr , ( Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation , ), ) self . _expression = expr def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _expression @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def expression ( self , ) -> Union [ Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation , ]: \"\"\" Returns: Expression of the expression statement. \"\"\" return self . _expression @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . expression . modifies_state expression () property # Returns: Type Description Union [ Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation ] Expression of the expression statement. Source code in woke/ast/ir/statement/expression_statement.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 @property def expression ( self , ) -> Union [ Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation , ]: \"\"\" Returns: Expression of the expression statement. \"\"\" return self . _expression parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/expression_statement.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Expression statement"},{"location":"api-reference/ir/statements/expression-statement/#woke.ast.ir.statement.expression_statement","text":"","title":"expression_statement"},{"location":"api-reference/ir/statements/expression-statement/#woke.ast.ir.statement.expression_statement.ExpressionStatement","text":"Bases: StatementAbc Example The underlying expression can be: an Assignment : i = 1 in line 6, a BinaryOperation : arr [ 0 ] + arr [ 1 ] in line 11, a Conditional : arr [ i ] >= arr [ i - 1 ] ? x ++ : x -- in line 7, a FunctionCall : require ( arr . length > 1 ) in line 3, a FunctionCallOptions : payable ( msg.sender ). call { value : 1 } in line 16, an Identifier : this in line 15, an IndexAccess : arr [ 0 ] in line 9, an IndexRangeAccess : arr [ 0 : 1 ] in line 10, a Literal : 10 in line 12, a MemberAccess : arr . length in line 13, a TupleExpression : ( arr ) in line 14, an UnaryOperation : i ++ in line 6. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 contract C { function foo ( uint [] calldata arr ) external view { require ( arr . length > 1 ); uint i ; int x = 0 ; for ( i = 1 ; i < arr . length ; i ++ ) arr [ i ] >= arr [ i - 1 ] ? x ++ : x -- ; arr [ 0 ]; arr [ 0 : 1 ]; arr [ 0 ] + arr [ 1 ]; 10 ; arr . length ; ( arr ); this ; // silence state mutability warning without generating bytecode payable ( msg.sender ). call { value : 1 }; } } Source code in woke/ast/ir/statement/expression_statement.pyclass ExpressionStatement ( StatementAbc ): \"\"\" !!! example The underlying expression can be: - an [Assignment][woke.ast.ir.expression.assignment.Assignment]: - `:::solidity i = 1` in line 6, - a [BinaryOperation][woke.ast.ir.expression.binary_operation.BinaryOperation]: - `:::solidity arr[0] + arr[1]` in line 11, - a [Conditional][woke.ast.ir.expression.conditional.Conditional]: - `:::solidity arr[i] >= arr[i - 1] ? x++ : x--` in line 7, - a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall]: - `:::solidity require(arr.length > 1)` in line 3, - a [FunctionCallOptions][woke.ast.ir.expression.function_call_options.FunctionCallOptions]: - `:::solidity payable(msg.sender).call{value: 1}` in line 16, - an [Identifier][woke.ast.ir.expression.identifier.Identifier]: - `:::solidity this` in line 15, - an [IndexAccess][woke.ast.ir.expression.index_access.IndexAccess]: - `:::solidity arr[0]` in line 9, - an [IndexRangeAccess][woke.ast.ir.expression.index_range_access.IndexRangeAccess]: - `:::solidity arr[0:1]` in line 10, - a [Literal][woke.ast.ir.expression.literal.Literal]: - `:::solidity 10` in line 12, - a [MemberAccess][woke.ast.ir.expression.member_access.MemberAccess]: - `:::solidity arr.length` in line 13, - a [TupleExpression][woke.ast.ir.expression.tuple_expression.TupleExpression]: - `:::solidity (arr)` in line 14, - an [UnaryOperation][woke.ast.ir.expression.unary_operation.UnaryOperation]: - `:::solidity i++` in line 6. ```solidity linenums=\"1\" contract C { function foo(uint[] calldata arr) external view { require(arr.length > 1); uint i; int x = 0; for (i = 1; i < arr.length; i++) arr[i] >= arr[i - 1] ? x++ : x--; arr[0]; arr[0:1]; arr[0] + arr[1]; 10; arr.length; (arr); this; // silence state mutability warning without generating bytecode payable(msg.sender).call{value: 1}; } } ``` \"\"\" _ast_node : SolcExpressionStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] __expression : Union [ Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation , ] def __init__ ( self , init : IrInitTuple , expression_statement : SolcExpressionStatement , parent : SolidityAbc , ): super () . __init__ ( init , expression_statement , parent ) expr = ExpressionAbc . from_ast ( init , expression_statement . expression , self ) assert isinstance ( expr , ( Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation , ), ) self . _expression = expr def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _expression @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def expression ( self , ) -> Union [ Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation , ]: \"\"\" Returns: Expression of the expression statement. \"\"\" return self . _expression @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . expression . modifies_state","title":"ExpressionStatement"},{"location":"api-reference/ir/statements/expression-statement/#woke.ast.ir.statement.expression_statement.ExpressionStatement.expression","text":"Returns: Type Description Union [ Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation ] Expression of the expression statement. Source code in woke/ast/ir/statement/expression_statement.py 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 177 178 179 180 181 @property def expression ( self , ) -> Union [ Assignment , BinaryOperation , Conditional , FunctionCall , FunctionCallOptions , Identifier , IndexAccess , IndexRangeAccess , Literal , MemberAccess , TupleExpression , UnaryOperation , ]: \"\"\" Returns: Expression of the expression statement. \"\"\" return self . _expression","title":"expression()"},{"location":"api-reference/ir/statements/expression-statement/#woke.ast.ir.statement.expression_statement.ExpressionStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/expression_statement.py 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/for-statement/","text":"woke.ast.ir.statement.for_statement module # ForStatement class # Bases: StatementAbc Example Lines 2-4 in the following code: 1 2 3 4 5 function foo ( uint x ) public pure { for ( uint i = 0 ; i < 10 ; i ++ ) { x += 1 ; } } Source code in woke/ast/ir/statement/for_statement.pyclass ForStatement ( StatementAbc ): \"\"\" !!! example Lines 2-4 in the following code: ```solidity linenums=\"1\" function foo(uint x) public pure { for (uint i = 0; i < 10; i++) { x += 1; } } ``` \"\"\" _ast_node : SolcForStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _body : StatementAbc _condition : Optional [ ExpressionAbc ] _initialization_expression : Optional [ Union [ ExpressionStatement , VariableDeclarationStatement ] ] _loop_expression : Optional [ ExpressionStatement ] def __init__ ( self , init : IrInitTuple , for_ : SolcForStatement , parent : SolidityAbc ): super () . __init__ ( init , for_ , parent ) self . _body = StatementAbc . from_ast ( init , for_ . body , self ) self . _condition = ( ExpressionAbc . from_ast ( init , for_ . condition , self ) if for_ . condition else None ) if for_ . initialization_expression is None : self . _initialization_expression = None else : if isinstance ( for_ . initialization_expression , SolcExpressionStatement ): self . _initialization_expression = ExpressionStatement ( init , for_ . initialization_expression , self ) elif isinstance ( for_ . initialization_expression , SolcVariableDeclarationStatement ): self . _initialization_expression = VariableDeclarationStatement ( init , for_ . initialization_expression , self ) self . _loop_expression = ( ExpressionStatement ( init , for_ . loop_expression , self ) if for_ . loop_expression else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _body if self . _condition is not None : yield from self . _condition if self . _initialization_expression is not None : yield from self . _initialization_expression if self . _loop_expression is not None : yield from self . _loop_expression @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the for loop. \"\"\" return self . _body @property def condition ( self ) -> Optional [ ExpressionAbc ]: \"\"\" !!! example ```solidity i < 10 ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Condition of the for loop, if any. \"\"\" return self . _condition @property def initialization_expression ( self , ) -> Optional [ Union [ ExpressionStatement , VariableDeclarationStatement ]]: \"\"\" !!! example ```solidity uint i = 0 ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Initialization expression of the for loop, if any. \"\"\" return self . _initialization_expression @property def loop_expression ( self ) -> Optional [ ExpressionStatement ]: \"\"\" !!! example ```solidity i++ ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Loop expression of the for loop, if any. \"\"\" return self . _loop_expression @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = set () if self . initialization_expression is not None : ret |= self . initialization_expression . modifies_state if self . condition is not None : ret |= self . condition . modifies_state if self . loop_expression is not None : ret |= self . loop_expression . modifies_state return ret def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self yield from self . _body . statements_iter () if self . _initialization_expression is not None : yield from self . _initialization_expression . statements_iter () if self . _loop_expression is not None : yield from self . _loop_expression . statements_iter () body () property # Returns: Type Description StatementAbc Body of the for loop. Source code in woke/ast/ir/statement/for_statement.py 116 117 118 119 120 121 122 @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the for loop. \"\"\" return self . _body condition () property # Example i < 10 in the following for loop: for ( uint i = 0 ; i < 10 ; i ++ ) {} Returns: Type Description Optional [ ExpressionAbc ] Condition of the for loop, if any. Source code in woke/ast/ir/statement/for_statement.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 @property def condition ( self ) -> Optional [ ExpressionAbc ]: \"\"\" !!! example ```solidity i < 10 ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Condition of the for loop, if any. \"\"\" return self . _condition initialization_expression () property # Example uint i = 0 in the following for loop: for ( uint i = 0 ; i < 10 ; i ++ ) {} Returns: Type Description Optional [ Union [ ExpressionStatement , VariableDeclarationStatement ]] Initialization expression of the for loop, if any. Source code in woke/ast/ir/statement/for_statement.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 @property def initialization_expression ( self , ) -> Optional [ Union [ ExpressionStatement , VariableDeclarationStatement ]]: \"\"\" !!! example ```solidity uint i = 0 ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Initialization expression of the for loop, if any. \"\"\" return self . _initialization_expression loop_expression () property # Example i ++ in the following for loop: for ( uint i = 0 ; i < 10 ; i ++ ) {} Returns: Type Description Optional [ ExpressionStatement ] Loop expression of the for loop, if any. Source code in woke/ast/ir/statement/for_statement.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 @property def loop_expression ( self ) -> Optional [ ExpressionStatement ]: \"\"\" !!! example ```solidity i++ ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Loop expression of the for loop, if any. \"\"\" return self . _loop_expression parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/for_statement.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"For statement"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement","text":"","title":"for_statement"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement","text":"Bases: StatementAbc Example Lines 2-4 in the following code: 1 2 3 4 5 function foo ( uint x ) public pure { for ( uint i = 0 ; i < 10 ; i ++ ) { x += 1 ; } } Source code in woke/ast/ir/statement/for_statement.pyclass ForStatement ( StatementAbc ): \"\"\" !!! example Lines 2-4 in the following code: ```solidity linenums=\"1\" function foo(uint x) public pure { for (uint i = 0; i < 10; i++) { x += 1; } } ``` \"\"\" _ast_node : SolcForStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _body : StatementAbc _condition : Optional [ ExpressionAbc ] _initialization_expression : Optional [ Union [ ExpressionStatement , VariableDeclarationStatement ] ] _loop_expression : Optional [ ExpressionStatement ] def __init__ ( self , init : IrInitTuple , for_ : SolcForStatement , parent : SolidityAbc ): super () . __init__ ( init , for_ , parent ) self . _body = StatementAbc . from_ast ( init , for_ . body , self ) self . _condition = ( ExpressionAbc . from_ast ( init , for_ . condition , self ) if for_ . condition else None ) if for_ . initialization_expression is None : self . _initialization_expression = None else : if isinstance ( for_ . initialization_expression , SolcExpressionStatement ): self . _initialization_expression = ExpressionStatement ( init , for_ . initialization_expression , self ) elif isinstance ( for_ . initialization_expression , SolcVariableDeclarationStatement ): self . _initialization_expression = VariableDeclarationStatement ( init , for_ . initialization_expression , self ) self . _loop_expression = ( ExpressionStatement ( init , for_ . loop_expression , self ) if for_ . loop_expression else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _body if self . _condition is not None : yield from self . _condition if self . _initialization_expression is not None : yield from self . _initialization_expression if self . _loop_expression is not None : yield from self . _loop_expression @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the for loop. \"\"\" return self . _body @property def condition ( self ) -> Optional [ ExpressionAbc ]: \"\"\" !!! example ```solidity i < 10 ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Condition of the for loop, if any. \"\"\" return self . _condition @property def initialization_expression ( self , ) -> Optional [ Union [ ExpressionStatement , VariableDeclarationStatement ]]: \"\"\" !!! example ```solidity uint i = 0 ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Initialization expression of the for loop, if any. \"\"\" return self . _initialization_expression @property def loop_expression ( self ) -> Optional [ ExpressionStatement ]: \"\"\" !!! example ```solidity i++ ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Loop expression of the for loop, if any. \"\"\" return self . _loop_expression @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = set () if self . initialization_expression is not None : ret |= self . initialization_expression . modifies_state if self . condition is not None : ret |= self . condition . modifies_state if self . loop_expression is not None : ret |= self . loop_expression . modifies_state return ret def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self yield from self . _body . statements_iter () if self . _initialization_expression is not None : yield from self . _initialization_expression . statements_iter () if self . _loop_expression is not None : yield from self . _loop_expression . statements_iter ()","title":"ForStatement"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.body","text":"Returns: Type Description StatementAbc Body of the for loop. Source code in woke/ast/ir/statement/for_statement.py 116 117 118 119 120 121 122 @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the for loop. \"\"\" return self . _body","title":"body()"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.condition","text":"Example i < 10 in the following for loop: for ( uint i = 0 ; i < 10 ; i ++ ) {} Returns: Type Description Optional [ ExpressionAbc ] Condition of the for loop, if any. Source code in woke/ast/ir/statement/for_statement.py 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 @property def condition ( self ) -> Optional [ ExpressionAbc ]: \"\"\" !!! example ```solidity i < 10 ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Condition of the for loop, if any. \"\"\" return self . _condition","title":"condition()"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.initialization_expression","text":"Example uint i = 0 in the following for loop: for ( uint i = 0 ; i < 10 ; i ++ ) {} Returns: Type Description Optional [ Union [ ExpressionStatement , VariableDeclarationStatement ]] Initialization expression of the for loop, if any. Source code in woke/ast/ir/statement/for_statement.py 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 @property def initialization_expression ( self , ) -> Optional [ Union [ ExpressionStatement , VariableDeclarationStatement ]]: \"\"\" !!! example ```solidity uint i = 0 ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Initialization expression of the for loop, if any. \"\"\" return self . _initialization_expression","title":"initialization_expression()"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.loop_expression","text":"Example i ++ in the following for loop: for ( uint i = 0 ; i < 10 ; i ++ ) {} Returns: Type Description Optional [ ExpressionStatement ] Loop expression of the for loop, if any. Source code in woke/ast/ir/statement/for_statement.py 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 @property def loop_expression ( self ) -> Optional [ ExpressionStatement ]: \"\"\" !!! example ```solidity i++ ``` in the following for loop: ```solidity for (uint i = 0; i < 10; i++) {} ``` Returns: Loop expression of the for loop, if any. \"\"\" return self . _loop_expression","title":"loop_expression()"},{"location":"api-reference/ir/statements/for-statement/#woke.ast.ir.statement.for_statement.ForStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/for_statement.py 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/if-statement/","text":"woke.ast.ir.statement.if_statement module # IfStatement class # Bases: StatementAbc Example Lines 2-6 in the following code: 1 2 3 4 5 6 7 function foo ( int x ) public pure returns ( uint ) { if ( x < 0 ) { return 0 ; } else { return uint ( x ); } } Source code in woke/ast/ir/statement/if_statement.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 class IfStatement ( StatementAbc ): \"\"\" !!! example Lines 2-6 in the following code: ```solidity linenums=\"1\" function foo(int x) public pure returns(uint) { if (x < 0) { return 0; } else { return uint(x); } } ``` \"\"\" _ast_node : SolcIfStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _condition : ExpressionAbc _true_body : StatementAbc _false_body : Optional [ StatementAbc ] def __init__ ( self , init : IrInitTuple , if_statement : SolcIfStatement , parent : SolidityAbc ): super () . __init__ ( init , if_statement , parent ) self . _condition = ExpressionAbc . from_ast ( init , if_statement . condition , self ) self . _true_body = StatementAbc . from_ast ( init , if_statement . true_body , self ) self . _false_body = ( None if if_statement . false_body is None else StatementAbc . from_ast ( init , if_statement . false_body , self ) ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _condition yield from self . _true_body if self . _false_body is not None : yield from self . _false_body @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the if statement. \"\"\" return self . _condition @property def true_body ( self ) -> StatementAbc : \"\"\" Returns: Statement executed if the condition is true. \"\"\" return self . _true_body @property def false_body ( self ) -> Optional [ StatementAbc ]: \"\"\" Returns: Statement executed if the condition is false (if any). \"\"\" return self . _false_body @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return ( self . condition . modifies_state | self . true_body . modifies_state | ( self . false_body . modifies_state if self . false_body is not None else set ()) ) def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self yield from self . _true_body . statements_iter () if self . _false_body is not None : yield from self . _false_body . statements_iter () condition () property # Returns: Type Description ExpressionAbc Condition of the if statement. Source code in woke/ast/ir/statement/if_statement.py 86 87 88 89 90 91 92 @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the if statement. \"\"\" return self . _condition false_body () property # Returns: Type Description Optional [ StatementAbc ] Statement executed if the condition is false (if any). Source code in woke/ast/ir/statement/if_statement.py 102 103 104 105 106 107 108 @property def false_body ( self ) -> Optional [ StatementAbc ]: \"\"\" Returns: Statement executed if the condition is false (if any). \"\"\" return self . _false_body parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/if_statement.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent true_body () property # Returns: Type Description StatementAbc Statement executed if the condition is true. Source code in woke/ast/ir/statement/if_statement.py 94 95 96 97 98 99 100 @property def true_body ( self ) -> StatementAbc : \"\"\" Returns: Statement executed if the condition is true. \"\"\" return self . _true_body","title":"If statement"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement","text":"","title":"if_statement"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement","text":"Bases: StatementAbc Example Lines 2-6 in the following code: 1 2 3 4 5 6 7 function foo ( int x ) public pure returns ( uint ) { if ( x < 0 ) { return 0 ; } else { return uint ( x ); } } Source code in woke/ast/ir/statement/if_statement.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 class IfStatement ( StatementAbc ): \"\"\" !!! example Lines 2-6 in the following code: ```solidity linenums=\"1\" function foo(int x) public pure returns(uint) { if (x < 0) { return 0; } else { return uint(x); } } ``` \"\"\" _ast_node : SolcIfStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _condition : ExpressionAbc _true_body : StatementAbc _false_body : Optional [ StatementAbc ] def __init__ ( self , init : IrInitTuple , if_statement : SolcIfStatement , parent : SolidityAbc ): super () . __init__ ( init , if_statement , parent ) self . _condition = ExpressionAbc . from_ast ( init , if_statement . condition , self ) self . _true_body = StatementAbc . from_ast ( init , if_statement . true_body , self ) self . _false_body = ( None if if_statement . false_body is None else StatementAbc . from_ast ( init , if_statement . false_body , self ) ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _condition yield from self . _true_body if self . _false_body is not None : yield from self . _false_body @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the if statement. \"\"\" return self . _condition @property def true_body ( self ) -> StatementAbc : \"\"\" Returns: Statement executed if the condition is true. \"\"\" return self . _true_body @property def false_body ( self ) -> Optional [ StatementAbc ]: \"\"\" Returns: Statement executed if the condition is false (if any). \"\"\" return self . _false_body @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return ( self . condition . modifies_state | self . true_body . modifies_state | ( self . false_body . modifies_state if self . false_body is not None else set ()) ) def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self yield from self . _true_body . statements_iter () if self . _false_body is not None : yield from self . _false_body . statements_iter ()","title":"IfStatement"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement.condition","text":"Returns: Type Description ExpressionAbc Condition of the if statement. Source code in woke/ast/ir/statement/if_statement.py 86 87 88 89 90 91 92 @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the if statement. \"\"\" return self . _condition","title":"condition()"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement.false_body","text":"Returns: Type Description Optional [ StatementAbc ] Statement executed if the condition is false (if any). Source code in woke/ast/ir/statement/if_statement.py 102 103 104 105 106 107 108 @property def false_body ( self ) -> Optional [ StatementAbc ]: \"\"\" Returns: Statement executed if the condition is false (if any). \"\"\" return self . _false_body","title":"false_body()"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/if_statement.py 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/if-statement/#woke.ast.ir.statement.if_statement.IfStatement.true_body","text":"Returns: Type Description StatementAbc Statement executed if the condition is true. Source code in woke/ast/ir/statement/if_statement.py 94 95 96 97 98 99 100 @property def true_body ( self ) -> StatementAbc : \"\"\" Returns: Statement executed if the condition is true. \"\"\" return self . _true_body","title":"true_body()"},{"location":"api-reference/ir/statements/inline-assembly/","text":"woke.ast.ir.statement.inline_assembly module # ExternalReference class # Reference from an inline assembly block to a Solidity declaration. Warning This is not an IR node, but a helper class for InlineAssembly . Since this is not an IR node, there must still be a Yul IR node (Yul Identifier ) in the source code that represents the identifier. Source code in woke/ast/ir/statement/inline_assembly.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 class ExternalReference : \"\"\" Reference from an inline assembly block to a Solidity declaration. !!! warning This is not an IR node, but a helper class for [InlineAssembly][woke.ast.ir.statement.inline_assembly.InlineAssembly]. Since this is not an IR node, there must still be a Yul IR node (Yul [Identifier][woke.ast.ir.yul.identifier.Identifier]) in the source code that represents the identifier. \"\"\" _external_reference_model : ExternalReferenceModel _reference_resolver : ReferenceResolver _cu_hash : bytes _file : Path _source : bytes _referenced_declaration_id : AstNodeId _value_size : int _suffix : Optional [ InlineAssemblySuffix ] _yul_identifier : Optional [ Identifier ] def __init__ ( self , init : IrInitTuple , external_reference_model : ExternalReferenceModel ): self . _external_reference_model = external_reference_model self . _reference_resolver = init . reference_resolver self . _cu_hash = init . cu . hash self . _file = init . file self . _source = init . source [ self . byte_location [ 0 ] : self . byte_location [ 1 ]] self . _referenced_declaration_id = external_reference_model . declaration assert self . _referenced_declaration_id >= 0 self . _value_size = external_reference_model . value_size self . _suffix = external_reference_model . suffix self . _yul_identifier = None if external_reference_model . is_offset : self . _suffix = InlineAssemblySuffix . OFFSET elif external_reference_model . is_slot : self . _suffix = InlineAssemblySuffix . SLOT self . _reference_resolver . register_post_process_callback ( self . _post_process ) def _post_process ( self , callback_params : CallbackParams ): referenced_declaration = self . referenced_declaration referenced_declaration . register_reference ( self ) self . _reference_resolver . register_destroy_callback ( self . _file , partial ( self . _destroy , referenced_declaration ) ) interval_tree = callback_params . interval_trees [ self . _file ] start , end = self . byte_location nodes = interval_tree [ start : end ] node = next ( node for node in nodes if node . begin == start and node . end == end ) assert isinstance ( node . data , Identifier ), f \"Expected Identifier, got { type ( node . data ) } \" self . _yul_identifier = node . data self . _yul_identifier . _external_reference = self def _destroy ( self , referenced_declaration : DeclarationAbc ) -> None : referenced_declaration . unregister_reference ( self ) @property def file ( self ) -> Path : \"\"\" Returns: Absolute path to the file containing the inline assembly block. \"\"\" return self . _file @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" Returns: Byte offsets (start and end) of the external reference in the source file. \"\"\" return ( self . _external_reference_model . src . byte_offset , self . _external_reference_model . src . byte_offset + self . _external_reference_model . src . byte_length , ) @property @lru_cache ( maxsize = 2048 ) def identifier_byte_location ( self ) -> Tuple [ int , int ]: \"\"\" !!! example Returns the byte location of `stateVar` in line 6, not `stateVar.slot`: ```solidity linenums=\"1\" contract Foo { uint stateVar; function f() public pure { assembly { let x := stateVar.slot } } } ``` Returns: Byte offsets (start and end) of the identifier representing the external reference in the source file. \"\"\" match = IDENTIFIER_RE . match ( self . _source ) assert match start = self . byte_location [ 0 ] + match . start () end = self . byte_location [ 0 ] + match . end () return start , end @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Solidity declaration referenced by this external reference. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node @property def yul_identifier ( self ) -> Identifier : \"\"\" Returns: Yul Identifier node representing this external reference. \"\"\" assert isinstance ( self . _yul_identifier , Identifier ) return self . _yul_identifier @property def value_size ( self ) -> int : # TODO document this? return self . _value_size @property def suffix ( self ) -> Optional [ InlineAssemblySuffix ]: \"\"\" Returns: Suffix of the external reference, if any. \"\"\" return self . _suffix byte_location () property # Returns: Type Description Tuple [ int , int ] Byte offsets (start and end) of the external reference in the source file. Source code in woke/ast/ir/statement/inline_assembly.py 106 107 108 109 110 111 112 113 114 115 116 @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" Returns: Byte offsets (start and end) of the external reference in the source file. \"\"\" return ( self . _external_reference_model . src . byte_offset , self . _external_reference_model . src . byte_offset + self . _external_reference_model . src . byte_length , ) file () property # Returns: Type Description Path Absolute path to the file containing the inline assembly block. Source code in woke/ast/ir/statement/inline_assembly.py 98 99 100 101 102 103 104 @property def file ( self ) -> Path : \"\"\" Returns: Absolute path to the file containing the inline assembly block. \"\"\" return self . _file identifier_byte_location () cached property # Example Returns the byte location of stateVar in line 6, not stateVar.slot : 1 2 3 4 5 6 7 8 9 contract Foo { uint stateVar ; function f () public pure { assembly { let x : = stateVar . slot } } } Returns: Type Description Tuple [ int , int ] Byte offsets (start and end) of the identifier representing the external reference in the source file. Source code in woke/ast/ir/statement/inline_assembly.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @property @lru_cache ( maxsize = 2048 ) def identifier_byte_location ( self ) -> Tuple [ int , int ]: \"\"\" !!! example Returns the byte location of `stateVar` in line 6, not `stateVar.slot`: ```solidity linenums=\"1\" contract Foo { uint stateVar; function f() public pure { assembly { let x := stateVar.slot } } } ``` Returns: Byte offsets (start and end) of the identifier representing the external reference in the source file. \"\"\" match = IDENTIFIER_RE . match ( self . _source ) assert match start = self . byte_location [ 0 ] + match . start () end = self . byte_location [ 0 ] + match . end () return start , end referenced_declaration () property # Returns: Type Description DeclarationAbc Solidity declaration referenced by this external reference. Source code in woke/ast/ir/statement/inline_assembly.py 144 145 146 147 148 149 150 151 152 153 154 @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Solidity declaration referenced by this external reference. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node suffix () property # Returns: Type Description Optional [ InlineAssemblySuffix ] Suffix of the external reference, if any. Source code in woke/ast/ir/statement/inline_assembly.py 170 171 172 173 174 175 176 @property def suffix ( self ) -> Optional [ InlineAssemblySuffix ]: \"\"\" Returns: Suffix of the external reference, if any. \"\"\" return self . _suffix yul_identifier () property # Returns: Type Description Identifier Yul Identifier node representing this external reference. Source code in woke/ast/ir/statement/inline_assembly.py 156 157 158 159 160 161 162 163 @property def yul_identifier ( self ) -> Identifier : \"\"\" Returns: Yul Identifier node representing this external reference. \"\"\" assert isinstance ( self . _yul_identifier , Identifier ) return self . _yul_identifier InlineAssembly class # Bases: StatementAbc Inline assembly block in Solidity. Example function f () public pure { assembly { let x : = 1 let y : = 2 let z : = add ( x , y ) } } Source code in woke/ast/ir/statement/inline_assembly.pyclass InlineAssembly ( StatementAbc ): \"\"\" Inline assembly block in Solidity. !!! example ```solidity function f() public pure { assembly { let x := 1 let y := 2 let z := add(x, y) } } ``` \"\"\" _ast_node : SolcInlineAssembly _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _yul_block : YulBlock _evm_version : InlineAssemblyEvmVersion _external_references : IntervalTree _flags : Set [ InlineAssemblyFlag ] def __init__ ( self , init : IrInitTuple , inline_assembly : SolcInlineAssembly , parent : SolidityAbc , ): super () . __init__ ( init , inline_assembly , parent ) self . _yul_block = YulBlock ( init , inline_assembly . ast , self ) self . _evm_version = inline_assembly . evm_version self . _external_references = IntervalTree () self . _flags = set () if inline_assembly . flags is not None : for flag in inline_assembly . flags : self . _flags . add ( InlineAssemblyFlag ( flag )) for external_reference in inline_assembly . external_references : start = external_reference . src . byte_offset end = start + external_reference . src . byte_length self . _external_references [ start : end ] = ExternalReference ( init , external_reference ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _yul_block @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def yul_block ( self ) -> YulBlock : \"\"\" Returns: Yul block containing Yul IR nodes ([YulAbc][woke.ast.ir.yul.abc.YulAbc]). \"\"\" return self . _yul_block @property def evm_version ( self ) -> InlineAssemblyEvmVersion : \"\"\" Depends on the version of the `solc` compiler used to compile the contract. Returns: EVM version used for the inline assembly block. \"\"\" return self . _evm_version @property def flags ( self ) -> FrozenSet [ InlineAssemblyFlag ]: \"\"\" !!! example ```solidity function f() public pure { assembly (\"memory-safe\") { let x := 1 let y := 2 let z := add(x, y) } } ``` Returns: Flags decorating the inline assembly block. \"\"\" return frozenset ( self . _flags ) @property def external_references ( self ) -> Tuple [ ExternalReference ]: \"\"\" Returns: External references in the inline assembly block. \"\"\" return tuple ( interval . data for interval in self . _external_references ) def external_reference_at ( self , byte_offset : int ) -> Optional [ ExternalReference ]: \"\"\" Args: byte_offset: Byte offset in the source file. Returns: External reference at the given byte offset, if any. \"\"\" intervals = self . _external_references . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . yul_block . modifies_state evm_version () property # Depends on the version of the solc compiler used to compile the contract. Returns: Type Description InlineAssemblyEvmVersion EVM version used for the inline assembly block. Source code in woke/ast/ir/statement/inline_assembly.py 259 260 261 262 263 264 265 266 @property def evm_version ( self ) -> InlineAssemblyEvmVersion : \"\"\" Depends on the version of the `solc` compiler used to compile the contract. Returns: EVM version used for the inline assembly block. \"\"\" return self . _evm_version external_reference_at ( byte_offset ) # Parameters: Name Type Description Default byte_offset int Byte offset in the source file. required Returns: Type Description Optional [ ExternalReference ] External reference at the given byte offset, if any. Source code in woke/ast/ir/statement/inline_assembly.py 294 295 296 297 298 299 300 301 302 303 304 305 def external_reference_at ( self , byte_offset : int ) -> Optional [ ExternalReference ]: \"\"\" Args: byte_offset: Byte offset in the source file. Returns: External reference at the given byte offset, if any. \"\"\" intervals = self . _external_references . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data external_references () property # Returns: Type Description Tuple [ ExternalReference ] External references in the inline assembly block. Source code in woke/ast/ir/statement/inline_assembly.py 286 287 288 289 290 291 292 @property def external_references ( self ) -> Tuple [ ExternalReference ]: \"\"\" Returns: External references in the inline assembly block. \"\"\" return tuple ( interval . data for interval in self . _external_references ) flags () property # Example function f () public pure { assembly ( \"memory-safe\" ) { let x : = 1 let y : = 2 let z : = add ( x , y ) } } Returns: Type Description FrozenSet [ InlineAssemblyFlag ] Flags decorating the inline assembly block. Source code in woke/ast/ir/statement/inline_assembly.py 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 @property def flags ( self ) -> FrozenSet [ InlineAssemblyFlag ]: \"\"\" !!! example ```solidity function f() public pure { assembly (\"memory-safe\") { let x := 1 let y := 2 let z := add(x, y) } } ``` Returns: Flags decorating the inline assembly block. \"\"\" return frozenset ( self . _flags ) parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/inline_assembly.py 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent yul_block () property # Returns: Type Description YulBlock Yul block containing Yul IR nodes ( YulAbc ). Source code in woke/ast/ir/statement/inline_assembly.py 251 252 253 254 255 256 257 @property def yul_block ( self ) -> YulBlock : \"\"\" Returns: Yul block containing Yul IR nodes ([YulAbc][woke.ast.ir.yul.abc.YulAbc]). \"\"\" return self . _yul_block","title":"Inline assembly"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly","text":"","title":"inline_assembly"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference","text":"Reference from an inline assembly block to a Solidity declaration. Warning This is not an IR node, but a helper class for InlineAssembly . Since this is not an IR node, there must still be a Yul IR node (Yul Identifier ) in the source code that represents the identifier. Source code in woke/ast/ir/statement/inline_assembly.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 143 144 145 146 147 148 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 166 167 168 169 170 171 172 173 174 175 176 class ExternalReference : \"\"\" Reference from an inline assembly block to a Solidity declaration. !!! warning This is not an IR node, but a helper class for [InlineAssembly][woke.ast.ir.statement.inline_assembly.InlineAssembly]. Since this is not an IR node, there must still be a Yul IR node (Yul [Identifier][woke.ast.ir.yul.identifier.Identifier]) in the source code that represents the identifier. \"\"\" _external_reference_model : ExternalReferenceModel _reference_resolver : ReferenceResolver _cu_hash : bytes _file : Path _source : bytes _referenced_declaration_id : AstNodeId _value_size : int _suffix : Optional [ InlineAssemblySuffix ] _yul_identifier : Optional [ Identifier ] def __init__ ( self , init : IrInitTuple , external_reference_model : ExternalReferenceModel ): self . _external_reference_model = external_reference_model self . _reference_resolver = init . reference_resolver self . _cu_hash = init . cu . hash self . _file = init . file self . _source = init . source [ self . byte_location [ 0 ] : self . byte_location [ 1 ]] self . _referenced_declaration_id = external_reference_model . declaration assert self . _referenced_declaration_id >= 0 self . _value_size = external_reference_model . value_size self . _suffix = external_reference_model . suffix self . _yul_identifier = None if external_reference_model . is_offset : self . _suffix = InlineAssemblySuffix . OFFSET elif external_reference_model . is_slot : self . _suffix = InlineAssemblySuffix . SLOT self . _reference_resolver . register_post_process_callback ( self . _post_process ) def _post_process ( self , callback_params : CallbackParams ): referenced_declaration = self . referenced_declaration referenced_declaration . register_reference ( self ) self . _reference_resolver . register_destroy_callback ( self . _file , partial ( self . _destroy , referenced_declaration ) ) interval_tree = callback_params . interval_trees [ self . _file ] start , end = self . byte_location nodes = interval_tree [ start : end ] node = next ( node for node in nodes if node . begin == start and node . end == end ) assert isinstance ( node . data , Identifier ), f \"Expected Identifier, got { type ( node . data ) } \" self . _yul_identifier = node . data self . _yul_identifier . _external_reference = self def _destroy ( self , referenced_declaration : DeclarationAbc ) -> None : referenced_declaration . unregister_reference ( self ) @property def file ( self ) -> Path : \"\"\" Returns: Absolute path to the file containing the inline assembly block. \"\"\" return self . _file @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" Returns: Byte offsets (start and end) of the external reference in the source file. \"\"\" return ( self . _external_reference_model . src . byte_offset , self . _external_reference_model . src . byte_offset + self . _external_reference_model . src . byte_length , ) @property @lru_cache ( maxsize = 2048 ) def identifier_byte_location ( self ) -> Tuple [ int , int ]: \"\"\" !!! example Returns the byte location of `stateVar` in line 6, not `stateVar.slot`: ```solidity linenums=\"1\" contract Foo { uint stateVar; function f() public pure { assembly { let x := stateVar.slot } } } ``` Returns: Byte offsets (start and end) of the identifier representing the external reference in the source file. \"\"\" match = IDENTIFIER_RE . match ( self . _source ) assert match start = self . byte_location [ 0 ] + match . start () end = self . byte_location [ 0 ] + match . end () return start , end @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Solidity declaration referenced by this external reference. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node @property def yul_identifier ( self ) -> Identifier : \"\"\" Returns: Yul Identifier node representing this external reference. \"\"\" assert isinstance ( self . _yul_identifier , Identifier ) return self . _yul_identifier @property def value_size ( self ) -> int : # TODO document this? return self . _value_size @property def suffix ( self ) -> Optional [ InlineAssemblySuffix ]: \"\"\" Returns: Suffix of the external reference, if any. \"\"\" return self . _suffix","title":"ExternalReference"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.byte_location","text":"Returns: Type Description Tuple [ int , int ] Byte offsets (start and end) of the external reference in the source file. Source code in woke/ast/ir/statement/inline_assembly.py 106 107 108 109 110 111 112 113 114 115 116 @property def byte_location ( self ) -> Tuple [ int , int ]: \"\"\" Returns: Byte offsets (start and end) of the external reference in the source file. \"\"\" return ( self . _external_reference_model . src . byte_offset , self . _external_reference_model . src . byte_offset + self . _external_reference_model . src . byte_length , )","title":"byte_location()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.file","text":"Returns: Type Description Path Absolute path to the file containing the inline assembly block. Source code in woke/ast/ir/statement/inline_assembly.py 98 99 100 101 102 103 104 @property def file ( self ) -> Path : \"\"\" Returns: Absolute path to the file containing the inline assembly block. \"\"\" return self . _file","title":"file()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.identifier_byte_location","text":"Example Returns the byte location of stateVar in line 6, not stateVar.slot : 1 2 3 4 5 6 7 8 9 contract Foo { uint stateVar ; function f () public pure { assembly { let x : = stateVar . slot } } } Returns: Type Description Tuple [ int , int ] Byte offsets (start and end) of the identifier representing the external reference in the source file. Source code in woke/ast/ir/statement/inline_assembly.py 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 137 138 139 140 141 142 @property @lru_cache ( maxsize = 2048 ) def identifier_byte_location ( self ) -> Tuple [ int , int ]: \"\"\" !!! example Returns the byte location of `stateVar` in line 6, not `stateVar.slot`: ```solidity linenums=\"1\" contract Foo { uint stateVar; function f() public pure { assembly { let x := stateVar.slot } } } ``` Returns: Byte offsets (start and end) of the identifier representing the external reference in the source file. \"\"\" match = IDENTIFIER_RE . match ( self . _source ) assert match start = self . byte_location [ 0 ] + match . start () end = self . byte_location [ 0 ] + match . end () return start , end","title":"identifier_byte_location()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.referenced_declaration","text":"Returns: Type Description DeclarationAbc Solidity declaration referenced by this external reference. Source code in woke/ast/ir/statement/inline_assembly.py 144 145 146 147 148 149 150 151 152 153 154 @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Solidity declaration referenced by this external reference. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node","title":"referenced_declaration()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.suffix","text":"Returns: Type Description Optional [ InlineAssemblySuffix ] Suffix of the external reference, if any. Source code in woke/ast/ir/statement/inline_assembly.py 170 171 172 173 174 175 176 @property def suffix ( self ) -> Optional [ InlineAssemblySuffix ]: \"\"\" Returns: Suffix of the external reference, if any. \"\"\" return self . _suffix","title":"suffix()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.ExternalReference.yul_identifier","text":"Returns: Type Description Identifier Yul Identifier node representing this external reference. Source code in woke/ast/ir/statement/inline_assembly.py 156 157 158 159 160 161 162 163 @property def yul_identifier ( self ) -> Identifier : \"\"\" Returns: Yul Identifier node representing this external reference. \"\"\" assert isinstance ( self . _yul_identifier , Identifier ) return self . _yul_identifier","title":"yul_identifier()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly","text":"Bases: StatementAbc Inline assembly block in Solidity. Example function f () public pure { assembly { let x : = 1 let y : = 2 let z : = add ( x , y ) } } Source code in woke/ast/ir/statement/inline_assembly.pyclass InlineAssembly ( StatementAbc ): \"\"\" Inline assembly block in Solidity. !!! example ```solidity function f() public pure { assembly { let x := 1 let y := 2 let z := add(x, y) } } ``` \"\"\" _ast_node : SolcInlineAssembly _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _yul_block : YulBlock _evm_version : InlineAssemblyEvmVersion _external_references : IntervalTree _flags : Set [ InlineAssemblyFlag ] def __init__ ( self , init : IrInitTuple , inline_assembly : SolcInlineAssembly , parent : SolidityAbc , ): super () . __init__ ( init , inline_assembly , parent ) self . _yul_block = YulBlock ( init , inline_assembly . ast , self ) self . _evm_version = inline_assembly . evm_version self . _external_references = IntervalTree () self . _flags = set () if inline_assembly . flags is not None : for flag in inline_assembly . flags : self . _flags . add ( InlineAssemblyFlag ( flag )) for external_reference in inline_assembly . external_references : start = external_reference . src . byte_offset end = start + external_reference . src . byte_length self . _external_references [ start : end ] = ExternalReference ( init , external_reference ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _yul_block @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def yul_block ( self ) -> YulBlock : \"\"\" Returns: Yul block containing Yul IR nodes ([YulAbc][woke.ast.ir.yul.abc.YulAbc]). \"\"\" return self . _yul_block @property def evm_version ( self ) -> InlineAssemblyEvmVersion : \"\"\" Depends on the version of the `solc` compiler used to compile the contract. Returns: EVM version used for the inline assembly block. \"\"\" return self . _evm_version @property def flags ( self ) -> FrozenSet [ InlineAssemblyFlag ]: \"\"\" !!! example ```solidity function f() public pure { assembly (\"memory-safe\") { let x := 1 let y := 2 let z := add(x, y) } } ``` Returns: Flags decorating the inline assembly block. \"\"\" return frozenset ( self . _flags ) @property def external_references ( self ) -> Tuple [ ExternalReference ]: \"\"\" Returns: External references in the inline assembly block. \"\"\" return tuple ( interval . data for interval in self . _external_references ) def external_reference_at ( self , byte_offset : int ) -> Optional [ ExternalReference ]: \"\"\" Args: byte_offset: Byte offset in the source file. Returns: External reference at the given byte offset, if any. \"\"\" intervals = self . _external_references . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . yul_block . modifies_state","title":"InlineAssembly"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.evm_version","text":"Depends on the version of the solc compiler used to compile the contract. Returns: Type Description InlineAssemblyEvmVersion EVM version used for the inline assembly block. Source code in woke/ast/ir/statement/inline_assembly.py 259 260 261 262 263 264 265 266 @property def evm_version ( self ) -> InlineAssemblyEvmVersion : \"\"\" Depends on the version of the `solc` compiler used to compile the contract. Returns: EVM version used for the inline assembly block. \"\"\" return self . _evm_version","title":"evm_version()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.external_reference_at","text":"Parameters: Name Type Description Default byte_offset int Byte offset in the source file. required Returns: Type Description Optional [ ExternalReference ] External reference at the given byte offset, if any. Source code in woke/ast/ir/statement/inline_assembly.py 294 295 296 297 298 299 300 301 302 303 304 305 def external_reference_at ( self , byte_offset : int ) -> Optional [ ExternalReference ]: \"\"\" Args: byte_offset: Byte offset in the source file. Returns: External reference at the given byte offset, if any. \"\"\" intervals = self . _external_references . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data","title":"external_reference_at()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.external_references","text":"Returns: Type Description Tuple [ ExternalReference ] External references in the inline assembly block. Source code in woke/ast/ir/statement/inline_assembly.py 286 287 288 289 290 291 292 @property def external_references ( self ) -> Tuple [ ExternalReference ]: \"\"\" Returns: External references in the inline assembly block. \"\"\" return tuple ( interval . data for interval in self . _external_references )","title":"external_references()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.flags","text":"Example function f () public pure { assembly ( \"memory-safe\" ) { let x : = 1 let y : = 2 let z : = add ( x , y ) } } Returns: Type Description FrozenSet [ InlineAssemblyFlag ] Flags decorating the inline assembly block. Source code in woke/ast/ir/statement/inline_assembly.py 268 269 270 271 272 273 274 275 276 277 278 279 280 281 282 283 284 @property def flags ( self ) -> FrozenSet [ InlineAssemblyFlag ]: \"\"\" !!! example ```solidity function f() public pure { assembly (\"memory-safe\") { let x := 1 let y := 2 let z := add(x, y) } } ``` Returns: Flags decorating the inline assembly block. \"\"\" return frozenset ( self . _flags )","title":"flags()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/inline_assembly.py 234 235 236 237 238 239 240 241 242 243 244 245 246 247 248 249 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/inline-assembly/#woke.ast.ir.statement.inline_assembly.InlineAssembly.yul_block","text":"Returns: Type Description YulBlock Yul block containing Yul IR nodes ( YulAbc ). Source code in woke/ast/ir/statement/inline_assembly.py 251 252 253 254 255 256 257 @property def yul_block ( self ) -> YulBlock : \"\"\" Returns: Yul block containing Yul IR nodes ([YulAbc][woke.ast.ir.yul.abc.YulAbc]). \"\"\" return self . _yul_block","title":"yul_block()"},{"location":"api-reference/ir/statements/placeholder-statement/","text":"woke.ast.ir.statement.placeholder_statement module # PlaceholderStatement class # Bases: StatementAbc Placeholder statements represent _ (underscore) in a modifier body. Example _ in the following code: 1 2 3 4 modifier foo () { require ( msg.sender == owner , \"Not owner\" ); _ ; } Source code in woke/ast/ir/statement/placeholder_statement.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class PlaceholderStatement ( StatementAbc ): \"\"\" Placeholder statements represent `_` (underscore) in a modifier body. !!! example `:::solidity _` in the following code: ```solidity linenums=\"1\" modifier foo() { require(msg.sender == owner, \"Not owner\"); _; } ``` \"\"\" _ast_node : SolcPlaceholderStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ] def __init__ ( self , init : IrInitTuple , placeholder_statement : SolcPlaceholderStatement , parent : SolidityAbc , ): super () . __init__ ( init , placeholder_statement , parent ) @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set () parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/placeholder_statement.py 42 43 44 45 46 47 48 49 50 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Placeholder statement"},{"location":"api-reference/ir/statements/placeholder-statement/#woke.ast.ir.statement.placeholder_statement","text":"","title":"placeholder_statement"},{"location":"api-reference/ir/statements/placeholder-statement/#woke.ast.ir.statement.placeholder_statement.PlaceholderStatement","text":"Bases: StatementAbc Placeholder statements represent _ (underscore) in a modifier body. Example _ in the following code: 1 2 3 4 modifier foo () { require ( msg.sender == owner , \"Not owner\" ); _ ; } Source code in woke/ast/ir/statement/placeholder_statement.py 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 class PlaceholderStatement ( StatementAbc ): \"\"\" Placeholder statements represent `_` (underscore) in a modifier body. !!! example `:::solidity _` in the following code: ```solidity linenums=\"1\" modifier foo() { require(msg.sender == owner, \"Not owner\"); _; } ``` \"\"\" _ast_node : SolcPlaceholderStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ] def __init__ ( self , init : IrInitTuple , placeholder_statement : SolcPlaceholderStatement , parent : SolidityAbc , ): super () . __init__ ( init , placeholder_statement , parent ) @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return set ()","title":"PlaceholderStatement"},{"location":"api-reference/ir/statements/placeholder-statement/#woke.ast.ir.statement.placeholder_statement.PlaceholderStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/placeholder_statement.py 42 43 44 45 46 47 48 49 50 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/return-statement/","text":"woke.ast.ir.statement.return_statement module # Return class # Bases: StatementAbc Example return 1 in the following code: function f () public pure returns ( uint ) { return 1 ; } Source code in woke/ast/ir/statement/return_statement.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class Return ( StatementAbc ): \"\"\" !!! example `:::solidity return 1` in the following code: ```solidity function f() public pure returns(uint) { return 1; } ``` \"\"\" _ast_node : SolcReturn _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _function_return_parameters : Optional [ AstNodeId ] _expression : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , return_ : SolcReturn , parent : SolidityAbc ): super () . __init__ ( init , return_ , parent ) self . _function_return_parameters = return_ . function_return_parameters self . _expression = ( ExpressionAbc . from_ast ( init , return_ . expression , self ) if return_ . expression else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _expression is not None : yield from self . _expression @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def function_return_parameters ( self ) -> Optional [ ParameterList ]: \"\"\" !!! example Can be `None` if the function does not return anything. ```solidity function f(uint x) public { if (x > 0) { return; } doSomething(x); } ``` Returns: Parameter list describing the return parameters of the function (if any). \"\"\" from ..meta.parameter_list import ParameterList if self . _function_return_parameters is None : return None node = self . _reference_resolver . resolve_node ( self . _function_return_parameters , self . _cu_hash ) assert isinstance ( node , ParameterList ) return node @property def expression ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Returns: Expression returned by the return statement, if any. \"\"\" return self . _expression @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: if self . _expression is None : return set () return self . _expression . modifies_state expression () property # Returns: Type Description Optional [ ExpressionAbc ] Expression returned by the return statement, if any. Source code in woke/ast/ir/statement/return_statement.py 109 110 111 112 113 114 115 @property def expression ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Returns: Expression returned by the return statement, if any. \"\"\" return self . _expression function_return_parameters () property # Example Can be None if the function does not return anything. function f ( uint x ) public { if ( x > 0 ) { return ; } doSomething ( x ); } Returns: Type Description Optional [ ParameterList ] Parameter list describing the return parameters of the function (if any). Source code in woke/ast/ir/statement/return_statement.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 @property def function_return_parameters ( self ) -> Optional [ ParameterList ]: \"\"\" !!! example Can be `None` if the function does not return anything. ```solidity function f(uint x) public { if (x > 0) { return; } doSomething(x); } ``` Returns: Parameter list describing the return parameters of the function (if any). \"\"\" from ..meta.parameter_list import ParameterList if self . _function_return_parameters is None : return None node = self . _reference_resolver . resolve_node ( self . _function_return_parameters , self . _cu_hash ) assert isinstance ( node , ParameterList ) return node parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/return_statement.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Return statement"},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement","text":"","title":"return_statement"},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement.Return","text":"Bases: StatementAbc Example return 1 in the following code: function f () public pure returns ( uint ) { return 1 ; } Source code in woke/ast/ir/statement/return_statement.py 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class Return ( StatementAbc ): \"\"\" !!! example `:::solidity return 1` in the following code: ```solidity function f() public pure returns(uint) { return 1; } ``` \"\"\" _ast_node : SolcReturn _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _function_return_parameters : Optional [ AstNodeId ] _expression : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , return_ : SolcReturn , parent : SolidityAbc ): super () . __init__ ( init , return_ , parent ) self . _function_return_parameters = return_ . function_return_parameters self . _expression = ( ExpressionAbc . from_ast ( init , return_ . expression , self ) if return_ . expression else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _expression is not None : yield from self . _expression @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def function_return_parameters ( self ) -> Optional [ ParameterList ]: \"\"\" !!! example Can be `None` if the function does not return anything. ```solidity function f(uint x) public { if (x > 0) { return; } doSomething(x); } ``` Returns: Parameter list describing the return parameters of the function (if any). \"\"\" from ..meta.parameter_list import ParameterList if self . _function_return_parameters is None : return None node = self . _reference_resolver . resolve_node ( self . _function_return_parameters , self . _cu_hash ) assert isinstance ( node , ParameterList ) return node @property def expression ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Returns: Expression returned by the return statement, if any. \"\"\" return self . _expression @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: if self . _expression is None : return set () return self . _expression . modifies_state","title":"Return"},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement.Return.expression","text":"Returns: Type Description Optional [ ExpressionAbc ] Expression returned by the return statement, if any. Source code in woke/ast/ir/statement/return_statement.py 109 110 111 112 113 114 115 @property def expression ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Returns: Expression returned by the return statement, if any. \"\"\" return self . _expression","title":"expression()"},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement.Return.function_return_parameters","text":"Example Can be None if the function does not return anything. function f ( uint x ) public { if ( x > 0 ) { return ; } doSomething ( x ); } Returns: Type Description Optional [ ParameterList ] Parameter list describing the return parameters of the function (if any). Source code in woke/ast/ir/statement/return_statement.py 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 @property def function_return_parameters ( self ) -> Optional [ ParameterList ]: \"\"\" !!! example Can be `None` if the function does not return anything. ```solidity function f(uint x) public { if (x > 0) { return; } doSomething(x); } ``` Returns: Parameter list describing the return parameters of the function (if any). \"\"\" from ..meta.parameter_list import ParameterList if self . _function_return_parameters is None : return None node = self . _reference_resolver . resolve_node ( self . _function_return_parameters , self . _cu_hash ) assert isinstance ( node , ParameterList ) return node","title":"function_return_parameters()"},{"location":"api-reference/ir/statements/return-statement/#woke.ast.ir.statement.return_statement.Return.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/return_statement.py 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/revert-statement/","text":"woke.ast.ir.statement.revert_statement module # RevertStatement class # Bases: StatementAbc Warning Only matches reverts with user-defined errors: revert InsufficientBalance ( want , have ); This is an ExpressionStatement with a FunctionCall expression: revert ( \"Insufficient balance\" ); Source code in woke/ast/ir/statement/revert_statement.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class RevertStatement ( StatementAbc ): \"\"\" !!! warning Only matches reverts with user-defined errors: ```solidity revert InsufficientBalance(want, have); ``` This is an [ExpressionStatement][woke.ast.ir.statement.expression_statement.ExpressionStatement] with a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] expression: ```solidity revert(\"Insufficient balance\"); ``` \"\"\" _ast_node : SolcRevertStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _error_call : FunctionCall def __init__ ( self , init : IrInitTuple , revert : SolcRevertStatement , parent : SolidityAbc ): super () . __init__ ( init , revert , parent ) self . _error_call = FunctionCall ( init , revert . error_call , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _error_call @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def error_call ( self ) -> FunctionCall : \"\"\" !!! example ```solidity InsufficientBalance(want, have) ``` in the following revert statement: ```solidity revert InsufficientBalance(want, have) ``` Returns: Expression representing the error call. \"\"\" return self . _error_call @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . error_call . modifies_state error_call () property # Example InsufficientBalance ( want , have ) in the following revert statement: revert InsufficientBalance ( want , have ) Returns: Type Description FunctionCall Expression representing the error call. Source code in woke/ast/ir/statement/revert_statement.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 @property def error_call ( self ) -> FunctionCall : \"\"\" !!! example ```solidity InsufficientBalance(want, have) ``` in the following revert statement: ```solidity revert InsufficientBalance(want, have) ``` Returns: Expression representing the error call. \"\"\" return self . _error_call parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/revert_statement.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Revert statement"},{"location":"api-reference/ir/statements/revert-statement/#woke.ast.ir.statement.revert_statement","text":"","title":"revert_statement"},{"location":"api-reference/ir/statements/revert-statement/#woke.ast.ir.statement.revert_statement.RevertStatement","text":"Bases: StatementAbc Warning Only matches reverts with user-defined errors: revert InsufficientBalance ( want , have ); This is an ExpressionStatement with a FunctionCall expression: revert ( \"Insufficient balance\" ); Source code in woke/ast/ir/statement/revert_statement.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 class RevertStatement ( StatementAbc ): \"\"\" !!! warning Only matches reverts with user-defined errors: ```solidity revert InsufficientBalance(want, have); ``` This is an [ExpressionStatement][woke.ast.ir.statement.expression_statement.ExpressionStatement] with a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] expression: ```solidity revert(\"Insufficient balance\"); ``` \"\"\" _ast_node : SolcRevertStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _error_call : FunctionCall def __init__ ( self , init : IrInitTuple , revert : SolcRevertStatement , parent : SolidityAbc ): super () . __init__ ( init , revert , parent ) self . _error_call = FunctionCall ( init , revert . error_call , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _error_call @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def error_call ( self ) -> FunctionCall : \"\"\" !!! example ```solidity InsufficientBalance(want, have) ``` in the following revert statement: ```solidity revert InsufficientBalance(want, have) ``` Returns: Expression representing the error call. \"\"\" return self . _error_call @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . error_call . modifies_state","title":"RevertStatement"},{"location":"api-reference/ir/statements/revert-statement/#woke.ast.ir.statement.revert_statement.RevertStatement.error_call","text":"Example InsufficientBalance ( want , have ) in the following revert statement: revert InsufficientBalance ( want , have ) Returns: Type Description FunctionCall Expression representing the error call. Source code in woke/ast/ir/statement/revert_statement.py 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 @property def error_call ( self ) -> FunctionCall : \"\"\" !!! example ```solidity InsufficientBalance(want, have) ``` in the following revert statement: ```solidity revert InsufficientBalance(want, have) ``` Returns: Expression representing the error call. \"\"\" return self . _error_call","title":"error_call()"},{"location":"api-reference/ir/statements/revert-statement/#woke.ast.ir.statement.revert_statement.RevertStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/revert_statement.py 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/try-statement/","text":"woke.ast.ir.statement.try_statement module # TryStatement class # Bases: StatementAbc Example try this . f () returns ( uint256 ) { // ... } catch Error ( string memory reason ) { // ... } catch Panic ( uint errorCode ) { // ... } catch ( bytes memory lowLevelData ) { // ... } Source code in woke/ast/ir/statement/try_statement.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 class TryStatement ( StatementAbc ): \"\"\" !!! example ```solidity try this.f() returns (uint256) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` \"\"\" _ast_node : SolcTryStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _clauses : List [ TryCatchClause ] _external_call : FunctionCall def __init__ ( self , init : IrInitTuple , try_statement : SolcTryStatement , parent : SolidityAbc ): super () . __init__ ( init , try_statement , parent ) self . _clauses = [ TryCatchClause ( init , clause , self ) for clause in try_statement . clauses ] self . _external_call = FunctionCall ( init , try_statement . external_call , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for clause in self . _clauses : yield from clause yield from self . _external_call @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def clauses ( self ) -> Tuple [ TryCatchClause ]: \"\"\" Returns: Try/catch clauses. \"\"\" return tuple ( self . _clauses ) @property def external_call ( self ) -> FunctionCall : \"\"\" Returns: External call executed in the try statement. \"\"\" return self . _external_call @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return ( reduce ( or_ , ( clause . modifies_state for clause in self . _clauses ), set (), ) | self . external_call . modifies_state ) def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self for clause in self . _clauses : yield from clause . block . statements_iter () clauses () property # Returns: Type Description Tuple [ TryCatchClause ] Try/catch clauses. Source code in woke/ast/ir/statement/try_statement.py 85 86 87 88 89 90 91 @property def clauses ( self ) -> Tuple [ TryCatchClause ]: \"\"\" Returns: Try/catch clauses. \"\"\" return tuple ( self . _clauses ) external_call () property # Returns: Type Description FunctionCall External call executed in the try statement. Source code in woke/ast/ir/statement/try_statement.py 93 94 95 96 97 98 99 @property def external_call ( self ) -> FunctionCall : \"\"\" Returns: External call executed in the try statement. \"\"\" return self . _external_call parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/try_statement.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Try statement"},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement","text":"","title":"try_statement"},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement.TryStatement","text":"Bases: StatementAbc Example try this . f () returns ( uint256 ) { // ... } catch Error ( string memory reason ) { // ... } catch Panic ( uint errorCode ) { // ... } catch ( bytes memory lowLevelData ) { // ... } Source code in woke/ast/ir/statement/try_statement.py 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 class TryStatement ( StatementAbc ): \"\"\" !!! example ```solidity try this.f() returns (uint256) { // ... } catch Error(string memory reason) { // ... } catch Panic(uint errorCode) { // ... } catch (bytes memory lowLevelData) { // ... } ``` \"\"\" _ast_node : SolcTryStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _clauses : List [ TryCatchClause ] _external_call : FunctionCall def __init__ ( self , init : IrInitTuple , try_statement : SolcTryStatement , parent : SolidityAbc ): super () . __init__ ( init , try_statement , parent ) self . _clauses = [ TryCatchClause ( init , clause , self ) for clause in try_statement . clauses ] self . _external_call = FunctionCall ( init , try_statement . external_call , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for clause in self . _clauses : yield from clause yield from self . _external_call @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def clauses ( self ) -> Tuple [ TryCatchClause ]: \"\"\" Returns: Try/catch clauses. \"\"\" return tuple ( self . _clauses ) @property def external_call ( self ) -> FunctionCall : \"\"\" Returns: External call executed in the try statement. \"\"\" return self . _external_call @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return ( reduce ( or_ , ( clause . modifies_state for clause in self . _clauses ), set (), ) | self . external_call . modifies_state ) def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self for clause in self . _clauses : yield from clause . block . statements_iter ()","title":"TryStatement"},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement.TryStatement.clauses","text":"Returns: Type Description Tuple [ TryCatchClause ] Try/catch clauses. Source code in woke/ast/ir/statement/try_statement.py 85 86 87 88 89 90 91 @property def clauses ( self ) -> Tuple [ TryCatchClause ]: \"\"\" Returns: Try/catch clauses. \"\"\" return tuple ( self . _clauses )","title":"clauses()"},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement.TryStatement.external_call","text":"Returns: Type Description FunctionCall External call executed in the try statement. Source code in woke/ast/ir/statement/try_statement.py 93 94 95 96 97 98 99 @property def external_call ( self ) -> FunctionCall : \"\"\" Returns: External call executed in the try statement. \"\"\" return self . _external_call","title":"external_call()"},{"location":"api-reference/ir/statements/try-statement/#woke.ast.ir.statement.try_statement.TryStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/try_statement.py 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/unchecked-block/","text":"woke.ast.ir.statement.unchecked_block module # UncheckedBlock class # Bases: StatementAbc Example Lines 2-4 in the following code: 1 2 3 4 5 6 function inc ( uint x ) public pure returns ( uint ) { unchecked { x += 1 ; } return x ; } Source code in woke/ast/ir/statement/unchecked_block.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class UncheckedBlock ( StatementAbc ): \"\"\" !!! example Lines 2-4 in the following code: ```solidity linenums=\"1\" function inc(uint x) public pure returns(uint) { unchecked { x += 1; } return x; } ``` \"\"\" _ast_node : SolcUncheckedBlock _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ] _statements : List [ StatementAbc ] def __init__ ( self , init : IrInitTuple , unchecked_block : SolcUncheckedBlock , parent : SolidityAbc , ): super () . __init__ ( init , unchecked_block , parent ) self . _statements = [ StatementAbc . from_ast ( init , statement , self ) for statement in unchecked_block . statements ] def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for statement in self . _statements : yield from statement @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def statements ( self ) -> Tuple [ StatementAbc ]: \"\"\" Can be empty. Returns: Statements in the block. \"\"\" return tuple ( self . _statements ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return reduce ( or_ , ( statement . modifies_state for statement in self . _statements ), set (), ) def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self for statement in self . _statements : yield from statement . statements_iter () parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/unchecked_block.py 57 58 59 60 61 62 63 64 65 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent statements () property # Can be empty. Returns: Type Description Tuple [ StatementAbc ] Statements in the block. Source code in woke/ast/ir/statement/unchecked_block.py 67 68 69 70 71 72 73 74 @property def statements ( self ) -> Tuple [ StatementAbc ]: \"\"\" Can be empty. Returns: Statements in the block. \"\"\" return tuple ( self . _statements )","title":"Unchecked block"},{"location":"api-reference/ir/statements/unchecked-block/#woke.ast.ir.statement.unchecked_block","text":"","title":"unchecked_block"},{"location":"api-reference/ir/statements/unchecked-block/#woke.ast.ir.statement.unchecked_block.UncheckedBlock","text":"Bases: StatementAbc Example Lines 2-4 in the following code: 1 2 3 4 5 6 function inc ( uint x ) public pure returns ( uint ) { unchecked { x += 1 ; } return x ; } Source code in woke/ast/ir/statement/unchecked_block.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 class UncheckedBlock ( StatementAbc ): \"\"\" !!! example Lines 2-4 in the following code: ```solidity linenums=\"1\" function inc(uint x) public pure returns(uint) { unchecked { x += 1; } return x; } ``` \"\"\" _ast_node : SolcUncheckedBlock _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ] _statements : List [ StatementAbc ] def __init__ ( self , init : IrInitTuple , unchecked_block : SolcUncheckedBlock , parent : SolidityAbc , ): super () . __init__ ( init , unchecked_block , parent ) self . _statements = [ StatementAbc . from_ast ( init , statement , self ) for statement in unchecked_block . statements ] def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for statement in self . _statements : yield from statement @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def statements ( self ) -> Tuple [ StatementAbc ]: \"\"\" Can be empty. Returns: Statements in the block. \"\"\" return tuple ( self . _statements ) @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return reduce ( or_ , ( statement . modifies_state for statement in self . _statements ), set (), ) def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self for statement in self . _statements : yield from statement . statements_iter ()","title":"UncheckedBlock"},{"location":"api-reference/ir/statements/unchecked-block/#woke.ast.ir.statement.unchecked_block.UncheckedBlock.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/unchecked_block.py 57 58 59 60 61 62 63 64 65 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , WhileStatement ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/unchecked-block/#woke.ast.ir.statement.unchecked_block.UncheckedBlock.statements","text":"Can be empty. Returns: Type Description Tuple [ StatementAbc ] Statements in the block. Source code in woke/ast/ir/statement/unchecked_block.py 67 68 69 70 71 72 73 74 @property def statements ( self ) -> Tuple [ StatementAbc ]: \"\"\" Can be empty. Returns: Statements in the block. \"\"\" return tuple ( self . _statements )","title":"statements()"},{"location":"api-reference/ir/statements/variable-declaration-statement/","text":"woke.ast.ir.statement.variable_declaration_statement module # VariableDeclarationStatement class # Bases: StatementAbc Example ( uint a , uint b ) = ( 1 , 2 ) in the following code: contract C { function f () public { ( uint a , uint b ) = ( 1 , 2 ); } } Source code in woke/ast/ir/statement/variable_declaration_statement.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 class VariableDeclarationStatement ( StatementAbc ): \"\"\" !!! example `:::solidity (uint a, uint b) = (1, 2)` in the following code: ```solidity contract C { function f() public { (uint a, uint b) = (1, 2); } } ``` \"\"\" _ast_node : SolcVariableDeclarationStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _assignments : List [ Optional [ AstNodeId ]] _declarations : List [ Optional [ VariableDeclaration ]] _initial_value : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , variable_declaration_statement : SolcVariableDeclarationStatement , parent : SolidityAbc , ): super () . __init__ ( init , variable_declaration_statement , parent ) self . _assignments = list ( variable_declaration_statement . assignments ) self . _declarations = [] for declaration in variable_declaration_statement . declarations : if declaration is None : self . _declarations . append ( None ) else : self . _declarations . append ( VariableDeclaration ( init , declaration , self )) if variable_declaration_statement . initial_value is None : self . _initial_value = None else : self . _initial_value = ExpressionAbc . from_ast ( init , variable_declaration_statement . initial_value , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for declaration in self . _declarations : if declaration is not None : yield from declaration if self . _initial_value is not None : yield from self . _initial_value @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def declarations ( self ) -> Tuple [ Optional [ VariableDeclaration ]]: \"\"\" !!! example Some declarations may be `None`, e.g. in the following code: ```solidity (bool success, ) = address(this).call{value: 1}(\"\"); ``` Returns: Tuple of variable declarations in this statement. \"\"\" return tuple ( self . _declarations ) @property def initial_value ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Does not need to be a [TupleExpression][woke.ast.ir.expression.tuple_expression.TupleExpression] when there is more than one variable declared. Can also be a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] returning a tuple. Returns: Initial value assigned to the declared variables (if any). \"\"\" return self . _initial_value @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = set () if self . initial_value is not None : ret |= self . initial_value . modifies_state if any ( declaration . is_state_variable for declaration in self . declarations if declaration is not None ): ret |= {( self , ModifiesStateFlag . MODIFIES_STATE_VAR )} return ret declarations () property # Example Some declarations may be None , e.g. in the following code: ( bool success , ) = address ( this ). call { value : 1 }( \"\" ); Returns: Type Description Tuple [ Optional [ VariableDeclaration ]] Tuple of variable declarations in this statement. Source code in woke/ast/ir/statement/variable_declaration_statement.py 98 99 100 101 102 103 104 105 106 107 108 109 110 @property def declarations ( self ) -> Tuple [ Optional [ VariableDeclaration ]]: \"\"\" !!! example Some declarations may be `None`, e.g. in the following code: ```solidity (bool success, ) = address(this).call{value: 1}(\"\"); ``` Returns: Tuple of variable declarations in this statement. \"\"\" return tuple ( self . _declarations ) initial_value () property # Does not need to be a TupleExpression when there is more than one variable declared. Can also be a FunctionCall returning a tuple. Returns: Type Description Optional [ ExpressionAbc ] Initial value assigned to the declared variables (if any). Source code in woke/ast/ir/statement/variable_declaration_statement.py 112 113 114 115 116 117 118 119 120 @property def initial_value ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Does not need to be a [TupleExpression][woke.ast.ir.expression.tuple_expression.TupleExpression] when there is more than one variable declared. Can also be a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] returning a tuple. Returns: Initial value assigned to the declared variables (if any). \"\"\" return self . _initial_value parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/variable_declaration_statement.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"Variable declaration statement"},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement","text":"","title":"variable_declaration_statement"},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement","text":"Bases: StatementAbc Example ( uint a , uint b ) = ( 1 , 2 ) in the following code: contract C { function f () public { ( uint a , uint b ) = ( 1 , 2 ); } } Source code in woke/ast/ir/statement/variable_declaration_statement.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 class VariableDeclarationStatement ( StatementAbc ): \"\"\" !!! example `:::solidity (uint a, uint b) = (1, 2)` in the following code: ```solidity contract C { function f() public { (uint a, uint b) = (1, 2); } } ``` \"\"\" _ast_node : SolcVariableDeclarationStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _assignments : List [ Optional [ AstNodeId ]] _declarations : List [ Optional [ VariableDeclaration ]] _initial_value : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , variable_declaration_statement : SolcVariableDeclarationStatement , parent : SolidityAbc , ): super () . __init__ ( init , variable_declaration_statement , parent ) self . _assignments = list ( variable_declaration_statement . assignments ) self . _declarations = [] for declaration in variable_declaration_statement . declarations : if declaration is None : self . _declarations . append ( None ) else : self . _declarations . append ( VariableDeclaration ( init , declaration , self )) if variable_declaration_statement . initial_value is None : self . _initial_value = None else : self . _initial_value = ExpressionAbc . from_ast ( init , variable_declaration_statement . initial_value , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self for declaration in self . _declarations : if declaration is not None : yield from declaration if self . _initial_value is not None : yield from self . _initial_value @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def declarations ( self ) -> Tuple [ Optional [ VariableDeclaration ]]: \"\"\" !!! example Some declarations may be `None`, e.g. in the following code: ```solidity (bool success, ) = address(this).call{value: 1}(\"\"); ``` Returns: Tuple of variable declarations in this statement. \"\"\" return tuple ( self . _declarations ) @property def initial_value ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Does not need to be a [TupleExpression][woke.ast.ir.expression.tuple_expression.TupleExpression] when there is more than one variable declared. Can also be a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] returning a tuple. Returns: Initial value assigned to the declared variables (if any). \"\"\" return self . _initial_value @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: ret = set () if self . initial_value is not None : ret |= self . initial_value . modifies_state if any ( declaration . is_state_variable for declaration in self . declarations if declaration is not None ): ret |= {( self , ModifiesStateFlag . MODIFIES_STATE_VAR )} return ret","title":"VariableDeclarationStatement"},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.declarations","text":"Example Some declarations may be None , e.g. in the following code: ( bool success , ) = address ( this ). call { value : 1 }( \"\" ); Returns: Type Description Tuple [ Optional [ VariableDeclaration ]] Tuple of variable declarations in this statement. Source code in woke/ast/ir/statement/variable_declaration_statement.py 98 99 100 101 102 103 104 105 106 107 108 109 110 @property def declarations ( self ) -> Tuple [ Optional [ VariableDeclaration ]]: \"\"\" !!! example Some declarations may be `None`, e.g. in the following code: ```solidity (bool success, ) = address(this).call{value: 1}(\"\"); ``` Returns: Tuple of variable declarations in this statement. \"\"\" return tuple ( self . _declarations )","title":"declarations()"},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.initial_value","text":"Does not need to be a TupleExpression when there is more than one variable declared. Can also be a FunctionCall returning a tuple. Returns: Type Description Optional [ ExpressionAbc ] Initial value assigned to the declared variables (if any). Source code in woke/ast/ir/statement/variable_declaration_statement.py 112 113 114 115 116 117 118 119 120 @property def initial_value ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Does not need to be a [TupleExpression][woke.ast.ir.expression.tuple_expression.TupleExpression] when there is more than one variable declared. Can also be a [FunctionCall][woke.ast.ir.expression.function_call.FunctionCall] returning a tuple. Returns: Initial value assigned to the declared variables (if any). \"\"\" return self . _initial_value","title":"initial_value()"},{"location":"api-reference/ir/statements/variable-declaration-statement/#woke.ast.ir.statement.variable_declaration_statement.VariableDeclarationStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/variable_declaration_statement.py 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/statements/while-statement/","text":"woke.ast.ir.statement.while_statement module # WhileStatement class # Bases: StatementAbc Example Lines 2-3 in the following code: 1 2 3 4 function foo ( uint x ) public pure { while ( x % 2 == 0 ) x /= 2 ; } Source code in woke/ast/ir/statement/while_statement.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class WhileStatement ( StatementAbc ): \"\"\" !!! example Lines 2-3 in the following code: ```solidity linenums=\"1\" function foo(uint x) public pure { while (x % 2 == 0) x /= 2; } ``` \"\"\" _ast_node : SolcWhileStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _body : StatementAbc _condition : ExpressionAbc def __init__ ( self , init : IrInitTuple , while_statement : SolcWhileStatement , parent : SolidityAbc , ): super () . __init__ ( init , while_statement , parent ) self . _body = StatementAbc . from_ast ( init , while_statement . body , self ) self . _condition = ExpressionAbc . from_ast ( init , while_statement . condition , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _body yield from self . _condition @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the while statement. \"\"\" return self . _body @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the while statement. \"\"\" return self . _condition @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . body . modifies_state | self . condition . modifies_state def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self yield from self . _body . statements_iter () body () property # Returns: Type Description StatementAbc Body of the while statement. Source code in woke/ast/ir/statement/while_statement.py 78 79 80 81 82 83 84 @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the while statement. \"\"\" return self . _body condition () property # Returns: Type Description ExpressionAbc Condition of the while statement. Source code in woke/ast/ir/statement/while_statement.py 86 87 88 89 90 91 92 @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the while statement. \"\"\" return self . _condition parent () property # Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/while_statement.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"While statement"},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement","text":"","title":"while_statement"},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement.WhileStatement","text":"Bases: StatementAbc Example Lines 2-3 in the following code: 1 2 3 4 function foo ( uint x ) public pure { while ( x % 2 == 0 ) x /= 2 ; } Source code in woke/ast/ir/statement/while_statement.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 class WhileStatement ( StatementAbc ): \"\"\" !!! example Lines 2-3 in the following code: ```solidity linenums=\"1\" function foo(uint x) public pure { while (x % 2 == 0) x /= 2; } ``` \"\"\" _ast_node : SolcWhileStatement _parent : Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ] _body : StatementAbc _condition : ExpressionAbc def __init__ ( self , init : IrInitTuple , while_statement : SolcWhileStatement , parent : SolidityAbc , ): super () . __init__ ( init , while_statement , parent ) self . _body = StatementAbc . from_ast ( init , while_statement . body , self ) self . _condition = ExpressionAbc . from_ast ( init , while_statement . condition , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _body yield from self . _condition @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the while statement. \"\"\" return self . _body @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the while statement. \"\"\" return self . _condition @property @lru_cache ( maxsize = 2048 ) def modifies_state ( self ) -> Set [ Tuple [ IrAbc , ModifiesStateFlag ]]: return self . body . modifies_state | self . condition . modifies_state def statements_iter ( self ) -> Iterator [ \"StatementAbc\" ]: yield self yield from self . _body . statements_iter ()","title":"WhileStatement"},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement.WhileStatement.body","text":"Returns: Type Description StatementAbc Body of the while statement. Source code in woke/ast/ir/statement/while_statement.py 78 79 80 81 82 83 84 @property def body ( self ) -> StatementAbc : \"\"\" Returns: Body of the while statement. \"\"\" return self . _body","title":"body()"},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement.WhileStatement.condition","text":"Returns: Type Description ExpressionAbc Condition of the while statement. Source code in woke/ast/ir/statement/while_statement.py 86 87 88 89 90 91 92 @property def condition ( self ) -> ExpressionAbc : \"\"\" Returns: Condition of the while statement. \"\"\" return self . _condition","title":"condition()"},{"location":"api-reference/ir/statements/while-statement/#woke.ast.ir.statement.while_statement.WhileStatement.parent","text":"Returns: Type Description Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement ] Parent IR node. Source code in woke/ast/ir/statement/while_statement.py 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 @property def parent ( self , ) -> Union [ Block , DoWhileStatement , ForStatement , IfStatement , UncheckedBlock , WhileStatement , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/type-names/array-type-name/","text":"woke.ast.ir.type_name.array_type_name module # ArrayTypeName class # Bases: TypeNameAbc Array type name. Example An array type name can be used: inside a VariableDeclaration : bool [] in line 1, int [ 10 ][ 20 ] in line 11, string [ 10 ] in line 12, address [] in line 16, inside a NewExpression : address [] in line 16, inside a UsingForDirective : bool [] in line 8, inside an ArrayTypeName : int [ 10 ] in line 11, inside a Mapping : C [] in line 13. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function or ( bool [] memory arr ) pure returns ( bool ) { for ( uint i = 0 ; i < arr . length ; i ++ ) if ( arr [ i ]) return true ; return false ; } using { or } for bool []; contract C { int [ 10 ][ 20 ] arr ; string [ 10 ] names ; mapping ( address => C []) map ; function foo () public pure { address [] memory addresses = new address []( 5 ); } } Source code in woke/ast/ir/type_name/array_type_name.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class ArrayTypeName ( TypeNameAbc ): \"\"\" Array type name. !!! example An array type name can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - `:::solidity bool[]` in line 1, - `:::solidity int[10][20]` in line 11, - `:::solidity string[10]` in line 12, - `:::solidity address[]` in line 16, - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]: - `:::solidity address[]` in line 16, - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]: - `:::solidity bool[]` in line 8, - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]: - `:::solidity int[10]` in line 11, - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]: - `:::solidity C[]` in line 13. ```solidity linenums=\"1\" function or(bool[] memory arr) pure returns(bool) { for (uint i = 0; i < arr.length; i++) if (arr[i]) return true; return false; } using {or} for bool[]; contract C { int[10][20] arr; string[10] names; mapping(address => C[]) map; function foo() public pure { address[] memory addresses = new address[](5); } } ``` \"\"\" _ast_node : SolcArrayTypeName _parent : Union [ VariableDeclaration , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] _base_type : TypeNameAbc _length : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , array_type_name : SolcArrayTypeName , parent : SolidityAbc ): super () . __init__ ( init , array_type_name , parent ) self . _base_type = TypeNameAbc . from_ast ( init , array_type_name . base_type , self ) self . _length = ( ExpressionAbc . from_ast ( init , array_type_name . length , self ) if array_type_name . length else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _base_type if self . _length is not None : yield from self . _length @property def parent ( self ) -> Union [ VariableDeclaration , NewExpression , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> Array : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , Array ) return t @property def base_type ( self ) -> TypeNameAbc : \"\"\" !!! example `uint8[2]` has `uint8` ([ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName]) as a base type. `uint8[2][3]` has `uint8[2]` ([ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]) as a base type. Returns: Type name IR node describing the base type. \"\"\" return self . _base_type @property def length ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Returns an expression as present in the source code. Returns: Expression defining the length of the array. \"\"\" return self . _length base_type () property # Example uint8[2] has uint8 ( ElementaryTypeName ) as a base type. uint8[2][3] has uint8[2] ( ArrayTypeName ) as a base type. Returns: Type Description TypeNameAbc Type name IR node describing the base type. Source code in woke/ast/ir/type_name/array_type_name.py 103 104 105 106 107 108 109 110 111 112 113 @property def base_type ( self ) -> TypeNameAbc : \"\"\" !!! example `uint8[2]` has `uint8` ([ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName]) as a base type. `uint8[2][3]` has `uint8[2]` ([ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]) as a base type. Returns: Type name IR node describing the base type. \"\"\" return self . _base_type length () property # Returns an expression as present in the source code. Returns: Type Description Optional [ ExpressionAbc ] Expression defining the length of the array. Source code in woke/ast/ir/type_name/array_type_name.py 115 116 117 118 119 120 121 122 @property def length ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Returns an expression as present in the source code. Returns: Expression defining the length of the array. \"\"\" return self . _length parent () property # Returns: Type Description Union [ VariableDeclaration , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/array_type_name.py 85 86 87 88 89 90 91 @property def parent ( self ) -> Union [ VariableDeclaration , NewExpression , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent type () property # Returns: Type Description Array Type description. Source code in woke/ast/ir/type_name/array_type_name.py 93 94 95 96 97 98 99 100 101 @property def type ( self ) -> Array : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , Array ) return t","title":"Array type name"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name","text":"","title":"array_type_name"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName","text":"Bases: TypeNameAbc Array type name. Example An array type name can be used: inside a VariableDeclaration : bool [] in line 1, int [ 10 ][ 20 ] in line 11, string [ 10 ] in line 12, address [] in line 16, inside a NewExpression : address [] in line 16, inside a UsingForDirective : bool [] in line 8, inside an ArrayTypeName : int [ 10 ] in line 11, inside a Mapping : C [] in line 13. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 function or ( bool [] memory arr ) pure returns ( bool ) { for ( uint i = 0 ; i < arr . length ; i ++ ) if ( arr [ i ]) return true ; return false ; } using { or } for bool []; contract C { int [ 10 ][ 20 ] arr ; string [ 10 ] names ; mapping ( address => C []) map ; function foo () public pure { address [] memory addresses = new address []( 5 ); } } Source code in woke/ast/ir/type_name/array_type_name.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 class ArrayTypeName ( TypeNameAbc ): \"\"\" Array type name. !!! example An array type name can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - `:::solidity bool[]` in line 1, - `:::solidity int[10][20]` in line 11, - `:::solidity string[10]` in line 12, - `:::solidity address[]` in line 16, - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]: - `:::solidity address[]` in line 16, - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]: - `:::solidity bool[]` in line 8, - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]: - `:::solidity int[10]` in line 11, - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]: - `:::solidity C[]` in line 13. ```solidity linenums=\"1\" function or(bool[] memory arr) pure returns(bool) { for (uint i = 0; i < arr.length; i++) if (arr[i]) return true; return false; } using {or} for bool[]; contract C { int[10][20] arr; string[10] names; mapping(address => C[]) map; function foo() public pure { address[] memory addresses = new address[](5); } } ``` \"\"\" _ast_node : SolcArrayTypeName _parent : Union [ VariableDeclaration , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] _base_type : TypeNameAbc _length : Optional [ ExpressionAbc ] def __init__ ( self , init : IrInitTuple , array_type_name : SolcArrayTypeName , parent : SolidityAbc ): super () . __init__ ( init , array_type_name , parent ) self . _base_type = TypeNameAbc . from_ast ( init , array_type_name . base_type , self ) self . _length = ( ExpressionAbc . from_ast ( init , array_type_name . length , self ) if array_type_name . length else None ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _base_type if self . _length is not None : yield from self . _length @property def parent ( self ) -> Union [ VariableDeclaration , NewExpression , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> Array : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , Array ) return t @property def base_type ( self ) -> TypeNameAbc : \"\"\" !!! example `uint8[2]` has `uint8` ([ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName]) as a base type. `uint8[2][3]` has `uint8[2]` ([ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]) as a base type. Returns: Type name IR node describing the base type. \"\"\" return self . _base_type @property def length ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Returns an expression as present in the source code. Returns: Expression defining the length of the array. \"\"\" return self . _length","title":"ArrayTypeName"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName.base_type","text":"Example uint8[2] has uint8 ( ElementaryTypeName ) as a base type. uint8[2][3] has uint8[2] ( ArrayTypeName ) as a base type. Returns: Type Description TypeNameAbc Type name IR node describing the base type. Source code in woke/ast/ir/type_name/array_type_name.py 103 104 105 106 107 108 109 110 111 112 113 @property def base_type ( self ) -> TypeNameAbc : \"\"\" !!! example `uint8[2]` has `uint8` ([ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName]) as a base type. `uint8[2][3]` has `uint8[2]` ([ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]) as a base type. Returns: Type name IR node describing the base type. \"\"\" return self . _base_type","title":"base_type()"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName.length","text":"Returns an expression as present in the source code. Returns: Type Description Optional [ ExpressionAbc ] Expression defining the length of the array. Source code in woke/ast/ir/type_name/array_type_name.py 115 116 117 118 119 120 121 122 @property def length ( self ) -> Optional [ ExpressionAbc ]: \"\"\" Returns an expression as present in the source code. Returns: Expression defining the length of the array. \"\"\" return self . _length","title":"length()"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName.parent","text":"Returns: Type Description Union [ VariableDeclaration , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/array_type_name.py 85 86 87 88 89 90 91 @property def parent ( self ) -> Union [ VariableDeclaration , NewExpression , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/type-names/array-type-name/#woke.ast.ir.type_name.array_type_name.ArrayTypeName.type","text":"Returns: Type Description Array Type description. Source code in woke/ast/ir/type_name/array_type_name.py 93 94 95 96 97 98 99 100 101 @property def type ( self ) -> Array : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , Array ) return t","title":"type()"},{"location":"api-reference/ir/type-names/elementary-type-name/","text":"woke.ast.ir.type_name.elementary_type_name module # ElementaryTypeName class # Bases: TypeNameAbc Elementary type name. Example An elementary type name can be used: inside a VariableDeclaration : both occurrences of uint in line 1, int in line 1, string in line 10, the first occurrence of bytes in line 15, inside a UserDefinedValueTypeDefinition : int in line 7, inside an ElementaryTypeNameExpression : int in line 2, inside a NewExpression : the second occurrence of bytes in line 15, inside a UsingForDirective : uint in line 5, inside an ArrayTypeName : uint in line 11, inside a Mapping : address in line 12. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function add ( uint a , uint b ) pure returns ( int ) { return int ( a + b ); } using { add } for uint ; type MyInt is int ; contract C { string public str ; uint [ 10 ] arr ; mapping ( address => MyInt ) map ; function foo () public pure { bytes memory b = new bytes ( 10 ); } } Source code in woke/ast/ir/type_name/elementary_type_name.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class ElementaryTypeName ( TypeNameAbc ): \"\"\" Elementary type name. !!! example An elementary type name can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - both occurrences of `:::solidity uint` in line 1, - `:::solidity int` in line 1, - `:::solidity string` in line 10, - the first occurrence of `:::solidity bytes` in line 15, - inside a [UserDefinedValueTypeDefinition][woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition]: - `:::solidity int` in line 7, - inside an [ElementaryTypeNameExpression][woke.ast.ir.expression.elementary_type_name_expression.ElementaryTypeNameExpression]: - `:::solidity int` in line 2, - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]: - the second occurrence of `:::solidity bytes` in line 15, - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]: - `:::solidity uint` in line 5, - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]: - `:::solidity uint` in line 11, - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]: - `:::solidity address` in line 12. ```solidity linenums=\"1\" function add(uint a, uint b) pure returns(int) { return int(a + b); } using {add} for uint; type MyInt is int; contract C { string public str; uint[10] arr; mapping(address => MyInt) map; function foo() public pure { bytes memory b = new bytes(10); } } ``` \"\"\" _ast_node : SolcElementaryTypeName _parent : Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] _name : str _state_mutability : Optional [ StateMutability ] def __init__ ( self , init : IrInitTuple , elementary_type_name : SolcElementaryTypeName , parent : SolidityAbc , ): super () . __init__ ( init , elementary_type_name , parent ) self . _name = elementary_type_name . name self . _state_mutability = elementary_type_name . state_mutability from woke.ast.ir.expression.elementary_type_name_expression import ( ElementaryTypeNameExpression , ) # fix missing type descriptions in AST if self . _type_descriptions . type_identifier is None and isinstance ( parent , ElementaryTypeNameExpression ): self . _type_descriptions = parent . _type_descriptions @property def parent ( self ) -> Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" When the parent is a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression], this can only be `bytes` or `string`. Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> Union [ Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type ]: \"\"\" Returns either the generic [Type][woke.ast.types.Type] expression type (this is the case of a type conversion, for example `:::solidity address(0)`) or directly one of the elementary expression types. Returns: Type description. \"\"\" t = super () . type if not isinstance ( t , ( Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type )): raise TypeError ( f \"Unexpected type { t } { self . source } \" ) assert isinstance ( t , ( Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type )) return t @property def name ( self ) -> str : \"\"\" !!! example For example `uint256`, `bool`, `string`, `bytes1` or `address`. !!! tip Instead of working with the name, it may be better to use the [type][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.type] property. Returns: Name of the elementary type. \"\"\" return self . _name @property def state_mutability ( self ) -> Optional [ StateMutability ]: \"\"\" Is only set for `address` as either [StateMutability.PAYABLE][woke.ast.enums.StateMutability.PAYABLE] or [StateMutability.NONPAYABLE][woke.ast.enums.StateMutability.NONPAYABLE]. Returns: State mutability of the `address` type. \"\"\" return self . _state_mutability name () property # Example For example uint256 , bool , string , bytes1 or address . Tip Instead of working with the name, it may be better to use the type property. Returns: Type Description str Name of the elementary type. Source code in woke/ast/ir/type_name/elementary_type_name.py 116 117 118 119 120 121 122 123 124 125 126 127 @property def name ( self ) -> str : \"\"\" !!! example For example `uint256`, `bool`, `string`, `bytes1` or `address`. !!! tip Instead of working with the name, it may be better to use the [type][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.type] property. Returns: Name of the elementary type. \"\"\" return self . _name parent () property # When the parent is a NewExpression , this can only be bytes or string . Returns: Type Description Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/elementary_type_name.py 94 95 96 97 98 99 100 101 @property def parent ( self ) -> Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" When the parent is a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression], this can only be `bytes` or `string`. Returns: Parent IR node. \"\"\" return self . _parent state_mutability () property # Is only set for address as either StateMutability.PAYABLE or StateMutability.NONPAYABLE . Returns: Type Description Optional [ StateMutability ] State mutability of the address type. Source code in woke/ast/ir/type_name/elementary_type_name.py 129 130 131 132 133 134 135 136 @property def state_mutability ( self ) -> Optional [ StateMutability ]: \"\"\" Is only set for `address` as either [StateMutability.PAYABLE][woke.ast.enums.StateMutability.PAYABLE] or [StateMutability.NONPAYABLE][woke.ast.enums.StateMutability.NONPAYABLE]. Returns: State mutability of the `address` type. \"\"\" return self . _state_mutability type () property # Returns either the generic Type expression type (this is the case of a type conversion, for example address ( 0 ) ) or directly one of the elementary expression types. Returns: Type Description Union [ Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type ] Type description. Source code in woke/ast/ir/type_name/elementary_type_name.py 103 104 105 106 107 108 109 110 111 112 113 114 @property def type ( self ) -> Union [ Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type ]: \"\"\" Returns either the generic [Type][woke.ast.types.Type] expression type (this is the case of a type conversion, for example `:::solidity address(0)`) or directly one of the elementary expression types. Returns: Type description. \"\"\" t = super () . type if not isinstance ( t , ( Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type )): raise TypeError ( f \"Unexpected type { t } { self . source } \" ) assert isinstance ( t , ( Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type )) return t","title":"Elementary type name"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name","text":"","title":"elementary_type_name"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName","text":"Bases: TypeNameAbc Elementary type name. Example An elementary type name can be used: inside a VariableDeclaration : both occurrences of uint in line 1, int in line 1, string in line 10, the first occurrence of bytes in line 15, inside a UserDefinedValueTypeDefinition : int in line 7, inside an ElementaryTypeNameExpression : int in line 2, inside a NewExpression : the second occurrence of bytes in line 15, inside a UsingForDirective : uint in line 5, inside an ArrayTypeName : uint in line 11, inside a Mapping : address in line 12. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function add ( uint a , uint b ) pure returns ( int ) { return int ( a + b ); } using { add } for uint ; type MyInt is int ; contract C { string public str ; uint [ 10 ] arr ; mapping ( address => MyInt ) map ; function foo () public pure { bytes memory b = new bytes ( 10 ); } } Source code in woke/ast/ir/type_name/elementary_type_name.py 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 131 132 133 134 135 136 class ElementaryTypeName ( TypeNameAbc ): \"\"\" Elementary type name. !!! example An elementary type name can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - both occurrences of `:::solidity uint` in line 1, - `:::solidity int` in line 1, - `:::solidity string` in line 10, - the first occurrence of `:::solidity bytes` in line 15, - inside a [UserDefinedValueTypeDefinition][woke.ast.ir.declaration.user_defined_value_type_definition.UserDefinedValueTypeDefinition]: - `:::solidity int` in line 7, - inside an [ElementaryTypeNameExpression][woke.ast.ir.expression.elementary_type_name_expression.ElementaryTypeNameExpression]: - `:::solidity int` in line 2, - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]: - the second occurrence of `:::solidity bytes` in line 15, - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]: - `:::solidity uint` in line 5, - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]: - `:::solidity uint` in line 11, - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]: - `:::solidity address` in line 12. ```solidity linenums=\"1\" function add(uint a, uint b) pure returns(int) { return int(a + b); } using {add} for uint; type MyInt is int; contract C { string public str; uint[10] arr; mapping(address => MyInt) map; function foo() public pure { bytes memory b = new bytes(10); } } ``` \"\"\" _ast_node : SolcElementaryTypeName _parent : Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] _name : str _state_mutability : Optional [ StateMutability ] def __init__ ( self , init : IrInitTuple , elementary_type_name : SolcElementaryTypeName , parent : SolidityAbc , ): super () . __init__ ( init , elementary_type_name , parent ) self . _name = elementary_type_name . name self . _state_mutability = elementary_type_name . state_mutability from woke.ast.ir.expression.elementary_type_name_expression import ( ElementaryTypeNameExpression , ) # fix missing type descriptions in AST if self . _type_descriptions . type_identifier is None and isinstance ( parent , ElementaryTypeNameExpression ): self . _type_descriptions = parent . _type_descriptions @property def parent ( self ) -> Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" When the parent is a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression], this can only be `bytes` or `string`. Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> Union [ Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type ]: \"\"\" Returns either the generic [Type][woke.ast.types.Type] expression type (this is the case of a type conversion, for example `:::solidity address(0)`) or directly one of the elementary expression types. Returns: Type description. \"\"\" t = super () . type if not isinstance ( t , ( Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type )): raise TypeError ( f \"Unexpected type { t } { self . source } \" ) assert isinstance ( t , ( Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type )) return t @property def name ( self ) -> str : \"\"\" !!! example For example `uint256`, `bool`, `string`, `bytes1` or `address`. !!! tip Instead of working with the name, it may be better to use the [type][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.type] property. Returns: Name of the elementary type. \"\"\" return self . _name @property def state_mutability ( self ) -> Optional [ StateMutability ]: \"\"\" Is only set for `address` as either [StateMutability.PAYABLE][woke.ast.enums.StateMutability.PAYABLE] or [StateMutability.NONPAYABLE][woke.ast.enums.StateMutability.NONPAYABLE]. Returns: State mutability of the `address` type. \"\"\" return self . _state_mutability","title":"ElementaryTypeName"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.name","text":"Example For example uint256 , bool , string , bytes1 or address . Tip Instead of working with the name, it may be better to use the type property. Returns: Type Description str Name of the elementary type. Source code in woke/ast/ir/type_name/elementary_type_name.py 116 117 118 119 120 121 122 123 124 125 126 127 @property def name ( self ) -> str : \"\"\" !!! example For example `uint256`, `bool`, `string`, `bytes1` or `address`. !!! tip Instead of working with the name, it may be better to use the [type][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.type] property. Returns: Name of the elementary type. \"\"\" return self . _name","title":"name()"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.parent","text":"When the parent is a NewExpression , this can only be bytes or string . Returns: Type Description Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/elementary_type_name.py 94 95 96 97 98 99 100 101 @property def parent ( self ) -> Union [ VariableDeclaration , UserDefinedValueTypeDefinition , ElementaryTypeNameExpression , NewExpression , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" When the parent is a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression], this can only be `bytes` or `string`. Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.state_mutability","text":"Is only set for address as either StateMutability.PAYABLE or StateMutability.NONPAYABLE . Returns: Type Description Optional [ StateMutability ] State mutability of the address type. Source code in woke/ast/ir/type_name/elementary_type_name.py 129 130 131 132 133 134 135 136 @property def state_mutability ( self ) -> Optional [ StateMutability ]: \"\"\" Is only set for `address` as either [StateMutability.PAYABLE][woke.ast.enums.StateMutability.PAYABLE] or [StateMutability.NONPAYABLE][woke.ast.enums.StateMutability.NONPAYABLE]. Returns: State mutability of the `address` type. \"\"\" return self . _state_mutability","title":"state_mutability()"},{"location":"api-reference/ir/type-names/elementary-type-name/#woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName.type","text":"Returns either the generic Type expression type (this is the case of a type conversion, for example address ( 0 ) ) or directly one of the elementary expression types. Returns: Type Description Union [ Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type ] Type description. Source code in woke/ast/ir/type_name/elementary_type_name.py 103 104 105 106 107 108 109 110 111 112 113 114 @property def type ( self ) -> Union [ Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type ]: \"\"\" Returns either the generic [Type][woke.ast.types.Type] expression type (this is the case of a type conversion, for example `:::solidity address(0)`) or directly one of the elementary expression types. Returns: Type description. \"\"\" t = super () . type if not isinstance ( t , ( Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type )): raise TypeError ( f \"Unexpected type { t } { self . source } \" ) assert isinstance ( t , ( Address , Bool , Int , UInt , Fixed , UFixed , String , Bytes , FixedBytes , Type )) return t","title":"type()"},{"location":"api-reference/ir/type-names/function-type-name/","text":"woke.ast.ir.type_name.function_type_name module # FunctionTypeName class # Bases: TypeNameAbc Function type name. Example A function type name ( function ( uint ) returns ( uint ) ) can be used: inside a VariableDeclaration (lines 1 and 8), inside a UsingForDirective (line 5), inside a ArrayTypeName (line 9), inside a Mapping (line 11). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function test ( function ( uint ) returns ( uint ) f ) { f ( 10 ); } using { test } for function ( uint ) returns ( uint ); contract X { function ( uint ) returns ( uint ) x ; function ( uint ) returns ( uint )[] y ; mapping ( uint => function ( uint ) returns ( uint )) map ; function foo ( uint a ) public returns ( uint ){ x = foo ; y . push ( foo ); } } Source code in woke/ast/ir/type_name/function_type_name.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 class FunctionTypeName ( TypeNameAbc ): \"\"\" Function type name. !!! example A function type name (`:::solidity function (uint) returns(uint)`) can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] (lines 1 and 8), - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective] (line 5), - inside a [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName] (line 9), - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping] (line 11). ```solidity linenums=\"1\" function test(function (uint) returns(uint) f) { f(10); } using {test} for function (uint) returns(uint); contract X { function (uint) returns(uint) x; function (uint) returns(uint)[] y; mapping(uint => function (uint) returns(uint)) map; function foo(uint a) public returns(uint){ x = foo; y.push(foo); } } ``` \"\"\" _ast_node : SolcFunctionTypeName _parent : Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ] _parameter_types : ParameterList _return_parameter_types : ParameterList _state_mutability : StateMutability _visibility : Visibility def __init__ ( self , init : IrInitTuple , function_type_name : SolcFunctionTypeName , parent : SolidityAbc , ): super () . __init__ ( init , function_type_name , parent ) self . _parameter_types = ParameterList ( init , function_type_name . parameter_types , self ) self . _return_parameter_types = ParameterList ( init , function_type_name . return_parameter_types , self ) self . _state_mutability = function_type_name . state_mutability self . _visibility = function_type_name . visibility def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _parameter_types yield from self . _return_parameter_types @property def parent ( self ) -> Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> Function : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , Function ) return t @property def parameter_types ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function type name parameters. \"\"\" return self . _parameter_types @property def return_parameter_types ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function type name return parameters. \"\"\" return self . _return_parameter_types @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function type name. \"\"\" return self . _state_mutability @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the function type name. \"\"\" return self . _visibility parameter_types () property # Returns: Type Description ParameterList Parameter list describing the function type name parameters. Source code in woke/ast/ir/type_name/function_type_name.py 100 101 102 103 104 105 106 @property def parameter_types ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function type name parameters. \"\"\" return self . _parameter_types parent () property # Returns: Type Description Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/function_type_name.py 82 83 84 85 86 87 88 @property def parent ( self ) -> Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent return_parameter_types () property # Returns: Type Description ParameterList Parameter list describing the function type name return parameters. Source code in woke/ast/ir/type_name/function_type_name.py 108 109 110 111 112 113 114 @property def return_parameter_types ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function type name return parameters. \"\"\" return self . _return_parameter_types state_mutability () property # Returns: Type Description StateMutability State mutability of the function type name. Source code in woke/ast/ir/type_name/function_type_name.py 116 117 118 119 120 121 122 @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function type name. \"\"\" return self . _state_mutability type () property # Returns: Type Description Function Type description. Source code in woke/ast/ir/type_name/function_type_name.py 90 91 92 93 94 95 96 97 98 @property def type ( self ) -> Function : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , Function ) return t visibility () property # Returns: Type Description Visibility Visibility of the function type name. Source code in woke/ast/ir/type_name/function_type_name.py 124 125 126 127 128 129 130 @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the function type name. \"\"\" return self . _visibility","title":"Function type name"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name","text":"","title":"function_type_name"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName","text":"Bases: TypeNameAbc Function type name. Example A function type name ( function ( uint ) returns ( uint ) ) can be used: inside a VariableDeclaration (lines 1 and 8), inside a UsingForDirective (line 5), inside a ArrayTypeName (line 9), inside a Mapping (line 11). 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 function test ( function ( uint ) returns ( uint ) f ) { f ( 10 ); } using { test } for function ( uint ) returns ( uint ); contract X { function ( uint ) returns ( uint ) x ; function ( uint ) returns ( uint )[] y ; mapping ( uint => function ( uint ) returns ( uint )) map ; function foo ( uint a ) public returns ( uint ){ x = foo ; y . push ( foo ); } } Source code in woke/ast/ir/type_name/function_type_name.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 class FunctionTypeName ( TypeNameAbc ): \"\"\" Function type name. !!! example A function type name (`:::solidity function (uint) returns(uint)`) can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration] (lines 1 and 8), - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective] (line 5), - inside a [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName] (line 9), - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping] (line 11). ```solidity linenums=\"1\" function test(function (uint) returns(uint) f) { f(10); } using {test} for function (uint) returns(uint); contract X { function (uint) returns(uint) x; function (uint) returns(uint)[] y; mapping(uint => function (uint) returns(uint)) map; function foo(uint a) public returns(uint){ x = foo; y.push(foo); } } ``` \"\"\" _ast_node : SolcFunctionTypeName _parent : Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ] _parameter_types : ParameterList _return_parameter_types : ParameterList _state_mutability : StateMutability _visibility : Visibility def __init__ ( self , init : IrInitTuple , function_type_name : SolcFunctionTypeName , parent : SolidityAbc , ): super () . __init__ ( init , function_type_name , parent ) self . _parameter_types = ParameterList ( init , function_type_name . parameter_types , self ) self . _return_parameter_types = ParameterList ( init , function_type_name . return_parameter_types , self ) self . _state_mutability = function_type_name . state_mutability self . _visibility = function_type_name . visibility def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _parameter_types yield from self . _return_parameter_types @property def parent ( self ) -> Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> Function : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , Function ) return t @property def parameter_types ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function type name parameters. \"\"\" return self . _parameter_types @property def return_parameter_types ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function type name return parameters. \"\"\" return self . _return_parameter_types @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function type name. \"\"\" return self . _state_mutability @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the function type name. \"\"\" return self . _visibility","title":"FunctionTypeName"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.parameter_types","text":"Returns: Type Description ParameterList Parameter list describing the function type name parameters. Source code in woke/ast/ir/type_name/function_type_name.py 100 101 102 103 104 105 106 @property def parameter_types ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function type name parameters. \"\"\" return self . _parameter_types","title":"parameter_types()"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.parent","text":"Returns: Type Description Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/function_type_name.py 82 83 84 85 86 87 88 @property def parent ( self ) -> Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.return_parameter_types","text":"Returns: Type Description ParameterList Parameter list describing the function type name return parameters. Source code in woke/ast/ir/type_name/function_type_name.py 108 109 110 111 112 113 114 @property def return_parameter_types ( self ) -> ParameterList : \"\"\" Returns: Parameter list describing the function type name return parameters. \"\"\" return self . _return_parameter_types","title":"return_parameter_types()"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.state_mutability","text":"Returns: Type Description StateMutability State mutability of the function type name. Source code in woke/ast/ir/type_name/function_type_name.py 116 117 118 119 120 121 122 @property def state_mutability ( self ) -> StateMutability : \"\"\" Returns: State mutability of the function type name. \"\"\" return self . _state_mutability","title":"state_mutability()"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.type","text":"Returns: Type Description Function Type description. Source code in woke/ast/ir/type_name/function_type_name.py 90 91 92 93 94 95 96 97 98 @property def type ( self ) -> Function : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , Function ) return t","title":"type()"},{"location":"api-reference/ir/type-names/function-type-name/#woke.ast.ir.type_name.function_type_name.FunctionTypeName.visibility","text":"Returns: Type Description Visibility Visibility of the function type name. Source code in woke/ast/ir/type_name/function_type_name.py 124 125 126 127 128 129 130 @property def visibility ( self ) -> Visibility : \"\"\" Returns: Visibility of the function type name. \"\"\" return self . _visibility","title":"visibility()"},{"location":"api-reference/ir/type-names/mapping/","text":"woke.ast.ir.type_name.mapping module # Mapping class # Bases: TypeNameAbc Mapping type name. Example A mapping type name can be used: inside a VariableDeclaration : mapping ( address => uint ) in line 1, mapping ( address => mapping ( address => uint )) in line 8, inside a UsingForDirective : mapping ( address => uint ) in line 5, inside an ArrayTypeName : mapping ( address => uint ) in line 9, inside a Mapping : mapping ( address => uint ) in line 8. 1 2 3 4 5 6 7 8 9 10 function remove ( mapping ( address => uint ) storage balances , address account ) { delete balances [ account ]; } using { remove } for mapping ( address => uint ); contract C { mapping ( address => mapping ( address => uint )) public allowances ; mapping ( address => uint )[ 2 ] public balances ; } Source code in woke/ast/ir/type_name/mapping.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 class Mapping ( TypeNameAbc ): \"\"\" Mapping type name. !!! example A mapping type name can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - `:::solidity mapping(address => uint)` in line 1, - `:::solidity mapping(address => mapping(address => uint))` in line 8, - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]: - `:::solidity mapping(address => uint)` in line 5, - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]: - `:::solidity mapping(address => uint)` in line 9, - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]: - `:::solidity mapping(address => uint)` in line 8. ```solidity linenums=\"1\" function remove(mapping(address => uint) storage balances, address account) { delete balances[account]; } using {remove} for mapping(address => uint); contract C { mapping(address => mapping(address => uint)) public allowances; mapping(address => uint)[2] public balances; } ``` \"\"\" _ast_node : SolcMapping _parent : Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ] _key_type : Union [ ElementaryTypeName , UserDefinedTypeName ] _value_type : TypeNameAbc def __init__ ( self , init : IrInitTuple , mapping : SolcMapping , parent : SolidityAbc ): super () . __init__ ( init , mapping , parent ) key_type = TypeNameAbc . from_ast ( init , mapping . key_type , self ) assert isinstance ( key_type , ( ElementaryTypeName , UserDefinedTypeName )) self . _key_type = key_type self . _value_type = TypeNameAbc . from_ast ( init , mapping . value_type , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _key_type yield from self . _value_type @property def parent ( self ) -> Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> types . Mapping : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , types . Mapping ) return t @property def key_type ( self ) -> Union [ ElementaryTypeName , UserDefinedTypeName ]: \"\"\" Can only be: - an [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName], - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [Contract][woke.ast.types.Contract] type, - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of an [Enum][woke.ast.types.Enum] type, - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [UserDefinedValueType][woke.ast.types.UserDefinedValueType] type. Returns: Mapping key type name. \"\"\" return self . _key_type @property def value_type ( self ) -> TypeNameAbc : \"\"\" Returns: Mapping value type name. \"\"\" return self . _value_type key_type () property # Can only be: an ElementaryTypeName , a UserDefinedTypeName of a Contract type, a UserDefinedTypeName of an Enum type, a UserDefinedTypeName of a UserDefinedValueType type. Returns: Type Description Union [ ElementaryTypeName , UserDefinedTypeName ] Mapping key type name. Source code in woke/ast/ir/type_name/mapping.py 86 87 88 89 90 91 92 93 94 95 96 97 98 @property def key_type ( self ) -> Union [ ElementaryTypeName , UserDefinedTypeName ]: \"\"\" Can only be: - an [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName], - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [Contract][woke.ast.types.Contract] type, - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of an [Enum][woke.ast.types.Enum] type, - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [UserDefinedValueType][woke.ast.types.UserDefinedValueType] type. Returns: Mapping key type name. \"\"\" return self . _key_type parent () property # Returns: Type Description Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/mapping.py 68 69 70 71 72 73 74 @property def parent ( self ) -> Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent type () property # Returns: Type Description types . Mapping Type description. Source code in woke/ast/ir/type_name/mapping.py 76 77 78 79 80 81 82 83 84 @property def type ( self ) -> types . Mapping : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , types . Mapping ) return t value_type () property # Returns: Type Description TypeNameAbc Mapping value type name. Source code in woke/ast/ir/type_name/mapping.py 100 101 102 103 104 105 106 @property def value_type ( self ) -> TypeNameAbc : \"\"\" Returns: Mapping value type name. \"\"\" return self . _value_type","title":"Mapping"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping","text":"","title":"mapping"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping","text":"Bases: TypeNameAbc Mapping type name. Example A mapping type name can be used: inside a VariableDeclaration : mapping ( address => uint ) in line 1, mapping ( address => mapping ( address => uint )) in line 8, inside a UsingForDirective : mapping ( address => uint ) in line 5, inside an ArrayTypeName : mapping ( address => uint ) in line 9, inside a Mapping : mapping ( address => uint ) in line 8. 1 2 3 4 5 6 7 8 9 10 function remove ( mapping ( address => uint ) storage balances , address account ) { delete balances [ account ]; } using { remove } for mapping ( address => uint ); contract C { mapping ( address => mapping ( address => uint )) public allowances ; mapping ( address => uint )[ 2 ] public balances ; } Source code in woke/ast/ir/type_name/mapping.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 class Mapping ( TypeNameAbc ): \"\"\" Mapping type name. !!! example A mapping type name can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - `:::solidity mapping(address => uint)` in line 1, - `:::solidity mapping(address => mapping(address => uint))` in line 8, - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]: - `:::solidity mapping(address => uint)` in line 5, - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]: - `:::solidity mapping(address => uint)` in line 9, - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]: - `:::solidity mapping(address => uint)` in line 8. ```solidity linenums=\"1\" function remove(mapping(address => uint) storage balances, address account) { delete balances[account]; } using {remove} for mapping(address => uint); contract C { mapping(address => mapping(address => uint)) public allowances; mapping(address => uint)[2] public balances; } ``` \"\"\" _ast_node : SolcMapping _parent : Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ] _key_type : Union [ ElementaryTypeName , UserDefinedTypeName ] _value_type : TypeNameAbc def __init__ ( self , init : IrInitTuple , mapping : SolcMapping , parent : SolidityAbc ): super () . __init__ ( init , mapping , parent ) key_type = TypeNameAbc . from_ast ( init , mapping . key_type , self ) assert isinstance ( key_type , ( ElementaryTypeName , UserDefinedTypeName )) self . _key_type = key_type self . _value_type = TypeNameAbc . from_ast ( init , mapping . value_type , self ) def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self yield from self . _key_type yield from self . _value_type @property def parent ( self ) -> Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> types . Mapping : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , types . Mapping ) return t @property def key_type ( self ) -> Union [ ElementaryTypeName , UserDefinedTypeName ]: \"\"\" Can only be: - an [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName], - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [Contract][woke.ast.types.Contract] type, - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of an [Enum][woke.ast.types.Enum] type, - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [UserDefinedValueType][woke.ast.types.UserDefinedValueType] type. Returns: Mapping key type name. \"\"\" return self . _key_type @property def value_type ( self ) -> TypeNameAbc : \"\"\" Returns: Mapping value type name. \"\"\" return self . _value_type","title":"Mapping"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping.key_type","text":"Can only be: an ElementaryTypeName , a UserDefinedTypeName of a Contract type, a UserDefinedTypeName of an Enum type, a UserDefinedTypeName of a UserDefinedValueType type. Returns: Type Description Union [ ElementaryTypeName , UserDefinedTypeName ] Mapping key type name. Source code in woke/ast/ir/type_name/mapping.py 86 87 88 89 90 91 92 93 94 95 96 97 98 @property def key_type ( self ) -> Union [ ElementaryTypeName , UserDefinedTypeName ]: \"\"\" Can only be: - an [ElementaryTypeName][woke.ast.ir.type_name.elementary_type_name.ElementaryTypeName], - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [Contract][woke.ast.types.Contract] type, - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of an [Enum][woke.ast.types.Enum] type, - a [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] of a [UserDefinedValueType][woke.ast.types.UserDefinedValueType] type. Returns: Mapping key type name. \"\"\" return self . _key_type","title":"key_type()"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping.parent","text":"Returns: Type Description Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/mapping.py 68 69 70 71 72 73 74 @property def parent ( self ) -> Union [ VariableDeclaration , UsingForDirective , ArrayTypeName , Mapping ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping.type","text":"Returns: Type Description types . Mapping Type description. Source code in woke/ast/ir/type_name/mapping.py 76 77 78 79 80 81 82 83 84 @property def type ( self ) -> types . Mapping : \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , types . Mapping ) return t","title":"type()"},{"location":"api-reference/ir/type-names/mapping/#woke.ast.ir.type_name.mapping.Mapping.value_type","text":"Returns: Type Description TypeNameAbc Mapping value type name. Source code in woke/ast/ir/type_name/mapping.py 100 101 102 103 104 105 106 @property def value_type ( self ) -> TypeNameAbc : \"\"\" Returns: Mapping value type name. \"\"\" return self . _value_type","title":"value_type()"},{"location":"api-reference/ir/type-names/user-defined-type-name/","text":"woke.ast.ir.type_name.user_defined_type_name module # UserDefinedTypeName class # Bases: TypeNameAbc User defined type name represents a name path to a user defined type. Path parts are separated by dots. In Solidity 0.8.0 a new IR node ( IdentifierPath ) was introduced to replace UserDefinedTypeName in some cases. Example A user defined type name can be used: inside a VariableDeclaration : Interface . Struct in line 18, Interface . Enum in line 26, inside a NewExpression : Contract in line 20, inside an InheritanceSpecifier : Interface in line 23, inside an OverrideSpecifier : Interface in line 30, inside a UsingForDirective : Lib in line 24, Interface . Struct in line 24, inside an ArrayTypeName : Interface . Enum in line 27, inside a Mapping : both occurrences of Interface . Enum in line 28. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 pragma solidity 0.7 ; interface Interface { enum Enum { READY , WAITING } struct Struct { uint a ; } function foo () external ; } library Lib {} function tmp ( Interface . Struct memory s ) { s . a = 5 ; new Contract (); } contract Contract is Interface { using Lib for Interface . Struct ; Interface . Enum state ; Interface . Enum [] states ; mapping ( Interface . Enum => Interface . Enum ) map ; function foo () external override ( Interface ) { } } Source code in woke/ast/ir/type_name/user_defined_type_name.pyclass UserDefinedTypeName ( TypeNameAbc ): \"\"\" User defined type name represents a name path to a user defined type. Path parts are separated by dots. In Solidity 0.8.0 a new IR node ([IdentifierPath][woke.ast.ir.meta.identifier_path.IdentifierPath]) was introduced to replace [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] in some cases. !!! example A user defined type name can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - `:::solidity Interface.Struct` in line 18, - `:::solidity Interface.Enum` in line 26, - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]: - `:::solidity Contract` in line 20, - inside an [InheritanceSpecifier][woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier]: - `:::solidity Interface` in line 23, - inside an [OverrideSpecifier][woke.ast.ir.meta.override_specifier.OverrideSpecifier]: - `:::solidity Interface` in line 30, - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]: - `:::solidity Lib` in line 24, - `:::solidity Interface.Struct` in line 24, - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]: - `:::solidity Interface.Enum` in line 27, - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]: - both occurrences of `:::solidity Interface.Enum` in line 28. ```solidity linenums=\"1\" pragma solidity 0.7; interface Interface { enum Enum { READY, WAITING } struct Struct { uint a; } function foo() external; } library Lib {} function tmp(Interface.Struct memory s) { s.a = 5; new Contract(); } contract Contract is Interface { using Lib for Interface.Struct; Interface.Enum state; Interface.Enum[] states; mapping(Interface.Enum => Interface.Enum) map; function foo() external override(Interface) { } } ``` \"\"\" _ast_node : SolcUserDefinedTypeName _parent : Union [ VariableDeclaration , NewExpression , InheritanceSpecifier , OverrideSpecifier , UsingForDirective , ArrayTypeName , Mapping , ] _referenced_declaration_id : AstNodeId _contract_scope_id : Optional [ AstNodeId ] _name : Optional [ str ] _path_node : Optional [ IdentifierPath ] _parts : Optional [ IntervalTree ] def __init__ ( self , init : IrInitTuple , user_defined_type_name : SolcUserDefinedTypeName , parent : SolidityAbc , ): super () . __init__ ( init , user_defined_type_name , parent ) self . _name = user_defined_type_name . name self . _referenced_declaration_id = user_defined_type_name . referenced_declaration assert self . _referenced_declaration_id >= 0 self . _contract_scope_id = user_defined_type_name . contract_scope if user_defined_type_name . path_node is None : self . _path_node = None matches = list ( IDENTIFIER_RE . finditer ( self . _source )) groups_count = len ( matches ) assert groups_count > 0 self . _parts = IntervalTree () for i , match in enumerate ( matches ): name = match . group ( 0 ) . decode ( \"utf-8\" ) start = self . byte_location [ 0 ] + match . start () end = self . byte_location [ 0 ] + match . end () self . _parts [ start : end ] = IdentifierPathPart ( self , init , ( start , end ), name , self . _referenced_declaration_id , groups_count - i - 1 , ) else : self . _path_node = IdentifierPath ( init , user_defined_type_name . path_node , self ) self . _parts = None def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _path_node is not None : yield from self . _path_node @property def parent ( self , ) -> Union [ VariableDeclaration , NewExpression , InheritanceSpecifier , OverrideSpecifier , UsingForDirective , ArrayTypeName , Mapping , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> Union [ Contract , Struct , Enum , UserDefinedValueType ]: \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , ( Contract , Struct , Enum , UserDefinedValueType )) return t @property def name ( self ) -> str : \"\"\" !!! note Should be the same as [source][woke.ast.ir.abc.IrAbc.source] and is the same as [path_node.name][woke.ast.ir.meta.identifier_path.IdentifierPath.name] if [path_node][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.path_node] is not `None`. Returns: Name of the user defined type as it appears in the source code. \"\"\" if self . _name is None : assert self . _path_node is not None self . _name = self . _path_node . name return self . _name @property def identifier_path_parts ( self ) -> Tuple [ IdentifierPathPart , ... ]: \"\"\" Returns: Parts of the user defined type name. \"\"\" if self . _path_node is not None : return self . _path_node . identifier_path_parts assert self . _parts is not None return tuple ( interval . data for interval in sorted ( self . _parts )) def identifier_path_part_at ( self , byte_offset : int ) -> Optional [ IdentifierPathPart ]: \"\"\" Args: byte_offset: Byte offset in the source file. Returns: Identifier path part at the given byte offset, if any. \"\"\" if self . _path_node is not None : return self . _path_node . identifier_path_part_at ( byte_offset ) assert self . _parts is not None intervals = self . _parts . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Declaration IR node referenced by this user defined type name. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node @property def path_node ( self ) -> Optional [ IdentifierPath ]: \"\"\" Always present since Solidity 0.8.0. If not `None`, it represents the same source code as this node ([byte_location][woke.ast.ir.abc.IrAbc.byte_location] properties are the same) and references the same declaration. Returns: Identifier path IR node. \"\"\" return self . _path_node identifier_path_part_at ( byte_offset ) # Parameters: Name Type Description Default byte_offset int Byte offset in the source file. required Returns: Type Description Optional [ IdentifierPathPart ] Identifier path part at the given byte offset, if any. Source code in woke/ast/ir/type_name/user_defined_type_name.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 def identifier_path_part_at ( self , byte_offset : int ) -> Optional [ IdentifierPathPart ]: \"\"\" Args: byte_offset: Byte offset in the source file. Returns: Identifier path part at the given byte offset, if any. \"\"\" if self . _path_node is not None : return self . _path_node . identifier_path_part_at ( byte_offset ) assert self . _parts is not None intervals = self . _parts . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data identifier_path_parts () property # Returns: Type Description Tuple [ IdentifierPathPart , ...] Parts of the user defined type name. Source code in woke/ast/ir/type_name/user_defined_type_name.py 190 191 192 193 194 195 196 197 198 199 200 @property def identifier_path_parts ( self ) -> Tuple [ IdentifierPathPart , ... ]: \"\"\" Returns: Parts of the user defined type name. \"\"\" if self . _path_node is not None : return self . _path_node . identifier_path_parts assert self . _parts is not None return tuple ( interval . data for interval in sorted ( self . _parts )) name () property # Note Should be the same as source and is the same as path_node.name if path_node is not None . Returns: Type Description str Name of the user defined type as it appears in the source code. Source code in woke/ast/ir/type_name/user_defined_type_name.py 177 178 179 180 181 182 183 184 185 186 187 188 @property def name ( self ) -> str : \"\"\" !!! note Should be the same as [source][woke.ast.ir.abc.IrAbc.source] and is the same as [path_node.name][woke.ast.ir.meta.identifier_path.IdentifierPath.name] if [path_node][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.path_node] is not `None`. Returns: Name of the user defined type as it appears in the source code. \"\"\" if self . _name is None : assert self . _path_node is not None self . _name = self . _path_node . name return self . _name parent () property # Returns: Type Description Union [ VariableDeclaration , NewExpression , InheritanceSpecifier , OverrideSpecifier , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/user_defined_type_name.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @property def parent ( self , ) -> Union [ VariableDeclaration , NewExpression , InheritanceSpecifier , OverrideSpecifier , UsingForDirective , ArrayTypeName , Mapping , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent path_node () property # Always present since Solidity 0.8.0. If not None , it represents the same source code as this node ( byte_location properties are the same) and references the same declaration. Returns: Type Description Optional [ IdentifierPath ] Identifier path IR node. Source code in woke/ast/ir/type_name/user_defined_type_name.py 231 232 233 234 235 236 237 238 @property def path_node ( self ) -> Optional [ IdentifierPath ]: \"\"\" Always present since Solidity 0.8.0. If not `None`, it represents the same source code as this node ([byte_location][woke.ast.ir.abc.IrAbc.byte_location] properties are the same) and references the same declaration. Returns: Identifier path IR node. \"\"\" return self . _path_node referenced_declaration () property # Returns: Type Description DeclarationAbc Declaration IR node referenced by this user defined type name. Source code in woke/ast/ir/type_name/user_defined_type_name.py 219 220 221 222 223 224 225 226 227 228 229 @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Declaration IR node referenced by this user defined type name. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node type () property # Returns: Type Description Union [ Contract , Struct , Enum , UserDefinedValueType ] Type description. Source code in woke/ast/ir/type_name/user_defined_type_name.py 167 168 169 170 171 172 173 174 175 @property def type ( self ) -> Union [ Contract , Struct , Enum , UserDefinedValueType ]: \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , ( Contract , Struct , Enum , UserDefinedValueType )) return t","title":"User defined type name"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name","text":"","title":"user_defined_type_name"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName","text":"Bases: TypeNameAbc User defined type name represents a name path to a user defined type. Path parts are separated by dots. In Solidity 0.8.0 a new IR node ( IdentifierPath ) was introduced to replace UserDefinedTypeName in some cases. Example A user defined type name can be used: inside a VariableDeclaration : Interface . Struct in line 18, Interface . Enum in line 26, inside a NewExpression : Contract in line 20, inside an InheritanceSpecifier : Interface in line 23, inside an OverrideSpecifier : Interface in line 30, inside a UsingForDirective : Lib in line 24, Interface . Struct in line 24, inside an ArrayTypeName : Interface . Enum in line 27, inside a Mapping : both occurrences of Interface . Enum in line 28. 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 pragma solidity 0.7 ; interface Interface { enum Enum { READY , WAITING } struct Struct { uint a ; } function foo () external ; } library Lib {} function tmp ( Interface . Struct memory s ) { s . a = 5 ; new Contract (); } contract Contract is Interface { using Lib for Interface . Struct ; Interface . Enum state ; Interface . Enum [] states ; mapping ( Interface . Enum => Interface . Enum ) map ; function foo () external override ( Interface ) { } } Source code in woke/ast/ir/type_name/user_defined_type_name.pyclass UserDefinedTypeName ( TypeNameAbc ): \"\"\" User defined type name represents a name path to a user defined type. Path parts are separated by dots. In Solidity 0.8.0 a new IR node ([IdentifierPath][woke.ast.ir.meta.identifier_path.IdentifierPath]) was introduced to replace [UserDefinedTypeName][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName] in some cases. !!! example A user defined type name can be used: - inside a [VariableDeclaration][woke.ast.ir.declaration.variable_declaration.VariableDeclaration]: - `:::solidity Interface.Struct` in line 18, - `:::solidity Interface.Enum` in line 26, - inside a [NewExpression][woke.ast.ir.expression.new_expression.NewExpression]: - `:::solidity Contract` in line 20, - inside an [InheritanceSpecifier][woke.ast.ir.meta.inheritance_specifier.InheritanceSpecifier]: - `:::solidity Interface` in line 23, - inside an [OverrideSpecifier][woke.ast.ir.meta.override_specifier.OverrideSpecifier]: - `:::solidity Interface` in line 30, - inside a [UsingForDirective][woke.ast.ir.meta.using_for_directive.UsingForDirective]: - `:::solidity Lib` in line 24, - `:::solidity Interface.Struct` in line 24, - inside an [ArrayTypeName][woke.ast.ir.type_name.array_type_name.ArrayTypeName]: - `:::solidity Interface.Enum` in line 27, - inside a [Mapping][woke.ast.ir.type_name.mapping.Mapping]: - both occurrences of `:::solidity Interface.Enum` in line 28. ```solidity linenums=\"1\" pragma solidity 0.7; interface Interface { enum Enum { READY, WAITING } struct Struct { uint a; } function foo() external; } library Lib {} function tmp(Interface.Struct memory s) { s.a = 5; new Contract(); } contract Contract is Interface { using Lib for Interface.Struct; Interface.Enum state; Interface.Enum[] states; mapping(Interface.Enum => Interface.Enum) map; function foo() external override(Interface) { } } ``` \"\"\" _ast_node : SolcUserDefinedTypeName _parent : Union [ VariableDeclaration , NewExpression , InheritanceSpecifier , OverrideSpecifier , UsingForDirective , ArrayTypeName , Mapping , ] _referenced_declaration_id : AstNodeId _contract_scope_id : Optional [ AstNodeId ] _name : Optional [ str ] _path_node : Optional [ IdentifierPath ] _parts : Optional [ IntervalTree ] def __init__ ( self , init : IrInitTuple , user_defined_type_name : SolcUserDefinedTypeName , parent : SolidityAbc , ): super () . __init__ ( init , user_defined_type_name , parent ) self . _name = user_defined_type_name . name self . _referenced_declaration_id = user_defined_type_name . referenced_declaration assert self . _referenced_declaration_id >= 0 self . _contract_scope_id = user_defined_type_name . contract_scope if user_defined_type_name . path_node is None : self . _path_node = None matches = list ( IDENTIFIER_RE . finditer ( self . _source )) groups_count = len ( matches ) assert groups_count > 0 self . _parts = IntervalTree () for i , match in enumerate ( matches ): name = match . group ( 0 ) . decode ( \"utf-8\" ) start = self . byte_location [ 0 ] + match . start () end = self . byte_location [ 0 ] + match . end () self . _parts [ start : end ] = IdentifierPathPart ( self , init , ( start , end ), name , self . _referenced_declaration_id , groups_count - i - 1 , ) else : self . _path_node = IdentifierPath ( init , user_defined_type_name . path_node , self ) self . _parts = None def __iter__ ( self ) -> Iterator [ IrAbc ]: yield self if self . _path_node is not None : yield from self . _path_node @property def parent ( self , ) -> Union [ VariableDeclaration , NewExpression , InheritanceSpecifier , OverrideSpecifier , UsingForDirective , ArrayTypeName , Mapping , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent @property def type ( self ) -> Union [ Contract , Struct , Enum , UserDefinedValueType ]: \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , ( Contract , Struct , Enum , UserDefinedValueType )) return t @property def name ( self ) -> str : \"\"\" !!! note Should be the same as [source][woke.ast.ir.abc.IrAbc.source] and is the same as [path_node.name][woke.ast.ir.meta.identifier_path.IdentifierPath.name] if [path_node][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.path_node] is not `None`. Returns: Name of the user defined type as it appears in the source code. \"\"\" if self . _name is None : assert self . _path_node is not None self . _name = self . _path_node . name return self . _name @property def identifier_path_parts ( self ) -> Tuple [ IdentifierPathPart , ... ]: \"\"\" Returns: Parts of the user defined type name. \"\"\" if self . _path_node is not None : return self . _path_node . identifier_path_parts assert self . _parts is not None return tuple ( interval . data for interval in sorted ( self . _parts )) def identifier_path_part_at ( self , byte_offset : int ) -> Optional [ IdentifierPathPart ]: \"\"\" Args: byte_offset: Byte offset in the source file. Returns: Identifier path part at the given byte offset, if any. \"\"\" if self . _path_node is not None : return self . _path_node . identifier_path_part_at ( byte_offset ) assert self . _parts is not None intervals = self . _parts . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Declaration IR node referenced by this user defined type name. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node @property def path_node ( self ) -> Optional [ IdentifierPath ]: \"\"\" Always present since Solidity 0.8.0. If not `None`, it represents the same source code as this node ([byte_location][woke.ast.ir.abc.IrAbc.byte_location] properties are the same) and references the same declaration. Returns: Identifier path IR node. \"\"\" return self . _path_node","title":"UserDefinedTypeName"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.identifier_path_part_at","text":"Parameters: Name Type Description Default byte_offset int Byte offset in the source file. required Returns: Type Description Optional [ IdentifierPathPart ] Identifier path part at the given byte offset, if any. Source code in woke/ast/ir/type_name/user_defined_type_name.py 202 203 204 205 206 207 208 209 210 211 212 213 214 215 216 217 def identifier_path_part_at ( self , byte_offset : int ) -> Optional [ IdentifierPathPart ]: \"\"\" Args: byte_offset: Byte offset in the source file. Returns: Identifier path part at the given byte offset, if any. \"\"\" if self . _path_node is not None : return self . _path_node . identifier_path_part_at ( byte_offset ) assert self . _parts is not None intervals = self . _parts . at ( byte_offset ) assert len ( intervals ) <= 1 if len ( intervals ) == 0 : return None return intervals . pop () . data","title":"identifier_path_part_at()"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.identifier_path_parts","text":"Returns: Type Description Tuple [ IdentifierPathPart , ...] Parts of the user defined type name. Source code in woke/ast/ir/type_name/user_defined_type_name.py 190 191 192 193 194 195 196 197 198 199 200 @property def identifier_path_parts ( self ) -> Tuple [ IdentifierPathPart , ... ]: \"\"\" Returns: Parts of the user defined type name. \"\"\" if self . _path_node is not None : return self . _path_node . identifier_path_parts assert self . _parts is not None return tuple ( interval . data for interval in sorted ( self . _parts ))","title":"identifier_path_parts()"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.name","text":"Note Should be the same as source and is the same as path_node.name if path_node is not None . Returns: Type Description str Name of the user defined type as it appears in the source code. Source code in woke/ast/ir/type_name/user_defined_type_name.py 177 178 179 180 181 182 183 184 185 186 187 188 @property def name ( self ) -> str : \"\"\" !!! note Should be the same as [source][woke.ast.ir.abc.IrAbc.source] and is the same as [path_node.name][woke.ast.ir.meta.identifier_path.IdentifierPath.name] if [path_node][woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.path_node] is not `None`. Returns: Name of the user defined type as it appears in the source code. \"\"\" if self . _name is None : assert self . _path_node is not None self . _name = self . _path_node . name return self . _name","title":"name()"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.parent","text":"Returns: Type Description Union [ VariableDeclaration , NewExpression , InheritanceSpecifier , OverrideSpecifier , UsingForDirective , ArrayTypeName , Mapping ] Parent IR node. Source code in woke/ast/ir/type_name/user_defined_type_name.py 149 150 151 152 153 154 155 156 157 158 159 160 161 162 163 164 165 @property def parent ( self , ) -> Union [ VariableDeclaration , NewExpression , InheritanceSpecifier , OverrideSpecifier , UsingForDirective , ArrayTypeName , Mapping , ]: \"\"\" Returns: Parent IR node. \"\"\" return self . _parent","title":"parent()"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.path_node","text":"Always present since Solidity 0.8.0. If not None , it represents the same source code as this node ( byte_location properties are the same) and references the same declaration. Returns: Type Description Optional [ IdentifierPath ] Identifier path IR node. Source code in woke/ast/ir/type_name/user_defined_type_name.py 231 232 233 234 235 236 237 238 @property def path_node ( self ) -> Optional [ IdentifierPath ]: \"\"\" Always present since Solidity 0.8.0. If not `None`, it represents the same source code as this node ([byte_location][woke.ast.ir.abc.IrAbc.byte_location] properties are the same) and references the same declaration. Returns: Identifier path IR node. \"\"\" return self . _path_node","title":"path_node()"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.referenced_declaration","text":"Returns: Type Description DeclarationAbc Declaration IR node referenced by this user defined type name. Source code in woke/ast/ir/type_name/user_defined_type_name.py 219 220 221 222 223 224 225 226 227 228 229 @property def referenced_declaration ( self ) -> DeclarationAbc : \"\"\" Returns: Declaration IR node referenced by this user defined type name. \"\"\" node = self . _reference_resolver . resolve_node ( self . _referenced_declaration_id , self . _cu_hash ) assert isinstance ( node , DeclarationAbc ) return node","title":"referenced_declaration()"},{"location":"api-reference/ir/type-names/user-defined-type-name/#woke.ast.ir.type_name.user_defined_type_name.UserDefinedTypeName.type","text":"Returns: Type Description Union [ Contract , Struct , Enum , UserDefinedValueType ] Type description. Source code in woke/ast/ir/type_name/user_defined_type_name.py 167 168 169 170 171 172 173 174 175 @property def type ( self ) -> Union [ Contract , Struct , Enum , UserDefinedValueType ]: \"\"\" Returns: Type description. \"\"\" t = super () . type assert isinstance ( t , ( Contract , Struct , Enum , UserDefinedValueType )) return t","title":"type()"},{"location":"api-reference/ir/yul/assignment/","text":"woke.ast.ir.yul.assignment module # Assignment class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/assignment.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Assignment ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _value : Union [ FunctionCall , Identifier , Literal ] _variable_names : List [ Identifier ] def __init__ ( self , init : IrInitTuple , assignment : YulAssignment , parent : YulAbc ): super () . __init__ ( init , assignment , parent ) if isinstance ( assignment . value , YulFunctionCall ): self . _value = FunctionCall ( init , assignment . value , self ) elif isinstance ( assignment . value , YulIdentifier ): self . _value = Identifier ( init , assignment . value , self ) elif isinstance ( assignment . value , YulLiteral ): self . _value = Literal ( init , assignment . value , self ) else : assert False , f \"Unexpected type: { type ( assignment . value ) } \" self . _variable_names = [ Identifier ( init , variable_name , self ) for variable_name in assignment . variable_names ] def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _value for variable_name in self . _variable_names : yield from variable_name @property def parent ( self ) -> Block : return self . _parent @property def value ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _value @property def variable_names ( self ) -> Tuple [ Identifier ]: return tuple ( self . _variable_names )","title":"Assignment"},{"location":"api-reference/ir/yul/assignment/#woke.ast.ir.yul.assignment","text":"","title":"assignment"},{"location":"api-reference/ir/yul/assignment/#woke.ast.ir.yul.assignment.Assignment","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/assignment.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 class Assignment ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _value : Union [ FunctionCall , Identifier , Literal ] _variable_names : List [ Identifier ] def __init__ ( self , init : IrInitTuple , assignment : YulAssignment , parent : YulAbc ): super () . __init__ ( init , assignment , parent ) if isinstance ( assignment . value , YulFunctionCall ): self . _value = FunctionCall ( init , assignment . value , self ) elif isinstance ( assignment . value , YulIdentifier ): self . _value = Identifier ( init , assignment . value , self ) elif isinstance ( assignment . value , YulLiteral ): self . _value = Literal ( init , assignment . value , self ) else : assert False , f \"Unexpected type: { type ( assignment . value ) } \" self . _variable_names = [ Identifier ( init , variable_name , self ) for variable_name in assignment . variable_names ] def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _value for variable_name in self . _variable_names : yield from variable_name @property def parent ( self ) -> Block : return self . _parent @property def value ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _value @property def variable_names ( self ) -> Tuple [ Identifier ]: return tuple ( self . _variable_names )","title":"Assignment"},{"location":"api-reference/ir/yul/block/","text":"woke.ast.ir.yul.block module # Block class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/block.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 class Block ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ InlineAssembly , Block , ForLoop , FunctionDefinition , If , Case ] _statements : List [ Union [ Assignment , \"Block\" , Break , Continue , ExpressionStatement , Leave , ForLoop , FunctionDefinition , If , Switch , VariableDeclaration , ] ] def __init__ ( self , init : IrInitTuple , block : YulBlock , parent : Union [ InlineAssembly , YulAbc ] ): from .assignment import Assignment from .break_statement import Break from .continue_statement import Continue from .expression_statement import ExpressionStatement from .for_loop import ForLoop from .function_definition import FunctionDefinition from .if_statement import If from .leave import Leave from .switch import Switch from .variable_declaration import VariableDeclaration super () . __init__ ( init , block , parent ) self . _statements = [] for statement in block . statements : if isinstance ( statement , YulAssignment ): self . _statements . append ( Assignment ( init , statement , self )) elif isinstance ( statement , YulBlock ): self . _statements . append ( Block ( init , statement , self )) elif isinstance ( statement , YulBreak ): self . _statements . append ( Break ( init , statement , self )) elif isinstance ( statement , YulContinue ): self . _statements . append ( Continue ( init , statement , self )) elif isinstance ( statement , YulExpressionStatement ): self . _statements . append ( ExpressionStatement ( init , statement , self )) elif isinstance ( statement , YulLeave ): self . _statements . append ( Leave ( init , statement , self )) elif isinstance ( statement , YulForLoop ): self . _statements . append ( ForLoop ( init , statement , self )) elif isinstance ( statement , YulFunctionDefinition ): self . _statements . append ( FunctionDefinition ( init , statement , self )) elif isinstance ( statement , YulIf ): self . _statements . append ( If ( init , statement , self )) elif isinstance ( statement , YulSwitch ): self . _statements . append ( Switch ( init , statement , self )) elif isinstance ( statement , YulVariableDeclaration ): self . _statements . append ( VariableDeclaration ( init , statement , self )) else : assert False , f \"Unexpected type: { type ( statement ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self for statement in self . _statements : yield from statement @property def parent ( self , ) -> Union [ InlineAssembly , Block , ForLoop , FunctionDefinition , If , Case ]: return self . _parent @property def statements ( self , ) -> Tuple [ Union [ Assignment , \"Block\" , Break , Continue , ExpressionStatement , Leave , ForLoop , FunctionDefinition , If , Switch , VariableDeclaration , ] ]: return tuple ( self . _statements )","title":"Block"},{"location":"api-reference/ir/yul/block/#woke.ast.ir.yul.block","text":"","title":"block"},{"location":"api-reference/ir/yul/block/#woke.ast.ir.yul.block.Block","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/block.py 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 80 81 82 83 84 85 86 87 88 89 90 91 92 93 94 95 96 97 98 99 100 101 102 103 104 105 106 107 108 109 110 111 112 113 114 115 116 117 118 119 120 121 122 123 124 125 126 127 128 129 130 class Block ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ InlineAssembly , Block , ForLoop , FunctionDefinition , If , Case ] _statements : List [ Union [ Assignment , \"Block\" , Break , Continue , ExpressionStatement , Leave , ForLoop , FunctionDefinition , If , Switch , VariableDeclaration , ] ] def __init__ ( self , init : IrInitTuple , block : YulBlock , parent : Union [ InlineAssembly , YulAbc ] ): from .assignment import Assignment from .break_statement import Break from .continue_statement import Continue from .expression_statement import ExpressionStatement from .for_loop import ForLoop from .function_definition import FunctionDefinition from .if_statement import If from .leave import Leave from .switch import Switch from .variable_declaration import VariableDeclaration super () . __init__ ( init , block , parent ) self . _statements = [] for statement in block . statements : if isinstance ( statement , YulAssignment ): self . _statements . append ( Assignment ( init , statement , self )) elif isinstance ( statement , YulBlock ): self . _statements . append ( Block ( init , statement , self )) elif isinstance ( statement , YulBreak ): self . _statements . append ( Break ( init , statement , self )) elif isinstance ( statement , YulContinue ): self . _statements . append ( Continue ( init , statement , self )) elif isinstance ( statement , YulExpressionStatement ): self . _statements . append ( ExpressionStatement ( init , statement , self )) elif isinstance ( statement , YulLeave ): self . _statements . append ( Leave ( init , statement , self )) elif isinstance ( statement , YulForLoop ): self . _statements . append ( ForLoop ( init , statement , self )) elif isinstance ( statement , YulFunctionDefinition ): self . _statements . append ( FunctionDefinition ( init , statement , self )) elif isinstance ( statement , YulIf ): self . _statements . append ( If ( init , statement , self )) elif isinstance ( statement , YulSwitch ): self . _statements . append ( Switch ( init , statement , self )) elif isinstance ( statement , YulVariableDeclaration ): self . _statements . append ( VariableDeclaration ( init , statement , self )) else : assert False , f \"Unexpected type: { type ( statement ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self for statement in self . _statements : yield from statement @property def parent ( self , ) -> Union [ InlineAssembly , Block , ForLoop , FunctionDefinition , If , Case ]: return self . _parent @property def statements ( self , ) -> Tuple [ Union [ Assignment , \"Block\" , Break , Continue , ExpressionStatement , Leave , ForLoop , FunctionDefinition , If , Switch , VariableDeclaration , ] ]: return tuple ( self . _statements )","title":"Block"},{"location":"api-reference/ir/yul/break-statement/","text":"woke.ast.ir.yul.break_statement module # Break class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/break_statement.py 11 12 13 14 15 16 17 18 19 class Break ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block @property def parent ( self ) -> Block : return self . _parent","title":"Break statement"},{"location":"api-reference/ir/yul/break-statement/#woke.ast.ir.yul.break_statement","text":"","title":"break_statement"},{"location":"api-reference/ir/yul/break-statement/#woke.ast.ir.yul.break_statement.Break","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/break_statement.py 11 12 13 14 15 16 17 18 19 class Break ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block @property def parent ( self ) -> Block : return self . _parent","title":"Break"},{"location":"api-reference/ir/yul/case-statement/","text":"woke.ast.ir.yul.case_statement module # Case class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/case_statement.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Case ( YulAbc ): \"\"\" TBD \"\"\" _parent : Switch _body : Block _value : Union [ typing_extensions . Literal [ \"default\" ], Literal ] def __init__ ( self , init : IrInitTuple , case_ : YulCase , parent : YulAbc ): super () . __init__ ( init , case_ , parent ) self . _body = Block ( init , case_ . body , self ) if case_ . value == \"default\" : self . _value = \"default\" else : self . _value = Literal ( init , case_ . value , self ) def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _body if self . _value != \"default\" : yield from self . _value @property def parent ( self ) -> Switch : return self . _parent @property def body ( self ) -> Block : return self . _body @property def value ( self ) -> Union [ typing_extensions . Literal [ \"default\" ], Literal ]: return self . _value","title":"Case statement"},{"location":"api-reference/ir/yul/case-statement/#woke.ast.ir.yul.case_statement","text":"","title":"case_statement"},{"location":"api-reference/ir/yul/case-statement/#woke.ast.ir.yul.case_statement.Case","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/case_statement.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 class Case ( YulAbc ): \"\"\" TBD \"\"\" _parent : Switch _body : Block _value : Union [ typing_extensions . Literal [ \"default\" ], Literal ] def __init__ ( self , init : IrInitTuple , case_ : YulCase , parent : YulAbc ): super () . __init__ ( init , case_ , parent ) self . _body = Block ( init , case_ . body , self ) if case_ . value == \"default\" : self . _value = \"default\" else : self . _value = Literal ( init , case_ . value , self ) def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _body if self . _value != \"default\" : yield from self . _value @property def parent ( self ) -> Switch : return self . _parent @property def body ( self ) -> Block : return self . _body @property def value ( self ) -> Union [ typing_extensions . Literal [ \"default\" ], Literal ]: return self . _value","title":"Case"},{"location":"api-reference/ir/yul/continue-statement/","text":"woke.ast.ir.yul.continue_statement module # Continue class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/continue_statement.py 11 12 13 14 15 16 17 18 19 class Continue ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block @property def parent ( self ) -> Block : return self . _parent","title":"Continue statement"},{"location":"api-reference/ir/yul/continue-statement/#woke.ast.ir.yul.continue_statement","text":"","title":"continue_statement"},{"location":"api-reference/ir/yul/continue-statement/#woke.ast.ir.yul.continue_statement.Continue","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/continue_statement.py 11 12 13 14 15 16 17 18 19 class Continue ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block @property def parent ( self ) -> Block : return self . _parent","title":"Continue"},{"location":"api-reference/ir/yul/expression-statement/","text":"woke.ast.ir.yul.expression_statement module # ExpressionStatement class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/expression_statement.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class ExpressionStatement ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _expression : Union [ FunctionCall , Identifier , Literal ] def __init__ ( self , init : IrInitTuple , expression_statement : YulExpressionStatement , parent : YulAbc , ): super () . __init__ ( init , expression_statement , parent ) if isinstance ( expression_statement . expression , YulFunctionCall ): self . _expression = FunctionCall ( init , expression_statement . expression , self ) elif isinstance ( expression_statement . expression , YulIdentifier ): self . _expression = Identifier ( init , expression_statement . expression , self ) elif isinstance ( expression_statement . expression , YulLiteral ): self . _expression = Literal ( init , expression_statement . expression , self ) else : assert False , f \"Unexpected type: { type ( expression_statement . expression ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _expression @property def parent ( self ) -> Block : return self . _parent @property def expression ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _expression","title":"Expression statement"},{"location":"api-reference/ir/yul/expression-statement/#woke.ast.ir.yul.expression_statement","text":"","title":"expression_statement"},{"location":"api-reference/ir/yul/expression-statement/#woke.ast.ir.yul.expression_statement.ExpressionStatement","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/expression_statement.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 class ExpressionStatement ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _expression : Union [ FunctionCall , Identifier , Literal ] def __init__ ( self , init : IrInitTuple , expression_statement : YulExpressionStatement , parent : YulAbc , ): super () . __init__ ( init , expression_statement , parent ) if isinstance ( expression_statement . expression , YulFunctionCall ): self . _expression = FunctionCall ( init , expression_statement . expression , self ) elif isinstance ( expression_statement . expression , YulIdentifier ): self . _expression = Identifier ( init , expression_statement . expression , self ) elif isinstance ( expression_statement . expression , YulLiteral ): self . _expression = Literal ( init , expression_statement . expression , self ) else : assert False , f \"Unexpected type: { type ( expression_statement . expression ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _expression @property def parent ( self ) -> Block : return self . _parent @property def expression ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _expression","title":"ExpressionStatement"},{"location":"api-reference/ir/yul/for-loop/","text":"woke.ast.ir.yul.for_loop module # ForLoop class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/for_loop.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class ForLoop ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _body : Block _condition : Union [ FunctionCall , Identifier , Literal ] _post : Block _pre : Block def __init__ ( self , init : IrInitTuple , for_loop : YulForLoop , parent : YulAbc ): super () . __init__ ( init , for_loop , parent ) self . _body = Block ( init , for_loop . body , self ) if isinstance ( for_loop . condition , YulFunctionCall ): self . _condition = FunctionCall ( init , for_loop . condition , self ) elif isinstance ( for_loop . condition , YulIdentifier ): self . _condition = Identifier ( init , for_loop . condition , self ) elif isinstance ( for_loop . condition , YulLiteral ): self . _condition = Literal ( init , for_loop . condition , self ) else : assert False , f \"Unexpected type: { type ( for_loop . condition ) } \" self . _post = Block ( init , for_loop . post , self ) self . _pre = Block ( init , for_loop . pre , self ) def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _pre yield from self . _condition yield from self . _body yield from self . _post @property def parent ( self ) -> Block : return self . _parent @property def body ( self ) -> Block : return self . _body @property def condition ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _condition @property def post ( self ) -> Block : return self . _post @property def pre ( self ) -> Block : return self . _pre","title":"For loop"},{"location":"api-reference/ir/yul/for-loop/#woke.ast.ir.yul.for_loop","text":"","title":"for_loop"},{"location":"api-reference/ir/yul/for-loop/#woke.ast.ir.yul.for_loop.ForLoop","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/for_loop.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 class ForLoop ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _body : Block _condition : Union [ FunctionCall , Identifier , Literal ] _post : Block _pre : Block def __init__ ( self , init : IrInitTuple , for_loop : YulForLoop , parent : YulAbc ): super () . __init__ ( init , for_loop , parent ) self . _body = Block ( init , for_loop . body , self ) if isinstance ( for_loop . condition , YulFunctionCall ): self . _condition = FunctionCall ( init , for_loop . condition , self ) elif isinstance ( for_loop . condition , YulIdentifier ): self . _condition = Identifier ( init , for_loop . condition , self ) elif isinstance ( for_loop . condition , YulLiteral ): self . _condition = Literal ( init , for_loop . condition , self ) else : assert False , f \"Unexpected type: { type ( for_loop . condition ) } \" self . _post = Block ( init , for_loop . post , self ) self . _pre = Block ( init , for_loop . pre , self ) def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _pre yield from self . _condition yield from self . _body yield from self . _post @property def parent ( self ) -> Block : return self . _parent @property def body ( self ) -> Block : return self . _body @property def condition ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _condition @property def post ( self ) -> Block : return self . _post @property def pre ( self ) -> Block : return self . _pre","title":"ForLoop"},{"location":"api-reference/ir/yul/function-call/","text":"woke.ast.ir.yul.function_call module # FunctionCall class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/function_call.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class FunctionCall ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , ] _arguments : List [ Union [ \"FunctionCall\" , Identifier , Literal ]] _function_name : Identifier def __init__ ( self , init : IrInitTuple , function_call : YulFunctionCall , parent : YulAbc ): super () . __init__ ( init , function_call , parent ) self . _function_name = Identifier ( init , function_call . function_name , self ) self . _arguments = [] for argument in function_call . arguments : if isinstance ( argument , YulFunctionCall ): self . _arguments . append ( FunctionCall ( init , argument , self )) elif isinstance ( argument , YulIdentifier ): self . _arguments . append ( Identifier ( init , argument , self )) elif isinstance ( argument , YulLiteral ): self . _arguments . append ( Literal ( init , argument , self )) else : assert False , f \"Unexpected type: { type ( argument ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _function_name for argument in self . _arguments : yield from argument @property def parent ( self , ) -> Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , ]: return self . _parent @property def arguments ( self ) -> Tuple [ Union [ \"FunctionCall\" , Identifier , Literal ]]: return tuple ( self . _arguments ) @property def function_name ( self ) -> Identifier : return self . _function_name","title":"Function call"},{"location":"api-reference/ir/yul/function-call/#woke.ast.ir.yul.function_call","text":"","title":"function_call"},{"location":"api-reference/ir/yul/function-call/#woke.ast.ir.yul.function_call.FunctionCall","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/function_call.py 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 78 79 class FunctionCall ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , ] _arguments : List [ Union [ \"FunctionCall\" , Identifier , Literal ]] _function_name : Identifier def __init__ ( self , init : IrInitTuple , function_call : YulFunctionCall , parent : YulAbc ): super () . __init__ ( init , function_call , parent ) self . _function_name = Identifier ( init , function_call . function_name , self ) self . _arguments = [] for argument in function_call . arguments : if isinstance ( argument , YulFunctionCall ): self . _arguments . append ( FunctionCall ( init , argument , self )) elif isinstance ( argument , YulIdentifier ): self . _arguments . append ( Identifier ( init , argument , self )) elif isinstance ( argument , YulLiteral ): self . _arguments . append ( Literal ( init , argument , self )) else : assert False , f \"Unexpected type: { type ( argument ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _function_name for argument in self . _arguments : yield from argument @property def parent ( self , ) -> Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , ]: return self . _parent @property def arguments ( self ) -> Tuple [ Union [ \"FunctionCall\" , Identifier , Literal ]]: return tuple ( self . _arguments ) @property def function_name ( self ) -> Identifier : return self . _function_name","title":"FunctionCall"},{"location":"api-reference/ir/yul/function-definition/","text":"woke.ast.ir.yul.function_definition module # FunctionDefinition class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/function_definition.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class FunctionDefinition ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _body : Block _name : str _parameters : Optional [ List [ TypedName ]] _return_variables : Optional [ List [ TypedName ]] def __init__ ( self , init : IrInitTuple , function_definition : YulFunctionDefinition , parent : YulAbc , ): super () . __init__ ( init , function_definition , parent ) self . _body = Block ( init , function_definition . body , self ) self . _name = function_definition . name if function_definition . parameters is None : self . _parameters = None else : self . _parameters = [ TypedName ( init , parameter , self ) for parameter in function_definition . parameters ] if function_definition . return_variables is None : self . _return_variables = None else : self . _return_variables = [ TypedName ( init , return_variable , self ) for return_variable in function_definition . return_variables ] def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _body if self . _parameters is not None : for parameter in self . _parameters : yield from parameter if self . _return_variables is not None : for return_variable in self . _return_variables : yield from return_variable @property def parent ( self ) -> Block : return self . _parent @property def body ( self ) -> Block : return self . _body @property def name ( self ) -> str : return self . _name @property def parameters ( self ) -> Optional [ Tuple [ TypedName ]]: if self . _parameters is None : return None return tuple ( self . _parameters ) @property def return_variables ( self ) -> Optional [ Tuple [ TypedName ]]: if self . _return_variables is None : return None return tuple ( self . _return_variables )","title":"Function definition"},{"location":"api-reference/ir/yul/function-definition/#woke.ast.ir.yul.function_definition","text":"","title":"function_definition"},{"location":"api-reference/ir/yul/function-definition/#woke.ast.ir.yul.function_definition.FunctionDefinition","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/function_definition.py 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 class FunctionDefinition ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _body : Block _name : str _parameters : Optional [ List [ TypedName ]] _return_variables : Optional [ List [ TypedName ]] def __init__ ( self , init : IrInitTuple , function_definition : YulFunctionDefinition , parent : YulAbc , ): super () . __init__ ( init , function_definition , parent ) self . _body = Block ( init , function_definition . body , self ) self . _name = function_definition . name if function_definition . parameters is None : self . _parameters = None else : self . _parameters = [ TypedName ( init , parameter , self ) for parameter in function_definition . parameters ] if function_definition . return_variables is None : self . _return_variables = None else : self . _return_variables = [ TypedName ( init , return_variable , self ) for return_variable in function_definition . return_variables ] def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _body if self . _parameters is not None : for parameter in self . _parameters : yield from parameter if self . _return_variables is not None : for return_variable in self . _return_variables : yield from return_variable @property def parent ( self ) -> Block : return self . _parent @property def body ( self ) -> Block : return self . _body @property def name ( self ) -> str : return self . _name @property def parameters ( self ) -> Optional [ Tuple [ TypedName ]]: if self . _parameters is None : return None return tuple ( self . _parameters ) @property def return_variables ( self ) -> Optional [ Tuple [ TypedName ]]: if self . _return_variables is None : return None return tuple ( self . _return_variables )","title":"FunctionDefinition"},{"location":"api-reference/ir/yul/identifier/","text":"woke.ast.ir.yul.identifier module # Identifier class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/identifier.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class Identifier ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , ] _name : str _external_reference : Optional [ ExternalReference ] def __init__ ( self , init : IrInitTuple , identifier : YulIdentifier , parent : YulAbc ): super () . __init__ ( init , identifier , parent ) self . _name = identifier . name self . _external_reference = None @property def parent ( self , ) -> Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , ]: return self . _parent @property def name ( self ) -> str : return self . _name @property def external_reference ( self ) -> Optional [ ExternalReference ]: return self . _external_reference","title":"Identifier"},{"location":"api-reference/ir/yul/identifier/#woke.ast.ir.yul.identifier","text":"","title":"identifier"},{"location":"api-reference/ir/yul/identifier/#woke.ast.ir.yul.identifier.Identifier","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/identifier.py 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 class Identifier ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , ] _name : str _external_reference : Optional [ ExternalReference ] def __init__ ( self , init : IrInitTuple , identifier : YulIdentifier , parent : YulAbc ): super () . __init__ ( init , identifier , parent ) self . _name = identifier . name self . _external_reference = None @property def parent ( self , ) -> Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , ]: return self . _parent @property def name ( self ) -> str : return self . _name @property def external_reference ( self ) -> Optional [ ExternalReference ]: return self . _external_reference","title":"Identifier"},{"location":"api-reference/ir/yul/if-statement/","text":"woke.ast.ir.yul.if_statement module # If class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/if_statement.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class If ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _body : Block _condition : Union [ FunctionCall , Identifier , Literal ] def __init__ ( self , init : IrInitTuple , if_statement : YulIf , parent : YulAbc ): super () . __init__ ( init , if_statement , parent ) self . _body = Block ( init , if_statement . body , self ) if isinstance ( if_statement . condition , YulFunctionCall ): self . _condition = FunctionCall ( init , if_statement . condition , self ) elif isinstance ( if_statement . condition , YulIdentifier ): self . _condition = Identifier ( init , if_statement . condition , self ) elif isinstance ( if_statement . condition , YulLiteral ): self . _condition = Literal ( init , if_statement . condition , self ) else : assert False , f \"Unexpected type: { type ( if_statement . condition ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _condition yield from self . _body @property def parent ( self ) -> Block : return self . _parent @property def body ( self ) -> Block : return self . _body @property def condition ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _condition","title":"If statement"},{"location":"api-reference/ir/yul/if-statement/#woke.ast.ir.yul.if_statement","text":"","title":"if_statement"},{"location":"api-reference/ir/yul/if-statement/#woke.ast.ir.yul.if_statement.If","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/if_statement.py 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 class If ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _body : Block _condition : Union [ FunctionCall , Identifier , Literal ] def __init__ ( self , init : IrInitTuple , if_statement : YulIf , parent : YulAbc ): super () . __init__ ( init , if_statement , parent ) self . _body = Block ( init , if_statement . body , self ) if isinstance ( if_statement . condition , YulFunctionCall ): self . _condition = FunctionCall ( init , if_statement . condition , self ) elif isinstance ( if_statement . condition , YulIdentifier ): self . _condition = Identifier ( init , if_statement . condition , self ) elif isinstance ( if_statement . condition , YulLiteral ): self . _condition = Literal ( init , if_statement . condition , self ) else : assert False , f \"Unexpected type: { type ( if_statement . condition ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _condition yield from self . _body @property def parent ( self ) -> Block : return self . _parent @property def body ( self ) -> Block : return self . _body @property def condition ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _condition","title":"If"},{"location":"api-reference/ir/yul/leave/","text":"woke.ast.ir.yul.leave module # Leave class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/leave.py 11 12 13 14 15 16 17 18 19 class Leave ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block @property def parent ( self ) -> Block : return self . _parent","title":"Leave"},{"location":"api-reference/ir/yul/leave/#woke.ast.ir.yul.leave","text":"","title":"leave"},{"location":"api-reference/ir/yul/leave/#woke.ast.ir.yul.leave.Leave","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/leave.py 11 12 13 14 15 16 17 18 19 class Leave ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block @property def parent ( self ) -> Block : return self . _parent","title":"Leave"},{"location":"api-reference/ir/yul/literal/","text":"woke.ast.ir.yul.literal module # Literal class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/literal.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class Literal ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , Case , ] _kind : YulLiteralValueKind _type : str _value : Optional [ str ] _hex_value : Optional [ str ] def __init__ ( self , init : IrInitTuple , literal : YulLiteral , parent : YulAbc ): super () . __init__ ( init , literal , parent ) self . _kind = literal . kind self . _type = literal . type self . _value = literal . value self . _hex_value = literal . hex_value @property def parent ( self , ) -> Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , Case , ]: return self . _parent @property def kind ( self ) -> YulLiteralValueKind : return self . _kind @property def type ( self ) -> str : return self . _type @property def value ( self ) -> Optional [ str ]: return self . _value @property def hex_value ( self ) -> Optional [ str ]: return self . _hex_value","title":"Literal"},{"location":"api-reference/ir/yul/literal/#woke.ast.ir.yul.literal","text":"","title":"literal"},{"location":"api-reference/ir/yul/literal/#woke.ast.ir.yul.literal.Literal","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/literal.py 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 65 66 67 68 69 70 71 72 73 74 75 76 77 class Literal ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , Case , ] _kind : YulLiteralValueKind _type : str _value : Optional [ str ] _hex_value : Optional [ str ] def __init__ ( self , init : IrInitTuple , literal : YulLiteral , parent : YulAbc ): super () . __init__ ( init , literal , parent ) self . _kind = literal . kind self . _type = literal . type self . _value = literal . value self . _hex_value = literal . hex_value @property def parent ( self , ) -> Union [ Assignment , ExpressionStatement , ForLoop , If , Switch , VariableDeclaration , FunctionCall , Case , ]: return self . _parent @property def kind ( self ) -> YulLiteralValueKind : return self . _kind @property def type ( self ) -> str : return self . _type @property def value ( self ) -> Optional [ str ]: return self . _value @property def hex_value ( self ) -> Optional [ str ]: return self . _hex_value","title":"Literal"},{"location":"api-reference/ir/yul/switch/","text":"woke.ast.ir.yul.switch module # Switch class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/switch.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Switch ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _cases : List [ Case ] _expression : Union [ FunctionCall , Identifier , Literal ] def __init__ ( self , init : IrInitTuple , switch : YulSwitch , parent : YulAbc ): super () . __init__ ( init , switch , parent ) if isinstance ( switch . expression , YulFunctionCall ): self . _expression = FunctionCall ( init , switch . expression , self ) elif isinstance ( switch . expression , YulIdentifier ): self . _expression = Identifier ( init , switch . expression , self ) elif isinstance ( switch . expression , YulLiteral ): self . _expression = Literal ( init , switch . expression , self ) else : assert False , f \"Unexpected type: { type ( switch . expression ) } \" self . _cases = [ Case ( init , case , self ) for case in switch . cases ] def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _expression for case_ in self . _cases : yield from case_ @property def parent ( self ) -> Block : return self . _parent @property def cases ( self ) -> Tuple [ Case ]: return tuple ( self . _cases ) @property def expression ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _expression","title":"Switch"},{"location":"api-reference/ir/yul/switch/#woke.ast.ir.yul.switch","text":"","title":"switch"},{"location":"api-reference/ir/yul/switch/#woke.ast.ir.yul.switch.Switch","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/switch.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 class Switch ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _cases : List [ Case ] _expression : Union [ FunctionCall , Identifier , Literal ] def __init__ ( self , init : IrInitTuple , switch : YulSwitch , parent : YulAbc ): super () . __init__ ( init , switch , parent ) if isinstance ( switch . expression , YulFunctionCall ): self . _expression = FunctionCall ( init , switch . expression , self ) elif isinstance ( switch . expression , YulIdentifier ): self . _expression = Identifier ( init , switch . expression , self ) elif isinstance ( switch . expression , YulLiteral ): self . _expression = Literal ( init , switch . expression , self ) else : assert False , f \"Unexpected type: { type ( switch . expression ) } \" self . _cases = [ Case ( init , case , self ) for case in switch . cases ] def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self yield from self . _expression for case_ in self . _cases : yield from case_ @property def parent ( self ) -> Block : return self . _parent @property def cases ( self ) -> Tuple [ Case ]: return tuple ( self . _cases ) @property def expression ( self ) -> Union [ FunctionCall , Identifier , Literal ]: return self . _expression","title":"Switch"},{"location":"api-reference/ir/yul/typed-name/","text":"woke.ast.ir.yul.typed_name module # TypedName class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/typed_name.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class TypedName ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ FunctionDefinition , VariableDeclaration ] _name : str _type : str def __init__ ( self , init : IrInitTuple , typed_name : YulTypedName , parent : YulAbc ): super () . __init__ ( init , typed_name , parent ) self . _name = typed_name . name self . _type = typed_name . type @property def parent ( self ) -> Union [ FunctionDefinition , VariableDeclaration ]: return self . _parent @property def name ( self ) -> str : return self . _name @property def type ( self ) -> str : return self . _type","title":"Typed name"},{"location":"api-reference/ir/yul/typed-name/#woke.ast.ir.yul.typed_name","text":"","title":"typed_name"},{"location":"api-reference/ir/yul/typed-name/#woke.ast.ir.yul.typed_name.TypedName","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/typed_name.py 15 16 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 class TypedName ( YulAbc ): \"\"\" TBD \"\"\" _parent : Union [ FunctionDefinition , VariableDeclaration ] _name : str _type : str def __init__ ( self , init : IrInitTuple , typed_name : YulTypedName , parent : YulAbc ): super () . __init__ ( init , typed_name , parent ) self . _name = typed_name . name self . _type = typed_name . type @property def parent ( self ) -> Union [ FunctionDefinition , VariableDeclaration ]: return self . _parent @property def name ( self ) -> str : return self . _name @property def type ( self ) -> str : return self . _type","title":"TypedName"},{"location":"api-reference/ir/yul/variable-declaration/","text":"woke.ast.ir.yul.variable_declaration module # VariableDeclaration class # Bases: YulAbc TBD Source code in woke/ast/ir/yul/variable_declaration.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class VariableDeclaration ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _variables : List [ TypedName ] _value : Optional [ Union [ FunctionCall , Identifier , Literal ]] def __init__ ( self , init : IrInitTuple , variable_declaration : YulVariableDeclaration , parent : YulAbc , ): super () . __init__ ( init , variable_declaration , parent ) self . _variables = [ TypedName ( init , variable , self ) for variable in variable_declaration . variables ] if variable_declaration . value is None : self . _value = None elif isinstance ( variable_declaration . value , YulFunctionCall ): self . _value = FunctionCall ( init , variable_declaration . value , self ) elif isinstance ( variable_declaration . value , YulIdentifier ): self . _value = Identifier ( init , variable_declaration . value , self ) elif isinstance ( variable_declaration . value , YulLiteral ): self . _value = Literal ( init , variable_declaration . value , self ) else : assert False , f \"Unexpected type: { type ( variable_declaration . value ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self for variable in self . _variables : yield from variable if self . _value is not None : yield from self . _value @property def parent ( self ) -> Block : return self . _parent @property def variables ( self ) -> Tuple [ TypedName ]: return tuple ( self . _variables ) @property def value ( self ) -> Optional [ Union [ FunctionCall , Identifier , Literal ]]: return self . _value","title":"Variable declaration"},{"location":"api-reference/ir/yul/variable-declaration/#woke.ast.ir.yul.variable_declaration","text":"","title":"variable_declaration"},{"location":"api-reference/ir/yul/variable-declaration/#woke.ast.ir.yul.variable_declaration.VariableDeclaration","text":"Bases: YulAbc TBD Source code in woke/ast/ir/yul/variable_declaration.py 17 18 19 20 21 22 23 24 25 26 27 28 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 59 60 61 62 63 64 class VariableDeclaration ( YulAbc ): \"\"\" TBD \"\"\" _parent : Block _variables : List [ TypedName ] _value : Optional [ Union [ FunctionCall , Identifier , Literal ]] def __init__ ( self , init : IrInitTuple , variable_declaration : YulVariableDeclaration , parent : YulAbc , ): super () . __init__ ( init , variable_declaration , parent ) self . _variables = [ TypedName ( init , variable , self ) for variable in variable_declaration . variables ] if variable_declaration . value is None : self . _value = None elif isinstance ( variable_declaration . value , YulFunctionCall ): self . _value = FunctionCall ( init , variable_declaration . value , self ) elif isinstance ( variable_declaration . value , YulIdentifier ): self . _value = Identifier ( init , variable_declaration . value , self ) elif isinstance ( variable_declaration . value , YulLiteral ): self . _value = Literal ( init , variable_declaration . value , self ) else : assert False , f \"Unexpected type: { type ( variable_declaration . value ) } \" def __iter__ ( self ) -> Iterator [ YulAbc ]: yield self for variable in self . _variables : yield from variable if self . _value is not None : yield from self . _value @property def parent ( self ) -> Block : return self . _parent @property def variables ( self ) -> Tuple [ TypedName ]: return tuple ( self . _variables ) @property def value ( self ) -> Optional [ Union [ FunctionCall , Identifier , Literal ]]: return self . _value","title":"VariableDeclaration"}]}