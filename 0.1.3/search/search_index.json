{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Woke # Woke is a Python-based development and testing framework for Solidity. Features # LSP server property-based fuzzer Installation # Woke requires Python 3.7 or higher. Using pip # pip3 install abch-woke The property-based fuzzer can be installed as an extra dependency. Due to the dependency on eth-brownie , it is recommended to install it into a virtual environment . pip3 install abch-woke [ fuzzer ]","title":"Installation"},{"location":"#woke","text":"Woke is a Python-based development and testing framework for Solidity.","title":"Woke"},{"location":"#features","text":"LSP server property-based fuzzer","title":"Features"},{"location":"#installation","text":"Woke requires Python 3.7 or higher.","title":"Installation"},{"location":"#using-pip","text":"pip3 install abch-woke The property-based fuzzer can be installed as an extra dependency. Due to the dependency on eth-brownie , it is recommended to install it into a virtual environment . pip3 install abch-woke [ fuzzer ]","title":"Using pip"},{"location":"configuration/","text":"Configuration # Woke can be configured using optional configuration files. The global configuration file is located in: $HOME/.config/Woke/config.toml on Linux/MacOS, %USERPROFILE%\\Woke\\config.toml on Windows. Additionally, the configuration file for each project can be located in {PROJECT_PATH}/woke.toml . Attention Configuration options loaded from TOML files affect only the behavior of the Woke command-line tool. LSP configuration options are loaded from LSP clients using the standard interface . Subconfigs # Any configuration file can include additional configuration files (subconfigs). These subconfigs are loaded after the original configuration file in the specified order. Subconfig configuration values override the values of the parent configuration file. Example woke.toml subconfigs = [ \"loaded_next.toml\" , \"../relative.toml\" , \"/tmp/absolute.toml\" , \"loaded_last.toml\" ] Configuration options # The resolution order for each configuration option is: default value, value in the global configuration file, value in the project configuration file. Example woke.toml subconfigs = [ \"./config1.toml\" , \"config2.toml\" ] [compiler.solc] evm_version = \"london\" include_paths = [ \"node_modules\" , \"lib\" ] remappings = [ \"@openzeppelin/=node_modules/@openzeppelin/\" ] target_version = \"0.8.10\" via_IR = true [compiler.solc.optimizer] enabled = true runs = 1000 compiler.solc namespace # {CWD} in the following table represents the current working directory (i.e. the directory from which the woke command is being executed). Option Description Default value allow_paths Allow paths passed to the solc executable [] evm_version EVM version as specified by the Solidity docs \"\" (let the compiler decide) ignore_paths Files in these paths are not compiled unless imported from other non-ignored files [{CWD}/.woke-build, {CWD}/node_modules] include_paths Paths (along with {CWD} ) where files from non-relative imports are searched [{CWD}/node_modules] remappings Compiler remappings as specified by the Solidity docs [] target_version Target solc version used to compile the project \"\" (use the latest version for each compilation unit) via_IR Compile the code via the Yul intermediate language (see the Solidity docs ) \"\" (let the compiler decide) Info The include_paths option is the preferred way to handle imports of libraries. Remappings should be used only when include_paths cannot be used (e.g. when the import path differs from the system path of the imported file). compiler.solc.optimizer namespace # Option Description Default value enabled Compile the project with solc optimizations enabled. Leaving this unset disables most of the available optimizations. Setting this to false disables all optimizations for Solidity <0.8.6 and has the same behavior as leaving this unset for Solidity >=0.8.6. \"\" (unset) runs Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage. 200 lsp.code_lens namespace # Option Description Default value enable Enable LSP code lens language feature. false lsp.find_references namespace # Configuration options specific to the LSP Find references request. Option Description Default value include_declarations Also include declarations in Find references request results. false","title":"Configuration"},{"location":"configuration/#configuration","text":"Woke can be configured using optional configuration files. The global configuration file is located in: $HOME/.config/Woke/config.toml on Linux/MacOS, %USERPROFILE%\\Woke\\config.toml on Windows. Additionally, the configuration file for each project can be located in {PROJECT_PATH}/woke.toml . Attention Configuration options loaded from TOML files affect only the behavior of the Woke command-line tool. LSP configuration options are loaded from LSP clients using the standard interface .","title":"Configuration"},{"location":"configuration/#subconfigs","text":"Any configuration file can include additional configuration files (subconfigs). These subconfigs are loaded after the original configuration file in the specified order. Subconfig configuration values override the values of the parent configuration file. Example woke.toml subconfigs = [ \"loaded_next.toml\" , \"../relative.toml\" , \"/tmp/absolute.toml\" , \"loaded_last.toml\" ]","title":"Subconfigs"},{"location":"configuration/#configuration-options","text":"The resolution order for each configuration option is: default value, value in the global configuration file, value in the project configuration file. Example woke.toml subconfigs = [ \"./config1.toml\" , \"config2.toml\" ] [compiler.solc] evm_version = \"london\" include_paths = [ \"node_modules\" , \"lib\" ] remappings = [ \"@openzeppelin/=node_modules/@openzeppelin/\" ] target_version = \"0.8.10\" via_IR = true [compiler.solc.optimizer] enabled = true runs = 1000","title":"Configuration options"},{"location":"configuration/#compilersolc-namespace","text":"{CWD} in the following table represents the current working directory (i.e. the directory from which the woke command is being executed). Option Description Default value allow_paths Allow paths passed to the solc executable [] evm_version EVM version as specified by the Solidity docs \"\" (let the compiler decide) ignore_paths Files in these paths are not compiled unless imported from other non-ignored files [{CWD}/.woke-build, {CWD}/node_modules] include_paths Paths (along with {CWD} ) where files from non-relative imports are searched [{CWD}/node_modules] remappings Compiler remappings as specified by the Solidity docs [] target_version Target solc version used to compile the project \"\" (use the latest version for each compilation unit) via_IR Compile the code via the Yul intermediate language (see the Solidity docs ) \"\" (let the compiler decide) Info The include_paths option is the preferred way to handle imports of libraries. Remappings should be used only when include_paths cannot be used (e.g. when the import path differs from the system path of the imported file).","title":"compiler.solc namespace"},{"location":"configuration/#compilersolcoptimizer-namespace","text":"Option Description Default value enabled Compile the project with solc optimizations enabled. Leaving this unset disables most of the available optimizations. Setting this to false disables all optimizations for Solidity <0.8.6 and has the same behavior as leaving this unset for Solidity >=0.8.6. \"\" (unset) runs Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage. 200","title":"compiler.solc.optimizer namespace"},{"location":"configuration/#lspcode_lens-namespace","text":"Option Description Default value enable Enable LSP code lens language feature. false","title":"lsp.code_lens namespace"},{"location":"configuration/#lspfind_references-namespace","text":"Configuration options specific to the LSP Find references request. Option Description Default value include_declarations Also include declarations in Find references request results. false","title":"lsp.find_references namespace"},{"location":"contributing/","text":"Contributing # Creating a virtual environment # Using virtualenvwrapper # mkvirtualenv woke Using venv # python3 -m venv env source env/bin/activate Installation # pip install -e \".[fuzzer,tests,dev]\" Pyright, our static type checker, is distributed through npm: npm i -g pyright Git hooks # For Unix-like platforms, we provide up git hooks to help with development. After cloning, execute. chmod +x ./setup-githooks.sh ./setup-githooks.sh Git hooks automatically run these commands when you commit: pytest tests -m \"not slow\" when the WOKE_HOOKS_RUN_ALL_TESTS environment variable is not set ( pytest tests is run otherwise) pyright on Python files being committed black on Python files being committed isort on Python files being committed mkdocs build --strict to make sure the documentation does not contain errors Any unstaged changes and untracked files are stashed before running the git pre-commit hook. After the commit is made, the stashed changes are popped from the stash. If this leads to a merge conflict, the stashed changes are left at the top of the stash.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#creating-a-virtual-environment","text":"","title":"Creating a virtual environment"},{"location":"contributing/#using-virtualenvwrapper","text":"mkvirtualenv woke","title":"Using virtualenvwrapper"},{"location":"contributing/#using-venv","text":"python3 -m venv env source env/bin/activate","title":"Using venv"},{"location":"contributing/#installation","text":"pip install -e \".[fuzzer,tests,dev]\" Pyright, our static type checker, is distributed through npm: npm i -g pyright","title":"Installation"},{"location":"contributing/#git-hooks","text":"For Unix-like platforms, we provide up git hooks to help with development. After cloning, execute. chmod +x ./setup-githooks.sh ./setup-githooks.sh Git hooks automatically run these commands when you commit: pytest tests -m \"not slow\" when the WOKE_HOOKS_RUN_ALL_TESTS environment variable is not set ( pytest tests is run otherwise) pyright on Python files being committed black on Python files being committed isort on Python files being committed mkdocs build --strict to make sure the documentation does not contain errors Any unstaged changes and untracked files are stashed before running the git pre-commit hook. After the commit is made, the stashed changes are popped from the stash. If this leads to a merge conflict, the stashed changes are left at the top of the stash.","title":"Git hooks"},{"location":"fuzzer/","text":"Woke fuzzer # Woke fuzzer is a property-based fuzzer for Solidity smart contracts that allows testers to write their fuzz tests in Python. Installation # Warning Woke fuzzer uses eth-brownie package. For this reason, it is recommended to install Woke fuzzer into a virtual environment . It may be also needed to create a brownie-config.yaml configuration file so that Brownie can compile the project. Woke fuzzer is an optional feature of Woke and can be installed with pip: pip install abch-woke [ fuzzer ] Getting started # To get started, run the following command inside the project directory: woke init fuzz This command creates pytypes directory, generates smart contract's Python bindings and also copies an example file test_example.py into tests directory. Apart from having useful comments, this example file showcases basic structure of Woke fuzzer's fuzz tests which consists of: TestingSequence classes with methods decorated as Flows and Invariants that are used for fuzz testing and an __init__ method which is used for TestingSequence class setup and can also deploy contracts, test_* methods that run Woke fuzzer's Campaign with the TestingSequence class. Tip All of these can also be separated into multiple files, see a verbose directory structure . TestingSequence and Campaign # TestingSequence is a tester defined class that specifies Flows and Invariants that will be later used for fuzz testing and it is also used to set up any prerequisites such as contract deployment or instance attributes later used in tests (contract owner, etc.) The Campaign class is a Woke fuzzer class that is responsible for the actual sequence generation and Flows and Invariants execution from TestingSequence . The number of generated sequences and Flows must be specified as arguments of the run function. The development chain network gets reverted between the sequences. In the example below, the contract is deployed and the Campaign is run with 1000 sequences consisting of 400 flows. import brownie from pytypes import VotingContractType from woke.fuzzer import Campaign from woke.fuzzer.random import random_account class TestingSequence : def __init ( self , contract : VotingContractType ): self . owner = random_account () self . contract = contract . deploy ({ \"from\" : self . owner }) self . subjects = {} # flows and invariants also go here def test_campaign ( voting_contract : VotingContractType ): for _ in range ( 1 ): brownie . accounts . add () campaign = Campaign ( lambda : TestingSequence ( VotingContractType )) campaign . run ( 1000 , 400 ) The number of execution times for a Flow per sequence can be tuned using decorators . Flows # A Flow is a test method with @flow decorator that uses the fuzzed smart contract and specifies where Woke fuzzer should insert randomly generated data. import brownie from woke.fuzzer.decorators import flow from woke.fuzzer.random import random_account , random_string ... @flow def flow_add_subject ( self ): brownie . accounts . add () subject_name = random_string ( 0 , 10 ) subject_account = random_account ( predicate = lambda a : a != self . owner and a not in self . subjects ) if len ( subject_name ) == 0 or subject_account in self . subjects : with brownie . reverts (): self . contract . addSubject ( subject_name , { \"from\" : subject_account }) else : self . contract . addSubject ( subject_name , { \"from\" : subject_account }) self . subjects [ subject_account ] = ( subject_name , 0 ) A sequence of these Flows is generated and executed by the Campaign class. brownie.reverts is used when a transaction is expected to revert. Should a contract fail to revert the transaction, it will be reported as a bug by the fuzzer. Invariants # Woke fuzzer is a property-based fuzzer, and as such, it allows testers to define Invariant methods with @invariant decorator. These Invariant methods check for correctness of certain properties in deployed fuzzed smart contracts after every Flow execution. from woke.fuzzer.decorators import invariant from woke.fuzzer.random import random_account ... @invariant def invariant_subjects ( self ): anyone = random_account () subjects = self . contract . getSubjects ({ \"from\" : anyone }) assert len ( subjects ) == len ( self . subjects ) for subject in subjects : anyone = random_account () subj = self . contract . getSubject ( subject , { \"from\" : anyone }) assert self . subjects [ subject ][ 0 ] == subj [ \"name\" ] assert self . subjects [ subject ][ 1 ] == subj [ \"votes\" ] Should any of the asserts in Invariant method fail, it will be reported as a bug by the fuzzer. Generating pseudo-random data # Woke fuzzer has several built-in methods for generating pseudo-random data: random_account chooses a random account from existing brownie accounts, random_int generates random integer but with custom (increased) probabilities for min , max and 0 , random_bool picks True/False randomly, random_string can construct a random string of given min and max length, random_bytes generates a sequence of random bytes with given min and max length. Some of the methods mentioned above also have other optional parameters such as predicates that can be used to further restrict which values will be generated, see source code for full specification. Running the fuzzer # After writing Flows and Invariants , Woke fuzzer can be run with all fuzz test files using: woke fuzz Or with specified fuzz test files: woke fuzz ./tests/test_token.py Info Woke fuzzer runs with multiple processes by default . Be sure to check out woke fuzz --help for optional CLI arguments . Checking out the progress # While fuzzing, the progress is reported in the console stating how many processes are still running. More verbose logs are stored in .woke-logs/fuzz directory, specifically the latest one for the last fuzzing campaign. Tip We recommend using less -r to view the log files because they are ANSI code coloured. What to do when Woke fuzzer finds a bug # When Woke fuzzer finds a bug, it will print out a standard Python traceback and ask if a debugger should be attached. With the debugger not being attached, the current process is stopped but the rest of the processes continue fuzzing. The bug can be later checked out in execution logs the same way as when checking out the progress . With the debugger attached, IPython debugger instance is created which allows exploring the state of the fuzzing instance and development chain. Decorators # Apart from the @flow and @invariant that define type of the test method there are also decorators that can be used to tune Flow selection in a generated sequence: @weight(x) - specifies weight that will be used when generating a sequence with default weight being 100. Say flow1 has weight 100 and flow2 has weight 200, flow2 will have ~ \\(\\frac{2}{3}\\) of the executions and flow1 only ~ \\(\\frac{1}{3}\\) , @max_times(x) - specifies maximum times a Flow will be called in one generated sequence, @ignore - instructs Woke fuzzer to ignore the decorated Flow or Invariant , useful for testing and debugging. Optional CLI arguments # $ woke fuzz --help Usage: woke fuzz [OPTIONS] [PATHS]... Run Woke fuzzer. Options: -n, --process-count INTEGER Number of processes to create for fuzzing. -s, --seed TEXT Random seeds --passive Print one process output into console, run other in background. --network TEXT Choose brownie dev chain. Default is 'development' for ganache --help Show this message and exit. Fuzzing with multiple processes # By default, Woke fuzzer performs fuzzing with a number of processes equal to the number of CPU cores. -n can be used to specify the number of processes. Development chain # ganache-cli is used as a default command to spawn a local dev chain for each process. It's important to have ports 8545 to (8545 + # of processes) free and bindable. Woke fuzzer uses dev chain configuration from Brownie so other development chains such as anvil or hardhat can be selected with --network option, but make sure that Brownie actually fully supports the dev chain. Random seed selection # To make fuzzing reproducible, it's possible to specify a seed used when generating random data with -s . With multiple seeds specified, each seed is assigned to a different process and the remaining seeds are generated randomly. Passive mode # For debugging purposes, it's possible to run Woke fuzzer in passive mode using the --passive option. In this mode, Woke fuzzer will print out the output of the process #0 to the console. Python bindings # To make working with contracts a bit easier, Woke fuzzer generates Python bindings from smart contract's ABI into the pytypes directory of the project. Recommended directory structure # For bigger projects, we recommend splitting up contract setup, Flow definition and test_*.py files. project/ \u251c\u2500\u2500 contracts/ \u2502 \u251c\u2500\u2500 Token.sol \u2502 \u2514\u2500\u2500 Amm.sol \u2514\u2500\u2500 tests/ \u251c\u2500\u2500 token \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2514\u2500\u2500 flows.py \u251c\u2500\u2500 amm \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2514\u2500\u2500 flows.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_token.py \u2514\u2500\u2500 test_amm.py","title":"Fuzzer"},{"location":"fuzzer/#woke-fuzzer","text":"Woke fuzzer is a property-based fuzzer for Solidity smart contracts that allows testers to write their fuzz tests in Python.","title":"Woke fuzzer"},{"location":"fuzzer/#installation","text":"Warning Woke fuzzer uses eth-brownie package. For this reason, it is recommended to install Woke fuzzer into a virtual environment . It may be also needed to create a brownie-config.yaml configuration file so that Brownie can compile the project. Woke fuzzer is an optional feature of Woke and can be installed with pip: pip install abch-woke [ fuzzer ]","title":"Installation"},{"location":"fuzzer/#getting-started","text":"To get started, run the following command inside the project directory: woke init fuzz This command creates pytypes directory, generates smart contract's Python bindings and also copies an example file test_example.py into tests directory. Apart from having useful comments, this example file showcases basic structure of Woke fuzzer's fuzz tests which consists of: TestingSequence classes with methods decorated as Flows and Invariants that are used for fuzz testing and an __init__ method which is used for TestingSequence class setup and can also deploy contracts, test_* methods that run Woke fuzzer's Campaign with the TestingSequence class. Tip All of these can also be separated into multiple files, see a verbose directory structure .","title":"Getting started"},{"location":"fuzzer/#testingsequence-and-campaign","text":"TestingSequence is a tester defined class that specifies Flows and Invariants that will be later used for fuzz testing and it is also used to set up any prerequisites such as contract deployment or instance attributes later used in tests (contract owner, etc.) The Campaign class is a Woke fuzzer class that is responsible for the actual sequence generation and Flows and Invariants execution from TestingSequence . The number of generated sequences and Flows must be specified as arguments of the run function. The development chain network gets reverted between the sequences. In the example below, the contract is deployed and the Campaign is run with 1000 sequences consisting of 400 flows. import brownie from pytypes import VotingContractType from woke.fuzzer import Campaign from woke.fuzzer.random import random_account class TestingSequence : def __init ( self , contract : VotingContractType ): self . owner = random_account () self . contract = contract . deploy ({ \"from\" : self . owner }) self . subjects = {} # flows and invariants also go here def test_campaign ( voting_contract : VotingContractType ): for _ in range ( 1 ): brownie . accounts . add () campaign = Campaign ( lambda : TestingSequence ( VotingContractType )) campaign . run ( 1000 , 400 ) The number of execution times for a Flow per sequence can be tuned using decorators .","title":"TestingSequence and Campaign"},{"location":"fuzzer/#flows","text":"A Flow is a test method with @flow decorator that uses the fuzzed smart contract and specifies where Woke fuzzer should insert randomly generated data. import brownie from woke.fuzzer.decorators import flow from woke.fuzzer.random import random_account , random_string ... @flow def flow_add_subject ( self ): brownie . accounts . add () subject_name = random_string ( 0 , 10 ) subject_account = random_account ( predicate = lambda a : a != self . owner and a not in self . subjects ) if len ( subject_name ) == 0 or subject_account in self . subjects : with brownie . reverts (): self . contract . addSubject ( subject_name , { \"from\" : subject_account }) else : self . contract . addSubject ( subject_name , { \"from\" : subject_account }) self . subjects [ subject_account ] = ( subject_name , 0 ) A sequence of these Flows is generated and executed by the Campaign class. brownie.reverts is used when a transaction is expected to revert. Should a contract fail to revert the transaction, it will be reported as a bug by the fuzzer.","title":"Flows"},{"location":"fuzzer/#invariants","text":"Woke fuzzer is a property-based fuzzer, and as such, it allows testers to define Invariant methods with @invariant decorator. These Invariant methods check for correctness of certain properties in deployed fuzzed smart contracts after every Flow execution. from woke.fuzzer.decorators import invariant from woke.fuzzer.random import random_account ... @invariant def invariant_subjects ( self ): anyone = random_account () subjects = self . contract . getSubjects ({ \"from\" : anyone }) assert len ( subjects ) == len ( self . subjects ) for subject in subjects : anyone = random_account () subj = self . contract . getSubject ( subject , { \"from\" : anyone }) assert self . subjects [ subject ][ 0 ] == subj [ \"name\" ] assert self . subjects [ subject ][ 1 ] == subj [ \"votes\" ] Should any of the asserts in Invariant method fail, it will be reported as a bug by the fuzzer.","title":"Invariants"},{"location":"fuzzer/#generating-pseudo-random-data","text":"Woke fuzzer has several built-in methods for generating pseudo-random data: random_account chooses a random account from existing brownie accounts, random_int generates random integer but with custom (increased) probabilities for min , max and 0 , random_bool picks True/False randomly, random_string can construct a random string of given min and max length, random_bytes generates a sequence of random bytes with given min and max length. Some of the methods mentioned above also have other optional parameters such as predicates that can be used to further restrict which values will be generated, see source code for full specification.","title":"Generating pseudo-random data"},{"location":"fuzzer/#running-the-fuzzer","text":"After writing Flows and Invariants , Woke fuzzer can be run with all fuzz test files using: woke fuzz Or with specified fuzz test files: woke fuzz ./tests/test_token.py Info Woke fuzzer runs with multiple processes by default . Be sure to check out woke fuzz --help for optional CLI arguments .","title":"Running the fuzzer"},{"location":"fuzzer/#checking-out-the-progress","text":"While fuzzing, the progress is reported in the console stating how many processes are still running. More verbose logs are stored in .woke-logs/fuzz directory, specifically the latest one for the last fuzzing campaign. Tip We recommend using less -r to view the log files because they are ANSI code coloured.","title":"Checking out the progress"},{"location":"fuzzer/#what-to-do-when-woke-fuzzer-finds-a-bug","text":"When Woke fuzzer finds a bug, it will print out a standard Python traceback and ask if a debugger should be attached. With the debugger not being attached, the current process is stopped but the rest of the processes continue fuzzing. The bug can be later checked out in execution logs the same way as when checking out the progress . With the debugger attached, IPython debugger instance is created which allows exploring the state of the fuzzing instance and development chain.","title":"What to do when Woke fuzzer finds a bug"},{"location":"fuzzer/#decorators","text":"Apart from the @flow and @invariant that define type of the test method there are also decorators that can be used to tune Flow selection in a generated sequence: @weight(x) - specifies weight that will be used when generating a sequence with default weight being 100. Say flow1 has weight 100 and flow2 has weight 200, flow2 will have ~ \\(\\frac{2}{3}\\) of the executions and flow1 only ~ \\(\\frac{1}{3}\\) , @max_times(x) - specifies maximum times a Flow will be called in one generated sequence, @ignore - instructs Woke fuzzer to ignore the decorated Flow or Invariant , useful for testing and debugging.","title":"Decorators"},{"location":"fuzzer/#optional-cli-arguments","text":"$ woke fuzz --help Usage: woke fuzz [OPTIONS] [PATHS]... Run Woke fuzzer. Options: -n, --process-count INTEGER Number of processes to create for fuzzing. -s, --seed TEXT Random seeds --passive Print one process output into console, run other in background. --network TEXT Choose brownie dev chain. Default is 'development' for ganache --help Show this message and exit.","title":"Optional CLI arguments"},{"location":"fuzzer/#fuzzing-with-multiple-processes","text":"By default, Woke fuzzer performs fuzzing with a number of processes equal to the number of CPU cores. -n can be used to specify the number of processes.","title":"Fuzzing with multiple processes"},{"location":"fuzzer/#development-chain","text":"ganache-cli is used as a default command to spawn a local dev chain for each process. It's important to have ports 8545 to (8545 + # of processes) free and bindable. Woke fuzzer uses dev chain configuration from Brownie so other development chains such as anvil or hardhat can be selected with --network option, but make sure that Brownie actually fully supports the dev chain.","title":"Development chain"},{"location":"fuzzer/#random-seed-selection","text":"To make fuzzing reproducible, it's possible to specify a seed used when generating random data with -s . With multiple seeds specified, each seed is assigned to a different process and the remaining seeds are generated randomly.","title":"Random seed selection"},{"location":"fuzzer/#passive-mode","text":"For debugging purposes, it's possible to run Woke fuzzer in passive mode using the --passive option. In this mode, Woke fuzzer will print out the output of the process #0 to the console.","title":"Passive mode"},{"location":"fuzzer/#python-bindings","text":"To make working with contracts a bit easier, Woke fuzzer generates Python bindings from smart contract's ABI into the pytypes directory of the project.","title":"Python bindings"},{"location":"fuzzer/#recommended-directory-structure","text":"For bigger projects, we recommend splitting up contract setup, Flow definition and test_*.py files. project/ \u251c\u2500\u2500 contracts/ \u2502 \u251c\u2500\u2500 Token.sol \u2502 \u2514\u2500\u2500 Amm.sol \u2514\u2500\u2500 tests/ \u251c\u2500\u2500 token \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2514\u2500\u2500 flows.py \u251c\u2500\u2500 amm \u2502 \u251c\u2500\u2500 setup.py \u2502 \u2514\u2500\u2500 flows.py \u251c\u2500\u2500 __init__.py \u251c\u2500\u2500 test_token.py \u2514\u2500\u2500 test_amm.py","title":"Recommended directory structure"},{"location":"language-server/","text":"Solidity LSP server # Woke implements an LSP server for Solidity. The only currently supported communication channel is TCP. Woke LSP server can be run using: woke lsp Or with an optional --port argument: woke lsp --port 1234 Info Multi-root workspaces are not currently supported. Projects using Woke server # VS Code Extension Configuration options # Server configuration options are loaded using the standard interface from LSP clients. The process of setting the configuration options is client specific. Configuration changes are handled by the server, and the project is recompiled if the compilation options change. The following configuration options are supported: woke.compiler.solc.allow_paths , woke.compiler.solc.evm_version , woke.compiler.solc.ignore_paths , woke.compiler.solc.include_paths , woke.compiler.solc.remappings , woke.compiler.solc.target_version , woke.compiler.solc.via_IR , woke.compiler.solc.optimizer.enabled , woke.compiler.solc.optimizer.runs , woke.lsp.find_references.include_declarations . The semantics of these configuration options are explained in the configuration section . Supported commands # Woke LSP server implements the command execution provider as specified by the LSP specification . The following commands are supported: Command Description woke.lsp.force_recompile Force recompile the opened project/files. Useful after modifying files outside the IDE (e.g. after installing npm packages). Features # Go to definition # Go to type definition # Go to implementation # Finds implementations of an unimplemented function or modifier. Find references # Type hierarchy # Also works for virtual functions. Document links # Hover # Includes links to documentation for OpenZeppelin contracts. Code lens # Number of references is shown above each declaration. Document symbols # Diagnostics # Rename # Debugging # Woke LSP server can be debugged using: woke --debug lsp","title":"LSP server"},{"location":"language-server/#solidity-lsp-server","text":"Woke implements an LSP server for Solidity. The only currently supported communication channel is TCP. Woke LSP server can be run using: woke lsp Or with an optional --port argument: woke lsp --port 1234 Info Multi-root workspaces are not currently supported.","title":"Solidity LSP server"},{"location":"language-server/#projects-using-woke-server","text":"VS Code Extension","title":"Projects using Woke server"},{"location":"language-server/#configuration-options","text":"Server configuration options are loaded using the standard interface from LSP clients. The process of setting the configuration options is client specific. Configuration changes are handled by the server, and the project is recompiled if the compilation options change. The following configuration options are supported: woke.compiler.solc.allow_paths , woke.compiler.solc.evm_version , woke.compiler.solc.ignore_paths , woke.compiler.solc.include_paths , woke.compiler.solc.remappings , woke.compiler.solc.target_version , woke.compiler.solc.via_IR , woke.compiler.solc.optimizer.enabled , woke.compiler.solc.optimizer.runs , woke.lsp.find_references.include_declarations . The semantics of these configuration options are explained in the configuration section .","title":"Configuration options"},{"location":"language-server/#supported-commands","text":"Woke LSP server implements the command execution provider as specified by the LSP specification . The following commands are supported: Command Description woke.lsp.force_recompile Force recompile the opened project/files. Useful after modifying files outside the IDE (e.g. after installing npm packages).","title":"Supported commands"},{"location":"language-server/#features","text":"","title":"Features"},{"location":"language-server/#go-to-definition","text":"","title":"Go to definition"},{"location":"language-server/#go-to-type-definition","text":"","title":"Go to type definition"},{"location":"language-server/#go-to-implementation","text":"Finds implementations of an unimplemented function or modifier.","title":"Go to implementation"},{"location":"language-server/#find-references","text":"","title":"Find references"},{"location":"language-server/#type-hierarchy","text":"Also works for virtual functions.","title":"Type hierarchy"},{"location":"language-server/#document-links","text":"","title":"Document links"},{"location":"language-server/#hover","text":"Includes links to documentation for OpenZeppelin contracts.","title":"Hover"},{"location":"language-server/#code-lens","text":"Number of references is shown above each declaration.","title":"Code lens"},{"location":"language-server/#document-symbols","text":"","title":"Document symbols"},{"location":"language-server/#diagnostics","text":"","title":"Diagnostics"},{"location":"language-server/#rename","text":"","title":"Rename"},{"location":"language-server/#debugging","text":"Woke LSP server can be debugged using: woke --debug lsp","title":"Debugging"},{"location":"solc-version-manager/","text":"Solc Version Manager (SVM) # Woke implements Solc Version Manager (SVM) to manage multiple installations of the solc compiler. Compiler versions are located in: $HOME/.config/Woke/compilers on Linux/MacOS, %USERPROFILE%\\Woke\\compilers on Windows. The chosen version of solc is available under the woke-solc executable which acts as a wrapper for the solc executable. Example $ woke-solc --version solc, the solidity compiler commandline interface Version: 0.8.15+commit.e14f2714.Linux.g++ Info solc binaries are downloaded from the Solidity repository which limits the minimum version of solc that can be installed. Commands # All the listed commands are available under the woke svm subcommand (e.g. woke svm list ). Command Description Options install Install the target version of solc . A version range may be provided which results into installation of the latest version matching the range (i.e. woke svm install 0.7 installs the version 0.7.6 ). --force reinstall the version even if already installed. list List installed versions of solc . --all list all available versions instead. remove Remove the target installed version of solc . --ignore-missing do not raise an exception if the target version is not installed. switch Change the selected version of solc to the target version. use Change the selected version of solc to the target version and install it if not already installed. A version range may be provided resulting into installation of the latest version matching the range. --force reinstall the version even if already installed.","title":"Solc Version Manager"},{"location":"solc-version-manager/#solc-version-manager-svm","text":"Woke implements Solc Version Manager (SVM) to manage multiple installations of the solc compiler. Compiler versions are located in: $HOME/.config/Woke/compilers on Linux/MacOS, %USERPROFILE%\\Woke\\compilers on Windows. The chosen version of solc is available under the woke-solc executable which acts as a wrapper for the solc executable. Example $ woke-solc --version solc, the solidity compiler commandline interface Version: 0.8.15+commit.e14f2714.Linux.g++ Info solc binaries are downloaded from the Solidity repository which limits the minimum version of solc that can be installed.","title":"Solc Version Manager (SVM)"},{"location":"solc-version-manager/#commands","text":"All the listed commands are available under the woke svm subcommand (e.g. woke svm list ). Command Description Options install Install the target version of solc . A version range may be provided which results into installation of the latest version matching the range (i.e. woke svm install 0.7 installs the version 0.7.6 ). --force reinstall the version even if already installed. list List installed versions of solc . --all list all available versions instead. remove Remove the target installed version of solc . --ignore-missing do not raise an exception if the target version is not installed. switch Change the selected version of solc to the target version. use Change the selected version of solc to the target version and install it if not already installed. A version range may be provided resulting into installation of the latest version matching the range. --force reinstall the version even if already installed.","title":"Commands"}]}