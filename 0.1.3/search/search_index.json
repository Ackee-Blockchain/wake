{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Woke # Woke is a Python-based development and testing framework for Solidity. Features # LSP server property-based fuzzer Installation # Woke requires Python 3.7 or higher. Using pip # pip3 install abch-woke The property-based fuzzer can be installed as an extra dependency. Due to the dependency on eth-brownie , it is recommended to install it into a virtual environment . pip3 install abch-woke [ fuzzer ]","title":"Installation"},{"location":"#woke","text":"Woke is a Python-based development and testing framework for Solidity.","title":"Woke"},{"location":"#features","text":"LSP server property-based fuzzer","title":"Features"},{"location":"#installation","text":"Woke requires Python 3.7 or higher.","title":"Installation"},{"location":"#using-pip","text":"pip3 install abch-woke The property-based fuzzer can be installed as an extra dependency. Due to the dependency on eth-brownie , it is recommended to install it into a virtual environment . pip3 install abch-woke [ fuzzer ]","title":"Using pip"},{"location":"configuration/","text":"Configuration # Woke can be configured using optional configuration files. The global configuration file is located in: $HOME/.config/Woke/config.toml on Linux/MacOS, %USERPROFILE%\\Woke\\config.toml on Windows. Additionally, the configuration file for each project can be located in {PROJECT_PATH}/woke.toml . Attention Configuration options loaded from TOML files affect only the behavior of the Woke command-line tool. LSP configuration options are loaded from LSP clients using the standard interface . Subconfigs # Any configuration file can include additional configuration files (subconfigs). These subconfigs are loaded after the original configuration file in the specified order. Subconfig configuration values override the values of the parent configuration file. Example woke.toml subconfigs = [ \"loaded_next.toml\" , \"../relative.toml\" , \"/tmp/absolute.toml\" , \"loaded_last.toml\" ] Configuration options # The resolution order for each configuration option is: default value, value in the global configuration file, value in the project configuration file. Example woke.toml subconfigs = [ \"./config1.toml\" , \"config2.toml\" ] [compiler.solc] evm_version = \"london\" include_paths = [ \"node_modules\" , \"lib\" ] remappings = [ \"@openzeppelin/=node_modules/@openzeppelin/\" ] target_version = \"0.8.10\" via_IR = true [compiler.solc.optimizer] enabled = true runs = 1000 compiler.solc namespace # {CWD} in the following table represents the current working directory (i.e. the directory from which the woke command is being executed). Option Description Default value allow_paths Allow paths passed to the solc executable [] evm_version EVM version as specified by Solidity docs \"\" (let the compiler decide) include_paths Paths (along with {CWD} ) where files from non-relative imports are searched {CWD}/node_modules remappings Compiler remappings as specified by Solidity docs [] target_version Target solc version used to compile the project \"\" (use the latest version for each compilation unit) via_IR Compile the code via the Yul intermediate language (see Solidity docs ) \"\" (let the compiler decide) Info The include_paths option is the preferred way to handle imports of libraries. Remappings should be used only when include_paths cannot be used (e.g. when the import path differs from the system path of the imported file). compiler.solc.optimizer namespace # Option Description Default value enabled Compile the project with solc optimizations enabled. Leaving this unset disables most of the available optimizations. Setting this to false disables all optimizations for Solidity <0.8.6 and has the same behavior as leaving this unset for Solidity >=0.8.6. \"\" (unset) runs Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage. 200 lsp.find_references namespace # Configuration options specific to the LSP Find references request. Option Description Default value include_declarations Also include declarations in Find references request results. false","title":"Configuration"},{"location":"configuration/#configuration","text":"Woke can be configured using optional configuration files. The global configuration file is located in: $HOME/.config/Woke/config.toml on Linux/MacOS, %USERPROFILE%\\Woke\\config.toml on Windows. Additionally, the configuration file for each project can be located in {PROJECT_PATH}/woke.toml . Attention Configuration options loaded from TOML files affect only the behavior of the Woke command-line tool. LSP configuration options are loaded from LSP clients using the standard interface .","title":"Configuration"},{"location":"configuration/#subconfigs","text":"Any configuration file can include additional configuration files (subconfigs). These subconfigs are loaded after the original configuration file in the specified order. Subconfig configuration values override the values of the parent configuration file. Example woke.toml subconfigs = [ \"loaded_next.toml\" , \"../relative.toml\" , \"/tmp/absolute.toml\" , \"loaded_last.toml\" ]","title":"Subconfigs"},{"location":"configuration/#configuration-options","text":"The resolution order for each configuration option is: default value, value in the global configuration file, value in the project configuration file. Example woke.toml subconfigs = [ \"./config1.toml\" , \"config2.toml\" ] [compiler.solc] evm_version = \"london\" include_paths = [ \"node_modules\" , \"lib\" ] remappings = [ \"@openzeppelin/=node_modules/@openzeppelin/\" ] target_version = \"0.8.10\" via_IR = true [compiler.solc.optimizer] enabled = true runs = 1000","title":"Configuration options"},{"location":"configuration/#compilersolc-namespace","text":"{CWD} in the following table represents the current working directory (i.e. the directory from which the woke command is being executed). Option Description Default value allow_paths Allow paths passed to the solc executable [] evm_version EVM version as specified by Solidity docs \"\" (let the compiler decide) include_paths Paths (along with {CWD} ) where files from non-relative imports are searched {CWD}/node_modules remappings Compiler remappings as specified by Solidity docs [] target_version Target solc version used to compile the project \"\" (use the latest version for each compilation unit) via_IR Compile the code via the Yul intermediate language (see Solidity docs ) \"\" (let the compiler decide) Info The include_paths option is the preferred way to handle imports of libraries. Remappings should be used only when include_paths cannot be used (e.g. when the import path differs from the system path of the imported file).","title":"compiler.solc namespace"},{"location":"configuration/#compilersolcoptimizer-namespace","text":"Option Description Default value enabled Compile the project with solc optimizations enabled. Leaving this unset disables most of the available optimizations. Setting this to false disables all optimizations for Solidity <0.8.6 and has the same behavior as leaving this unset for Solidity >=0.8.6. \"\" (unset) runs Configuration of the optimizer specifying how many times the code is intended to be run. Lower values optimize more for initial deployment cost, while higher values optimize more for high-frequency usage. 200","title":"compiler.solc.optimizer namespace"},{"location":"configuration/#lspfind_references-namespace","text":"Configuration options specific to the LSP Find references request. Option Description Default value include_declarations Also include declarations in Find references request results. false","title":"lsp.find_references namespace"},{"location":"contributing/","text":"Contributing # Creating a virtual environment # Using virtualenvwrapper # mkvirtualenv woke Using venv # python3 -m venv env source env/bin/activate Installation # pip install -e \".[fuzzer,tests,dev]\" Pyright, our static type checker, is distributed through npm: npm i -g pyright Git hooks # For Unix-like platforms, we provide up git hooks to help with development. After cloning, execute. chmod +x ./setup-githooks.sh ./setup-githooks.sh Git hooks automatically run these commands when you commit: pytest tests -m \"not slow\" when the WOKE_HOOKS_RUN_ALL_TESTS environment variable is not set ( pytest tests is run otherwise) pyright on Python files being committed black on Python files being committed isort on Python files being committed mkdocs build --strict to make sure the documentation does not contain errors Any unstaged changes and untracked files are stashed before running the git pre-commit hook. After the commit is made, the stashed changes are popped from the stash. If this leads to a merge conflict, the stashed changes are left at the top of the stash.","title":"Contributing"},{"location":"contributing/#contributing","text":"","title":"Contributing"},{"location":"contributing/#creating-a-virtual-environment","text":"","title":"Creating a virtual environment"},{"location":"contributing/#using-virtualenvwrapper","text":"mkvirtualenv woke","title":"Using virtualenvwrapper"},{"location":"contributing/#using-venv","text":"python3 -m venv env source env/bin/activate","title":"Using venv"},{"location":"contributing/#installation","text":"pip install -e \".[fuzzer,tests,dev]\" Pyright, our static type checker, is distributed through npm: npm i -g pyright","title":"Installation"},{"location":"contributing/#git-hooks","text":"For Unix-like platforms, we provide up git hooks to help with development. After cloning, execute. chmod +x ./setup-githooks.sh ./setup-githooks.sh Git hooks automatically run these commands when you commit: pytest tests -m \"not slow\" when the WOKE_HOOKS_RUN_ALL_TESTS environment variable is not set ( pytest tests is run otherwise) pyright on Python files being committed black on Python files being committed isort on Python files being committed mkdocs build --strict to make sure the documentation does not contain errors Any unstaged changes and untracked files are stashed before running the git pre-commit hook. After the commit is made, the stashed changes are popped from the stash. If this leads to a merge conflict, the stashed changes are left at the top of the stash.","title":"Git hooks"},{"location":"language-server/","text":"Solidity LSP server # Woke implements a LSP server for Solidity. The only currently supported communication channel is TCP. Woke LSP server can be run using: woke lsp Or with an optional --port argument: woke lsp --port 1234 Info Multi-root workspaces are not currently supported. Projects using Woke server # VS Code Extension Configuration options # Server configuration options are loaded using the standard interface from LSP clients. The process of setting the configuration options is client specific. Configuration changes are handled by the server, and the project is recompiled if the compilation options change. The following configuration options are supported: woke.compiler.solc.allow_paths , woke.compiler.solc.evm_version , woke.compiler.solc.include_paths , woke.compiler.solc.remappings , woke.compiler.solc.target_version , woke.compiler.solc.via_IR , woke.compiler.solc.optimizer.enabled , woke.compiler.solc.optimizer.runs , woke.lsp.find_references.include_declarations . The semantics of these configuration options are explained in the configuration section . Supported commands # Woke LSP server implements the command execution provider as specified by the LSP specification . The following commands are supported: Command Description woke.lsp.force_recompile Force recompile the opened project/files. Useful after modifying files outside the IDE (e.g. after installing npm packages). Features # Go to definition # Go to type definition # Go to implementation # Find implementations of an unimplemented function or modifier. Find references # Type hierarchy # Also works for virtual functions. Document links # Code lens # Number of references is shown above each declaration. Document symbols # Diagnostics # Rename # Debugging # Woke LSP server can be debugged using: woke --debug lsp","title":"LSP server"},{"location":"language-server/#solidity-lsp-server","text":"Woke implements a LSP server for Solidity. The only currently supported communication channel is TCP. Woke LSP server can be run using: woke lsp Or with an optional --port argument: woke lsp --port 1234 Info Multi-root workspaces are not currently supported.","title":"Solidity LSP server"},{"location":"language-server/#projects-using-woke-server","text":"VS Code Extension","title":"Projects using Woke server"},{"location":"language-server/#configuration-options","text":"Server configuration options are loaded using the standard interface from LSP clients. The process of setting the configuration options is client specific. Configuration changes are handled by the server, and the project is recompiled if the compilation options change. The following configuration options are supported: woke.compiler.solc.allow_paths , woke.compiler.solc.evm_version , woke.compiler.solc.include_paths , woke.compiler.solc.remappings , woke.compiler.solc.target_version , woke.compiler.solc.via_IR , woke.compiler.solc.optimizer.enabled , woke.compiler.solc.optimizer.runs , woke.lsp.find_references.include_declarations . The semantics of these configuration options are explained in the configuration section .","title":"Configuration options"},{"location":"language-server/#supported-commands","text":"Woke LSP server implements the command execution provider as specified by the LSP specification . The following commands are supported: Command Description woke.lsp.force_recompile Force recompile the opened project/files. Useful after modifying files outside the IDE (e.g. after installing npm packages).","title":"Supported commands"},{"location":"language-server/#features","text":"","title":"Features"},{"location":"language-server/#go-to-definition","text":"","title":"Go to definition"},{"location":"language-server/#go-to-type-definition","text":"","title":"Go to type definition"},{"location":"language-server/#go-to-implementation","text":"Find implementations of an unimplemented function or modifier.","title":"Go to implementation"},{"location":"language-server/#find-references","text":"","title":"Find references"},{"location":"language-server/#type-hierarchy","text":"Also works for virtual functions.","title":"Type hierarchy"},{"location":"language-server/#document-links","text":"","title":"Document links"},{"location":"language-server/#code-lens","text":"Number of references is shown above each declaration.","title":"Code lens"},{"location":"language-server/#document-symbols","text":"","title":"Document symbols"},{"location":"language-server/#diagnostics","text":"","title":"Diagnostics"},{"location":"language-server/#rename","text":"","title":"Rename"},{"location":"language-server/#debugging","text":"Woke LSP server can be debugged using: woke --debug lsp","title":"Debugging"},{"location":"solc-version-manager/","text":"Solc Version Manager (SVM) # Woke implements Solc Version Manager (SVM) to manage multiple installations of the solc compiler. Compiler versions are located in: $HOME/.config/Woke/compilers on Linux/MacOS, %USERPROFILE%\\Woke\\compilers on Windows. The chosen version of solc is available under the woke-solc executable which acts as a wrapper for the solc executable. Example $ woke-solc --version solc, the solidity compiler commandline interface Version: 0.8.15+commit.e14f2714.Linux.g++ Info solc binaries are downloaded from the Solidity repository which limits the minimum version of solc that can be installed. Commands # All the listed commands are available under the woke svm subcommand (e.g. woke svm list ). Command Description Options install Install the target version of solc . A version range may be provided which results into installation of the latest version matching the range (i.e. woke svm install 0.7 installs the version 0.7.6 ). --force reinstall the version even if already installed. list List installed versions of solc . --all list all available versions instead. remove Remove the target installed version of solc . --ignore-missing do not raise an exception if the target version is not installed. switch Change the selected version of solc to the target version. use Change the selected version of solc to the target version and install it if not already installed. A version range may be provided resulting into installation of the latest version matching the range. --force reinstall the version even if already installed.","title":"Solc Version Manager"},{"location":"solc-version-manager/#solc-version-manager-svm","text":"Woke implements Solc Version Manager (SVM) to manage multiple installations of the solc compiler. Compiler versions are located in: $HOME/.config/Woke/compilers on Linux/MacOS, %USERPROFILE%\\Woke\\compilers on Windows. The chosen version of solc is available under the woke-solc executable which acts as a wrapper for the solc executable. Example $ woke-solc --version solc, the solidity compiler commandline interface Version: 0.8.15+commit.e14f2714.Linux.g++ Info solc binaries are downloaded from the Solidity repository which limits the minimum version of solc that can be installed.","title":"Solc Version Manager (SVM)"},{"location":"solc-version-manager/#commands","text":"All the listed commands are available under the woke svm subcommand (e.g. woke svm list ). Command Description Options install Install the target version of solc . A version range may be provided which results into installation of the latest version matching the range (i.e. woke svm install 0.7 installs the version 0.7.6 ). --force reinstall the version even if already installed. list List installed versions of solc . --all list all available versions instead. remove Remove the target installed version of solc . --ignore-missing do not raise an exception if the target version is not installed. switch Change the selected version of solc to the target version. use Change the selected version of solc to the target version and install it if not already installed. A version range may be provided resulting into installation of the latest version matching the range. --force reinstall the version even if already installed.","title":"Commands"},{"location":"api_reference/","text":"API reference #","title":"API reference"},{"location":"api_reference/#api-reference","text":"","title":"API reference"},{"location":"api_reference/config/","text":"","title":"Config"}]}